[
    {
        "prompt": "Map coverage from ASCII MOC strings contained in a single column ($1), outputting to a raw binary stream.",
        "response": "stilts mocshape in=moc_list.txt ifmt=ascii shape=moc-ascii coords='$1' mocfmt=raw out=ascii_moc_raw.bin",
        "chat.jar": "executed successfully",
        "cmd": "mocshape"
    },
    {
        "prompt": "I need to match `catA.fits` and `catB.fits` which have per-object errors `err_a` and `err_b`. After matching with `skyerr`, I want to discard all columns except the IDs and the separation.",
        "response": "stilts tmatch2 in1=catA.fits in2=catB.fits matcher=skyerr params=5 values1='ra dec err_a' values2='ra dec err_b' scorecol=dist ocmd='keepcols \"ID_1 ID_2 dist\"' out=minimal_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Generate an all-sky density map (skydensity, level 5) combining the median of 'MAG' values per pixel.",
        "response": "stilts plot2sky in=data.fits layer=skydensity lon=RA lat=DEC level=5 weight=MAG combine=median out=median_mag_hpx5.png",
        "chat.jar": "skipped-plot",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Group match four tables (S1-S4). Before matching, calculate a redshift estimate 'Z_EST' from comoving distance 'DC_MPC' for all inputs (distToZ(DC_MPC)). Match exactly on Z_EST.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=1d params=0.001 in1=S1.fits icmd1='addcol Z_EST distToZ(DC_MPC)' in2=S2.fits icmd2='addcol Z_EST distToZ(DC_MPC)' in3=S3.fits icmd3='addcol Z_EST distToZ(DC_MPC)' in4=S4.fits icmd4='addcol Z_EST distToZ(DC_MPC)' values1=Z_EST values2=Z_EST values3=Z_EST values4=Z_EST out=redshift_calc_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find sources in Gaia TAP near Galactic L=90, B=0, with a radius defined by $\frac{1}{60}$ degrees.",
        "response": "stilts cone serviceurl=https://gea.esac.esa.int/tap-server/tap lon=90.0 lat=0.0 radius='1.0 / 60.0' skysys=galactic out=gaia_one_arcmin.fits",
        "chat.jar": "skipped-operaton in param",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Read a table, convert the string column 'ERROR_STR' to a double-precision float, replacing the original column.",
        "response": "stilts tpipe in=log.txt ifmt=ascii cmd='replacecol ERROR_STR parseDouble(ERROR_STR)' cmd='colmeta -units mag ERROR_STR' out=log_numeric_error.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Generate an MOC (order 11) for sources where the radius is calculated as the reciprocal of the redshift column Z, assuming the result is in degrees and Z >= 1.",
        "response": "stilts pixfoot in=z_data.fits icmd='select \"Z >= 1.0\"' ra=RA dec=DEC radius='1.0 / Z' order=11 out=reciprocal_z.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find objects present in `catA.fits` and `catB.fits` and `catC.fits` based on an exact match of string column `OBJ_NAME`.",
        "response": "stilts tmatchn nin=3 in1=catA.fits in2=catB.fits in3=catC.fits multimode=group matcher=exact values1=OBJ_NAME values2=OBJ_NAME values3=OBJ_NAME out=name_matched_triplets.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Concatenate tables and add a column 'IS_GALAXY' with a constant boolean value 'true'.",
        "response": "stilts tcat in='g1.fits g2.fits' ocmd='addcol IS_GALAXY true' out=galaxy_flag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Join two quasar and XMM crossmatch tables on the GAVO service for 1000 rows.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT q.ra, q.dec, x.flux FROM sdss.dr16qso q JOIN xmatch.xmatch_qso_xmm x ON q.qso_id = x.qso_id' maxrec=1000 out=gavo_qso_xmm.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Create a MOC from a list of MOCs stored in a FITS table.",
        "response": "stilts mocshape in=moc_table.fits shape=moc-ascii coords=MOC_ASCII_COL out=combined_from_table.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Match two extremely large tables T_BIG1 and T_BIG2 (sky 1 arcsec). Use parallel execution.",
        "response": "stilts tmatch2 in1=T_BIG1.fits in2=T_BIG2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' runner=parallel out=parallel_sky_match_2.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Calculate K-correction for SDSS z-band (KCF_z) at Z=0.5, using r-z color (KCC_rz).",
        "response": "stilts tpipe in=data.fits cmd='addcol KCORR_Z \"kCorr(KCF_z, 0.5, KCC_rz, R_MAG-Z_MAG)\"' out=kcorrected_z.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '0.5,' 'KCC_rz,' 'R_MAG-Z_MAG)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol KCORR_Z kCorr(KCF_z, 0.5, KCC_rz, R_MAG-Z_MAG)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '0.5,' 'KCC_rz,' 'R_MAG-Z_MAG)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Combine tables, and ensure the output is in FITS format using the column-oriented storage type.",
        "response": "stilts tcat in='d1.fits d2.fits' ofmt=colfits-plus out=columnar_fits_b.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Match two tables using Cartesian 3D anisotropic coordinates (X, Y, Z) with tolerances 1, 10, and 100 units.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=3d_anisotropic params='1 10 100' values1='X Y Z' values2='X Y Z' out=anisotropic_3d_3.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "How do I count the total number of rows in the file `event_log.ecsv`?",
        "response": "stilts tpipe in=event_log.ecsv ifmt=ecsv omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Combine FITS tables from a URL list (`remote_files.url`) and output the result as a compressed VOTable.",
        "response": "stilts tcat in=@remote_files.url ofmt=votable out=remote_merge.vot.gz",
        "chat.jar": "fixed",
        "error": "Error: remote_files.url (No such file or directory)\n",
        "cmd": "tcat"
    },
    {
        "prompt": "Copy a FITS table and output it as a FITS file, setting the Primary HDU content to basic (no VOTable metadata).",
        "response": "stilts tcopy in=input.fits ofmt='fits(primary=basic)' out=basic_fits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Plot markers (size 5, filled triangle up) for objects only in the southern hemisphere (DEC < 0).",
        "response": "stilts plot2sky in=all_sky.fits icmd='select \"DEC < 0\"' layer=mark lon=RA lat=DEC size=5 shape=filled_triangle_up out=southern_marks.png",
        "chat.jar": "fixed",
        "error": "Error: Table processing error\n    (Bad expression \"DEC < 0\" (The name \"DEC\" is unknown.)\n        (The name \"DEC\" is unknown.))\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Check the syntax of a complex ADQL query against the Gaia service without actually running it.",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap adql='SELECT source_id, POWER(ra*ra + dec*dec, 0.5) AS dist FROM gaiadr3.gaia_source WHERE g < 20.7' parse=true omode=discard",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Combine three tables. If table 2 contains a temporary column named 'TEMP_FLAG' discard it before joining.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits icmd2='delcols TEMP_FLAG' in3=t3.fits out=temp_flag_removed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against T_SUPP. T_SUPP contains errors in MAS. Convert these to degrees before matching.",
        "response": "stilts tmatchn nin=2 multimode=pairs matcher=skyerr params=1 values1='RA DEC ERR_DEG' in2=T_SUPP.fits icmd2='addcol ERR_DEG ERR_MAS/3600000.0' values2='RA DEC ERR_DEG' in1=T_MAIN.fits out=mas_to_deg_error_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Join A.fits and B.fits exactly on ID. After joining, calculate the difference between magnitude columns (MAG_A - MAG_B) and add it as 'MAG_DIFF'.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID fixcols=dups suffix1=_A suffix2=_B ocmd='addcol MAG_DIFF \"MAG_A - MAG_B\"' out=magnitude_difference_exact.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '-' 'MAG_B'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_DIFF MAG_A - MAG_B\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'MAG_B'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Read the multi-extension FITS file 'data.fits' but specifically copy only the table extension named 'SPECTRA' to a new file.",
        "response": "stilts tcopy in=data.fits#SPECTRA out=spectra_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Submit an asynchronous query to the European JWST Archive and request continuous status updates with a 15-second polling interval.",
        "response": "stilts tapquery tapurl=https://jwst.esac.esa.int/server/tap adql='SELECT * FROM ivoa.ObsCore WHERE obs_collection = ''JWST''' poll=15000 progress=true out=jwst_slow_poll.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Add a column 'PM_VEL_GAL_Z' containing the Z component of the Galactic velocity vector.",
        "response": "stilts tpipe in=gaia.fits cmd='addcol PM_VEL_GAL_Z \"icrsToGal(astromUVW(array(RA, DEC, PARALLAX, PMRA, PMDEC, RV)))\"' out=galactic_z_vel.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'DEC,' 'PARALLAX,' 'PMRA,' 'PMDEC,' 'RV)))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PM_VEL_GAL_Z icrsToGal(astromUVW(array(RA, DEC, PARALLAX, PMRA, PMDEC, RV)))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'DEC,' 'PARALLAX,' 'PMRA,' 'PMDEC,' 'RV)))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Round the MJD column 'TIME' to the nearest integer MJD, keeping the original precision.",
        "response": "stilts tpipe in=time.fits cmd='replacecol TIME round(TIME)' out=rounded_time.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Draw filled polygons defined by coordinate arrays, coloring them flat magenta.",
        "response": "stilts plot2sky in=polygons.fits layer=polygon coords=VERTICES polymode=fill shading=flat color=magenta out=filled_magenta_polygons.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad value for parameter lon: null value not allowed\nUsage: lon=<deg-expr>\n\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Plot error ellipses defined by major/minor axes (in degrees), setting the scale factor to 0.5 to shrink them visually.",
        "response": "stilts plot2sky in=large_errs.fits layer=skyellipse lon=RA lat=DEC ra=A rb=B posang=PA unit=degree scale=0.5 out=half_scale_deg_ellipses.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Convert a FITS file to a LaTeX tabular environment, specifying it must be a standalone document.",
        "response": "stilts tcopy in=small.fits ofmt='latex(standalone=true)' out=doc.tex",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Can you plot a scatter plot and overplot a line of best fit?",
        "response": "stilts plot2plane in=calibration.dat ifmt=ascii layer_pts=mark x_pts=SIGNAL y_pts=MEASURED layer_fit=linearfit x_fit=SIGNAL y_fit=MEASURED",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"SIGNAL\"\n    (The name \"SIGNAL\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Query the J-PLUS DR2 Catalogue for a sample and apply local filtering to remove any rows where RA is null.",
        "response": "stilts tapquery tapurl=https://archive.cefca.es/catalogues/vo/tap/jplus-dr2 adql='SELECT * FROM jplus_dr2.master' ocmd='select !NULL_ra' out=jplus_clean_ra.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Retrieve astronomical source information from the SIMBAD query engine and save the output as a LaTeX table.",
        "response": "stilts tapquery tapurl=http://simbad.cds.unistra.fr/simbad/sim-tap adql='SELECT TOP 5 main_id, ra, dec, otype FROM basic' ofmt=latex out=simbad_report.tex",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot positions using the Aitoff projection centered at 180 degrees (Aitoff0).",
        "response": "stilts plot2sky in=data.fits layer=mark lon=RA lat=DEC projection=aitoff0 out=aitoff0_plot.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Query MAST PanSTARRS DR2 and output the table result in Feather format.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ps1dr2 adql='SELECT TOP 10 * FROM dbo.detection_object' ofmt=feather out=ps1dr2_feather.feather",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Check the ADQL syntax of a simple query against the NED TAP Service without execution.",
        "response": "stilts tapquery tapurl=https://ned.ipac.caltech.edu/tap/ adql='SELECT ra, dec, obj_name FROM object WHERE redshift > 0.5' parse=true omode=discard",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot positions, applying a selection filter to only include rows where MAG_R > 20.",
        "response": "stilts plot2sky in=deep_cat.fits icmd='select \"MAG_R > 20\"' layer=mark lon=RA lat=DEC out=faint_marks_filtered.png",
        "chat.jar": "fixed",
        "error": "Error: Table processing error\n    (Bad expression \"MAG_R > 20\" (The name \"MAG_R\" is unknown.)\n        (The name \"MAG_R\" is unknown.))\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Combine two CSV tables, but ensure that any empty string field is interpreted as a null value in the output table.",
        "response": "stilts tcat ifmt='csv(notypes=blank)' in='t1.csv t2.csv' out=clean_nulls.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Convert a VOTable file 'spec_archive.vot' to a local Parquet file, ensuring maximum compression using the ZSTD algorithm.",
        "response": "stilts tcopy in=spec_archive.vot ofmt='parquet(compression=zstd)' out=spec_archive.parquet",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Use the 'assert' filter to ensure that the table is always non-empty ($nrow > 0).",
        "response": "stilts tpipe in=data.fits cmd='assert \"$nrow > 0L\"' out=non_empty_asserted.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '0L'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: assert $nrow > 0L\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '0L'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Can you match `catA.fits` and `catB.fits` and for each row in catA, just tell me the distance to its nearest neighbor in catB, even if it's outside the match radius?",
        "response": "stilts tmatch2 in1=catA.fits in2=catB.fits matcher=sky params=180000 values1='RA DEC' values2='RA DEC' find=best1 join=all1 ocmd='keepcols \"ID_1 Separation\"' out=nearest_neighbor_dist.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Concatenate two tables, but only take the first 10 rows from the result after shuffling the entire combined dataset.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits ocmd='shuffle' ocmd='head 10' out=shuffled_sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, ensuring that any numeric values in the 'MAG' column exactly equal to 999 are converted to NULL after joining.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='badval 999 MAG' out=null_cleaned_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Convert a FITS table to a VOTable, letting STILTS guess the formats from the filenames.",
        "response": "stilts tcopy in=my_catalog.fits out=my_catalog.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Merge tables and restrict the output to only the last 500 rows.",
        "response": "stilts tcat in='large*.fits' ocmd='tail 500' out=last_500.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Combine tables A and B. In table B, explode the array column 'FLUX_ARRAY[1]' into three scalar columns before concatenation.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits icmd2='explodecols FLUX_ARRAY' out=exploded_concat.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Draw filled polygons defined by coordinate arrays, coloring them flat magenta.",
        "response": "stilts plot2sky in=polygons.fits layer=polygon coords=VERTICES polymode=fill shading=flat color=magenta out=filled_magenta_polygons.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad value for parameter lon: null value not allowed\nUsage: lon=<deg-expr>\n\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Group match three tables (T1-T3). For the output, replace any null values in the T2 'FLUX' column with -99.0.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix2=_2 ocmd='replaceval null -99.0 FLUX_2' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=null_replaced_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Query the ESO TAP_OBS SSA service around RA 100, Dec -50, requiring 0.01 degrees, and output the result as a simple ASCII text file to standard output.",
        "response": "stilts cone serviceurl=https://archive.eso.org/tap_obs lon=100.0 lat=-50.0 radius=0.01 servicetype=ssa ofmt=ascii out=-",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Find all J-PAS EDR sources observed before MJD 59500.",
        "response": "stilts tapquery tapurl=https://archive.cefca.es/catalogues/vo/tap/jpas-edr adql='SELECT * FROM jpas_edr.master WHERE t_start < 59500.0' out=jpas_early_obs.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Check if a numeric column contains NaN and replace the corresponding row with a null table (not fully possible).",
        "response": "stilts tpipe in=data.fits cmd='select isFinite(FLUX)' out=finite_flux_filter.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Match T1, T2, T3, T4 (group mode). Filter T2 to keep only rows where T2.ERROR is not null.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits icmd2='select !NULL_ERROR' in3=T3.fits in4=T4.fits out=t2_nonnull_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I need the footprint for my `hapi` stream data.",
        "response": "stilts pixfoot in=my_stream.hapi ifmt=hapi out=hapi_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Concatenate two tables, stripping all columns except those marked with the UCD 'phot.mag'.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='keepcols ucd$phot_mag_*' in2=t2.fits icmd2='keepcols ucd$phot_mag_*' out=mag_ucd_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Retrieve all table names from the European HST Archive TAP service, explicitly requesting HTTP compression.",
        "response": "stilts tapquery tapurl=https://hst.esac.esa.int/tap-server/tap adql='SELECT table_name FROM TAP_SCHEMA.tables' compress=true out=hst_compressed_tables.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Run a synchronous query to NED for the top 10 RA/DEC pairs and save them in FITS format.",
        "response": "stilts tapquery tapurl=https://ned.ipac.caltech.edu/tap/ adql='SELECT TOP 10 ra, dec FROM object' sync=true out=ned_coords.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Take `propermotion.fits` and select only objects with a total proper motion `sqrt(PMRA*PMRA + PMDEC*PMDEC)` greater than 500 mas/yr.",
        "response": "stilts tpipe in=propermotion.fits cmd='select \"hypot(PMRA,PMDEC) > 500\"' out=high_pm_stars.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '500'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select hypot(PMRA,PMDEC) > 500\n\nUsage: select <expr>\n    (Unused arguments: '>' '500'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Plot markers (size 5, filled triangle up) for objects only in the southern hemisphere (DEC < 0).",
        "response": "stilts plot2sky in=all_sky.fits icmd='select \"DEC < 0\"' layer=mark lon=RA lat=DEC size=5 shape=filled_triangle_up out=southern_marks.png",
        "chat.jar": "fixed",
        "error": "Error: Table processing error\n    (Bad expression \"DEC < 0\" (The name \"DEC\" is unknown.)\n        (The name \"DEC\" is unknown.))\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Retrieve all rows from the ESO TAP_CAT table schemas and output the column metadata.",
        "response": "stilts tapquery tapurl=http://archive.eso.org/tap_cat adql='SELECT * FROM TAP_SCHEMA.schemas' omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Search the GAVO Data Center near Galactic L=50, B=-5, with a radius of 150 mas, and pipe the output to a function that adds a unique identifier column.",
        "response": "stilts cone serviceurl=http://dc.g-vo.org/tap lon=50.0 lat=-5.0 radius='150.0 / 3600000.0' skysys=galactic ocmd='addcol SOURCE_NUM $0' out=gavo_indexed.fits",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"150.0 / 3600000.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Plot the density of points using a density contour layer with 10 levels, and linear scaling.",
        "response": "stilts plot2plane in=data.fits layer=contour x=X y=Y nlevel=10 scaling=linear out=linear_contour.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Find 1000 TESS Input Catalog entries and output the checksum of the resulting table.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/tic adql='SELECT TOP 1000 * FROM tic.v8' omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Could you match `table1.fits` with `table2.fits` and show me a statistical summary of the resulting table?",
        "response": "stilts tmatch2 in1=table1.fits in2=table2.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Query the IRSA TAP Service near Galactic L=180, B=10, using a radius of $120$ arcseconds, converting the output to text format to stdout.",
        "response": "stilts cone serviceurl=https://irsa.ipac.caltech.edu/TAP lon=180.0 lat=10.0 radius='120.0 / 3600.0' skysys=galactic ofmt=text out=-",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"120.0 / 3600.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "I need the MOC for sources with a radius of $0.005$ radians, converted to degrees.",
        "response": "stilts pixfoot in=rad_search.fits ra=RA dec=DEC radius='radiansToDegrees(0.005)' out=rad_5mrad.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Add a column 'MAG_U_ABS' using the conversion constant 'JOHNSON_AB_U' to approximate the absolute magnitude.",
        "response": "stilts tpipe in=stars.fits cmd='addcol MAG_U_ABS \"U_MAG + JOHNSON_AB_U\"' out=u_abs_approx.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '+' 'JOHNSON_AB_U'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_U_ABS U_MAG + JOHNSON_AB_U\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'JOHNSON_AB_U'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Generate a MOC at the coarsest possible resolution (order 0) from the points in all_sky_cat.fits.",
        "response": "stilts mocshape in=all_sky_cat.fits shape=point coords='array(RA, DEC)' order=0 out=coarsest_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Remove columns whose UCD is 'stat.error'.",
        "response": "stilts tpipe in=data.fits cmd='delcols ucd$stat_error*' out=no_error_cols.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Plot error ellipses (skyellipse layer) with major/minor axes in arcminutes, thickness 4.",
        "response": "stilts plot2sky in=errors.fits layer=skyellipse lon=RA lat=DEC ra=A rb=B posang=PA unit=minute thick=4 out=thick_arcmin_ellipse.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Match T_A and T_B. T_B array column 'FLUX_VEC' needs replacement by its maximum value ('FLUX_MAX') before matching on 1D flux (0.1 tolerance).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits icmd2='replacecol FLUX_MAX maximum(FLUX_VEC)' matcher=1d params=0.1 values1=FLUX_MAX values2=FLUX_MAX out=max_flux_1d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Query the European HST Archive TAP service for 5 ObsCore entries and compute the checksum of the result.",
        "response": "stilts tapquery tapurl=https://hst.esac.esa.int/tap-server/tap adql='SELECT TOP 5 * FROM ivoa.ObsCore' omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Concatenate three tables and add a final column containing a unique, deterministic ID based on the row index.",
        "response": "stilts tcatn nin=3 in1=a.fits in2=b.fits in3=c.fits ocmd='addcol ID_INDEX $0' out=indexed_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "For every row, generate a new array column 'RAND_ERR' containing 5 random Gaussian numbers.",
        "response": "stilts tpipe in=data.fits cmd='addcol RAND_ERR \"randomGaussianArray($0, 5)\"' out=data_rand.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '5)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol RAND_ERR randomGaussianArray($0, 5)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '5)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Plot density contours using logarithmic scaling (log) on the density values, with 8 contour levels.",
        "response": "stilts plot2plane in=data.fits layer=contour x=X y=Y scaling=log nlevel=8 out=log_contour_8.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Find objects in T_A that are NOT matched in T_B. T_A coordinates are sexagesimal RA_HMS, DEC_DMS. Convert T_A to degrees for matching.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky params=5 values1='hmsToDegrees(RA_HMS) dmsToDegrees(DEC_DMS)' values2='RA DEC' join=1not2 out=sexagesimal_anti_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Copy a VOTable to a CSV file, setting the output delimiter to a **semicolon** (;).",
        "response": "stilts tcopy in=input.vot out=semicolon.csv ofmt='csv(delimiter=;)'",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Add a column 'VELOCITY_KM_S' converting normalized RV (RV_MASYR) to km/s, given 'PARALLAX' in mas.",
        "response": "stilts tpipe in=gaia.fits cmd='addcol VELOCITY_KM_S \"rvMasyrToKms(RV_MASYR, PARALLAX)\"' out=rv_kms_converted.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'PARALLAX)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol VELOCITY_KM_S rvMasyrToKms(RV_MASYR, PARALLAX)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PARALLAX)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Add a column 'DEC_DMS_6' converting DEC in degrees to DMS string format with 6 decimal places for seconds.",
        "response": "stilts tpipe in=coords.fits cmd='addcol DEC_DMS_6 \"degreesToDms(DEC, 6)\"' out=dms_dec_6s.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '6)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol DEC_DMS_6 degreesToDms(DEC, 6)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '6)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "I want to match two tables and only output rows from the second table that were successfully matched.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' join=1and2 ocmd='keepcols \"*_2\"' out=t2_matched_rows.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Retrieve 50 sources from ARI Gaia and output the result in Feather format.",
        "response": "stilts tapquery tapurl=https://gaia.ari.uni-heidelberg.de/tap adql='SELECT TOP 50 * FROM gaiadr3.gaia_source' ofmt=feather out=ari_sample.feather",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Copy a table from an external system command pipeline output, interpreting the output as CSV, and saving it as FITS.",
        "response": "stilts tcopy in='cat file.csv|' ifmt=csv out=pipeline_fits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Plot X and Y columns against each other using mark layer and show the result in the Swing GUI window.",
        "response": "stilts plot2plane in=data.fits layer=mark x=X y=Y omode=swing",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Draw lines connecting positions (R1, D1) and (R2, D2) from the same row, thickness 2 pixels.",
        "response": "stilts plot2sky in=paths.fits layer=link2 lon1=R1 lat1=D1 lon2=R2 lat2=D2 thick=2 out=thick_sky_path.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"R1\"\n    (The name \"R1\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Plot the analytic function y = sin(x)/x from x=-20 to 20.",
        "response": "stilts plot2plane layer=function fexpr='sin(x)/x' xmin=-20 xmax=20",
        "chat.jar": "executed successfully",
        "cmd": "plot2plane"
    },
    {
        "prompt": "My second table has flux in erg/s/cm2/A and I need it in Jy before combining.",
        "response": "stilts tcatn nin=2 in1=t1_jy.fits in2=t2_erg.fits icmd2='addcol FLUX_JY \"ergscmaToJansky(FLUX_ERG, WAVE_ANGSTROM)\"' ocmd='keepcols \"FLUX_JY\"' out=all_jy.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'WAVE_ANGSTROM)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol FLUX_JY ergscmaToJansky(FLUX_ERG, WAVE_ANGSTROM)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'WAVE_ANGSTROM)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Can `mocshape` handle tables with millions of rows?",
        "response": "Yes, STILTS commands are generally designed to handle large tables, often by streaming data to keep memory usage low.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "mocshape"
    },
    {
        "prompt": "Can `mocshape` handle STC-S UNIONs?",
        "response": "Yes, the documentation indicates that `mocshape` with `shape=stc-s` can handle UNIONs of all shape types.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "mocshape"
    },
    {
        "prompt": "Query the PADC TAP Planetary server for observations of Mars and output the full resulting table metadata.",
        "response": "stilts tapquery tapurl=http://voparis-tap-planeto.obspm.fr/tap adql='SELECT * FROM epn_core.epn_core WHERE target_name = ''Mars''' omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Create an MOC (order 16) for sources around Galactic L=270, B=0, with radius $3$ arcminutes, converted from Galactic, outputting JSON.",
        "response": "stilts pixfoot in=gal_data8.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius='3.0 / 60.0' order=16 mocfmt=json out=gal_3am_json.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Convert an ASCII table to IPAC format, ensuring table parameters are included in the output.",
        "response": "stilts tcopy in=ascii_data.txt ifmt=ascii ofmt='ipac(params=true)' out=ascii_to_ipac.tbl",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Read a table with string column 'TIME_ISO', convert it to MJD, assert all MJDs are post-2000 (MJD > 51544), and save the checksum.",
        "response": "stilts tpipe in=obs.fits cmd='addcol MJD \"isoToMjd(TIME_ISO)\"' cmd='assert \"MJD > 51544\"' omode=checksum",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '51544'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: assert MJD > 51544\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '51544'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Filter rows where the proper motion magnitude is greater than 10 mas/yr.",
        "response": "stilts tpipe in=gaia.fits cmd='select \"hypot(PMRA, PMDEC) > 10.0\"' out=high_pm.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'PMDEC)' '>' '10.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select hypot(PMRA, PMDEC) > 10.0\n\nUsage: select <expr>\n    (Unused arguments: 'PMDEC)' '>' '10.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "My radius column is in radians. How to use it for circles?",
        "response": "stilts mocshape in=rad_radius.fits shape=circle coords='array(RA,DEC,radiansToDegrees(RADIUS_RAD))' out=rad_radius.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Plot error ellipses (skyellipse) where the radius is calculated as 'ERR_DEG * 2.0'.",
        "response": "stilts plot2sky in=errors.fits layer=skyellipse lon=RA lat=DEC ra='ERR_DEG * 2.0' rb=0.0 posang=0 unit=degree out=doubled_radius_ellipse.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Upload a simulated table named 'local_sources.vot' to the Gaia TAP service and crossmatch it, explicitly requesting the uploaded table be serialized as BINARY2 VOTable.",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap adql='SELECT g.*, u.id FROM gaiadr3.gaia_source AS g JOIN TAP_UPLOAD.mylist AS u ON g.source_id = u.id' nupload=1 upload1=:skysim:100 upname1=mylist upvotformat=BINARY2 out=gaia_binary2_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Add a new column 'LOG_TIME' derived from 'TIME_MJD' using the natural logarithm (ln).",
        "response": "stilts tpipe in=data.fits cmd='addcol LOG_TIME ln(TIME_MJD)' out=log_time.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "I need SSA spectra from the JVO AKARI service around RA 120, Dec 15, using a radius of 0.3 arcminutes.",
        "response": "stilts cone serviceurl=http://jvo.nao.ac.jp/skynode/do/tap/akari/spectrum/slitless_mir_spec lon=120.0 lat=15.0 radius='0.3 / 60.0' servicetype=ssa out=akari_0p3am.fits",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"0.3 / 60.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Read a table from a synthetic scheme with exactly 1000 columns (:test:1,k) and save it as a CSV file.",
        "response": "stilts tcopy in=':test:1,k' out=wide_csv.csv",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Crossmatch four files T1-T4 (group mode). Output the total number of columns in the resulting combined table, and the total row count.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Merge T1.fits and T2.fits. T1 has arrays; explode all fixed-size arrays in T1 into individual scalar columns before concatenation.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='explodeall' in2=T2.fits out=t1_exploded_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Synchronously fetch the RA and Dec for 50 sources from the J-PLUS DR3 Catalogue and write the plain text output directly to the standard output.",
        "response": "stilts tapquery tapurl=https://archive.cefca.es/catalogues/vo/tap/jplus-dr3 adql='SELECT TOP 50 ra, dec FROM jplus_dr3.master' sync=true ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Concatenate the first 5 HDUs of `data.fits` and add a column that contains the filename `data.fits` for all rows.",
        "response": "stilts tcat in=data.fits#{1,2,3,4,5} loccol=SourceFile out=data_subset.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Combine tables, and add a column 'HAS_ERROR' which is true if the 'ERR_MAG' column contains a non-null value.",
        "response": "stilts tcat in='e1.fits e2.fits' ocmd='addcol HAS_ERROR !NULL_ERR_MAG' out=error_flagged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Merge three tables. In the final output, keep only the columns shared by ALL three original input tables.",
        "response": "stilts tcatn nin=3 in1=A.fits in2=B.fits in3=C.fits ocmd='keepcols \"intersect(A.*, B.*, C.*)\"' out=intersection_cols.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'B.*,' 'C.*)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols intersect(A.*, B.*, C.*)\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'B.*,' 'C.*)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Create a MOC at order 12 from every 5th row of my catalog.",
        "response": "stilts pixfoot in=mycat.fits icmd='every 5' order=12 out=mycat_every5_o12.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Draw a scatter plot using open triangles, colored magenta.",
        "response": "stilts plot2plane in=data.fits layer=mark x=X y=Y shape=open_triangle_up color=magenta out=magenta_triangles.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Create a plot where the x-axis label is 'RA (deg)' and y-axis is 'Dec (deg)'.",
        "response": "stilts plot2plane in=coords.fits layer=mark x=RA y=DEC xlabel='RA (deg)' ylabel='Dec (deg)' out=labelled_coords.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Match a target list (targets.vot) against a survey (survey.fits) within 3 arcseconds. Only output rows found in targets.vot that have NO match in survey.fits.",
        "response": "stilts tmatch2 in1=targets.vot in2=survey.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' join=1not2 out=targets_missed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Merge tables where inputs are named 'field_A.fits' and 'field_B.fits', adding a column 'FIELD' containing 'A' or 'B'.",
        "response": "stilts tcat in='field_A.fits field_B.fits' uloccol=FIELD out=field_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Is it possible to do a symmetric best match with `tmatchn` like `find=best` in `tmatch2`?",
        "response": "No, the `find=best` option is specific to `tmatch2` for symmetric pair matching. For more than two tables, the logic becomes more complex. `tmatchn`'s `multimode=group` identifies all linked members, and `multimode=pairs` finds the best match relative to a single reference table [1, 2, 6].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Read a table from the MRT (Machine-Readable Table) format and output it as a VOTable.",
        "response": "stilts tcopy in=mrt_cat.txt ifmt=mrt out=mrt_cat.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Plotting a density map using transparent shading (opaque=4) with a transparent PNG background.",
        "response": "stilts plot2plane in=crowded.fits layer=mark x=X y=Y shading=transparent opaque=4 out=transp_bg.png ofmt=png-transp",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Generate a MOC (order 10) for sources in observations.fits observed after MJD 59000, using the point location.",
        "response": "stilts pixfoot in=observations.fits icmd='select \"MJD > 59000.0\"' ra=RA dec=DEC order=10 out=recent_obs_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '59000.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MJD > 59000.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '59000.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Add a column 'FLUX_JV_SUM' calculated as the element-wise sum of two array columns, 'FLUX_J' and 'FLUX_V'.",
        "response": "stilts tpipe in=arrays.fits cmd='addcol FLUX_JV_SUM \"add(FLUX_J, FLUX_V)\"' out=jv_array_sum.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'FLUX_V)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol FLUX_JV_SUM add(FLUX_J, FLUX_V)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'FLUX_V)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Retrieve all ObsCore entries from the European JWST Archive, and locally add a column `DEC_RAD` converting the `s_dec` column to radians.",
        "response": "stilts tapquery tapurl=https://jwst.esac.esa.int/server/tap adql='SELECT TOP 100 s_dec FROM ivoa.ObsCore' ocmd='addcol DEC_RAD degreesToRadians(s_dec)' out=jwst_rad.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Combine `catalog_ugri.fits` and `catalog_z.fits` and output the result to standard output in text format.",
        "response": "stilts tcat in=catalog_ugri.fits in=catalog_z.fits ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "I need a point MOC for objects with proper motion greater than 100 mas/yr, converting mas/yr velocity to angle/year distance at 1 kpc (parsec).",
        "response": "stilts mocshape in=high_vel.fits icmd='select \"hypot(PMRA, PMDEC) > 100.0 / 3600000.0 * 3600.0\"' shape=circle coords='array(RA, DEC, hypot(PMRA, PMDEC) / 3600000.0 * 1000.0 / 206265.0)' out=high_vel_angle.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'PMDEC)' '>' '100.0' '/' '3600000.0' '*' '3600.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select hypot(PMRA, PMDEC) > 100.0 / 3600000.0 * 3600.0\n\nUsage: select <expr>\n    (Unused arguments: 'PMDEC)' '>' '100.0' '/' '3600000.0' '*' '3600.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Convert an IPAC file to FITS, guaranteeing that table parameters are included in the output FITS headers.",
        "response": "stilts tcopy in=input.tbl ifmt=ipac out=output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Add a column 'COMPLEX_RATIO' that is the ratio of two complex array columns, 'FLUX_COMPLEX_A' and 'FLUX_COMPLEX_B', element-wise.",
        "response": "stilts tpipe in=arrays.fits cmd='addcol COMPLEX_RATIO \"divide(FLUX_COMPLEX_A, FLUX_COMPLEX_B)\"' out=complex_ratio.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'FLUX_COMPLEX_B)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol COMPLEX_RATIO divide(FLUX_COMPLEX_A, FLUX_COMPLEX_B)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'FLUX_COMPLEX_B)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Transpose an input table so columns become rows and vice versa, using the 'ID' column as the name for the output columns.",
        "response": "stilts tpipe in=long_form.fits cmd='transpose -namecol ID' out=wide_form.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Retrieve a sample from the CADC CANFAR User Catalogue and output the results in plain ASCII text format.",
        "response": "stilts tapquery tapurl=https://ws-uv.canfar.net/youcat adql='SELECT TOP 10 * FROM TAP_SCHEMA.tables' ofmt=ascii out=canfar_tables.txt",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Match T1 and T2 using elliptical positional errors (skyellipse). T2 position angle (PA) is in radians; convert to degrees before matching.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='replacecol PA radiansToDegrees(PA)' matcher=skyellipse params=1 values1='RA DEC A B PA' values2='RA DEC A B PA' out=radian_pa_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Plotting minimum and maximum marks of Y array per X array (statmark layer).",
        "response": "stilts plot2plane in=arrays.fits layer_min=statmark xs=X_ARR ys=Y_ARR ycombine=min color_min=blue layer_max=statmark ys_max=Y_ARR ycombine=max color_max=red out=min_max_marks.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X_ARR\"\n    (The name \"X_ARR\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "How can I convert a table into a format for a LaTeX document?",
        "response": "stilts tcopy in=publication_data.fits ofmt=latex out=table.tex",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Add a column 'VEL_GAL_X_COMP_2' containing the X (Galactic) component of the space velocity vector.",
        "response": "stilts tpipe in=gaia.fits cmd='addcol VEL_GAL_X_COMP_2 \"icrsToGal(astromUVW(array(RA, DEC, PARALLAX, PMRA, PMDEC, RV)))\"' out=galactic_x_vel_comp_3.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'DEC,' 'PARALLAX,' 'PMRA,' 'PMDEC,' 'RV)))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol VEL_GAL_X_COMP_2 icrsToGal(astromUVW(array(RA, DEC, PARALLAX, PMRA, PMDEC, RV)))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'DEC,' 'PARALLAX,' 'PMRA,' 'PMDEC,' 'RV)))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Join tables D1 and D2 using 2D Cartesian coordinates (X, Y) where the matching radius is the quadrature sum of their individual ERR columns (2d_err_q).",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=2d_err_q params=1 values1='X Y ERR' values2='X Y ERR' out=cartesian_2d_err_q_match_2.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Plot points, coloring them based on density and applying a linear function scaling to the density values.",
        "response": "stilts plot2sky in=data.fits layer=mark lon=RA lat=DEC shading=density densefunc=linear out=linear_density_sky.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Add a column 'DEC_ICRS_DEG' converting FK4 RA/DEC (B1950) to ICRS DEC (J2000) using the old function with explicit output units.",
        "response": "stilts tpipe in=data.fits cmd='addcol DEC_ICRS_DEG \"decFK4toFK5degrees(RA_B1950, DEC_B1950)\"' out=fk4_to_icrs_dec.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'DEC_B1950)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol DEC_ICRS_DEG decFK4toFK5degrees(RA_B1950, DEC_B1950)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'DEC_B1950)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Combine data_1.fits and data_2.fits. In the second table, rename the column 'FLUX_TOT' to 'FLUX', and remove the 'BACKGROUND' column.",
        "response": "stilts tcatn nin=2 in1=data_1.fits in2=data_2.fits icmd2='colmeta -name FLUX FLUX_TOT; delcols BACKGROUND' out=clean_flux.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Run a simple synchronous query to MAST PanSTARRS DR1 to retrieve the first 10 rows, outputting the result in plain ASCII text format to the console.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ps1dr1 adql='SELECT TOP 10 * FROM dbo.detection_object' sync=true ofmt=ascii out=-",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Using `ref.fits` as the reference, find all rows that have a match in `comp1.fits` but DO NOT have a match in `comp2.fits`. Radius is 10 arcsec.",
        "response": "stilts tmatchn nin=3 in1=ref.fits in2=comp1.fits in3=comp2.fits multimode=pairs iref=1 matcher=sky params=10 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=match join3=nomatch out=ref_in_comp1_not_comp2.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Copy the input table and save it to standard output in ASCII format, padded with spaces.",
        "response": "stilts tpipe in=data.fits ofmt=ascii out=-",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Concatenate two tables and replace string value 'UNKNOWN' with NULL in the 'CLASS' column of the final result.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits ocmd='replaceval \"UNKNOWN\" NULL CLASS' out=class_cleaned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Plot error ellipses (skyellipse) where the radius is calculated as 'ERR_DEG * 2.0'.",
        "response": "stilts plot2sky in=errors.fits layer=skyellipse lon=RA lat=DEC ra='ERR_DEG * 2.0' rb=0.0 posang=0 unit=degree out=doubled_radius_ellipse.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Convert a CSV file to LaTeX, specifying that the output should be a **standalone document**.",
        "response": "stilts tcopy in=data.csv ifmt=csv ofmt='latex(standalone=true)' out=standalone_report.tex",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Query a service at Ecliptic longitude 100, latitude 50, with a radius determined by dividing 1 degree by 5.",
        "response": "stilts cone serviceurl=http://dc.g-vo.org/tap lon=100.0 lat=50.0 radius='1.0 / 5.0' skysys=ecliptic out=ecliptic_divided.fits",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"1.0 / 5.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Count the number of resources listed by the OCA Data Center TAP service.",
        "response": "stilts tapquery tapurl=https://dachs.oca.eu/tap adql='SELECT COUNT(*) FROM TAP_SCHEMA.resources' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Run a TAP query, then locally add a column `IS_BRIGHT` which is true if `phot_g_mean_mag` < 12.",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap adql='SELECT source_id, phot_g_mean_mag FROM gaiadr3.gaia_source' ocmd='addcol IS_BRIGHT phot_g_mean_mag<12' out=bright_check.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Merge tables and then eliminate any adjacent rows that are exact duplicates across all columns.",
        "response": "stilts tcat in='d1.fits d2.fits' ocmd='uniq *' out=exact_duplicates_removed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Combine two tables, and explicitly request to keep columns ID, RA, and DEC from both inputs, regardless of duplication, using positional column references.",
        "response": "stilts tcatn nin=2 in1=c1.fits icmd1='keepcols \"$1 $2 $3\"' in2=c2.fits icmd2='keepcols \"$1 $2 $3\"' out=pos_only_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Plot markers (open square, size 3) and output the plot metadata (omode=meta).",
        "response": "stilts plot2sky in=data.fits layer=mark lon=RA lat=DEC shape=open_square size=3 omode=meta",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad value for parameter omode: Unknown value \"meta\" - must be one of swing, out, cgi, discard, auto\nUsage: omode=swing|out|cgi|discard|auto\n\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Join A.fits and B.fits. A only keeps columns ID, RA, DEC. B keeps ID, MAG, FLUX. Match on RA, DEC (1 arcsec).",
        "response": "stilts tmatch2 in1=A.fits icmd1='keepcols \"ID RA DEC\"' in2=B.fits icmd2='keepcols \"ID MAG FLUX RA DEC\"' matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=minimal_join_with_filter.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits. A has columns in FK4 B1950. Convert A to FK5 J2000 using addskycoords before matching (2 arcsec).",
        "response": "stilts tmatch2 in1=A.fits icmd1='addskycoords fk4 fk5 RA_B1950 DEC_B1950 RA DEC' in2=B.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' out=A_fk4_to_fk5_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Match `table1.fits` and `table2.fits`. The coordinates in `table2` are `RA_RADS` and `DEC_RADS`. Then, add a column `IS_BRIGHT` to the output if `MAG_1` is less than 15.",
        "response": "stilts tmatch2 in1=table1.fits in2=table2.fits matcher=sky params=2 values1='RA DEC' values2='radiansToDegrees(RA_RADS) radiansToDegrees(DEC_RADS)' ocmd='addcol IS_BRIGHT \"MAG_1 < 15\"' out=bright_matches_processed.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_BRIGHT MAG_1 < 15\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Plot elliptical error regions defined by X/Y errors and correlation, disabling autoscaling and setting scale factor to 500.",
        "response": "stilts plot2plane in=errors.fits layer=xycorr x=X y=Y xerr=XE yerr=YE xycorr=C autoscale=false scale=500 out=scaled_corr_errors.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Submit an asynchronous job to the PADC TAP Astro server and explicitly ask for progress updates during the query.",
        "response": "stilts tapquery tapurl=http://voparis-tap-astro-m.obspm.fr/tap adql='SELECT TOP 100 * FROM TAP_SCHEMA.tables' progress=true out=padc_astro_progress.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Combine table T1 and a simulated table that randomly samples 10% of T1, tracking T1's original row index in the synthetic table.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2='tpipe in=T1.fits cmd=\"random 0.1\" cmd=\"addcol OriginalIndex $0\" omode=out' out=T1_plus_sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Calculate a checksum for the table `final_product.fits` after selecting only rows where `CONFIDENCE > 0.95`.",
        "response": "stilts tpipe in=final_product.fits cmd='select \"CONFIDENCE > 0.95\"' omode=checksum",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '0.95'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select CONFIDENCE > 0.95\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.95'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Find the minimum, maximum, and mean of the KUG redshift column from the Comprehensive Catalogue of Kiso UV-X Galaxies (KUG2000).",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/kug2000 adql='SELECT Z_KUG FROM kug2000.table_main' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Match two catalogs where positions are defined by coordinate errors (skyerr). T1 error is fixed at 1 arcsec, T2 error is from column ERR_T2.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skyerr params=1 values1='RA DEC 1' values2='RA DEC ERR_T2' out=mixed_fixed_var_error.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Plot a HEALPix map table and degrade its resolution by a factor of 8 (degrade=3).",
        "response": "stilts plot2sky in=hpx_map.fits layer=healpix value=VALUE degrade=3 out=hpx_degrade3.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Plot error ellipses (skyellipse) where the radius is calculated as 'ERR_DEG * 2.0'.",
        "response": "stilts plot2sky in=errors.fits layer=skyellipse lon=RA lat=DEC ra='ERR_DEG * 2.0' rb=0.0 posang=0 unit=degree out=doubled_radius_ellipse.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Create a MOC for all sources in `mycat.fits` with a radius of 0.",
        "response": "This is equivalent to `shape=point`. `stilts mocshape in=mycat.fits shape=point coords='array(RA,DEC)' out=points_only.moc.fits`",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "mocshape"
    },
    {
        "prompt": "From `all_sky.fits`, create a new column `GAL_LAT` by converting the equatorial `DEC` coordinate to galactic latitude.",
        "response": "stilts tpipe in=all_sky.fits cmd='addskycoords icrs galactic RA DEC GAL_LON GAL_LAT' cmd='keepcols GAL_LAT' out=galactic_latitudes.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Can I combine a local FITS file with a VOTable from a URL?",
        "response": "stilts tcatn nin=2 in1=local.fits in2=http://example.com/remote.vot out=combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join T1 and T2 based on 2D coordinates (X, Y). T2 coordinates are computed by applying a 45-degree rotation to original X_RAW, Y_RAW columns.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='addcol X \"X_RAW*cosDeg(45) - Y_RAW*sinDeg(45)\"; addcol Y \"X_RAW*sinDeg(45) + Y_RAW*cosDeg(45)\"' matcher=2d params=5 values1='X Y' values2='X Y' out=rotated_coord_match.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '-' 'Y_RAW*sinDeg(45)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol X X_RAW*cosDeg(45) - Y_RAW*sinDeg(45)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'Y_RAW*sinDeg(45)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Read a multi-extension FITS file, selecting extension #2 by name 'PRIMARY_CATALOG', and save it.",
        "response": "stilts tcopy in=multi.fits#PRIMARY_CATALOG out=named_ext.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Remove the column 'ID_2' and replace it with a newly calculated column 'NEW_ID_2' based on the product of 'ID_1' and 2.",
        "response": "stilts tpipe in=data.fits cmd='replacecol ID_2 \"ID_1 * 2\"' out=recalculated_id.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '*' '2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol ID_2 ID_1 * 2\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '*' '2'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Plot markers (fat cross shape, size 6) in Equatorial coordinates, saving the output as an SVG file.",
        "response": "stilts plot2sky in=data.fits layer=mark lon=RA lat=DEC shape=fat_cross size=6 out=fat_cross_sky.svg",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Join T_A and T_B. Output to standard output in plain text format.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=exact values1=ID values2=ID ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Convert an ECSV file to a Feather file for use in R or Python.",
        "response": "stilts tcopy in=my_data.ecsv out=my_data.feather",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Pair match T_MAIN against T2, T3. Filter T3 to keep only the first 500 rows before attempting the match.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_MAIN.fits in2=T2.fits in3=T3.fits icmd3='head 500' out=t3_head_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Plot markers and label them using the magnitude (MAG), centered (anchor=center).",
        "response": "stilts plot2sky in=data.fits layer_m=mark lon_m=RA lat_m=DEC layer_l=label label_l=MAG anchor_l=center out=mag_center_labels.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Generate a plot of X vs Y where the Y-axis uses a logarithmic scale.",
        "response": "stilts plot2plane in=data.fits layer=mark x=X y=Y yscale=log out=log_y_scale.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Retrieve 100 SDSS quasar RA/Dec positions from GAVO, filtering for records where the R-band magnitude (UCD ucd$phot.mag;em.opt.R) is non-null.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT ra, dec FROM sdss.dr16qso WHERE ucd$phot.mag;em.opt.R IS NOT NULL' maxrec=100 out=gavo_ucd_filter.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot a 2D histogram (grid) with 50 bins in X and 20 bins in Y.",
        "response": "stilts plot2plane in=data.fits layer=grid x=X y=Y xbinsize=-50 ybinsize=-20 out=custom_grid.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "I want to match three tables, and then only keep rows from the second input table that were part of a match.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 join2=match ocmd='keepcols \"*_2\"' out=t2_matched_rows.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Plot markers at the four corner positions (R1, D1, R2, D2, R3, D3, R4, D4) using the mark4 layer.",
        "response": "stilts plot2sky in=corners.fits layer=mark4 lon1=R1 lat1=D1 lon2=R2 lat2=D2 lon3=R3 lat3=D3 lon4=R4 lat4=D4 shape=cross out=mark4_corners.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"R1\"\n    (The name \"R1\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Draw a histogram where the bins start at $X=0.0$ (phase=0.0) and the bin width is exactly 1.0 units.",
        "response": "stilts plot2plane in=data.fits layer=histogram x=VALUE binsize=1.0 phase=0.0 out=unit_phase_hist.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Count the number of PanSTARRS DR2 sources at MAST where the R-band magnitude error (`g_err`) is less than 0.1.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ps1dr2 adql='SELECT COUNT(*) FROM dbo.detection_object WHERE g_err < 0.1' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Query the LMD TAP service for table schemas and output the result in FITS format.",
        "response": "stilts tapquery tapurl=http://vo.lmd.jussieu.fr/tap adql='SELECT * FROM TAP_SCHEMA.schemas' ofmt=fits out=lmd_schemas.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Calculate the MOC for a survey with a very small positional error of 10 milli-arcseconds (mas).",
        "response": "stilts pixfoot in=survey.fits ra=RA dec=DEC radius='10.0 / 3600000.0' out=survey_10mas.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Query the MAST CAOM ObsCore service for Chandra observations and save the results in VOTable FITS serialization format.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/caom adql='SELECT TOP 10 * FROM ivoa.ObsCore WHERE facility_name = ''Chandra''' ofmt='votable(format=FITS)' out=caom_fits_vot.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "How do I copy a table and output only its statistics (e.g., mean and standard deviation)?",
        "response": "stilts tpipe in=data.fits omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Combine data_A.fits and data_B.fits, keeping only the ID, RA, DEC, and ensuring these are the first three columns in the output.",
        "response": "stilts tcatn nin=2 in1=data_A.fits icmd1='keepcols \"ID RA DEC MAG\"' in2=data_B.fits icmd2='keepcols \"ID RA DEC FLUX\"' ocmd='keepcols \"ID RA DEC\"' out=minimal_columns.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Generate an all-sky density map (skydensity, level 5) combining the median of 'MAG' values per pixel.",
        "response": "stilts plot2sky in=data.fits layer=skydensity lon=RA lat=DEC level=5 weight=MAG combine=median out=median_mag_hpx5.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Draw a boundary defined by a single polygon array, setting the line thickness to 3 pixels.",
        "response": "stilts plot2sky in=polygon.fits layer=polygon coords=VERTICES polymode=outline thick=3 out=thick_polygon_outline.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad value for parameter lon: null value not allowed\nUsage: lon=<deg-expr>\n\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Plot a scatter plot of a random 10% sample from a huge catalog.",
        "response": "stilts plot2plane in=huge_catalog.fits icmd='random \"0.1\"' layer=mark x=RA y=DEC out=random_10pct.png",
        "chat.jar": "fixed",
        "error": "Error: Unused arguments: '0.1'\n\nCommand was: random \"0.1\"\n\nUsage: random\n    (Unused arguments: '0.1')\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). For the output, rename the magnitude column in T1 to 'MAG_REF'.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits ocmd='colmeta -name MAG_REF MAG_1' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=mag_ref_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Synchronously query the Subaru Suprime-Cam data service for RA and Dec of 10 sources, outputting results in VOTable binary format.",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/spcam adql='SELECT TOP 10 ra, dec FROM hsc_v3.point' sync=true ofmt='votable(format=BINARY)' out=spcam_binary.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Combine file D1.fits with a table generated by summing the squares of 100 loop indices, adding the total sum as a column.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2='tpipe in=:loop:101 cmd=\"addcol SQUARERED $0*$0\" cmd=\"keepcols SQUARERED\" ocmd=\"stats sum\" omode=out' out=data_plus_sum.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Match T_A and T_B using a 2D position match (5 pixels) and display the resulting metadata.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=2d params=5 values1='X Y' values2='X Y' omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Crossmatch T1 and T2, only keeping rows that appear in one or the other (symmetric difference, 1xor2). Output separation score.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=1xor2 scorecol=Sep out=symmetric_difference_scored.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Add a column 'VEL_GAL_X' containing the X component of the Galactic velocity vector derived from astrometric parameters.",
        "response": "stilts tpipe in=gaia.fits cmd='addcol VEL_GAL_X \"icrsToGal(astromUVW(array(RA, DEC, PARALLAX, PMRA, PMDEC, RV)))\"' out=galactic_x_vel.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'DEC,' 'PARALLAX,' 'PMRA,' 'PMDEC,' 'RV)))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol VEL_GAL_X icrsToGal(astromUVW(array(RA, DEC, PARALLAX, PMRA, PMDEC, RV)))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'DEC,' 'PARALLAX,' 'PMRA,' 'PMDEC,' 'RV)))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "I have coordinate string columns RA_STR, DEC_STR. Convert them to degrees before generating a MOC.",
        "response": "stilts pixfoot in=strings.fits icmd='addcol RA parseDouble(RA_STR); addcol DEC parseDouble(DEC_STR)' ra=RA dec=DEC out=parsed_strings.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Read a CSV file, explicitly excluding boolean and date type inference during conversion.",
        "response": "stilts tcopy in=mixed.csv ifmt='csv(notypes=boolean;date)' out=numeric_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Combine table1.fits and table2.fits, keeping only the first 10 rows of the resulting total output.",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits ocmd='head 10' out=top_ten_all.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "In the output table, replace all null values in the 'FLUX' column with -999.0.",
        "response": "stilts tpipe in=data.fits cmd='replaceval null -999.0 FLUX' out=data_fixed_nulls.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Plot density contours on an Equatorial plot, setting the level spacing to 'log' and the zero level to 0.01.",
        "response": "stilts plot2sky in=data.fits layer=contour lon=RA lat=DEC scaling=log zero=0.01 out=log_zero0p01_contour.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Plot markers (size 5, filled triangle up) for objects only in the southern hemisphere (DEC < 0).",
        "response": "stilts plot2sky in=all_sky.fits icmd='select \"DEC < 0\"' layer=mark lon=RA lat=DEC size=5 shape=filled_triangle_up out=southern_marks.png",
        "chat.jar": "fixed",
        "error": "Error: Table processing error\n    (Bad expression \"DEC < 0\" (The name \"DEC\" is unknown.)\n        (The name \"DEC\" is unknown.))\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Convert 'ts_data.cdf' (CDF format) into a VOTable, reading the format automatically based on extension (if possible).",
        "response": "stilts tcopy in=ts_data.cdf ifmt=cdf out=ts_data.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "What is the command to create an order-10 ASCII MOC from a simulated catalog?",
        "response": "stilts pixfoot in=:skysim:10000 ra=ra dec=dec order=10 mocfmt=ascii out=sim_ascii.moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Concatenate two tables, then print a brief statistical summary of the table's contents to the console.",
        "response": "stilts tcat in=t1.fits in=t2.fits omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Copy a VOTable to a FITS file, forcing the **VOTable metadata** to be stored in the Primary HDU (FITS-plus).",
        "response": "stilts tcopy in=data.vot ofmt=fits-plus out=rich_fits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Match `primary_sources.vot` and `secondary_sources.vot` and then sort the resulting table by the separation distance. Save the output as `sorted_matches.csv`.",
        "response": "stilts tmatch2 in1=primary_sources.vot in2=secondary_sources.vot matcher=sky params=10 values1='RA DEC' values2='RA DEC' ocmd='sort Separation' ofmt=csv out=sorted_matches.csv",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Create an order 11 MOC for sources located around Galactic coordinates L=10, B=0, using a 0.01 degree radius (requires coordinate conversion).",
        "response": "stilts pixfoot in=gal_cat.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius=0.01 order=11 out=gal_converted_0p01deg.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the best match for each object in `cat_main.fits` from `cat_ref.fits` within 10 arcsec, but only for objects with `CLASS` = 'GALAXY' in `cat_main`.",
        "response": "stilts tmatch2 in1=cat_main.fits in2=cat_ref.fits icmd1='select CLASS==\"GALAXY\"' matcher=sky params=10 values1='RA DEC' values2='RA DEC' find=best1 out=galaxy_matches.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Find CANDELS HLSP photometry entries where the data flag (`use_flag`) is exactly 1, and pipe the result directly to TOPCAT.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/candels/ adql='SELECT * FROM candels.photometry WHERE use_flag = 1' omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Check if there is a column named 'RA' present in the input table and assert its existence.",
        "response": "stilts tpipe in=data.fits cmd='assert \"$ncol > 0L\"' out=checked_nonempty.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '0L'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: assert $ncol > 0L\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '0L'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Query the DaCHS server at IAP (dorotka.ufa.cas.cz) for the latest available data release metadata and generate a row count only.",
        "response": "stilts tapquery tapurl=http://dorotka.ufa.cas.cz/tap adql='SELECT DISTINCT datamodel_name, datamodel_version FROM TAP_SCHEMA.schemas' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Can you query the cone search service at http://www3.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/argus/cone? I'm looking for objects around longitude 329.1712 and latitude -81.3744. Please use a search radius of 0.535 degrees. Instead of a file, just give me the checksum.",
        "response": "stilts cone servicetype=cone serviceurl=http://www3.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/argus/cone lon=329.1712 lat=-81.3744 radius=0.535 omode=checksum",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Combine CDF data (file.cdf) and a VOTable. Explicitly name the CDF input format and then inspect the combined metadata.",
        "response": "stilts tcatn nin=2 in1=file.cdf ifmt1=cdf in2=other.vot omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Run an SSA query against the JVO AKARI spectroscopic catalogue near Galactic L=10, B=0.5, with radius 6 arcseconds.",
        "response": "stilts cone serviceurl=http://jvo.nao.ac.jp/skynode/do/tap/akari/spectrum/slitless_mir_spec lon=10.0 lat=0.5 radius='6.0 / 3600.0' servicetype=ssa skysys=galactic out=akari_ssa_6as.fits",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"6.0 / 3600.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Match two tables on Galactic position (GLON, GLAT). T2 coordinates are in radians. Convert T2 inline using the values parameter.",
        "response": "stilts tmatch2 in1=C1.fits in2=C2.fits matcher=sky params=5 values1='GLON GLAT' values2='radiansToDegrees(GLON_RAD) radiansToDegrees(GLAT_RAD)' out=inline_galactic_rad.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Synchronously query the PADC planetary server for a sample and save the result as a FITS file.",
        "response": "stilts tapquery tapurl=http://voparis-tap-planeto.obspm.fr/tap adql='SELECT TOP 10 * FROM epn_core.epn_core' sync=true ofmt=fits out=padc_planetary_sync.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I need a MOC for sources found in a FITS table, converting RA to degrees if it was in hours (RA_H).",
        "response": "stilts pixfoot in=hours.fits icmd='replacecol RA \"degreesToRadians(RA_H / 24.0 * 360.0)\"' ra=RA dec=DEC out=hours_to_deg.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '/' '24.0' '*' '360.0)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol RA degreesToRadians(RA_H / 24.0 * 360.0)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '/' '24.0' '*' '360.0)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How to convert an `ascii` file to an `ipac` table?",
        "response": "stilts tcopy ifmt=ascii in=mydata.txt ofmt=ipac out=mydata.tbl",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Join T_A and T_B. A is VOTable, B is FITS. Find all matches (all). Output total number of columns and rows (count).",
        "response": "stilts tmatch2 in1=T_A.vot in2=T_B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=all omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Copy a local CSV file to standard output, suppressing the header line.",
        "response": "stilts tcopy in=data.csv ifmt=csv ofmt='csv(header=false)' out=-",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 275.9287 and latitude 27.6258. Please use a search radius of 0.7051 degrees. Save the results to a votable file called query_results_32.votable.",
        "response": "stilts cone servicetype=sia1 serviceurl=http://irsa.ipac.caltech.edu/sia lon=275.9287 lat=27.6258 radius=0.7051 omode=out ofmt=votable out=query_results_32.votable",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Add a boolean column 'IS_EVEN_ID' which is true if the 'ID' number is even.",
        "response": "stilts tpipe in=data.fits cmd='addcol IS_EVEN_ID \"ID % 2 == 0\"' out=even_ids.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '%' '2' '==' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_EVEN_ID ID % 2 == 0\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '%' '2' '==' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Group match three tables. T1 has 'ERROR_MAS'. Convert this to 'ERROR_DEG' for matching using skyerr.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr params=1 in1=T1.fits icmd1='addcol ERROR_DEG ERROR_MAS/3600000.0' in2=T2.fits in3=T3.fits values1='RA DEC ERROR_DEG' values2='RA DEC ERROR_DEG' values3='RA DEC ERROR_DEG' out=error_unit_unified.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Filter rows to keep only those where the celestial sphere position is within a polygon defined by a fixed coordinate array (e.g., poly_coords).",
        "response": "stilts tpipe in=data.fits cmd='select \"inSkyPolygon(RA, DEC, poly_coords)\"' out=polygon_overlap.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'DEC,' 'poly_coords)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select inSkyPolygon(RA, DEC, poly_coords)\n\nUsage: select <expr>\n    (Unused arguments: 'DEC,' 'poly_coords)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Plot marks from a synthetic sky catalog of 100,000 stars (skysim), coloring by density.",
        "response": "stilts plot2sky in=:skysim:100000 layer=mark lon=ra lat=dec shading=density out=sim_density_marks.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"ra\"\n    (The name \"ra\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Create an order 19 MOC using circles with radius $1 \\mu \text{as}$.",
        "response": "stilts mocshape in=precise_targets.fits shape=circle coords='array(RA, DEC, 1.0 / 3600000000.0)' order=19 out=micro_arcsec_o19.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Plot labels (LABEL column) at positions, ensuring they use LaTeX formatting and a serif font.",
        "response": "stilts plot2sky in=data.fits layer=label lon=RA lat=DEC label=LABEL texttype=latex fontstyle=serif out=latex_labels_serif.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Plot vectors using the large open dart shape, with a fixed scaling factor of 500.",
        "response": "stilts plot2sky in=v_data.fits layer=skyvector lon=RA lat=DEC dlon=DR dlat=DD unit=degree scale=500 arrow=large_open_dart out=large_open_dart_500.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Query the GAVO service using the capabilities to determine the endpoints.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT TOP 10 * FROM ivoa.obscore' interface=cap",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Copy the FITS file 'deep_field.fits' and write the output using the **column-oriented FITS** format.",
        "response": "stilts tcopy in=deep_field.fits ofmt=colfits-plus out=deep_field.colfits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Group match three catalogs. The first table is an IPAC file, the others are FITS. Specify input formats.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=3 ifmt1=ipac in1=c1.tbl in2=c2.fits in3=c3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=ipac_group_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "After combining tables, I need to assert that all 'MAG' values are positive.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='assert MAG>0' out=asserted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Remove the column 'COMMENT' and output the modified table to standard output in text format.",
        "response": "stilts tpipe in=data.fits cmd='delcols COMMENT' ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "What's the command to combine only the first and third table extensions from my file `data_archive.fits`?",
        "response": "stilts tcat in=data_archive.fits#1 in=data_archive.fits#3 out=combined_extensions.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Concatenate observations obs_1.fits and obs_2.fits. The final table should use a column calculated by converting proper motion from mas/yr to km/s using parallax (plx).",
        "response": "stilts tcatn nin=2 in1=obs_1.fits in2=obs_2.fits ocmd='addcol V_RA \"rvMasyrToKms(PM_RA, plx)\"; addcol V_DEC \"rvMasyrToKms(PM_DEC, plx)\"' out=velocity_concat.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'plx)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol V_RA rvMasyrToKms(PM_RA, plx)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'plx)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Retrieve TESS Input Catalog entries and locally filter them to keep only sources where the TESS magnitude (TMAG) is between 12 and 13.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/tic adql='SELECT TOP 100 * FROM tic.v8' ocmd='select \"tmag BETWEEN 12 AND 13\"' out=tic_mid_range.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'BETWEEN' '12' 'AND' '13'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select tmag BETWEEN 12 AND 13\n\nUsage: select <expr>\n    (Unused arguments: 'BETWEEN' '12' 'AND' '13'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tapquery"
    },
    {
        "prompt": "Retrieve 10 Teff values from the Subaru SAGA database and locally rename the column to 'LOG_TEFF'.",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/saga adql='SELECT TOP 10 Teff FROM saga.stellar_abundances' ocmd='colmeta -name LOG_TEFF Teff' out=saga_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Retrieve 20 table entries from the Pithia VO datacenter and save the output in ECSV format.",
        "response": "stilts tapquery tapurl=http://pithia.cbk.waw.pl/tap adql='SELECT TOP 20 * FROM TAP_SCHEMA.tables' ofmt=ecsv out=pithia_meta.ecsv",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Match T_A and T_B. T_A is a synthetic table of 1000 Henon attractor points. Match using symmetric best (best) on X, Y coordinates.",
        "response": "stilts tmatch2 in1=:attractor:1000,henon in2=T_B.fits matcher=2d params=1 values1='x y' values2='X Y' find=best out=henon_best_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Find the statistical distribution of the 'time_res' (time resolution) column for all planetary observations in the FUB EPN-TAP core table.",
        "response": "stilts tapquery tapurl=http://dachs.planet.fu-berlin.de/tap adql='SELECT time_res FROM epn_core.epn_core' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plotting vectors colored by density using the `gnuplot` densemap.",
        "response": "stilts plot2plane in=data.fits layer=xyvector x=X y=Y xdelta=DX ydelta=DY shading=density densemap=gnuplot out=gnuplot_density_vec.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Create an order 13 MOC for sources with a magnitude difference (B-R) greater than 2.0.",
        "response": "stilts mocshape in=color_cat.fits icmd='select \"BMAG - RMAG > 2.0\"' shape=point coords='array(RA, DEC)' order=13 out=red_source_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '-' 'RMAG' '>' '2.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select BMAG - RMAG > 2.0\n\nUsage: select <expr>\n    (Unused arguments: '-' 'RMAG' '>' '2.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Set the output mode to view a checksum of the resultant table data, discarding the physical table.",
        "response": "stilts tpipe in=data.fits omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Convert a table to Parquet, setting key-value metadata in the footer (e.g., 'Author:STILTS').",
        "response": "stilts tcopy in=data.fits ofmt='parquet(kvmap=Author:STILTS)' out=kv_data.parquet",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Match `cat_main.fits` with `cat_alt.fits`. The `cat_alt` table uses galactic coordinates `GLON`, `GLAT`. `cat_main` uses ICRS `RA`, `DEC`. Match them within 0.1 degrees.",
        "response": "stilts tmatch2 in1=cat_main.fits in2=cat_alt.fits icmd2='addskycoords galactic icrs GLON GLAT RA_ICRS DEC_ICRS' matcher=sky params=360 values1='RA DEC' values2='RA_ICRS DEC_ICRS' out=icrs_gal_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Generate an all-sky plot using the Plate Carr\u00e9e projection (CAR), centered at Lon=180 degrees (CAR0).",
        "response": "stilts plot2sky in=data.fits layer=mark lon=RA lat=DEC projection=car0 out=car0_sky.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Plot a zoomed region (radius 0.05 degrees) centered at (RA=30, DEC=60), ensuring sexagesimal axis labels are displayed.",
        "response": "stilts plot2sky in=zoom_data.fits clon=30.0 clat=60.0 radius=0.05 layer=mark lon=RA lat=DEC sex=true out=sex_zoom.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Check if a given column 'ERROR' has a null value and replace the entire row with a blank table if it does (not possible directly with tpipe, ask for clarification).",
        "response": "stilts tpipe in=data.fits cmd='select !NULL_ERROR' out=no_null_errors.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Find all resources in the Euclid TAP service around Galactic L=45, B=-1.5, searching within a region equivalent to 300 micro-arcseconds ($\\mu$as).",
        "response": "stilts cone serviceurl=https://eas.esac.esa.int/tap-server/tap lon=45.0 lat=-1.5 radius='300.0 / 3600000000.0' skysys=galactic out=euclid_300uas.fits",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"300.0 / 3600000000.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 only contains the last 500 rows. Match on exact ID.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='tail 500' in2=T2.fits matcher=exact values1=ID values2=ID out=tail_exact_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Overplot a horizontal line at y=1.0 and a vertical line at x=0.0.",
        "response": "stilts plot2plane in=data.fits layer_d=mark x_d=X y_d=Y layer_h=function fexpr_h=1 color_h=black layer_v=function axis_v=vertical fexpr_v=0 color_v=black",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Start an asynchronous query on the HREDA TAP service and set the deletion policy to ensure the job is never automatically deleted.",
        "response": "stilts tapquery tapurl=https://hreda.esac.esa.int/hreda-sl-tap/tap adql='SELECT * FROM ivoa.ObsCore WHERE obs_collection = ''HREDA''' delete=never out=hreda_persistent.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Crossmatch T1 (FITS) and T2 (Parquet) exactly on ID.",
        "response": "stilts tmatch2 in1=T1.fits ifmt2=parquet in2=T2.parquet matcher=exact values1=ID values2=ID out=fits_parquet_exact.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "What does the `countrows` parameter in `tcat` do?",
        "response": "The `countrows=true` parameter is a tuning parameter that counts the rows in the tables before starting the output. This can sometimes improve efficiency when writing to formats that require the total row count upfront, like standard FITS, by reducing the number of passes through the input files [2].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcat"
    },
    {
        "prompt": "Retrieve CANDELS HLSP photometry and locally keep the 10 rows with the largest V-band flux.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/candels/ adql='SELECT * FROM candels.photometry' ocmd='sorthead 10 flux_v' out=candels_brightest_v.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Match `tbl_x.fits` and `tbl_y.fits`. In the output, please only keep the identifier columns (`ID_X`, `ID_Y`) and then count how many pairs there are.",
        "response": "stilts tmatch2 in1=tbl_x.fits in2=tbl_y.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' icmd1='keepcols \"ID_X RA DEC\"' icmd2='keepcols \"ID_Y RA DEC\"' ocmd='keepcols \"ID_X ID_Y\"' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "I need SIA images from the MAST CAOM service near Ecliptic Lon 180, Lat 20, searching with a radius of 1 arcminute.",
        "response": "stilts cone serviceurl=https://mast.stsci.edu/vo-tap/api/v0.1/caom lon=180.0 lat=20.0 radius='1.0 / 60.0' servicetype=sia skysys=ecliptic out=caom_ecl_1am.vot",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"1.0 / 60.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Generate a histogram normalized by the total height of all bars (normalise=height).",
        "response": "stilts plot2plane in=data.fits layer=histogram x=VALUE normalise=height out=height_norm_hist.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "How do I force the plot aspect ratio to be 1:1 (isotropic)?",
        "response": "stilts plot2plane in=data.fits layer=mark x=X y=Y aspect=1",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Filter by 'FLAG' and ensure that the filtered table contains at least 100 rows.",
        "response": "stilts tpipe in=data.fits cmd='select \"FLAG == 1\"' cmd='assert \"$nrow >= 100L\"' out=min_100_rows.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '==' '1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLAG == 1\n\nUsage: select <expr>\n    (Unused arguments: '==' '1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Add a column 'RA_DMS_S' converting RA in degrees to DMS string format with 1 decimal place for seconds.",
        "response": "stilts tpipe in=coords.fits cmd='addcol RA_DMS_S \"degreesToDms(RA, 1)\"' out=dms_ra_s.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '1)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol RA_DMS_S degreesToDms(RA, 1)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '1)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "I want to process a large file `huge_stream.csv` that I'm piping from another command. How do I filter it for values in column 3 being greater than 100?",
        "response": "cat huge_stream.csv | stilts tpipe in=- ifmt=csv cmd='select $3 > 100' out=filtered_stream.csv",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tpipe"
    },
    {
        "prompt": "Convert a FITS table containing >1000 columns into a standard VOTable.",
        "response": "stilts tcopy in=wide_fits.fits out=wide_vot.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Read a system command pipe output (VOTable) and save it as an IPAC table.",
        "response": "cat remote.vot | stilts tcopy in=- ifmt=votable ofmt=ipac out=piped.tbl",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcopy"
    },
    {
        "prompt": "Visualize velocity vectors (km/s) overlaid on a zoomed field (5 degrees radius), ensuring the vector length is interpreted directly in data coordinates (unit=scaled, autoscale=false).",
        "response": "stilts plot2sky in=flow.fits clon=100 clat=50 radius=5.0 layer=skyvector lon=RA lat=DEC dlon=VX dlat=VY unit=scaled autoscale=false scale=1.0 out=fixed_km_s_vectors.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Query for all observations in the last 10 years from the GAVO obscore table.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT * FROM ivoa.obscore WHERE t_min > MJD_TO_TIMESTAMP(56000)'",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I have coordinates in radians (RA_rad=1.5, Dec_rad=0.3). Convert them to degrees for a query to the GAVO TAP with 10 arcminutes radius.",
        "response": "stilts cone serviceurl=http://dc.g-vo.org/tap lon='radiansToDegrees(1.5)' lat='radiansToDegrees(0.3)' radius='10.0 / 60.0' out=gavo_rad_10am.vot",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter lon: For input string: \"radiansToDegrees(1.5)\"\nUsage: lon=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Add a column 'PLX_DIST_Q84_3KPC' containing the 84th percentile distance estimate (L=3000pc) derived from parallax.",
        "response": "stilts tpipe in=gaia.fits cmd='addcol PLX_DIST_Q84_3KPC \"distanceQuantilesEdsd(PARALLAX, PARALLAX_ERR, 3000.0, 0.84)\"' out=q84_dist_3kpc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'PARALLAX_ERR,' '3000.0,' '0.84)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PLX_DIST_Q84_3KPC distanceQuantilesEdsd(PARALLAX, PARALLAX_ERR, 3000.0, 0.84)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PARALLAX_ERR,' '3000.0,' '0.84)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Query GAVO DC for quasar data and locally add a new column that is the square of the right ascension (RA) column.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT TOP 10 ra FROM sdss.dr16qso' ocmd='addcol RA_SQ ra*ra' out=gavo_ra_sq.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I need to upload a table, but before uploading, I need to keep only the ID, RA, and DEC columns.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap nupload=1 upload1=my_full_table.fits ucmd1='keepcols \"ID RA DEC\"' upname1=up adql='SELECT * FROM TAP_UPLOAD.up' out=upload_subset.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Can `tmatchn` handle input from a pipe?",
        "response": "Yes, but it's tricky since `tmatchn` requires multiple table inputs. You can pipe one table using `in1=-` and specify the others as files, but you cannot pipe multiple tables into a single `tmatchn` command.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Query the GAVO Data Center for table names and output the result in LaTeX format.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT TOP 10 table_name, description FROM TAP_SCHEMA.tables' ofmt=latex out=gavo_tables.tex",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Combine tables A and B. A contains array columns; flatten them into scalar columns using explodeall before joining B.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='explodeall' in2=B.fits out=exploded_A.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Query the European JWST Archive for ObsCore entries observed before 2024 (MJD 60309) and save them to a file.",
        "response": "stilts tapquery tapurl=https://jwst.esac.esa.int/server/tap adql='SELECT * FROM ivoa.ObsCore WHERE t_max < 60309.0' out=jwst_pre2024.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "What's the command to generate a MOC from UNIQ values in the `HPX_PIXEL` column?",
        "response": "stilts mocshape in=healpix_list.fits shape=uniq coords=HPX_PIXEL out=uniq_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Query the Heidelberg service for the first 10 rows of the RAVE DR5 catalog.",
        "response": "stilts tapquery tapurl=http://dc.zah.uni-heidelberg.de/__system__/tap/run/tap adql='SELECT TOP 10 * FROM rave.main5' out=rave_dr5_sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot a histogram normalized such that the maximum bar height is 1.",
        "response": "stilts plot2plane in=data.fits layer=histogram x=VALUE normalise=maximum out=max_norm_hist.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Copy a table and output the result in the **TST format** (Tab-Separated Table).",
        "response": "stilts tcopy in=input.fits out=output.tst ofmt=tst",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Retrieve all rows from the PADC Maser catalogue and locally sort the result by the frequency column in descending order.",
        "response": "stilts tapquery tapurl=http://voparis-tap-maser.obspm.fr/tap adql='SELECT * FROM maser_catalog' ocmd='sort -down freq' out=maser_sorted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot markers (size 5, filled triangle up) for objects only in the southern hemisphere (DEC < 0).",
        "response": "stilts plot2sky in=all_sky.fits icmd='select \"DEC < 0\"' layer=mark lon=RA lat=DEC size=5 shape=filled_triangle_up out=southern_marks.png",
        "chat.jar": "fixed",
        "error": "Error: Table processing error\n    (Bad expression \"DEC < 0\" (The name \"DEC\" is unknown.)\n        (The name \"DEC\" is unknown.))\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Match targets.fits against ref.fits. Targets coordinates are in sexagesimal RA_HMS, DEC_DMS strings. Match ref (RA, DEC degrees) with 2 arcsec tolerance.",
        "response": "stilts tmatch2 in1=targets.fits in2=ref.fits matcher=sky params=2 values1='hmsToDegrees(RA_HMS) dmsToDegrees(DEC_DMS)' values2='RA DEC' out=sexagesimal_match_3.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Add a column 'MAG_MOD' converting magnitude to distance modulus (DM) to parsecs, and add a constant column 'H_0' (H0=70).",
        "response": "stilts tpipe in=data.fits cmd='addcol MAG_MOD modulusToDistance(MAG_V)' cmd='addcol H_0 70.0' out=distance_conversion.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Retrieve 10 columns from the simplest table available at the MAST STScI Registry TAP service, running synchronously.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/registry adql='SELECT TOP 10 ivoid FROM reg.resource' sync=true out=mast_registry_sample.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Replace a faulty proper motion column 'PM' with the calculated hypotenuse of PMRA and PMDEC, only for rows where PM is null.",
        "response": "stilts tpipe in=data.fits cmd='replacecol PM \"NULL_PM ? hypot(PMRA, PMDEC) : PM\"' out=data_repaired.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '?' 'hypot(PMRA,' 'PMDEC)' ':' 'PM'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol PM NULL_PM ? hypot(PMRA, PMDEC) : PM\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '?' 'hypot(PMRA,' 'PMDEC)' ':' 'PM'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "I have two tables, `lightcurve_a.csv` and `lightcurve_b.csv`. I want to concatenate them and then get a statistical summary of the result.",
        "response": "stilts tcat ifmt=csv in=lightcurve_a.csv in=lightcurve_b.csv omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Draw density contours (log scaling, 8 levels) over an all-sky plot, saving as compressed FITS.",
        "response": "stilts plot2sky in=large_cat.fits layer=contour lon=RA lat=DEC scaling=log nlevel=8 projection=aitoff out=log_contour_aitoff.fits.gz",
        "chat.jar": "fixed",
        "error": "Error: Bad value for parameter ofmt: null value not allowed\nUsage: ofmt=png|png-transp|gif|jpeg|pdf|svg|eps|eps-gzip\n\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Filter rows to keep only the 5th through 10th row (inclusive).",
        "response": "stilts tpipe in=data.fits cmd='rowrange 5 10' out=middle_five.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Find the coverage MOC (order 11) where the radius is determined by $log_{10}(text{FLUX})$ (in degrees, assuming flux is large).",
        "response": "stilts pixfoot in=log_flux_data.fits ra=RA dec=DEC radius='log10(FLUX)' order=11 out=log_flux_radius.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint of all objects classified as 'GALAXY' in `object_list.ecsv`.",
        "response": "stilts pixfoot in=object_list.ecsv ifmt=ecsv icmd='select CLASS==\"GALAXY\"' out=galaxy_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Draw a small field of view (0.001 degree radius) centered at RA=0, DEC=0, forcing coordinate labels to be decimal (sex=false).",
        "response": "stilts plot2sky in=micro_field.fits clon=0 clat=0 radius=0.001 layer=mark lon=RA lat=DEC sex=false out=decimal_zoom.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Concatenate four IPAC format files and save the final output as a single FITS file.",
        "response": "stilts tcat ifmt=ipac in='log1.tbl log2.tbl log3.tbl log4.tbl' ofmt=fits out=ipac_to_fits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Generate a MOC from an ObsCore table using the `s_region` column. Save the output in JSON format.",
        "response": "stilts mocshape in=obscore_results.fits shape=stc-s coords=s_region mocfmt=json out=obscore_footprint.json",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Filter rows to keep only those where the proper motion in DEC is negative.",
        "response": "stilts tpipe in=gaia.fits cmd='select \"PMDEC < 0.0\"' out=negative_pmdec.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '<' '0.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PMDEC < 0.0\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Draw polygon outlines from an array column, coloring them based on the Auxiliary magnitude MAG, using the 'paux' shading mode.",
        "response": "stilts plot2sky in=regions.fits layer=polygon coords=VERTICES polymode=outline shading=paux aux=MAG pmap=paired out=paux_mag_outline.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad value for parameter lon: null value not allowed\nUsage: lon=<deg-expr>\n\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Create a MOC from the rows where the error in position (`POS_ERR_DEG`) is less than 0.01 degrees.",
        "response": "stilts pixfoot in=positions.fits icmd='select \"POS_ERR_DEG < 0.01\"' out=high_precision_positions.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '<' '0.01'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select POS_ERR_DEG < 0.01\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.01'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Match `data1.fits` and `data2.fits` using `skyerr_q` and a scale parameter of 2.0.",
        "response": "stilts tmatch2 in1=data1.fits in2=data2.fits matcher=skyerr_q params=2.0 values1='RA DEC ERR' values2='RA DEC ERR' out=skyerrq_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Assert that the number of good rows ($nrow) is within a defined range.",
        "response": "stilts tpipe in=data.fits cmd='assert \"$nrow >= 1000L && $nrow <= 100000L\"' out=size_checked.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '1000L' '&&' '$nrow' '<=' '100000L'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: assert $nrow >= 1000L && $nrow <= 100000L\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '1000L' '&&' '$nrow' '<=' '100000L'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Find the checksum of the table containing the access URL and target name for the 5 most recent Subaru HDS spectra observations.",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/hds/ adql='SELECT TOP 5 access_url, target_name FROM hds.spectrum ORDER BY t_max DESC' omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Join a HAPI stream file with a FITS file.",
        "response": "stilts tcatn nin=2 in1=data.hapi in2=data.fits out=combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Count the number of objects classified solely as 'G' (Galaxy) in the NED TAP object table.",
        "response": "stilts tapquery tapurl=https://ned.ipac.caltech.edu/tap/ adql='SELECT COUNT(*) FROM object WHERE obj_type = ''G''' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Match T1 and T2 on 2D Cartesian coordinates (X, Y). T1 position only includes the first 50 rows.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='head 50' in2=T2.fits matcher=2d params=1 values1='X Y' values2='X Y' out=T1_head_2d.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Query the ESA Euclid TAP service for its column descriptions and pipe the output directly to TOPCAT.",
        "response": "stilts tapquery tapurl=https://eas.esac.esa.int/tap-server/tap adql='SELECT column_name, description FROM TAP_SCHEMA.columns' omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I have coordinates in radians (RA_RAD, DEC_RAD). Convert them to degrees for a point MOC.",
        "response": "stilts pixfoot in=rad_data.fits ra='radiansToDegrees(RA_RAD)' dec='radiansToDegrees(DEC_RAD)' out=rad_converted.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Query the IRSA TAP Service for a sample of the 2MASS PSC (allsky_2mass_psc) and output the result in HTML table format.",
        "response": "stilts tapquery tapurl=https://irsa.ipac.caltech.edu/TAP adql='SELECT TOP 10 ra, dec, j_m FROM allsky_2mass_psc' ofmt=html out=2mass_sample.html",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Query the MAST CAOM SIA service for images around M31 (lon 10.68, lat 41.27) with a search radius of 0.5 degrees, specifically requesting the FITS image format.",
        "response": "stilts cone serviceurl=https://mast.stsci.edu/vo-tap/api/v0.1/caom lon=10.68 lat=41.27 radius=0.5 servicetype=sia dataformat=image/fits out=m31_sia_results.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Retrieve 100 PanSTARRS 1 DR1 sources and calculate the absolute G magnitude locally (G_abs) assuming parallax is available.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ps1dr1 adql='SELECT TOP 100 * FROM dbo.detection_object' ocmd='addcol G_ABS g_mag-5*log10(parallax)+5' out=ps1_abs_g.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot points with variable size and color, using the auxiliary scaling function 'sqrt'.",
        "response": "stilts plot2plane in=data.fits layer=size x=X y=Y size=S shading=aux aux=C auxfunc=sqrt out=sqrt_aux_size.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Filter the table to keep rows where 'PMRA' is numerically positive.",
        "response": "stilts tpipe in=gaia.fits cmd='select \"PMRA > 0.0\"' out=positive_pmra.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '0.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PMRA > 0.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Generate an all-sky density map (skydensity, level 5) combining the median of 'MAG' values per pixel.",
        "response": "stilts plot2sky in=data.fits layer=skydensity lon=RA lat=DEC level=5 weight=MAG combine=median out=median_mag_hpx5.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Synchronously query Hubble Source Catalog v3 for 100 entries and output in plain ASCII format to standard output.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/hsc/ adql='SELECT TOP 100 hst_id, ra, dec, f555w_mag FROM hsc_v3.point' sync=true ofmt=ascii out=-",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Find MAST PanSTARRS 1 DR2 objects near RA 200, Dec 50, within 0.05 degrees, and apply a post-processing command to remove null values from the `g_mean_mag` column (replacing with -99).",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ps1dr2 adql='SELECT * FROM dbo.detection_object WHERE 1=CONTAINS(POINT(''ICRS'', ra, dec), CIRCLE(''ICRS'', 200.0, 50.0, 0.05))' ocmd='replaceval null -99 g_mean_mag' out=ps2_clean_mag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I need to combine an ECSV file and a HAPI data stream piped via standard input, outputting the row count.",
        "response": "cat hapi_data.hapi | stilts tcatn nin=2 in1=local.ecsv ifmt1=ecsv in2=- ifmt2=hapi omode=count",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Can you generate a MOC for my data and save it as a JSON file named `celestial_tapestry.moc.json`?",
        "response": "stilts mocshape in=my_data.fits mocfmt=json shape=point coords='array(RA,DEC)' out=celestial_tapestry.moc.json",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Query ARI Gaia for 50 records and compute the checksum of the resulting data block.",
        "response": "stilts tapquery tapurl=https://gaia.ari.uni-heidelberg.de/tap adql='SELECT TOP 50 * FROM gaiadr3.gaia_source' omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Convert a Parquet file to a Feather file, preserving the column-oriented structure.",
        "response": "stilts tcopy in=input.parquet out=output.fea",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Start a quick asynchronous query on the European JWST Archive and ensure the job is deleted immediately upon command exit using delete=now.",
        "response": "stilts tapquery tapurl=https://jwst.esac.esa.int/server/tap adql='SELECT TOP 5 * FROM ivoa.ObsCore' delete=now out=jwst_small.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Add a column 'LOG_PM' applying log scaling to proper motion (hypot(PMRA, PMDEC)).",
        "response": "stilts tpipe in=gaia.fits cmd='addcol LOG_PM \"log10(hypot(PMRA, PMDEC))\"' out=log_pm.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'PMDEC))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol LOG_PM log10(hypot(PMRA, PMDEC))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PMDEC))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Query the Subaru SXDS v1.0 service for point sources with R magnitude less than 23.",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/sxds_v1 adql='SELECT ra, dec, r_mag FROM sxds.point_source WHERE r_mag < 23' out=sxds_r23.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I need to perform two steps on `raw_data.csv`: first, select rows where `QUALITY_FLAG == 0`, and second, sort the result by `TIMESTAMP`. Save the final table as `clean_sorted_data.vot`.",
        "response": "stilts tpipe ifmt=csv in=raw_data.csv cmd='select \"QUALITY_FLAG == 0\"' cmd='sort \"TIMESTAMP\"' ofmt=votable out=clean_sorted_data.vot",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '==' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select QUALITY_FLAG == 0\n\nUsage: select <expr>\n    (Unused arguments: '==' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Match two tables on position (5 arcsec) and magnitude (0.5 mag) where the combined matcher uses multiplication (sky*1d).",
        "response": "stilts tmatch2 in1=P1.fits in2=P2.fits matcher=sky*1d params='5 0.5' values1='RA DEC MAG' values2='RA DEC MAG' out=multiplied_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Combine three tables, keeping only the 'ID', 'X', and 'Y' columns from all of them.",
        "response": "stilts tcatn nin=3 in1=t1.fits icmd1='keepcols \"ID X Y\"' in2=t2.fits icmd2='keepcols \"ID X Y\"' in3=t3.fits icmd3='keepcols \"ID X Y\"' out=minimal.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Find 100 stars from ARI Gaia with proper motion greater than 100 mas/yr, requiring authentication for the query.",
        "response": "stilts tapquery tapurl=https://gaia.ari.uni-heidelberg.de/tap adql='SELECT TOP 100 source_id FROM gaiadr3.gaia_source WHERE SQRT(pmra*pmra + pmdec*pmdec) > 100' auth=true out=ari_auth_pm.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Create a MOC from the positions in a `tst` file.",
        "response": "stilts pixfoot in=my_data.tst ifmt=tst out=tst_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Plot points with X and Y error bars, using the 'filled_ellipse' shape for the error regions.",
        "response": "stilts plot2plane in=errors.fits layer=xyerror x=X y=Y xerrhi=EX yerrhi=EY errorbar=filled_ellipse out=filled_error_ellipse.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Query the Subaru MOIRCS data service for 10 records and compute the checksum of the resulting table.",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/moircs adql='SELECT TOP 10 * FROM moircs.summary' omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Can you query the cone search service at http://www3.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/argus/cone? I'm looking for objects around longitude 290.5568 and latitude 51.4663. Please use a search radius of 1.1522 degrees. Save the results to a votable file called query_results_136.votable. After the query, please run this processing command: 'sorthead 20 MAG'. Use verbosity level 2.",
        "response": "stilts cone servicetype=cone serviceurl=http://www3.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/argus/cone lon=290.5568 lat=51.4663 radius=1.1522 verb=2 omode=out ofmt=votable out=query_results_136.votable ocmd=\"sorthead 20 MAG\"",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Find the total number of sources in the MAST SkyMapper DR4 catalogue.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/skymapperdr4/ adql='SELECT COUNT(*) FROM smssdr4.master' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Find all rows in `catalog_A.fits` that do not have a match in `catalog_B.fits` within 2 arcsec.",
        "response": "stilts tmatch2 in1=catalog_A.fits in2=catalog_B.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=1not2 out=A_not_in_B.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Plot points, coloring them based on density and applying a linear function scaling to the density values.",
        "response": "stilts plot2sky in=data.fits layer=mark lon=RA lat=DEC shading=density densefunc=linear out=linear_density_sky.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Convert a FITS file to VOTable, ensuring the output is written in **BINARY2** serialization.",
        "response": "stilts tcopy in=data.fits ofmt='votable(format=BINARY2)' out=data_binary2.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Retrieve the positional data from the MAST SkyMapper DR4 master catalogue and locally convert the coordinates to the Galactic system.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/skymapperdr4/ adql='SELECT TOP 100 ra, dec FROM smssdr4.master' ocmd='addskycoords icrs galactic ra dec glon glat' out=smss_galactic.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Sort the table by the logical expression 'MAG_G < 15' (brighter stars first), then output the entire table, displaying all its metadata.",
        "response": "stilts tpipe in=stars.fits cmd='sort \"MAG_G < 15\"' omode=meta",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: sort MAG_G < 15\n\nUsage: sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n    (Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Combine tables, adding a column named 'FULL_PATH' that contains the absolute filesystem path or URL of the input table for each row.",
        "response": "stilts tcat in='data/obs1.fits http://remote/obs2.fits' loccol=FULL_PATH out=provenance_tracked.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Retrieve source IDs and coordinates from the MAST PanSTARRS 1 DR2 catalogue, then locally add a column containing the value 'PS2' for all rows.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ps1dr2 adql='SELECT TOP 50 ra, dec FROM dbo.detection_object' ocmd='addcol SURVEY ''PS2''' out=ps2_tagged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Group match three catalogs (C1, C2, C3). C2 has columns X, Y, Z. C1 and C3 use R, G, B colors. Match on (X, Y) and (R, G) combined (2d+2d_anisotropic, 5, 0.1, 0.2).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d+2d_anisotropic params='5 0.1 0.2' values1='X Y R G' values2='X Y R G' values3='X Y R G' in1=C1.fits in2=C2.fits in3=C3.fits out=mixed_space_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "My table uses `wdc` format. Can you generate a MOC from it?",
        "response": "stilts pixfoot in=solar_data.wdc ifmt=wdc out=solar_data_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Synchronously count the number of distinct observation IDs in the ESA Euclid archive.",
        "response": "stilts tapquery tapurl=https://eas.esac.esa.int/tap-server/tap adql='SELECT COUNT(DISTINCT obs_id) FROM ivoa.ObsCore' sync=true omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Merge photometric data and output the result mode as `stats`, calculating the Median and Median Absolute Deviation (ScMedAbsDev) for MAG.",
        "response": "stilts tcat in='mag1.fits mag2.fits' ocmd='keepcols \"MAG\"' omode=stats ocmd='keepcols \"Median ScMedAbsDev\"'",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'ScMedAbsDev'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols Median ScMedAbsDev\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'ScMedAbsDev'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcat"
    },
    {
        "prompt": "Create a MOC from a file where the RA column needs to be fixed with `ra = ra % 360`.",
        "response": "stilts mocshape in=wrapped_ra.fits icmd='replacecol ra \"ra % 360\"' shape=point coords='array(ra,dec)' out=unwrapped_ra.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Count the number of non-null parallax measurements in the MAST Gaia DR3 source table.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/gaiadr3/ adql='SELECT COUNT(parallax) FROM gaiadr3.gaia_source' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Sort the table by RA in ascending order, ensure the output table name is 'Sorted Catalog', and output the metadata only.",
        "response": "stilts tpipe in=cat.fits cmd='sort RA' cmd='tablename \"Sorted Catalog\"' omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Set the UCD of the 'REDSHIFT' column to 'spect.z' and the unit to 'dimensionless'.",
        "response": "stilts tpipe in=z_cat.fits cmd='colmeta -ucd spect.z -units dimensionless REDSHIFT' out=z_metadata.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Check for and remove any columns whose values are identical across all rows, even if some values are null (constant-valued columns).",
        "response": "stilts tpipe in=meta.fits cmd='constcol -acceptnull' out=non_constant.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Query the XMM-Newton XCATDB for sources, select those with R-band flux (`rflux`) greater than 1e-12, and send the results to TOPCAT.",
        "response": "stilts tapquery tapurl=https://xcatdb.unistra.fr/xtapdb adql='SELECT * FROM dbo.xcat_source WHERE rflux > 1E-12' omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Concatenate three tables, preserving only columns that appear in all three tables, defined by their names.",
        "response": "stilts tcatn nin=3 in1=C1.fits in2=C2.fits in3=C3.fits ocmd='keepcols \"intersect(C1.*, C2.*, C3.*)\"' out=common_cols_intersect.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'C2.*,' 'C3.*)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols intersect(C1.*, C2.*, C3.*)\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'C2.*,' 'C3.*)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Plot a 2D histogram (grid) with 200 bins in X and the default in Y, counting raw points.",
        "response": "stilts plot2plane in=data.fits layer=grid x=X y=Y xbinsize=-200 combine=count out=grid_x200_count.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Create an MOC (order 19) for sources with a fixed radius defined by 1 arcsecond divided by 100.",
        "response": "stilts pixfoot in=sub_as.fits ra=RA dec=DEC radius='(1.0 / 100.0) / 3600.0' order=19 out=sub_arcsec_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Plotting error bars using 'filled_rectangle' style.",
        "response": "stilts plot2plane in=err.fits layer=xyerror x=X y=Y xerrhi=XE yerrhi=YE errorbar=filled_rectangle out=filled_rect_err.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Convert a VOTable to FITS, ensuring column metadata is preserved using the **FITS-plus** convention.",
        "response": "stilts tcopy in=input.vot ofmt=fits-plus out=metadata_rich.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Create a MOC where the radius is defined by 60 arcseconds divided by 60, resulting in 1 arcsecond.",
        "response": "stilts pixfoot in=sources.fits ra=RA dec=DEC radius='60.0 / 3600.0 / 60.0' out=one_arcsec_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a plot and show it in a GUI window instead of saving to a file.",
        "response": "stilts plot2plane in=data.fits layer=mark x=X y=Y",
        "chat.jar": "fixed",
        "error": "Error: Bad value for parameter omode: Unknown value \"gui\" - must be one of swing, out, cgi, discard, auto\nUsage: omode=swing|out|cgi|discard|auto\n\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Query the UCL DaCHS server for 100 rows from the available tables, ensuring the output is compressed via HTTP (gzip) for efficiency.",
        "response": "stilts tapquery tapurl=http://astroweb.projects.phys.ucl.ac.uk:8000/tap adql='SELECT TOP 100 * FROM TAP_SCHEMA.tables' compress=true out=ucl_sample.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "My second table has coordinates in radians. Convert them to degrees before concatenating with the first table.",
        "response": "stilts tcatn nin=2 in1=t1_deg.fits in2=t2_rad.fits icmd2='replacecol RA_DEG radiansToDegrees(RA_RAD); replacecol DEC_DEG radiansToDegrees(DEC_RAD)' ocmd='keepcols \"RA_DEG DEC_DEG\"' out=degrees.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I need to ensure my streamed table is cached for a multi-pass operation. How do I force caching?",
        "response": "stilts tpipe in=streamed_data.vot cmd=cache cmd='sort SOME_COLUMN' out=sorted_from_stream.vot",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Merge tables, filtering the output to keep rows where 'TIME' is after MJD 59000, and asserting that the row count is greater than 100.",
        "response": "stilts tcat in='obs*.fits' ocmd='select \"isoToMjd(TIME) > 59000\"' ocmd='assert \"$nrow > 100\"' out=recent_obs_assert.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '59000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select isoToMjd(TIME) > 59000\n\nUsage: select <expr>\n    (Unused arguments: '>' '59000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcat"
    },
    {
        "prompt": "Generate a plot using the densogram layer, sizing the bar height to 15 pixels and positioning it at 90% of the plot height.",
        "response": "stilts plot2plane in=data.fits layer=densogram x=VALUE size=15 pos=0.9 out=high_densogram.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "I have an ASCII file with three columns: ID, RA, Dec. How do I make a footprint?",
        "response": "stilts mocshape in=id_ra_dec.txt ifmt=ascii shape=point coords='array($2, $3)' out=id_ra_dec.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Count the total number of objects classified as 'HII' region in the SIMBAD database.",
        "response": "stilts tapquery tapurl=http://simbad.cds.unistra.fr/simbad/sim-tap adql='SELECT COUNT(*) FROM basic WHERE otype = ''HII''' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot the X and Y columns against each other using `omode=topcat`.",
        "response": "The `plot2plane` command itself generates a plot. To send the *table* to TOPCAT, you would use `tpipe in=data.fits omode=topcat`. `plot2plane` does not have an `omode=topcat`.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Plot error ellipses (skyellipse) where the radius is calculated as 'ERR_DEG * 2.0'.",
        "response": "stilts plot2sky in=errors.fits layer=skyellipse lon=RA lat=DEC ra='ERR_DEG * 2.0' rb=0.0 posang=0 unit=degree out=doubled_radius_ellipse.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Take `sources.txt` and `detections.txt` (both ASCII format), combine them, and then sort the result by the `ID` column.",
        "response": "stilts tcat ifmt=ascii in=sources.txt in=detections.txt ocmd='sort ID' out=sorted_detections.txt",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Find the coverage for objects where the radius is defined by $\text{PMRA} / 100$ in degrees.",
        "response": "stilts pixfoot in=pmra_scaled.fits ra=RA dec=DEC radius='PMRA / 100.0' out=pmra_scaled_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Add a column 'Z_VEL' that converts redshift (Z) to velocity (km/s) using the formula c * Z.",
        "response": "stilts tpipe in=data.fits cmd='addcol Z_VEL \"Z * C_KMS / 1000.0\"' out=z_velocity.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '*' 'C_KMS' '/' '1000.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol Z_VEL Z * C_KMS / 1000.0\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '*' 'C_KMS' '/' '1000.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Combine two survey sections. Output the joined table as a multi-table VOTable file with BINARY2 encoding.",
        "response": "stilts tcatn nin=2 in1=S1.fits in2=S2.fits ofmt='votable(format=BINARY2)' out=binary2_concat.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Retrieve a sample query from the ASI SSDC TAP Service and output the result in the verbose TABLEDATA VOTable format.",
        "response": "stilts tapquery tapurl=https://tools.ssdc.asi.it/TAPSSDC/tap adql='SELECT TOP 5 * FROM ivoa.ObsCore' ofmt='votable(format=TABLEDATA)' out=ssdc_tabledata.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Query the FUB server for EPN-TAP observations taken after a specific MJD date (e.g., MJD 59000).",
        "response": "stilts tapquery tapurl=http://dachs.planet.fu-berlin.de/tap adql='SELECT target_name, t_min FROM epn_core.epn_core WHERE t_min > 59000.0' out=recent_epn.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Convert a Feather file to a CSV file, outputting to standard output.",
        "response": "stilts tcopy in=data.fea ofmt=csv out=-",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Query the Pollux Synthetic Spectra service for its core table listing, explicitly using the VQL language.",
        "response": "stilts tapquery tapurl=https://pollux.oreme.org/vo/datalink/speconvol? adql='SELECT * FROM pollux_models' language=VQL out=pollux_vql_models.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Combine a FITS file and a VOTable, adding a column to the combined table indicating the original file's sequence index.",
        "response": "stilts tcatn nin=2 in1=c1.fits in2=c2.vot seqcol=TabIndex out=indexed_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Match T1 and T2 using a combined sky and 2D anisotropic criterion (sky+2d_anisotropic). Tolerances: 1 arcsec, 0.1, 0.05 units.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky+2d_anisotropic params='1 0.1 0.05' values1='RA DEC P1 P2' values2='RA DEC P1 P2' out=complex_aniso_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Plot a HEALPix map and degrade its resolution by a factor of 16 (degrade=4), calculating the mean value (combine=mean).",
        "response": "stilts plot2sky in=hpx_map.fits layer=healpix value=VALUE degrade=4 combine=mean out=hpx_degrade4_mean.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Match T_REF against T2, T3. T2 only includes the first 50 rows. T3 only includes rows where 'TYPE' is 'GALAXY'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.fits icmd2='head 50' in3=T3.fits icmd3='select TYPE==\"GALAXY\"' out=filtered_mixed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Read data from the WDC format and save it as FITS.",
        "response": "stilts tcopy in=wdc_flux.txt ifmt=wdc out=wdc_flux.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Ensure that the table has random access available and use 'progress' to monitor the read.",
        "response": "stilts tpipe in=slow_stream.fits cmd=random cmd=progress out=fast_read_monitor.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Copy a VOTable file to a FITS file, preserving the VOTable metadata in the Primary HDU.",
        "response": "stilts tcopy in=input.vot out=output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Find objects around RA 15h, Dec -15d, converting RA to degrees, using 30 arcseconds as the search radius.",
        "response": "stilts cone serviceurl=http://simbad.cds.unistra.fr/simbad/sim-tap lon='hmsToDegrees(15.0, 0, 0)' lat=-15.0 radius='30.0 / 3600.0' out=simbad_30as.vot",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter lon: For input string: \"hmsToDegrees(15.0, 0, 0)\"\nUsage: lon=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Start an asynchronous query to PanSTARRS DR2 for deep sources (n_det_g > 50) and allow 1 hour (3600 seconds) maximum execution time.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ps1dr2 adql='SELECT * FROM dbo.detection_object WHERE n_det_g > 50' executionduration=3600 out=ps1_deep_job.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Generate a histogram of the 'REDSHIFT' column from galaxies.csv, using 50 bins.",
        "response": "stilts plot2plane in=galaxies.csv ifmt=csv layer=histogram x=REDSHIFT binsize=-50 out=z_hist.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"REDSHIFT\"\n    (The name \"REDSHIFT\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Concatenate tables, filtering each input to calculate the square root of the 'AREA' column before joining.",
        "response": "stilts tcat in='a1.fits a2.fits' icmd='addcol SQRT_AREA sqrt(AREA)' ocmd='keepcols SQRT_AREA' out=sqrt_area_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 349.9851 and latitude 59.407. Please use a search radius of 0.8001 degrees. Save the results to a ascii file called query_results_88.ascii.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=349.9851 lat=59.407 radius=0.8001 omode=out ofmt=ascii out=query_results_88.ascii",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Combine a table of galaxies and a table of stars, adding a 'TYPE' column to each before joining.",
        "response": "stilts tcatn nin=2 in1=gals.fits icmd1='addcol TYPE \"GALAXY\"' in2=stars.fits icmd2='addcol TYPE \"STAR\"' out=classified.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Query the MAST PanSTARRS DR2 and calculate statistics on the R-band magnitude, locally ensuring null values are replaced by -99.9 before statistics calculation.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ps1dr2 adql='SELECT r_mag FROM dbo.detection_object' ocmd='replaceval null -99.9 r_mag' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I need the separation column and the row count for a cone search (radius 1 arcsec) against Gaia TAP near RA 50, Dec 10.",
        "response": "stilts cone serviceurl=https://gea.esac.esa.int/tap-server/tap lon=50.0 lat=10.0 radius='1.0 / 3600.0' omode=count",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"1.0 / 3600.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Query the Official ALMA Table Access (EA server at NAOJ) asynchronously, allowing a job execution duration of 2 hours (7200 seconds).",
        "response": "stilts tapquery tapurl=https://almascience.nao.ac.jp/tap adql='SELECT TOP 100 * FROM ivoa.ObsCore' executionduration=7200 out=alma_long_job.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Draw polygon outlines from an array column, forcing the minimum shape representation size to 1 pixel (minsize=1).",
        "response": "stilts plot2sky in=regions.fits layer=polygon coords=VERTICES polymode=outline minsize=1 out=min_size1_outline.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad value for parameter lon: null value not allowed\nUsage: lon=<deg-expr>\n\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Copy a Feather file to an uncompressed FITS file.",
        "response": "stilts tcopy in=large.fea out=large.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Find sources in the MAST HSCv3 catalogue around Galactic L=280, B=-50, with a radius of 0.0001 degrees, and pipe the result to a checksum calculation.",
        "response": "stilts cone serviceurl=https://mast.stsci.edu/vo-tap/api/v0.1/hsc/ lon=280.0 lat=-50.0 radius=0.0001 skysys=galactic omode=checksum",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Find all rows from `table1.fits` that have a match in `table2.fits`, and also all rows from `table2.fits` that have a match in `table1.fits`. A match is within 3 arcsec.",
        "response": "stilts tmatch2 in1=table1.fits in2=table2.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' join=1and2 out=all_matched_rows.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Crossmatch T_A and T_B using a combination of sky position (2 arcsec) and magnitude (0.1 tolerance) multiplied together (sky*1d).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky*1d params='2 0.1' values1='RA DEC MAG' values2='RA DEC MAG' out=pos_mag_multiplied.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Query the MAST CAOM/ObsCore service for HST data taken before MJD 52000 (pre-2001) and output the result table in VOTable BINARY2 format.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/caom adql='SELECT obsid, t_min FROM ivoa.ObsCore WHERE facility_name = ''HST'' AND t_min < 52000' ofmt='votable(format=BINARY2)' out=hst_early.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Read a multi-table VOTable and output all tables as a single FITS file, implicitly selecting the first table from the VOTable.",
        "response": "stilts tcopy in=multi_table.vot out=first_table.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Find all pairs (find=all) between catalog_A.fits and catalog_B.fits using a 10 pixel 2D Cartesian match (X, Y).",
        "response": "stilts tmatch2 in1=catalog_A.fits in2=catalog_B.fits matcher=2d params=10 values1='X Y' values2='X Y' find=all out=all_2d_pairs.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Create a MOC for sources with a signal-to-noise ratio > 10.",
        "response": "stilts pixfoot in=detections.fits icmd='select \"SNR > 10\"' out=high_snr_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select SNR > 10\n\nUsage: select <expr>\n    (Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Combine three VOTables, enforcing that the output is written in VOTable format using the compact mode to minimize XML whitespace.",
        "response": "stilts tcat in='v1.vot v2.vot v3.vot' ofmt='votable(compact=true)' out=compact_merge.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Plot error ellipses (skyellipse) where the radius is calculated as 'ERR_DEG * 2.0'.",
        "response": "stilts plot2sky in=errors.fits layer=skyellipse lon=RA lat=DEC ra='ERR_DEG * 2.0' rb=0.0 posang=0 unit=degree out=doubled_radius_ellipse.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Retrieve the top 10 ObsCore rows from the European JWST Archive and output the result in FITS format.",
        "response": "stilts tapquery tapurl=https://jwst.esac.esa.int/server/tap adql='SELECT TOP 10 * FROM ivoa.ObsCore' ofmt=fits out=jwst_sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Combine three tables. T2 has an extra header parameter 'PROC_VERSION'. Include this parameter as a scalar column 'Version' in the final output.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits icmd2='addcol Version \"param$PROC_VERSION\"' in3=T3.fits ocmd='keepcols \"Version *\"' out=with_version_col.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '*'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols Version *\n\nUsage: keepcols <colid-list>\n    (Unused arguments: '*'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables and enforce that the output table format is FITS-plus, including the rich metadata.",
        "response": "stilts tcat in='m1.fits m2.fits' ofmt=fits-plus out=metadata_rich_b.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Add a column 'ANG_SEP_RAD' calculating the angular separation between two RA/DEC pairs, ensuring the output is in radians.",
        "response": "stilts tpipe in=pairs.fits cmd='addcol ANG_SEP_RAD skyDistanceRadians(RA1,DEC1,RA2,DEC2)' out=sep_radians.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Submit an asynchronous job to the ESO TAP_CAT service and ensure continuous logging of job status updates.",
        "response": "stilts tapquery tapurl=http://archive.eso.org/tap_cat adql='SELECT TOP 1000 * FROM tap_schema.tables' progress=true out=eso_cat_status.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Generate a MOC (order 13) for points, filtering the input to keep only rows where the magnitude MAG is non-null.",
        "response": "stilts pixfoot in=mag_data.fits icmd='select !NULL_MAG' ra=RA dec=DEC radius=0 order=13 out=non_null_mag_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the rows where the `MAG_ERROR` is at its minimum value for the whole table.",
        "response": "stilts mocshape in=photometry.fits icmd='select MAG_ERROR==minimum(MAG_ERROR)' shape=point coords='array(RA,DEC)' out=best_photometry.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "My table has two radius columns, `R1` and `R2`. I need to use the larger of the two for the MOC.",
        "response": "stilts mocshape in=radii.fits shape=circle coords='array(RA,DEC,max(R1,R2))' out=max_radius.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Plotting transparency shading (opaque=5) on fixed size markers.",
        "response": "stilts plot2plane in=crowd.fits layer=mark x=X y=Y shading=transparent opaque=5 size=3 out=trans_o5.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Synchronously query the PADC helio server for a small sample of tables and count the rows.",
        "response": "stilts tapquery tapurl=http://voparis-tap-helio.obspm.fr/tap adql='SELECT TOP 10 * FROM tap_schema.tables' sync=true omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Join three tables, all of which are gzipped FITS files.",
        "response": "stilts tcatn nin=3 in1=t1.fits.gz in2=t2.fits.gz in3=t3.fits.gz out=all.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Match T_A against itself to find all pairs within 2 arcsec. Exclude matches with identical row indices (i.e., self-matches).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_A.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' find=all ocmd='select \"ID_1 < ID_2\"' out=internal_pairs_unique.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '<' 'ID_2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ID_1 < ID_2\n\nUsage: select <expr>\n    (Unused arguments: '<' 'ID_2'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Upload a simulated 1000 row table to Gaia and crossmatch it against Gaia DR3 within 1 arcsec, saving to FITS.",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap adql='SELECT u.source_id AS query_id, g.source_id AS match_id FROM gaiadr3.gaia_source AS g JOIN TAP_UPLOAD.s1 AS u ON 1=CONTAINS(POINT(''ICRS'', g.ra, g.dec), CIRCLE(''ICRS'', u.ra, u.dec, 0.0002777))' nupload=1 upload1=:skysim:1000 upname1=s1 ofmt=fits out=gaia_xmatch.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Filter my table `events.fits` to only include the last 1000 events.",
        "response": "stilts tpipe in=events.fits cmd='tail 1000' out=last_1000_events.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Start an asynchronous job on the ESA Euclid archive, setting the job policy to never automatically delete the job, and running silently (no progress reports).",
        "response": "stilts tapquery tapurl=https://eas.esac.esa.int/tap-server/tap adql='SELECT * FROM ivoa.ObsCore WHERE obs_collection = ''Euclid''' delete=never progress=false out=euclid_silent_persistent.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Filter out null magnitude rows, convert RA/Dec from radians, and then create an order 10 point MOC.",
        "response": "stilts mocshape in=rad_mag_data.fits icmd='select !NULL_MAG' shape=point coords='array(radiansToDegrees(RA_R), radiansToDegrees(DEC_R))' order=10 out=clean_rad_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Combine tables A and B. For table B, remove a complex data column 'POLYGON_VERTICES' before concatenation.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits icmd2='delcols POLYGON_VERTICES' out=polygon_removed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables, applying an input filter to remove rows where the magnitude 'MAG' is null.",
        "response": "stilts tcat in='m1.fits m2.fits' icmd='select !NULL_MAG' out=non_null_mag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Search the PADC TAP Server (voparis-tap-astro-m.obspm.fr) using Galactic coordinates L=270, B=1, with radius 30 mas.",
        "response": "stilts cone serviceurl=http://voparis-tap-astro-m.obspm.fr/tap lon=270.0 lat=1.0 radius='30.0 / 3600000.0' skysys=galactic out=padc_30mas_gal.fits",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"30.0 / 3600000.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Plot a cumulative histogram using reverse accumulation (reverse cumulative).",
        "response": "stilts plot2plane in=data.fits layer=histogram x=VALUE cumulative=reverse out=reverse_cumul.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Add a column 'ERROR_COND_9' that is 1.0 if 'ERR_A' is not equal to 'ERR_B', and 0.0 otherwise, using strict comparison.",
        "response": "stilts tpipe in=data.fits cmd='addcol ERROR_COND_9 \"!equals(toString(ERR_A), toString(ERR_B)) ? 1.0 : 0.0\"' out=conditional_error_9.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'toString(ERR_B))' '?' '1.0' ':' '0.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol ERROR_COND_9 !equals(toString(ERR_A), toString(ERR_B)) ? 1.0 : 0.0\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'toString(ERR_B))' '?' '1.0' ':' '0.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "My table has FK4 coords and a radius in arcmin. How to make a J2000 MOC?",
        "response": "stilts mocshape in=fk4_data.fits icmd='addskycoords fk4 fk5 RA_FK4 DEC_FK4 RA_J2000 DEC_J2000' shape=circle coords='array(RA_J2000,DEC_J2000,RADIUS_ARCMIN/60.0)' out=fk4_to_fk5_circles.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Add a column 'UCD_TEST' and explicitly set its UCD to an arbitrary value, 'phot.flux;em.xray', and its UType to 'xray_flux'.",
        "response": "stilts tpipe in=data.fits cmd='addcol -ucd \"phot.flux;em.xray\" -utype xray_flux UCD_TEST 1.0' out=xray_meta.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Find sources in VizieR TAP near 12h 00m 00s, -15d 00m 00s, converting to degrees, with a radius of 0.05 degrees, using verbose mode (verb=3).",
        "response": "stilts cone serviceurl=https://tapvizier.cds.unistra.fr/TAPVizieR/tap lon='hmsToDegrees(12.0, 0, 0)' lat='dmsToDegrees(-15.0, 0, 0)' radius=0.05 verb=3 out=vizier_verbose.vot",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter lon: For input string: \"hmsToDegrees(12.0, 0, 0)\"\nUsage: lon=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Retrieve metadata for all columns in the ESO TAP_CAT service.",
        "response": "stilts tapquery tapurl=http://archive.eso.org/tap_cat adql='SELECT * FROM TAP_SCHEMA.columns' omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Retrieve the top 10 ULLYSES HLSP observations and output the result in the verbose VOTable TABLEDATA serialization format.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ullyses/ adql='SELECT TOP 10 * FROM ivoa.ObsCore' ofmt='votable(format=TABLEDATA)' out=ullyses_tabledata.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Query the SIMBAD basic catalog and limit the retrieved results to the first 100 rows using a post-processing command.",
        "response": "stilts tapquery tapurl=http://simbad.cds.unistra.fr/simbad/sim-tap adql='SELECT * FROM basic' ocmd='head 100' out=simbad_head100.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Show density contours over my scatter plot.",
        "response": "stilts plot2plane in=cluster.fits layer_m=mark x_m=RA y_m=DEC layer_c=contour x_c=RA y_c=DEC smooth_c=4",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Query the PADC TAP Maser service for a sample of tables and retrieve only the resulting row count.",
        "response": "stilts tapquery tapurl=http://voparis-tap-maser.obspm.fr/tap adql='SELECT COUNT(*) FROM TAP_SCHEMA.tables' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I have an ASCII file with three columns: ID, RA, Dec. How do I make a footprint?",
        "response": "stilts mocshape in=id_ra_dec.txt ifmt=ascii shape=point coords='array($2, $3)' out=id_ra_dec.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 is a simulated attractor (:attractor:1000,clifford). Match on X, Y coordinates (1 unit 2D match).",
        "response": "stilts tmatch2 in1=:attractor:1000,clifford in2=T2.fits matcher=2d params=1 values1='x y' values2='X Y' out=attractor_2d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Plotting a cumulative reverse histogram (cumulative=reverse).",
        "response": "stilts plot2plane in=data.fits layer=histogram x=VALUE cumulative=reverse out=cumul_reverse.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "I have a HEALPix map table. Generate an MOC that precisely represents the coverage of all UNIQ pixels in the table, at order 10.",
        "response": "stilts mocshape in=hpx_cells.fits shape=uniq coords=UNIQ_ID order=10 out=uniq_reconstructed.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Match two tables using position. T1 has errors E1, T2 has errors E2. Match radius is proportional to the quadrature sum of errors (skyerr_q) scaled by 1.5.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skyerr_q params=1.5 values1='RA DEC E1' values2='RA DEC E2' out=scaled_quad_error.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Create an MOC for objects around Ecliptic Lon 150, Lat 10, with a radius of 60 arcseconds, converting the coordinates internally.",
        "response": "stilts mocshape in=ecl_targets.fits icmd='addskycoords ecliptic icrs ELON ELAT RA_ICRS DEC_ICRS' shape=circle coords='array(RA_ICRS, DEC_ICRS, 60.0 / 3600.0)' out=ecl_60as_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Convert an ASCII table to a FITS file, explicitly reading it as ASCII format.",
        "response": "stilts tcopy in=unstructured.txt ifmt=ascii out=structured.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Generate an ASCII MOC for objects where the year of observation (`OBS_YEAR`) is 2023.",
        "response": "stilts mocshape in=obs_log.fits icmd='select OBS_YEAR==2023' shape=point coords='array(RA,DEC)' mocfmt=ascii out=obs_2023.moc.txt",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Draw lines connecting positions (R1, D1) and (R2, D2) from the same row, thickness 2 pixels.",
        "response": "stilts plot2sky in=paths.fits layer=link2 lon1=R1 lat1=D1 lon2=R2 lat2=D2 thick=2 out=thick_sky_path.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"R1\"\n    (The name \"R1\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Generate a coverage map only for sources with positive flux.",
        "response": "stilts pixfoot in=flux_cat.fits icmd='select \"FLUX > 0\"' ra=RA dec=DEC out=positive_flux_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Show error bars only in the y-direction.",
        "response": "stilts plot2plane in=errors.fits layer=xyerror x=X y=Y yerrhi=Y_ERR",
        "chat.jar": "fixed",
        "error": "Error: Bad value for parameter layer: Unknown value \"yerror\" - must be one of mark, size, sizexy, xyvector, xyerror, xyellipse, xycorr, link2, mark2, poly4, mark4, polygon, area, central, lines, marks, handles, yerrors, xyerrors, statline, statmark, arrayquantile, line, linearfit, label, arealabel, contour, grid, fill, quantile, histogram, kde, knn, densogram, gaussian, function\nUsage: layer=<layer-type> <layer-specific-params>\n\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Replace the string 'N/A' with a null value in the `comment` column of `notes.csv`.",
        "response": "stilts tpipe ifmt=csv in=notes.csv cmd='replaceval \"N/A\" null comment' ofmt=csv out=notes_fixed.csv",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Convert a FITS table to a CSV file, explicitly suppressing the column header line.",
        "response": "stilts tcopy in=header_fits.fits ofmt='csv(header=false)' out=data_only.csv",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Join A.fits and B.fits. A is a huge catalog; use the rowrange filter on A to process only rows 10,000 to 20,000.",
        "response": "stilts tmatch2 in1=A.fits icmd1='rowrange 10000 20000' in2=B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=subset_rowrange_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Plot vectors (in mas/yr) using the 'small_filled_dart' shape, coloring by density using the 'magma' map.",
        "response": "stilts plot2sky in=v_data.fits layer=skyvector lon=RA lat=DEC dlon=PMRA dlat=PMDEC unit=mas arrow=small_filled_dart shading=density densemap=magma out=magma_dart_density.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Draw filled polygons defined by coordinate arrays, coloring them flat magenta.",
        "response": "stilts plot2sky in=polygons.fits layer=polygon coords=VERTICES polymode=fill shading=flat color=magenta out=filled_magenta_polygons.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad value for parameter lon: null value not allowed\nUsage: lon=<deg-expr>\n\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Plot a KDE estimate using the Epanechnikov kernel and a smoothing width equivalent to 50 bins across the plot (-50).",
        "response": "stilts plot2plane in=data.fits layer=kde x=VALUE kernel=epanechnikov smooth=-50 out=kde_e_50.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Convert a local FITS file to a VOTable, explicitly setting the output version to 1.5 (latest standard).",
        "response": "stilts tcopy in=new_data.fits ofmt='votable(version=V15)' out=v15_out.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "I have `ra_h`, `ra_m`, `ra_s` and `dec_d`, `dec_m`, `dec_s`. How do I make the MOC?",
        "response": "stilts pixfoot in=sexagesimal_parts.fits ra='hmsToDegrees(ra_h,ra_m,ra_s)' dec='dmsToDegrees(dec_d,dec_m,dec_s)' out=sexagesimal_parts.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 19 JSON MOC, filtering the input to only the first 50 rows, demonstrating high resolution on a subset.",
        "response": "stilts mocshape in=full_cat.fits icmd='head 50' shape=point coords='array(RA, DEC)' order=19 mocfmt=json out=head50_o19.json",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Merge data.fits with a table generated by summing the fluxes from an array column 'FLUX_ARRAY'.",
        "response": "stilts tcatn nin=2 in1=data.fits in2='tpipe in=spec.fits cmd=\"addcol TOTAL_FLUX sum(FLUX_ARRAY)\"' out=total_flux_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Query the JVO ALMA VO Service for ObsCore entries where the project code starts with '2016' and save the maximum 100 rows found.",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/alma adql='SELECT * FROM alma.obscore WHERE project_code LIKE ''2016.%''' maxrec=100 out=alma_2016.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Find the coverage for objects where the radius is $5$ arcseconds squared (not the area, just the value $25/3600$ deg).",
        "response": "stilts pixfoot in=sq_as.fits ra=RA dec=DEC radius='(5.0 * 5.0) / 3600.0' out=sq_as_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Query the CADC Archive for the top 20 ObsCore entries matching the CFHT facility name.",
        "response": "stilts tapquery tapurl=https://ws.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/argus adql='SELECT TOP 20 * FROM ivoa.ObsCore WHERE facility_name = ''CFHT''' out=cadc_cfht.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I need to view just the header of an IPAC table file.",
        "response": "You can use `tpipe` for that with `omode=meta`. A `tcopy` approach would be `stilts tcopy ifmt=ipac in=data.tbl icmd='head 0' ofmt=text` to show the column headers.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcopy"
    },
    {
        "prompt": "Merge tables, replacing the magnitude column 'gmag' with a corrected value 'gmag - 0.05' in the final output.",
        "response": "stilts tcat in='raw1.fits raw2.fits' ocmd='replacecol gmag \"gmag - 0.05\"' out=corrected_mags.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '-' '0.05'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol gmag gmag - 0.05\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '-' '0.05'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcat"
    },
    {
        "prompt": "How can I combine `tile_1.fits`, `tile_2.fits`, and `tile_3.fits` and also keep track of the original filename for each row in a new column called `OriginFile`?",
        "response": "stilts tcat in=tile_1.fits in=tile_2.fits in=tile_3.fits loccol=OriginFile out=mosaic.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Find all SDSS QSOs from VizieR (VII/288/milliquas7) with redshift > 5.",
        "response": "stilts tapquery tapurl=http://tapvizier.u-strasbg.fr/tap adql='SELECT Name, z FROM \"VII/288/milliquas7\" WHERE Type=\"Q\" AND z > 5' out=high_z_quasars.txt",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Combine tables, filtering each input to remove the column 'RA_ERROR' before proceeding.",
        "response": "stilts tcat in='c1.fits c2.fits' icmd='delcols RA_ERROR' out=no_ra_error.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Count the number of quasars in the GAVO DC SDSS DR16 QSO catalog with redshift greater than 1.0.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT COUNT(*) FROM sdss.dr16qso WHERE z > 1.0' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Convert an ECSV file to FITS, supplying an **external YAML header** file for metadata overriding.",
        "response": "stilts tcopy in=plain.csv ifmt='ecsv(header=external.yaml)' out=with_yaml_meta.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Create an order 17 MOC and output the result using VOTable BINARY serialization (via CDS FITS MOC).",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=17 mocfmt=fits ofmt='votable(format=BINARY)' out=binary_vot_moc.vot",
        "chat.jar": "fixed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"cds_fits\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the footprint for all sources in the file `candidates.fits` at order 11.",
        "response": "stilts mocshape in=candidates.fits order=11 shape=point coords='array(RA,DEC)' out=candidates_o11.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Crossmatch T_MAIN and T_SUPP (sky 3 arcsec). Find the best match for T_SUPP rows (best2). Include a column 'BestSep' containing the separation score.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' find=best2 scorecol=BestSep out=best2_scored_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "I'm merging files like `obs_2023_field1.vot` and `obs_2023_field2.vot`. Can you create a new column 'FieldID' that just contains 'field1' and 'field2'?",
        "response": "stilts tcat in=\"obs_2023_field1.vot obs_2023_field2.vot\" uloccol=FieldID out=obs_2023_merged.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Generate a MOC from `ipac_table.tbl` at order 9.",
        "response": "stilts pixfoot in=ipac_table.tbl ifmt=ipac order=9 out=ipac_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My table has FK4 coordinates. Can I generate a MOC directly?",
        "response": "No, MOCs are defined in ICRS. You must first convert the coordinates using a filter: `stilts mocshape in=fk4.fits icmd='addskycoords fk4 fk5 RA_FK4 DEC_FK4 RA_ICRS DEC_ICRS' shape=point coords='array(RA_ICRS, DEC_ICRS)' out=fk4_converted.moc.fits`",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "mocshape"
    },
    {
        "prompt": "I have a VOTable `my_targets.vot` and a CSV `reference_catalog.csv`. How do I find all counterparts in the reference catalog within 5 arcseconds of my targets? Coordinates are `RA_DEG`, `DEC_DEG` in the VOTable and `ra`, `dec` in the CSV.",
        "response": "stilts tmatch2 in1=my_targets.vot ifmt2=csv in2=reference_catalog.csv out=target_counterparts.fits matcher=sky params=5 values1='RA_DEG DEC_DEG' values2='ra dec' find=all",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Match A.fits and B.fits using position AND parallax (sky3d). T_B parallax is in arcsec; convert to mas (1 arcsec = 1000 mas) before using in 3D matching (100 pc tolerance).",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits icmd2='replacecol PLX PLX*1000.0' matcher=sky3d params=100 values1='RA DEC 1000/PLX' values2='RA DEC 1000/PLX' out=parallax_unit_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Concatenate tables, and add a column 'IS_NEAR' that is true if the 'DISTANCE' column is less than 10 kpc.",
        "response": "stilts tcat in='d1.fits d2.fits' ocmd='addcol IS_NEAR \"DISTANCE < 10\"' out=near_flagged.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '<' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_NEAR DISTANCE < 10\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '<' '10'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcat"
    },
    {
        "prompt": "Merge tables that use Galactic coordinates (GLON, GLAT) and convert them to Ecliptic coordinates (ELON, ELAT) before joining.",
        "response": "stilts tcatn nin=2 in1=G1.fits icmd1='addskycoords galactic ecliptic GLON GLAT ELON_1 ELAT_1' in2=G2.fits icmd2='addskycoords galactic ecliptic GLON GLAT ELON_2 ELAT_2' out=ecliptic_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Convert 'data.fits' to VOTable, but explicitly request VOTable version 1.0.",
        "response": "stilts tcopy in=data.fits ofmt='votable(version=V10)' out=v10_data.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Draw filled polygons from STC-S strings, coloring them translucent blue, ensuring the thickness of any remaining outlines is 2 pixels.",
        "response": "stilts plot2sky in=regions.fits layer=area area=S_REGION areatype=STC-S polymode=fill color=blue transparency=0.4 thick=2 out=stcs_filled_transp.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"S_REGION\"\n    (The name \"S_REGION\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "I have columns RA and DEC in hours/degrees. Convert them to degrees before creating a point MOC.",
        "response": "stilts mocshape in=hms_data.fits icmd='replacecol RA hmsToDegrees(RA); replacecol DEC dmsToDegrees(DEC)' shape=point coords='array(RA, DEC)' out=hms_converted_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Query a service and use an output filter to convert the position angle (POS_ANG) from radians to degrees.",
        "response": "stilts cone serviceurl=http://dc.g-vo.org/tap lon=10.0 lat=10.0 radius=0.1 ocmd='replacecol POS_ANG radiansToDegrees(POS_ANG_RAD)' out=degrees_pa.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Verify that the total number of rows is exactly 5000 before proceeding.",
        "response": "stilts tpipe in=fixed_size.fits cmd='assert \"$nrow == 5000L\"' out=validated.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '5000L'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: assert $nrow == 5000L\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '5000L'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Create an order 5 MOC from polygons, ensuring the output uses standard JSON format.",
        "response": "stilts mocshape in=simple_polys.fits shape=polygon coords=VERTICES order=5 mocfmt=json out=simple_poly_o5.json",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Retrieve records from the VSA VISTA Science Archive VHS point source table, limiting the resulting number of records to 10,000.",
        "response": "stilts tapquery tapurl=http://tap.roe.ac.uk/vsa adql='SELECT * FROM vhs.point_source' maxrec=10000 out=vsa_limited.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I need data from the Europlanet Telescope Network Database TAP service near RA 30, Dec 30, using 20 arcminutes radius.",
        "response": "stilts cone serviceurl=http://parsec-europlanet.eu:81/tap lon=30.0 lat=30.0 radius='20.0 / 60.0' out=parsec_20am.fits",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"20.0 / 60.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Find all groups across my three tables (`t1, t2, t3`) and then, for each group, calculate the mean separation between members and the reference object in `t1`.",
        "response": "This is not a direct output. You would run `tmatchn` with `multimode=group` to get the groups. Then, in a separate step, you would need to join this result with the original tables and use `tpipe` with expressions like `skyDistanceDegrees` to calculate separations.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Concatenate four measurement files. Drop the 'SIGMA_CLIP' column from the first file, M1.fits.",
        "response": "stilts tcatn nin=4 in1=M1.fits icmd1='delcols SIGMA_CLIP' in2=M2.fits in3=M3.fits in4=M4.fits out=reduced_measurements.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Query the J-PLUS DR3 catalogue for 10 entries and output the result in FITS-plus format to retain rich metadata.",
        "response": "stilts tapquery tapurl=https://archive.cefca.es/catalogues/vo/tap/jplus-dr3 adql='SELECT TOP 10 * FROM jplus_dr3.master' ofmt=fits-plus out=jplus_rich_meta.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Use a script file (filter.txt) to define the filtering commands before creating a polygon MOC (order 12).",
        "response": "stilts mocshape in=input.fits icmd=@filter.txt shape=polygon coords=VERTICES out=scripted_poly.fits",
        "chat.jar": "fixed",
        "error": "Error: filter.txt (No such file or directory)\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Plot markers (size 5, filled triangle up) for objects only in the southern hemisphere (DEC < 0).",
        "response": "stilts plot2sky in=all_sky.fits icmd='select \"DEC < 0\"' layer=mark lon=RA lat=DEC size=5 shape=filled_triangle_up out=southern_marks.png",
        "chat.jar": "fixed",
        "error": "Error: Table processing error\n    (Bad expression \"DEC < 0\" (The name \"DEC\" is unknown.)\n        (The name \"DEC\" is unknown.))\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "What's the command to get a JSON MOC from a simulation of exactly 1 star?",
        "response": "stilts pixfoot in=:skysim:1 ra=ra dec=dec mocfmt=json out=single_star.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Combine `epoch1.fits`, `epoch2.fits`, `epoch3.fits`. Before matching, for each table, select only rows with a `FLUX_ERROR < 0.1`.",
        "response": "stilts tmatchn nin=3 in1=epoch1.fits in2=epoch2.fits in3=epoch3.fits icmd1='select \"FLUX_ERROR < 0.1\"' icmd2='select \"FLUX_ERROR < 0.1\"' icmd3='select \"FLUX_ERROR < 0.1\"' multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' out=clean_epoch_groups.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX_ERROR < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "List the column descriptions in the ESO Catalogue TAP service where the column name contains 'magnitude'.",
        "response": "stilts tapquery tapurl=http://archive.eso.org/tap_cat adql='SELECT column_name, description FROM TAP_SCHEMA.columns WHERE column_name LIKE ''%mag%''' out=eso_mag_desc.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Concatenate tables, and add a column 'IS_HIGH_ERR' that is true if 'ERROR' > 5.0.",
        "response": "stilts tcat in='err1.fits err2.fits' ocmd='addcol IS_HIGH_ERR \"ERROR > 5.0\"' out=high_err_flag.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '5.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_HIGH_ERR ERROR > 5.0\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '>' '5.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcat"
    },
    {
        "prompt": "Retrieve stellar abundance data from the Subaru SAGA database and locally sort the result by the stellar surface gravity column (LOGG).",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/saga adql='SELECT TOP 100 * FROM saga.stellar_abundances' ocmd='sort LOGG' out=saga_sorted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot error ellipses derived from correlation, ensuring the plot is displayed with the title 'Correlated Errors'.",
        "response": "stilts plot2sky in=errors.fits layer=skycorr lon=RA lat=DEC lonerr=EL laterr=EB corr=C title='Correlated Errors' out=titled_corr_plot.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Combine two VOTables, ensuring that the output is written in VOTable format with inline binary data (BINARY, inline=true).",
        "response": "stilts tcat in='v1.vot v2.vot' ofmt='votable(format=BINARY, inline=true)' out=inline_binary_vot.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "My radius is `R_PIX` pixels, and my plate scale is `SCALE_AS` arcsec/pixel. How do I make the MOC?",
        "response": "stilts pixfoot in=plate_data.fits radius='R_PIX * SCALE_AS / 3600.0' out=plate_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Plotting a densogram, reverse cumulative, size 15 pixels.",
        "response": "stilts plot2plane in=data.fits layer=densogram x=VALUE cumulative=reverse size=15 out=densogram_rev.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "I need the coverage for objects where the radius is $0.0001$ radians, converting from Ecliptic coordinates (Lon/Lat) in the input table.",
        "response": "stilts pixfoot in=ecl_rad.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='radiansToDegrees(0.0001)' out=ecl_rad_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Add a column 'ERROR_COND_10' that is 1.0 if 'ERR_A' is greater than 1.0 and 'ERR_B' is less than 0.5, and 0.0 otherwise.",
        "response": "stilts tpipe in=data.fits cmd='addcol ERROR_COND_10 \"(ERR_A > 1.0 && ERR_B < 0.5) ? 1.0 : 0.0\"' out=conditional_error_10.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '1.0' '&&' 'ERR_B' '<' '0.5)' '?' '1.0' ':' '0.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol ERROR_COND_10 (ERR_A > 1.0 && ERR_B < 0.5) ? 1.0 : 0.0\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '>' '1.0' '&&' 'ERR_B' '<' '0.5)' '?' '1.0' ':' '0.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Merge two tables, applying the 'fixcolnames' filter to both inputs and then outputting the combined result as a multi-extension FITS file.",
        "response": "stilts tcatn nin=2 in1=M1.fits icmd1='fixcolnames' in2=M2.fits icmd2='fixcolnames' ofmt=fits-plus out=clean_multi.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, and if the final table has a column 'FLAG', replace any instance of value 99 with null in that column.",
        "response": "stilts tcat in='f1.fits f2.fits' ocmd='replaceval 99 null FLAG' out=flag_cleaned_b.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Add a column 'MAX_FLUX_ARRAY' containing the maximum value of the array column 'FLUX_ARRAY'.",
        "response": "stilts tpipe in=spectra.fits cmd='addcol MAX_FLUX_ARRAY maximum(FLUX_ARRAY)' out=array_max.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Generate a MOC at the maximum supported resolution, order 29.",
        "response": "stilts mocshape in=small_area.fits order=29 shape=point coords='array(ra,dec)' out=max_resolution.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Plot position vectors (unit=arcsec), applying a filter to exclude vectors where PMRA is negative.",
        "response": "stilts plot2sky in=pm_cat.fits icmd='select \"PMRA >= 0\"' layer=skyvector lon=RA lat=DEC dlon=PMRA dlat=PMDEC unit=arcsec out=pos_pmra_vectors.png",
        "chat.jar": "fixed",
        "error": "Error: Table processing error\n    (Bad expression \"PMRA >= 0\" (The name \"PMRA\" is unknown.)\n        (The name \"PMRA\" is unknown.))\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Query MAST PanSTARRS 1 DR2 catalogue, requiring user authentication, and outputting the row count.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ps1dr2 adql='SELECT COUNT(*) FROM dbo.detection_object' auth=true omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot a histogram with `barform=spikes`.",
        "response": "stilts plot2plane in=data.fits layer=histogram x=VALUE barform=spikes",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Generate a plot where markers are shaded using the 'paux' mode (private aux map), using the 'plasma' color map.",
        "response": "stilts plot2plane in=data.fits layer=mark x=X y=Y shading=paux aux=Z pmap=plasma out=private_plasma_aux.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Retrieve MAST ULLYSES HLSP ObsCore entries and locally remove all columns except the target name and coordinates.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/ullyses/ adql='SELECT * FROM ivoa.ObsCore' ocmd='keepcols \"target_name s_ra s_dec\"' out=ullyses_minimal.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 's_ra' 's_dec'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols target_name s_ra s_dec\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 's_ra' 's_dec'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tapquery"
    },
    {
        "prompt": "Get all sources from Gaia DR3 within 10 arcmin of M31.",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap adql='SELECT source_id, ra, dec FROM gaiadr3.gaia_source WHERE 1=CONTAINS(POINT(\"ICRS\", ra, dec), CIRCLE(\"ICRS\", 10.6847, 41.2690, 10.0/60.0))' out=m31_stars.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Match two tables on 1D position (X) and 1D velocity (V) (1d+1d). T1 only includes rows where X > 1000.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='select \"X > 1000\"' in2=T2.fits matcher=1d+1d params='5 10' values1='X V' values2='X V' out=filtered_1d_1d.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '1000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select X > 1000\n\nUsage: select <expr>\n    (Unused arguments: '>' '1000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Join the last 500 rows of table A with the first 500 rows of table B.",
        "response": "stilts tcatn nin=2 in1=table_A.fits icmd1='tail 500' in2=table_B.fits icmd2='head 500' out=splice.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Retrieve 10 tables from the KSB-ROB TAP service and output the results in ECSV format.",
        "response": "stilts tapquery tapurl=http://vo-tap.oma.be/tap adql='SELECT TOP 10 * FROM TAP_SCHEMA.tables' ofmt=ecsv out=ksbrob_tables.ecsv",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Match T_A and T_B using symmetric best match (find=best). Ensure T_A columns use suffix '_A' and T_B columns use '_B'.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best fixcols=all suffix1=_A suffix2=_B out=symmetric_suffixed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Add a column 'AVG_MAG' calculated as the average of 'MAG_G' and 'MAG_R'.",
        "response": "stilts tpipe in=data.fits cmd='addcol AVG_MAG \"(MAG_G + MAG_R) / 2.0\"' out=avg_mag_calc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '+' 'MAG_R)' '/' '2.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol AVG_MAG (MAG_G + MAG_R) / 2.0\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'MAG_R)' '/' '2.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Match T_A and T_B on 3D Cartesian coordinates (X, Y, Z). Only find the best match for A (best1).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=3d params=1 values1='X Y Z' values2='X Y Z' find=best1 out=3d_best1_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Group match three tables. Output should include all columns, but columns from T2/T3 must be prefixed with '_B' and '_C'.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=A.fits in2=B.fits in3=C.fits fixcols=all suffix2=_B suffix3=_C out=full_suffixed_group_ABC.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Plot a histogram where the Y axis is normalized by the total area (normalise=area).",
        "response": "stilts plot2plane in=data.fits layer=histogram x=VALUE normalise=area out=area_normalized.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Join T1 and T2. T1 columns should use suffix '_1', T2 columns suffix '_2'. Only output the calculated separation score 'Sep' and the IDs.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=all suffix1=_1 suffix2=_2 scorecol=Sep ocmd='keepcols \"ID_1 ID_2 Sep\"' out=minimal_id_sep.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'ID_2' 'Sep'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols ID_1 ID_2 Sep\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'ID_2' 'Sep'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 101.8252 and latitude -16.4215. Please use a search radius of 1.1864 degrees. Save the results to a ascii file called query_results_172.ascii.",
        "response": "stilts cone servicetype=sia1 serviceurl=http://irsa.ipac.caltech.edu/sia lon=101.8252 lat=-16.4215 radius=1.1864 omode=out ofmt=ascii out=query_results_172.ascii",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "I need the MOC for rows 100 to 500 of my catalog.fits.",
        "response": "stilts pixfoot in=catalog.fits icmd='rowrange 100 500' ra=RA dec=DEC out=sample_rows.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Plot a scatter plot where the Y axis is symlog with the default threshold, and the X axis is asinh with linear width 10.",
        "response": "stilts plot2plane in=data.fits layer=mark x=X y=Y xscale='asinh(10)' yscale=symlog out=mixed_symlog_asinh.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Calculate the squared hypotenuse of X and Y columns and add it as a new column named 'R_SQ'.",
        "response": "stilts tpipe in=data.fits cmd='addcol R_SQ hypot(X,Y)*hypot(X,Y)' out=data_rsq.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Concatenate tables, and add an integer column 'ROW_NUMBER' representing the final row index (starting at 1).",
        "response": "stilts tcat in='d1.fits d2.fits' ocmd='addcol ROW_NUMBER $0' out=row_indexed_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "How do I combine the results from two different `tpipe` commands?",
        "response": "stilts tcatn nin=2 in1='<stilts tpipe ... ofmt=fits' ifmt1=fits in2='<stilts tpipe ... ofmt=fits' ifmt2=fits out=combined_pipes.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Create an MOC (order 6) and filter the input to only include rows with positive magnitude (MAG).",
        "response": "stilts pixfoot in=positive_mag.fits icmd='select \"MAG > 0\"' ra=RA dec=DEC order=6 out=pos_mag_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Force the output table to stream to standard output, ensuring only tables that require sequential access are preserved.",
        "response": "stilts tpipe in=data.fits cmd=seqview ofmt=fits out=-",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Transpose the table so that rows become columns and columns become rows.",
        "response": "stilts tpipe in=data.fits cmd=transpose out=data_transposed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Query MAST HSCv3, performing a simple synchronous query and outputting the table to standard output as raw text.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/hsc/ adql='SELECT TOP 5 ra, dec FROM hsc_v3.point' sync=true ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Can you query the cone search service at http://archive.stsci.edu/hst/search.php? I'm looking for objects around longitude 187.5751 and latitude 55.6096. Please use a search radius of 1.2092 degrees. Save the results to a votable file called query_results_80.votable.",
        "response": "stilts cone servicetype=cone serviceurl=http://archive.stsci.edu/hst/search.php lon=187.5751 lat=55.6096 radius=1.2092 omode=out ofmt=votable out=query_results_80.votable",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Query the MAST 3D-HST HLSP service for photometric data, sorting results by redshift (`z_best`) descending.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/3dhst/ adql='SELECT TOP 100 * FROM 3dhst.photometry ORDER BY z_best DESC' out=3dhst_z_sorted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I want the MOC for all sources in `my_data.fits` that are NOT near the Andromeda galaxy (within 1 degree).",
        "response": "stilts mocshape in=my_data.fits icmd='select \"skyDistanceDegrees(RA,DEC,10.6847,41.2690) > 1\"' shape=point coords='array(RA,DEC)' out=not_andromeda.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistanceDegrees(RA,DEC,10.6847,41.2690) > 1\n\nUsage: select <expr>\n    (Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Convert a Feather file 'results.fea' to a VOTable document.",
        "response": "stilts tcopy in=results.fea out=results.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Combine tables from a list provided in a file named `inputs.txt`, enabling lazy reading to conserve file handles.",
        "response": "stilts tcat in=@inputs.txt lazy=true out=lazy_combined_data.fits",
        "chat.jar": "fixed",
        "error": "Error: inputs.txt (No such file or directory)\n",
        "cmd": "tcat"
    },
    {
        "prompt": "Match T1 and T2. T1 is remote FITS. T2 needs conversion of string date 'DATE_STR' to MJD before matching on MJD (0.01 day tolerance).",
        "response": "stilts tmatch2 in1=http://remote.com/T1.fits in2=T2.fits icmd2='replacecol MJD isoToMjd(DATE_STR)' matcher=1d params=0.01 values1=MJD values2=MJD out=remote_date_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Find all possible pairs between `dense_field_A.fits` and `dense_field_B.fits` within 10 arcseconds. I want to see the separation in arcseconds in a column named 'AngSep'.",
        "response": "stilts tmatch2 in1=dense_field_A.fits in2=dense_field_B.fits matcher=sky params=10 values1='RA DEC' values2='RA DEC' find=all scorecol=AngSep out=all_pairs.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "I want to match four tables. After finding the groups, I only want to see groups that have exactly four members (one from each table).",
        "response": "stilts tmatchn nin=4 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 suffix4=_4 ocmd='select !NULL_ID_1&&!NULL_ID_2&&!NULL_ID_3&&!NULL_ID_4' out=complete_quartets.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Add a description to the table: 'Survey data filtered for bright sources.'.",
        "response": "stilts tpipe in=data.fits cmd='setparam -desc \"Survey data filtered for bright sources.\" TITLE \"My Survey\"' out=described.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Concatenate two tables, T_LEFT and T_RIGHT. For T_RIGHT, filter out rows where the 'ERROR' column is negative.",
        "response": "stilts tcatn nin=2 in1=T_LEFT.fits in2=T_RIGHT.fits icmd2='select \"ERROR >= 0\"' out=positive_error_only_concat.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ERROR >= 0\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Create a MOC from every 1000th point of a 2 million star simulation.",
        "response": "stilts pixfoot in=:skysim:2e6 icmd='every 1000' ra=ra dec=dec out=sim_2M_sparse.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Group match four tables (T1-T4) on a 1D magnitude value (MAG) within a 0.2 tolerance.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=1d params=0.2 values1=MAG values2=MAG values3=MAG values4=MAG in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits out=mag_1d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Concatenate two tables, but only keep the columns: 'ID' and any column whose name starts with 'PM'.",
        "response": "stilts tcat in='c1.fits c2.fits' ocmd='keepcols \"ID PM*\"' out=id_pm_subset.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Find the earliest recorded spectrum in the Subaru HDS Spectrum data service and retrieve its observation time (`T_MAX`).",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/hds/ adql='SELECT T_MAX FROM hds.spectrum ORDER BY T_MIN ASC LIMIT 1' out=hds_earliest_time.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Convert the table to FITS format, ensuring that the original column names (which contain spaces) are fixed to be valid FITS column names.",
        "response": "stilts tpipe in=messy_cols.fits cmd=fixcolnames ofmt=fits out=fixed_fits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Plot H-alpha sources in Galactic coordinates using the Plate Carr\u00e9e projection, centered at L=90, B=0, with a 30 degree radius.",
        "response": "stilts plot2sky in=halpha.fits viewsys=galactic clon=90.0 clat=0.0 radius=30.0 projection=car layer=mark lon=L lat=B out=gal_halpha_zoom.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"L\"\n    (The name \"L\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Combine `cat_a.fits` and `cat_b.fits`, but only keep the 'ID', 'RA', and 'DEC' columns from both before joining.",
        "response": "stilts tcatn nin=2 in1=cat_a.fits icmd1='keepcols \"ID RA DEC\"' in2=cat_b.fits icmd2='keepcols \"ID RA DEC\"' out=common_cols.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Plot two sky grids: Equatorial (red) and Galactic (blue), both semi-transparent (transparency=0.5 for the Galactic grid).",
        "response": "stilts plot2sky viewsys=equatorial layer_g1=skygrid gridsys_g1=equatorial gridcolor_g1=red layer_g2=skygrid gridsys_g2=galactic gridcolor_g2=blue transparency_g2=0.5 out=dual_transp_grid.png",
        "chat.jar": "executed successfully",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Count the number of objects classified as 'Earth' in the PADC Planetary core observation catalogue, running the query synchronously.",
        "response": "stilts tapquery tapurl=http://voparis-tap-planeto.obspm.fr/tap adql='SELECT COUNT(*) FROM epn_core.epn_core WHERE target_name = ''Earth''' sync=true omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Merge files, and if the column 'MASS' contains null values, replace them globally with the constant value 1.0e-5.",
        "response": "stilts tcat in='m1.fits m2.fits' ocmd='replaceval null 1.0e-5 MASS' out=mass_nulls_fixed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Crossmatch T1 and T2 using sky position (1 arcsec) AND proper motion in RA (PMRA) within 2 mas/yr (sky+1d).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky+1d params='1 2' values1='RA DEC PMRA' values2='RA DEC PMRA' out=pos_pmra_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Apply a sequence of filters: ensure random access by caching, select rows where 'FLAG' is true, and shuffle the result.",
        "response": "stilts tpipe in=data.fits cmd=cache cmd='select FLAG' cmd=shuffle out=cached_filtered_shuffled.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Concatenate two tables, applying a filter to each input that converts string magnitude 'MAG_STR' to double 'MAG_DBL' before merging.",
        "response": "stilts tcat in='s1.fits s2.fits' icmd='addcol MAG_DBL parseDouble(MAG_STR)' out=string_to_double.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Query the Gaia DR3 archive to get the first 100 sources and save them to a FITS file named `gaia_sample.fits`.",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap adql='SELECT TOP 100 * FROM gaiadr3.gaia_source' out=gaia_sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Copy an input table but output the result as a multi-line, readable **text** output format to the terminal.",
        "response": "stilts tcopy in=archive.fits ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "I have coordinates in hours, minutes, seconds (RA_HMS, DEC_DMS). Convert them to degrees and create a point MOC.",
        "response": "stilts mocshape in=hms_cat.fits icmd='replacecol RA hmsToDegrees(RA_HMS); replacecol DEC dmsToDegrees(DEC_DMS)' shape=point coords='array(RA, DEC)' out=hms_to_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "I need a polygon MOC where the input vertices are in two separate columns (X_VEC, Y_VEC) holding array coordinates.",
        "response": "stilts mocshape in=arrays.fits shape=polygon coords='interleave(X_VEC, Y_VEC)' out=interleaved_poly.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Merge a simulated sky catalogue of 5000 stars with a local survey catalog survey.fits.",
        "response": "stilts tcatn nin=2 in1=:skysim:5000 in2=survey.fits out=sim_and_real.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables, filtering each input to only retain rows where the geometric column 'RA' is between 100 and 150 degrees.",
        "response": "stilts tcat in='c1.fits c2.fits' icmd='select \"RA > 100 && RA < 150\"' out=ra_range_filter.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '100' '&&' 'RA' '<' '150'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select RA > 100 && RA < 150\n\nUsage: select <expr>\n    (Unused arguments: '>' '100' '&&' 'RA' '<' '150'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcat"
    },
    {
        "prompt": "Create an MOC (order 11) for sources with a radius given by $\text{hypot}(\text{RA}, \text{DEC}) \times 0.001$ degrees.",
        "response": "stilts pixfoot in=coord_dist.fits ra=RA dec=DEC radius='hypot(RA, DEC) * 0.001' out=coord_dist_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Plot a HEALPix map (level 8) and calculate the minimum 'MAG' value per degraded pixel (degrade=2).",
        "response": "stilts plot2sky in=HPX.fits layer=healpix value=MAG degrade=2 combine=min out=min_mag_hpx_degrade2.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"MAG\"\n    (The name \"MAG\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Combine `field_1.fits` with the results of a TAP query.",
        "response": "stilts tcatn nin=2 in1=field_1.fits in2='<stilts tapquery tapurl=... adql=... ofmt=fits' ifmt2=fits out=combined_with_tap.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Group match three tables, sorting the output by the total number of columns in the result (constant for all rows) followed by the magnitude descending.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 ocmd='sort \"$ncol -down MAG_1\"' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=sort_by_col_and_mag.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '-down' 'MAG_1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: sort $ncol -down MAG_1\n\nUsage: sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n    (Unused arguments: '-down' 'MAG_1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Perform a sky match between two tables, and in the output only keep rows from the first table that were matched.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' join=1and2 ocmd='keepcols \"*_1\"' out=t1_matched_rows.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Retrieve SIMBAD sources near M31 (RA 10.6, Dec 41.2, 0.05 deg radius), but locally filter the result to only keep the first 10 rows retrieved.",
        "response": "stilts tapquery tapurl=http://simbad.cds.unistra.fr/simbad/sim-tap adql='SELECT * FROM basic WHERE 1=CONTAINS(POINT(''ICRS'', ra, dec), CIRCLE(''ICRS'', 10.6, 41.2, 0.05))' ocmd='head 10' out=simbad_m31_small.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I have an ADQL query in `query.txt`. How do I use it and send the output to the GUI?",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap adql=@query.txt omode=gui",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plotting error bars using 'caps' style, colored red.",
        "response": "stilts plot2plane in=data.fits layer=xyerror x=X y=Y xerrhi=XE yerrhi=YE errorbar=caps color=red out=capped_red_err.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Plot the analytic function $y = \\exp(x)$ from $x=0$ to $x=5$, saving the output as PDF.",
        "response": "stilts plot2plane layer=function fexpr='exp(x)' xmin=0 xmax=5 out=exp_curve.pdf",
        "chat.jar": "executed successfully",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Concatenate the first table extension from three different FITS archives: arc1.fits, arc2.fits, and arc3.fits.",
        "response": "stilts tcat in=arc1.fits#1 in=arc2.fits#1 in=arc3.fits#1 out=first_extensions.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Create a high-resolution MOC (order 15) from a simulated all-sky catalog of 100,000 stars and output it to standard output.",
        "response": "stilts pixfoot in=:skysim:100000 ra=ra dec=dec order=15 out=-",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Match three tables, T1, T2, T3. T2 needs filtering to only keep rows where magnitude MAG > 20 (faint objects).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=5 in1=T1.fits in2=T2.fits icmd2='select \"MAG > 20\"' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=faint_group_match.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG > 20\n\nUsage: select <expr>\n    (Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find the average effective temperature (Teff) in the Subaru SAGA stellar abundances table.",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/saga adql='SELECT AVG(Teff) FROM saga.stellar_abundances' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Concatenate two tables, but use a pipe `|` to separate values in the final CSV output.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ofmt='csv(delimiter=|)' out=pipe.csv",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Add a column 'RA_DMS_4' converting RA in degrees to DMS string format with 4 decimal places for seconds.",
        "response": "stilts tpipe in=coords.fits cmd='addcol RA_DMS_4 \"degreesToDms(RA, 4)\"' out=dms_ra_4s.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '4)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol RA_DMS_4 degreesToDms(RA, 4)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '4)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Match T1 and T2. T1 rows should always be included. T2 columns should use the suffix '_T2'. Match on exact ID.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID join=all1 fixcols=dups suffix2=_T2 out=left_outer_suffix.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Execute an SSA query against JVO's AKARI MIR-S spectroscopic catalog around RA 100, Dec 10, using 0.2 arcminutes.",
        "response": "stilts cone serviceurl=http://jvo.nao.ac.jp/skynode/do/tap/akari/spectrum/slitless_mir_spec lon=100.0 lat=10.0 radius='0.2 / 60.0' servicetype=ssa out=akari_0p2arcmin.vot",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"0.2 / 60.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Find objects from `cat_X.fits` and `cat_Y.fits` that are within 2 arcsec AND have a magnitude difference (`MAG`) of less than 0.25.",
        "response": "stilts tmatch2 in1=cat_X.fits in2=cat_Y.fits matcher=sky+1d params='2 0.25' values1='RA DEC MAG' values2='RA DEC MAG' out=pos_mag_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Concatenate two tables, then calculate the average 'FLUX' and maximum 'ERROR' across the resulting single column using `omode=stats`.",
        "response": "stilts tcat in='a.fits b.fits' ocmd='keepcols \"FLUX ERROR\"' omode=stats ocmd='keepcols \"Mean_FLUX Maximum_ERROR\"'",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'ERROR'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols FLUX ERROR\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'ERROR'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcat"
    },
    {
        "prompt": "Draw filled polygons defined by coordinate arrays, coloring them flat magenta.",
        "response": "stilts plot2sky in=polygons.fits layer=polygon coords=VERTICES polymode=fill shading=flat color=magenta out=filled_magenta_polygons.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad value for parameter lon: null value not allowed\nUsage: lon=<deg-expr>\n\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Search the GAVO Data Center near RA 150, Dec -15, using a radius of 1 degree divided by 3.",
        "response": "stilts cone serviceurl=http://dc.g-vo.org/tap lon=150.0 lat=-15.0 radius='1.0 / 3.0' out=gavo_third_deg.fits",
        "chat.jar": "skipped-operaton in param",
        "error": "Error: Bad value for parameter radius: For input string: \"1.0 / 3.0\"\nUsage: radius=<degrees>\n\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 49.6545 and latitude 44.7826. Please use a search radius of 1.0373 degrees. Save the results to a csv file called query_results_173.csv.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=49.6545 lat=44.7826 radius=1.0373 compress=true omode=out ofmt=csv out=query_results_173.csv",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Merge a table containing positions with a table containing proper motions (PM_RA, PM_DEC). For the latter, calculate a total proper motion magnitude 'PM_TOT'.",
        "response": "stilts tcatn nin=2 in1=pos.fits in2=pm.fits icmd2='addcol PM_TOT \"hypot(PM_RA, PM_DEC)\"' out=pm_magnitude_combined.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'PM_DEC)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PM_TOT hypot(PM_RA, PM_DEC)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PM_DEC)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Generate an ASCII MOC at order 9 for all objects classified as 'QSO'.",
        "response": "stilts mocshape in=classifications.fits icmd='select OBJ_TYPE==\"QSO\"' shape=point coords='array(RA,DEC)' order=9 mocfmt=ascii out=qso_coverage.moc.txt",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Retrieve the top 100 objects from the SuperCOSMOS Science Archive (SSA) and output the results in Parquet format.",
        "response": "stilts tapquery tapurl=http://tap.roe.ac.uk/ssa adql='SELECT TOP 100 * FROM sas_ir.atlas_point_source' ofmt=parquet out=ssa_sample.parquet",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Generate a JSON MOC for the footprint of all objects whose redshift (Z) is less than 0.01.",
        "response": "stilts mocshape in=z_data.fits icmd='select \"Z < 0.01\"' shape=point coords='array(RA, DEC)' order=10 mocfmt=json out=low_z_moc",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '<' '0.01'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Z < 0.01\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.01'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "My `csv` file has headerless columns. How do I reference them to make a MOC?",
        "response": "You can reference them by index, starting with `$1`. For example: `stilts mocshape in=data.csv ifmt=csv icmd='select $3>0' shape=point coords='array($1,$2)' out=data.moc.fits`",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "mocshape"
    },
    {
        "prompt": "Plot the sky density (skydensity, level 8) showing the sum of exposure time (EXPTIME) per steradian.",
        "response": "stilts plot2sky in=obs.fits layer=skydensity lon=RA lat=DEC level=8 weight=EXPTIME combine=sum-per-unit perunit=steradian out=exptime_steradian.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Query the GAVO Data Center for table names related to 'quasars' using synchronous mode, retrieving maximum 50 records.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT table_name FROM TAP_SCHEMA.tables WHERE description LIKE ''%quasar%''' sync=true maxrec=50 out=gavo_qso_tables.vot",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Plot the 50th percentile (median) line for noisy data, ensuring the smoothing width corresponds to approximately 20 bins across the plot (-20).",
        "response": "stilts plot2plane in=noisy.fits layer=quantile x=X y=Y quantiles=0.5 smooth=-20 join=lines out=median_smooth_20.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "I have a table of instrument pointings with a radius column in degrees. How can I generate the combined coverage MOC?",
        "response": "stilts mocshape in=pointings.vot shape=circle coords='array(RA, DEC, RADIUS_DEG)' out=pointing_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Generate a MOC for circles whose radius is given by the expression $\frac{\text{PI} \times 100}{3600}$ degrees.",
        "response": "stilts mocshape in=data.fits shape=circle coords='array(RA, DEC, PI * 100.0 / 3600.0)' out=pi_arcsec_rad.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Find the single best match (best1) from friends_stars.txt for each of my_stars.csv within 1 arcsec. Output formats specified.",
        "response": "stilts tmatch2 ifmt1=csv in1=my_stars.csv ifmt2=ascii in2=friends_stars.txt matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best1 out=our_best_matches.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Crossmatch three tables based on 3D anisotropic Cartesian coordinates (X, Y, Z) with tolerances 10, 5, and 1 units respectively.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=3d_anisotropic params='10 5 1' values1='X Y Z' values2='X Y Z' values3='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits out=anisotropic_3d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Replace null values in the 32-bit integer column 'INT_COL' with -999.",
        "response": "stilts tpipe in=data.fits cmd='replacecol INT_COL \"NULL_INT_COL ? -999 : INT_COL\"' out=int_fixed.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '?' '-999' ':' 'INT_COL'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol INT_COL NULL_INT_COL ? -999 : INT_COL\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '?' '-999' ':' 'INT_COL'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Combine multiple tables, adding a new column 'LOG_MASS' which is log10(MASS) calculated post-concatenation.",
        "response": "stilts tcatn nin=3 in1=M1.fits in2=M2.fits in3=M3.fits ocmd='addcol LOG_MASS log10(MASS)' out=log_mass_appended.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge T_GOOD and T_BAD. In T_BAD, replace all boolean 'TRUE' values in the 'FLAG' column with integer 1, and 'FALSE' with 0, before merging.",
        "response": "stilts tcatn nin=2 in1=T_GOOD.fits in2=T_BAD.fits icmd2='replacecol FLAG \"(FLAG ? 1 : 0)\"' out=boolean_to_int_merge.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '?' '1' ':' '0)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol FLAG (FLAG ? 1 : 0)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '?' '1' ':' '0)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Plot a KDE with a custom color and smoothing width.",
        "response": "stilts plot2plane in=data.fits layer=kde x=VALUE color=purple smooth=0.5",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Crossmatch T1 and T2 using position AND proper motion (sky+2d) with tolerances 1 arcsec, 8 mas/yr, 8 mas/yr. T1 proper motions are in degrees/year; convert to mas/yr.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='replacecol PMRA PMRA*3600000; replacecol PMDEC PMDEC*3600000' in2=T2.fits matcher=sky+2d_anisotropic params='1 8 8' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' out=pm_unit_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Join T1 and T2 using a right outer join (all T2 rows). T1 columns suffixed '_1', T2 columns suffixed '_2'. Match on position (5 arcsec).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' join=all2 fixcols=all suffix1=_1 suffix2=_2 out=right_outer_suffixed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Combine a VOTable with a table generated by looping 100 times, adding the loop index 'i' as a provenance column for the loop table.",
        "response": "stilts tcatn nin=2 in1=catalog.vot in2=:loop:100 uloccol=LoopIndex out=cat_plus_loop.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join T1 and T2 (sky 1 arcsec). Output table should only contain T1's RA, DEC, ID and the separation distance, named 'Sep_arcsec' in arcseconds.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' scorecol=Separation ocmd='replacecol Sep_arcsec \"Separation*3600\"; keepcols \"ID RA DEC Sep_arcsec\"' out=minimal_scored_arcsec.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'RA' 'DEC' 'Sep_arcsec'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was:  keepcols ID RA DEC Sep_arcsec\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'RA' 'DEC' 'Sep_arcsec'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 337.4196 and latitude 10.3233. Please use a search radius of 1.515 degrees. Save the results to a votable file called query_results_189.votable.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=337.4196 lat=10.3233 radius=1.515 omode=out ofmt=votable out=query_results_189.votable",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Plot a Gaussian curve fitted to the 'VELOCITY' data distribution, overlaying the original histogram.",
        "response": "stilts plot2plane in=velocities.fits layer_h=histogram x_h=VELOCITY color_h=grey layer_g=gaussian x_g=VELOCITY color_g=red out=gaussian_fit.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VELOCITY\"\n    (The name \"VELOCITY\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Query a service and explicitly name the output table extension 'MY_SOURCES'.",
        "response": "stilts cone serviceurl=http://dc.g-vo.org/tap lon=160.0 lat=10.0 radius=0.01 ocmd='tablename MY_SOURCES' out=named_table.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Plot markers sized independently in X (WID) and Y (LEN) directions, using 'filled_rectangle' shape.",
        "response": "stilts plot2plane in=blobs.fits layer=sizexy x=X_CEN y=Y_CEN xsize=WID ysize=LEN shape=filled_rectangle out=sizexy_rect.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X_CEN\"\n    (The name \"X_CEN\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Remove duplicate rows based only on the 'RA' column, assuming the table is already sorted by RA.",
        "response": "stilts tpipe in=duplicates.fits cmd='uniq RA' out=ra_unique.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Plot two disjoint regions (Area layer) specified by STC-S strings from the S_REGION column, setting the minshape to a fat cross.",
        "response": "stilts plot2sky in=regions.fits layer=area area=S_REGION areatype=STC-S polymode=outline minsize=5 minshape=fat_cross out=stcs_minshape.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"S_REGION\"\n    (The name \"S_REGION\" is unknown.)\n",
        "cmd": "plot2sky"
    },
    {
        "prompt": "Find objects from `catalog1.fits` that are NOT in `catalog2.fits`, based on a 1.5 arcsecond sky match. Coords are RAJ2000 and DEJ2000.",
        "response": "stilts tmatch2 in1=catalog1.fits in2=catalog2.fits matcher=sky params=1.5 values1='RAJ2000 DEJ2000' values2='RAJ2000 DEJ2000' join=1not2 out=unmatched_from_cat1.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "How do I add a secondary X axis showing velocity, calculated from a redshift Z axis?",
        "response": "stilts plot2plane in=data.fits layer=mark x=Z y=FLUX x2func='(pow(1+x,2)-1)/(pow(1+x,2)+1) * 299792.458' x2label='Velocity (km/s)'",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"Z\"\n    (The name \"Z\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Can you query the cone search service at http://archive.stsci.edu/hst/search.php? I'm looking for objects around longitude 280.4818 and latitude 43.8263. Please use a search radius of 1.2846 degrees. Save the results to a csv file called query_results_104.csv. The coordinates are in the galactic system.",
        "response": "stilts cone servicetype=cone serviceurl=http://archive.stsci.edu/hst/search.php lon=280.4818 lat=43.8263 radius=1.2846 skysys=galactic omode=out ofmt=csv out=query_results_104.csv",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Add an array column 'FLUX_NORM' calculated by normalizing the original flux array by the maximum element.",
        "response": "stilts tpipe in=spectra.fits cmd='addcol FLUX_NORM \"divide(FLUX_ARRAY, maximum(FLUX_ARRAY))\"' out=max_normalized_array.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'maximum(FLUX_ARRAY))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol FLUX_NORM divide(FLUX_ARRAY, maximum(FLUX_ARRAY))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'maximum(FLUX_ARRAY))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Generate a MOC for circles whose radius is determined by a lookup table based on the `TYPE` column.",
        "response": "stilts mocshape in=objects.fits shape=circle coords='array(RA,DEC,(TYPE==1 ? 0.1 : (TYPE==2 ? 0.2 : 0.05)))' out=type_dependent_radius.moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Add a column 'DEC_DMS_0' converting DEC in degrees to DMS string format with 0 decimal places for seconds.",
        "response": "stilts tpipe in=coords.fits cmd='addcol DEC_DMS_0 \"degreesToDms(DEC, 0)\"' out=dms_dec_0s.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '0)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol DEC_DMS_0 degreesToDms(DEC, 0)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '0)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Combine three tables (M1.fits, M2.fits, M3.fits). In M2, select only the columns named 'ID', 'FLUX', and 'ERROR'. In M3, drop the 'FLAG' column.",
        "response": "stilts tcatn nin=3 in1=M1.fits in2=M2.fits icmd2='keepcols \"ID FLUX ERROR\"' in3=M3.fits icmd3='delcols FLAG' out=subset_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Match `data.fits` to `reference.fits`. For `data.fits`, the positions are in galactic coordinates `GLON`, `GLAT`. Convert them to ICRS before matching `reference.fits`.",
        "response": "stilts tmatch2 in1=data.fits in2=reference.fits icmd1='addskycoords galactic icrs GLON GLAT RA_ICRS DEC_ICRS' matcher=sky params=2 values1='RA_ICRS DEC_ICRS' values2='RA DEC' out=gal_icrs_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Find the single best match (best2) for each T2 row from T1 (2 arcsec sky match). Output count only.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' find=best2 omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "I need to find all pairs between two catalogs, but I also want to run it with low CPU priority. How can I do that?",
        "response": "CPU priority is controlled by your operating system, not STILTS directly. On Linux/macOS you can use `nice`: `nice stilts tmatch2 in1=c1.fits in2=c2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=all out=low_priority_match.fits`.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatch2"
    },
    {
        "prompt": "How do I normalize a histogram so that the total area is 1?",
        "response": "stilts plot2plane in=data.fits layer=histogram x=VALUE normalise=area",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Combine tables, and in the output, rename the column 'FLUX_ENSITY' to 'F_DENSITY' globally.",
        "response": "stilts tcat in='f1.fits f2.fits' ocmd='colmeta -name F_DENSITY FLUX_DENSITY' out=density_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Combine a large table with itself, tracking the original file location as a provenance column.",
        "response": "stilts tcatn nin=2 in1=large.fits in2=large.fits loccol=SourceFile out=self_joined_loc.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Add a column 'AVG_FLUX_ARR' containing the element-wise average of two array columns, 'FLUX_A' and 'FLUX_B'.",
        "response": "stilts tpipe in=arrays.fits cmd='addcol AVG_FLUX_ARR \"multiply(add(FLUX_A, FLUX_B), 0.5)\"' out=array_average.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'FLUX_B),' '0.5)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol AVG_FLUX_ARR multiply(add(FLUX_A, FLUX_B), 0.5)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'FLUX_B),' '0.5)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Can you query the cone search service at http://archive.stsci.edu/hst/search.php? I'm looking for objects around longitude 127.2187 and latitude -70.878. Please use a search radius of 0.2635 degrees. Save the results to a fits file called query_results_28.fits. The coordinates are in the galactic system.",
        "response": "stilts cone servicetype=cone serviceurl=http://archive.stsci.edu/hst/search.php lon=127.2187 lat=-70.878 radius=0.2635 skysys=galactic compress=true omode=out ofmt=fits out=query_results_28.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "cone-examples"
    },
    {
        "prompt": "Filter input data to remove rows with null RA values before generating a circle MOC (radius 0.01 deg).",
        "response": "stilts mocshape in=dirty_data.fits icmd='select !NULL_RA' shape=circle coords='array(RA, DEC, 0.01)' out=clean_circle_moc.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Match A.fits and B.fits. A is large; enable parallel runner. Match on exact ID.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID runner=parallel out=parallel_exact_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Create a MOC from the positions in a `cdf` file.",
        "response": "stilts pixfoot in=space_data.cdf ifmt=cdf out=spacecraft_path.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the footprint for all sources in `survey.fits` that fall within the footprint of any VizieR catalog.",
        "response": "This is not directly possible with a single `pixfoot` command. You would need to obtain the combined MOC for all VizieR catalogs first, then use that in an `icmd` filter with `inMoc()`.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Match T_Main and T_Sup on 2D position (X, Y). T_Main X, Y coordinates are calculated from a string array 'COORDS'.",
        "response": "stilts tmatch2 in1=T_Main.fits icmd1='addcol X parseDouble(COORDS); addcol Y parseDouble(COORDS[1])' in2=T_Sup.fits matcher=2d params=5 values1='X Y' values2='X Y' out=array_parse_2d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "Plot a scatter plot using open crosses, size 5, and force the Y axis to increase downwards (yflip).",
        "response": "stilts plot2plane in=data.fits layer=mark x=X y=Y shape=open_cross size=5 yflip=true out=inverted_crosses.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"X\"\n    (The name \"X\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Find 100 VIRCAM raw frames from ESO TAP_OBS, then locally filter the output table to keep only those with airmass < 1.1.",
        "response": "stilts tapquery tapurl=https://archive.eso.org/tap_obs adql='SELECT TOP 100 * FROM raw.vircam' ocmd='select \"airmass < 1.1\"' out=vircam_low_airmass.fits",
        "error": "Error: Unused arguments: '<' '1.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select airmass < 1.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '1.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tapquery",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using Cartesian 3D coordinates (X, Y, Z). After matching, calculate the Euclidean distance column 'EDIST' from the coordinates of the first table.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=3d params=10 values1='X Y Z' values2='X Y Z' values3='X Y Z' in1=T1.fits in2=T2.fits in3=T3.fits ocmd='addcol EDIST \"hypot(X_1, Y_1, Z_1)\"' out=euclidean_distance_calc.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: 'Y_1,' 'Z_1)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol EDIST hypot(X_1, Y_1, Z_1)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'Y_1,' 'Z_1)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Run a synchronous row count query against the PADC Heliophysics server, showing configuration details verbosely in the log.",
        "response": "stilts -verbose tapquery tapurl=http://voparis-tap-helio.obspm.fr/tap adql='SELECT COUNT(*) FROM some_heliophysics_table' sync=true omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "Convert a FITS file to an ECSV file, forcing the output delimiter to a comma.",
        "response": "stilts tcopy in=input.fits ofmt='ecsv(delimiter=comma)' out=comma.ecsv",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Plot a histogram where bars are horizontal (sideways=true).",
        "response": "stilts plot2plane in=data.fits layer=histogram x=VALUE sideways=true out=sideways_hist.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"VALUE\"\n    (The name \"VALUE\" is unknown.)\n",
        "cmd": "plot2plane"
    },
    {
        "prompt": "Add a column 'TIME_MJD_FROM_JD' converting Julian Date (JD) to MJD.",
        "response": "stilts tpipe in=time.fits cmd='addcol TIME_MJD_FROM_JD jdToMjd(TIME_JD)' out=mjd_from_jd.fits",
        "chat.jar": "executed successfully",
        "cmd": "tpipe"
    },
    {
        "prompt": "Add a column 'KCORR_J_K' using the KCF_J filter at Z=0.01, leveraging the J-K color (KCC_JK).",
        "response": "stilts tpipe in=nir_data.fits cmd='addcol KCORR_J_K \"kCorr(KCF_J, 0.01, KCC_JK, MAG_J-MAG_K)\"' out=kcorr_jk.fits",
        "chat.jar": "executed successfully",
        "error": "Error: Unused arguments: '0.01,' 'KCC_JK,' 'MAG_J-MAG_K)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol KCORR_J_K kCorr(KCF_J, 0.01, KCC_JK, MAG_J-MAG_K)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '0.01,' 'KCC_JK,' 'MAG_J-MAG_K)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tpipe"
    },
    {
        "prompt": "Crossmatch T1 and T2 exactly on ID. Before matching, filter T1 to keep only the first 50 rows.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='head 50' in2=T2.fits matcher=exact values1=ID values2=ID out=T1_head_exact.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatch2"
    },
    {
        "prompt": "My table has two sets of corners for a bowtie shape. How can I represent this?",
        "response": "For `shape=polygon`, a `NaN, NaN` pair in the coordinate array delimits distinct polygons for a single row. So you can use an expression like `coords='array(RA1,D1,RA2,D2,RA3,D3, NaN,NaN, RA4,D4,RA5,D5,RA6,D6)'`.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "mocshape"
    },
    {
        "prompt": "Merge tables and, after combining, rename the column 'FLUX_UNC' to 'FLUX_ERROR' globally.",
        "response": "stilts tcat in='f1.fits f2.fits' ocmd='colmeta -name FLUX_ERROR FLUX_UNC' out=error_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcat"
    },
    {
        "prompt": "Copy a table from a URL and output its metadata only to the terminal.",
        "response": "stilts tpipe in=http://remote.org/data.fits omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Combine tables, converting a time column 'DATE_STRING' formatted as ISO 8601 strings into MJD before joining.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='replacecol MJD isoToMjd(DATE_STRING)' in2=t2.fits icmd2='replacecol MJD isoToMjd(DATE_STRING)' out=mjd_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Submit an asynchronous query to the ESA Euclid Archive for all ObsCore data, setting a long execution duration limit of 2 hours, and request continuous progress updates.",
        "response": "stilts tapquery tapurl=https://eas.esac.esa.int/tap-server/tap adql='SELECT * FROM ivoa.ObsCore WHERE obs_collection = ''Euclid''' executionduration=7200 progress=true out=euclid_2hr_job.fits",
        "chat.jar": "executed successfully",
        "cmd": "tapquery"
    },
    {
        "prompt": "I need a polygon MOC where the vertices are calculated using a custom expression involving trigonometry and the original RA/Dec.",
        "response": "stilts mocshape in=rect.fits shape=polygon coords='array(RA+R, DEC-R, RA-R, DEC-R, RA-R, DEC+R, RA+R, DEC+R)' out=calculated_rects.fits",
        "chat.jar": "executed successfully",
        "error": "Error response from daemon: No such container: stilts-chat-stilts-dev-env\n",
        "cmd": "mocshape"
    },
    {
        "prompt": "Just count the total number of rows from combining `file1.csv`, `file2.csv`, and `file3.csv`.",
        "response": "stilts tcatn nin=3 ifmt1=csv in1=file1.csv ifmt2=csv in2=file2.csv ifmt3=csv in3=file3.csv omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Copy a VOTable to a FITS file, ensuring the output uses **var-length arrays** (fits-var).",
        "response": "stilts tcopy in=input.vot out=output.fits ofmt=fits-var",
        "chat.jar": "executed successfully",
        "cmd": "tcopy"
    },
    {
        "prompt": "Plot error ellipses (skyellipse) where the radius is calculated as 'ERR_DEG * 2.0'.",
        "response": "stilts plot2sky in=errors.fits layer=skyellipse lon=RA lat=DEC ra='ERR_DEG * 2.0' rb=0.0 posang=0 unit=degree out=doubled_radius_ellipse.png",
        "chat.jar": "skipped-plot",
        "error": "Error: Bad Expression \"RA\"\n    (The name \"RA\" is unknown.)\n",
        "cmd": "plot2sky"
    }
]