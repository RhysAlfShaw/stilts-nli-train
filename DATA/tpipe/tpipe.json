[
    {
        "prompt": "Filter the table `galaxy_catalog.fits` to only include rows where the redshift `z` is greater than 0.5. Save the result to a new file `high_z_galaxies.fits`.",
        "response": "stilts tpipe in=galaxy_catalog.fits cmd='select z > 0.5' out=high_z_galaxies.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select z > 0.5\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.5'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "From `star_survey.vot`, I only want the columns `ID`, `RA_DEG`, and `DEC_DEG`. Please write them to a CSV file named `star_positions.csv`.",
        "response": "stilts tpipe in=star_survey.vot cmd='keepcols \"ID RA_DEG DEC_DEG\"' ofmt=csv out=star_positions.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How can I sort the table `photometry_data.dat` by the `V_MAG` column in ascending order and save it as `sorted_photometry.fits`?",
        "response": "stilts tpipe ifmt=ascii in=photometry_data.dat cmd='sort V_MAG' out=sorted_photometry.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Add a new column called `LOG_FLUX` to `source_list.fits`, calculated as the base-10 logarithm of the `FLUX` column. The output should be `sources_with_logflux.fits`.",
        "response": "stilts tpipe in=source_list.fits cmd='addcol LOG_FLUX log10(FLUX)' out=sources_with_logflux.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to perform two steps on `raw_data.csv`: first, select rows where `QUALITY_FLAG == 0`, and second, sort the result by `TIMESTAMP`. Save the final table as `clean_sorted_data.vot`.",
        "response": "stilts tpipe ifmt=csv in=raw_data.csv cmd='select QUALITY_FLAG == 0' cmd='sort TIMESTAMP' ofmt=votable out=clean_sorted_data.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '==' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select QUALITY_FLAG == 0\n\nUsage: select <expr>\n    (Unused arguments: '==' '0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What's the command to see just the first 10 rows of the table in `large_catalog.fits` on my screen?",
        "response": "stilts tpipe in=large_catalog.fits cmd='head 10' omode=out ofmt=text",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I count the total number of rows in the file `event_log.ecsv`?",
        "response": "stilts tpipe in=event_log.ecsv ifmt=ecsv omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to calculate statistics (mean, stdev, etc.) for all numeric columns in `measurements.fits`.",
        "response": "stilts tpipe in=measurements.fits omode=stats",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "In my table `candidates.fits`, there's a magic value of -999 in the `MAGNITUDE` column. How can I replace all occurrences of it with a null value?",
        "response": "stilts tpipe in=candidates.fits cmd='badval -999 MAGNITUDE' out=candidates_cleaned.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert the coordinates in `old_catalog.fits` from FK4 B1950 (`RA_B1950`, `DEC_B1950`) to FK5 J2000, naming the new columns `RA_J2000` and `DEC_J2000`.",
        "response": "stilts tpipe in=old_catalog.fits cmd='addskycoords fk4 fk5 RA_B1950 DEC_B1950 RA_J2000 DEC_J2000' out=new_catalog.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Please take `messy_names.csv` and fix the column names to be more convenient for use in expressions, then save as `clean_names.csv`.",
        "response": "stilts tpipe ifmt=csv in=messy_names.csv cmd=fixcolnames ofmt=csv out=clean_names.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Show me the metadata (column names, types, UCDs) of the table `data_archive.fits`.",
        "response": "stilts tpipe in=data_archive.fits omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have `data.fits`. I want to filter it for `FLUX > 100`, add a new column `MAG` as `-2.5*log10(FLUX)`, and then send the result to TOPCAT.",
        "response": "stilts tpipe in=data.fits cmd='select FLUX > 100' cmd='addcol MAG \"-2.5*log10(FLUX)\"' omode=topcat",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX > 100\n\nUsage: select <expr>\n    (Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "How do I take a random sample of 1000 rows from `massive_survey.colfits` and save it to `survey_sample.fits`?",
        "response": "stilts tpipe in=massive_survey.colfits cmd='random 1000' out=survey_sample.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '1000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 1000\n\nUsage: random\n    (Unused arguments: '1000'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Delete the columns named `TEMP_1`, `TEMP_2`, and `TEMP_3` from `instrument_log.fits`.",
        "response": "stilts tpipe in=instrument_log.fits cmd='delcols \"TEMP_1 TEMP_2 TEMP_3\"' out=instrument_log_clean.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "In the table `stellar_data.vot`, rename the column `Vmag` to `V_MAG` and set its units to 'mag'.",
        "response": "stilts tpipe in=stellar_data.vot cmd='colmeta -name V_MAG -units mag Vmag' out=stellar_data_renamed.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to transpose my table `timeseries.fits`. How do I do that?",
        "response": "stilts tpipe in=timeseries.fits cmd=transpose out=timeseries_transposed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a table of 10 rows using the loop scheme, then add a column `y` where `y = i*i`. Display the result in the terminal.",
        "response": "stilts tpipe in=:loop:10 cmd='addcol y i*i' ofmt=text",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Calculate a checksum for the table `final_product.fits` after selecting only rows where `CONFIDENCE > 0.95`.",
        "response": "stilts tpipe in=final_product.fits cmd='select CONFIDENCE > 0.95' omode=checksum",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.95'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select CONFIDENCE > 0.95\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.95'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I want to see the last 20 rows of my observation log `obslog.dat`.",
        "response": "stilts tpipe ifmt=ascii in=obslog.dat cmd='tail 20' ofmt=text",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Take `catalog.fits` and remove any adjacent duplicate rows. Save the result as `unique_catalog.fits`.",
        "response": "stilts tpipe in=catalog.fits cmd=uniq out=unique_catalog.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From `all_sky.fits`, create a new column `GAL_LAT` by converting the equatorial `DEC` coordinate to galactic latitude.",
        "response": "stilts tpipe in=all_sky.fits cmd='addskycoords icrs galactic RA DEC GAL_LON GAL_LAT' cmd='keepcols GAL_LAT' out=galactic_latitudes.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to process a large file `huge_stream.csv` that I'm piping from another command. How do I filter it for values in column 3 being greater than 100?",
        "response": "cat huge_stream.csv | stilts tpipe in=- ifmt=csv cmd='select $3 > 100' out=filtered_stream.csv",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: tpipe: not found\n\nNo such task: cat\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Replace the string 'N/A' with a null value in the `comment` column of `notes.csv`.",
        "response": "stilts tpipe ifmt=csv in=notes.csv cmd='replaceval \"N/A\" null comment' ofmt=csv out=notes_fixed.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Sort `catalog.fits` by `RA` ascending, and for ties, by `DEC` descending.",
        "response": "stilts tpipe in=catalog.fits cmd='sort RA' cmd='sort -down DEC' out=sorted_catalog.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From the simulated sky catalog `:skysim:1e6`, select all stars with gmag < 12 and count them.",
        "response": "stilts tpipe in=:skysim:1e6 cmd='select gmag < 12' omode=count",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '12'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select gmag < 12\n\nUsage: select <expr>\n    (Unused arguments: '<' '12'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I have `multi_array.fits` with array columns. Can you 'explode' all of them into scalar columns?",
        "response": "stilts tpipe in=multi_array.fits cmd=explodeall out=scalar_columns.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "For `results.fits`, add a column `IS_VALID` which is true if `FLAG` is 0 and `ERROR` < 0.1.",
        "response": "stilts tpipe in=results.fits cmd='addcol IS_VALID FLAG==0&&ERROR<0.1' out=results_validated.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I get the statistics of just the `FLUX_ERROR` column from `phot_data.fits`?",
        "response": "stilts tpipe in=phot_data.fits cmd='keepcols FLUX_ERROR' omode=stats",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Take `observations.vot` and display it in a temporary GUI window.",
        "response": "stilts tpipe in=observations.vot omode=gui",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to create a column `DISTANCE_PC` which is 1000 divided by the parallax in milliarcseconds (`parallax` column).",
        "response": "stilts tpipe in=gaia_data.fits cmd='addcol DISTANCE_PC 1000./parallax' out=gaia_with_distances.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Subsample my table `dense_field.fits` by keeping only every 100th row.",
        "response": "stilts tpipe in=dense_field.fits cmd='every 100' out=sparse_field.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Perform a sequence of operations from a script file named `processing_steps.txt` on the table `input_data.fits`.",
        "response": "stilts tpipe in=input_data.fits cmd=@processing_steps.txt out=processed_data.fits",
        "chat.jar": "failed",
        "error": "Error: processing_steps.txt (No such file or directory)\n"
    },
    {
        "prompt": "For my table `object_classes.fits`, I want to group by the `CLASS` column and count how many objects are in each class.",
        "response": "stilts tpipe in=object_classes.fits cmd='group CLASS' omode=out ofmt=text",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "In `measurements.fits`, I need to replace the `FLUX` column with its square root.",
        "response": "stilts tpipe in=measurements.fits cmd='replacecol FLUX sqrt(FLUX)' out=sqrt_flux.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Select rows from `catalog_with_ids.fits` where the `ID` string starts with 'NGC'.",
        "response": "stilts tpipe in=catalog_with_ids.fits cmd='select startsWith(ID,\"NGC\")' out=ngc_objects.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ')'\n\nCommand was: select startsWith(ID,\"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: ')')\n"
    },
    {
        "prompt": "How to create a table from scratch with columns `x`, `y`, `z` based on a strange attractor for 10,000 rows?",
        "response": "stilts tpipe in=:attractor:10000,rampe out=strange_attractor.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to find the top 5 brightest stars (lowest `G_MAG`) in `field_of_view.fits`.",
        "response": "stilts tpipe in=field_of_view.fits cmd='sorthead 5 G_MAG' out=top5_brightest.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Add a constant column `SURVEY_ID` with the value 'SDSS_DR17' to all rows of `sdss_patch.fits`.",
        "response": "stilts tpipe in=sdss_patch.fits cmd='addcol SURVEY_ID \"SDSS_DR17\"' out=sdss_patch_tagged.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "For the table `test_data.fits`, assert that the `ERROR` column is always positive, then discard the output.",
        "response": "stilts tpipe in=test_data.fits cmd='assert ERROR>0' omode=discard",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Randomly shuffle the rows of `catalog_ordered.fits`.",
        "response": "stilts tpipe in=catalog_ordered.fits cmd=shuffle out=catalog_shuffled.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From `gaia_sample.fits`, calculate the absolute magnitude in a new column `ABS_G` using the formula `phot_g_mean_mag + 5 * log10(parallax*0.001) + 5`.",
        "response": "stilts tpipe in=gaia_sample.fits cmd='addcol ABS_G \"phot_g_mean_mag + 5 * log10(parallax*0.001) + 5\"' out=gaia_abs_mag.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert my table `results.fits` to an HTML file for a web page.",
        "response": "stilts tpipe in=results.fits ofmt=html out=results_report.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From `lightcurve.csv`, keep only rows with index from 100 to 200.",
        "response": "stilts tpipe ifmt=csv in=lightcurve.csv cmd='rowrange 100 200' out=lightcurve_slice.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have an array column `FLUX_ARRAY`. How do I create a new column `MEAN_FLUX` which is the mean of the values in that array for each row?",
        "response": "stilts tpipe in=array_data.fits cmd='addcol MEAN_FLUX mean(FLUX_ARRAY)' out=mean_flux_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Take `propermotion.fits` and select only objects with a total proper motion `sqrt(PMRA*PMRA + PMDEC*PMDEC)` greater than 500 mas/yr.",
        "response": "stilts tpipe in=propermotion.fits cmd='select hypot(PMRA,PMDEC) > 500' out=high_pm_stars.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '500'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select hypot(PMRA,PMDEC) > 500\n\nUsage: select <expr>\n    (Unused arguments: '>' '500'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I need to ensure my streamed table is cached for a multi-pass operation. How do I force caching?",
        "response": "stilts tpipe in=streamed_data.vot cmd=cache cmd='sort SOME_COLUMN' out=sorted_from_stream.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Set the table name parameter of `my_table.fits` to 'My Awesome Catalog'.",
        "response": "stilts tpipe in=my_table.fits cmd='tablename \"My Awesome Catalog\"' out=my_table_renamed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From `galaxy_types.txt`, find all unique values in the `MORPHOLOGY` column.",
        "response": "stilts tpipe ifmt=ascii in=galaxy_types.txt cmd='keepcols MORPHOLOGY' cmd='sort MORPHOLOGY' cmd=uniq ofmt=text",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a new column 'DEC_RAD' by converting the 'DEC_DEG' column from degrees to radians.",
        "response": "stilts tpipe in=coords.fits cmd='addcol DEC_RAD degreesToRadians(DEC_DEG)' out=coords_rad.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Show me the statistics of a table where I've replaced null `FLUX` values with 0.",
        "response": "stilts tpipe in=fluxes.fits cmd='replaceval null 0 FLUX' cmd='keepcols FLUX' omode=stats",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Filter my table `events.fits` to only include the last 1000 events.",
        "response": "stilts tpipe in=events.fits cmd='tail 1000' out=last_1000_events.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert my table `publication_data.fits` into a LaTeX table format.",
        "response": "stilts tpipe in=publication_data.fits ofmt=latex out=pub_table.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have columns `FLUX_U`, `FLUX_G`, `FLUX_R`. Collapse them into a single 3-element array column named `FLUXES`.",
        "response": "stilts tpipe in=photometry.fits cmd='collapsecols FLUXES FLUX_U 3' out=photometry_arrays.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "For each `CLASS` in `objects.fits`, find the mean `REDSHIFT`.",
        "response": "stilts tpipe in=objects.fits cmd='group CLASS REDSHIFT;mean' ofmt=text",
        "chat.jar": "failed",
        "error": "Error: Unknown processing command: mean\n\nAvailable filters:\n   addcol [-after <col-id> | -before <col-id>]\n          [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n          [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n          <col-name> <expr>\n   addpixsample [-radius <expr-rad>] [-systems <in-sys> <pix-sys>]\n                <expr-lon> <expr-lat> <healpix-file>\n   addresolve <col-id-objname> <col-name-ra> <col-name-dec>\n   addskycoords [-epoch <expr>] [-inunit deg|rad|sex] [-outunit deg|rad|sex]\n                <insys> <outsys> <col-id1> <col-id2> <col-name1> <col-name2>\n   assert <test-expr> [<msg-expr>]\n   badval <bad-val> <colid-list>\n   cache\n   check\n   clearparams <pname> ...\n   collapsecols [-[no]keepscalars] <array-colname> <col-id0> <ncol>\n   colmeta [-name <name>] [-units <units>] [-ucd <ucd>]\n           [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n           [-shape <n>[,<n>...][,*]] [-elsize <n>]\n           <colid-list>\n   constcol [-noparam] [-acceptnull] [-[no]parallel] [<colid-list>]\n   delcols <colid-list>\n   every [-exact|-approx] <step>\n   explodecols <colid-list>\n   explodeall [-ifndim <ndim>] [-ifshape <dims>]\n   fixcolnames \n   group [-[no]parallel] <key> [<key> ...] [<aggcol> ...]\n   head <nrows>\n   healpixmeta [-level <n>] [-implicit|-column <col-id>] [-csys C|G|E] [-nested|-ring]\n   keepcols <colid-list>\n   meta [<item> ...]\n   progress\n   random\n   randomview\n   repeat [-row|-table] <count>\n   replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n              [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n              <col-id> <expr>\n   replaceval <old-val> <new-val> <colid-list>\n   rowrange <first> <last>|+<count>\n   select <expr>\n   seqview\n   setparam [-type byte|short|int|long|float|double|boolean|string]\n            [-desc <descrip>] [-unit <units>] [-ucd <ucd>]\n            [-utype <utype>] [-xtype <xtype>]\n            <pname> <pexpr>\n   shuffle [-seed <int>]\n   sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n   sorthead [-tail] [-down] [-nullsfirst] <nrows> <key-list>\n   stats [-[no]parallel] [-qapprox|-qexact] [<item> ...]\n   tablename <name>\n   tail <nrows>\n   transpose [-namecol <col-id>]\n   uniq [-count] [<colid-list>]\n\n"
    },
    {
        "prompt": "Select every 10th row from `big_table.fits` and then take a random sample of 50 from that subset.",
        "response": "stilts tpipe in=big_table.fits cmd='every 10' cmd='random 50' out=random_subsample.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '50'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 50\n\nUsage: random\n    (Unused arguments: '50'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What's the command to calculate the sky separation in arcseconds between two sets of coordinate columns `RA1, DEC1` and `RA2, DEC2`?",
        "response": "stilts tpipe in=pairs.fits cmd='addcol SEPARATION_ARCSEC skyDistanceDegrees(RA1,DEC1,RA2,DEC2)*3600.' out=pairs_with_sep.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From a table with a `NAME` column, create a new column `SHORT_NAME` which is the first 5 characters of `NAME`.",
        "response": "stilts tpipe in=names.fits cmd='addcol SHORT_NAME substring(NAME,0,5)' out=short_names.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How can I check if any rows in `data_check.fits` have a `FLUX` value of exactly zero?",
        "response": "stilts tpipe in=data_check.fits cmd='select FLUX==0' omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC table `wise_data.tbl` to a Parquet file.",
        "response": "stilts tpipe ifmt=ipac in=wise_data.tbl ofmt=parquet out=wise_data.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to add a column that's a random number between 0 and 1 for each row.",
        "response": "stilts tpipe in=my_table.fits cmd='addcol RAND_VAL random($0)' out=my_table_randomized.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the top 100 rows with the smallest `ERROR` value.",
        "response": "stilts tpipe in=data.fits cmd='sorthead 100 ERROR' out=best_quality.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Take the table `sky_patches.fits`, sort it by `HEALPIX_INDEX`, and then remove adjacent rows with the same index.",
        "response": "stilts tpipe in=sky_patches.fits cmd='sort HEALPIX_INDEX' cmd='uniq HEALPIX_INDEX' out=unique_patches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a new column `IS_EXTENDED` which is true if the `CLASS` column contains the word 'GALAXY'.",
        "response": "stilts tpipe in=morphology.fits cmd='addcol IS_EXTENDED contains(CLASS,\"GALAXY\")' out=extended_sources.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ')'\n\nCommand was: addcol IS_EXTENDED contains(CLASS,\"GALAXY\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ')')\n"
    },
    {
        "prompt": "I have an array column `SPECTRUM`. I need to replace it with a smoothed version, let's say by averaging every 3 elements.",
        "response": "stilts tpipe in=spectra.fits cmd='replacecol SPECTRUM arrayFunc(\"mean(inArray[i-1:i+2])\",SPECTRUM)' out=spectra_smoothed.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',SPECTRUM)'\n\nCommand was: replacecol SPECTRUM arrayFunc(\"mean(inArray[i-1:i+2])\",SPECTRUM)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: ',SPECTRUM)')\n"
    },
    {
        "prompt": "Can you display the metadata of the table generated by `:skysim:10`?",
        "response": "stilts tpipe in=:skysim:10 omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Set the UCD of the `phot_g_mean_mag` column to `phot.mag;em.opt.G`.",
        "response": "stilts tpipe in=gaia.fits cmd='colmeta -ucd phot.mag;em.opt.G phot_g_mean_mag' out=gaia_ucd.fits",
        "chat.jar": "failed",
        "error": "Error: No columns specified\n\nCommand was: colmeta -ucd phot.mag\n\nUsage: colmeta [-name <name>] [-units <units>] [-ucd <ucd>]\n               [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n               [-shape <n>[,<n>...][,*]] [-elsize <n>]\n               <colid-list>\n    (No columns specified)\n"
    },
    {
        "prompt": "I need to select rows where `FLAG_A` OR `FLAG_B` is set. These are bitmask columns, so I need to check bit 3 (value 8).",
        "response": "stilts tpipe in=flags.fits cmd='select hasBit(FLAG_A,3) || hasBit(FLAG_B,3)' out=flagged_objects.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '||' 'hasBit(FLAG_B,3)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select hasBit(FLAG_A,3) || hasBit(FLAG_B,3)\n\nUsage: select <expr>\n    (Unused arguments: '||' 'hasBit(FLAG_B,3)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "How to convert the Modified Julian Date in column `MJD` to an ISO-8601 string in a new column `ISO_DATE`?",
        "response": "stilts tpipe in=time_data.fits cmd='addcol ISO_DATE mjdToIso(MJD)' out=time_data_iso.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Filter my table `events.fits` to only keep rows from index 5000 to 5100.",
        "response": "stilts tpipe in=events.fits cmd='rowrange 5000 +101' out=event_slice.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to get a count of unique `OBSERVER` names in `log.csv`.",
        "response": "stilts tpipe ifmt=csv in=log.csv cmd='keepcols OBSERVER' cmd='sort OBSERVER' cmd=uniq omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Add a column `FULL_ID` by concatenating `SURVEY` name, a colon, and the `SOURCE_ID`.",
        "response": "stilts tpipe in=catalog.fits cmd='addcol FULL_ID concat(SURVEY,\":\",SOURCE_ID)' out=full_ids.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',SOURCE_ID)'\n\nCommand was: addcol FULL_ID concat(SURVEY,\":\",SOURCE_ID)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ',SOURCE_ID)')\n"
    },
    {
        "prompt": "Calculate statistics on `data.fits` after applying a filter from the file `my_selection.stilts`.",
        "response": "stilts tpipe in=data.fits cmd=@my_selection.stilts omode=stats",
        "chat.jar": "failed",
        "error": "Error: my_selection. (No such file or directory)\n"
    },
    {
        "prompt": "I have `file.fits` with array column `VALUES`. I want a new column which is the median of that array for each row.",
        "response": "stilts tpipe in=file.fits cmd='addcol MEDIAN_VAL median(VALUES)' out=file_medians.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Select all rows where the `NAME` column is not null.",
        "response": "stilts tpipe in=data.fits cmd='select !NULL_NAME' out=named_objects.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create an output table that is just the last 5 rows of `input.fits`.",
        "response": "stilts tpipe in=input.fits cmd='tail 5' out=last5.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a `group_id` column. I want to find the mean `flux` for each `group_id`.",
        "response": "stilts tpipe in=groups.fits cmd='group group_id flux;mean' out=group_fluxes.fits",
        "chat.jar": "failed",
        "error": "Error: Unknown processing command: mean\n\nAvailable filters:\n   addcol [-after <col-id> | -before <col-id>]\n          [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n          [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n          <col-name> <expr>\n   addpixsample [-radius <expr-rad>] [-systems <in-sys> <pix-sys>]\n                <expr-lon> <expr-lat> <healpix-file>\n   addresolve <col-id-objname> <col-name-ra> <col-name-dec>\n   addskycoords [-epoch <expr>] [-inunit deg|rad|sex] [-outunit deg|rad|sex]\n                <insys> <outsys> <col-id1> <col-id2> <col-name1> <col-name2>\n   assert <test-expr> [<msg-expr>]\n   badval <bad-val> <colid-list>\n   cache\n   check\n   clearparams <pname> ...\n   collapsecols [-[no]keepscalars] <array-colname> <col-id0> <ncol>\n   colmeta [-name <name>] [-units <units>] [-ucd <ucd>]\n           [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n           [-shape <n>[,<n>...][,*]] [-elsize <n>]\n           <colid-list>\n   constcol [-noparam] [-acceptnull] [-[no]parallel] [<colid-list>]\n   delcols <colid-list>\n   every [-exact|-approx] <step>\n   explodecols <colid-list>\n   explodeall [-ifndim <ndim>] [-ifshape <dims>]\n   fixcolnames \n   group [-[no]parallel] <key> [<key> ...] [<aggcol> ...]\n   head <nrows>\n   healpixmeta [-level <n>] [-implicit|-column <col-id>] [-csys C|G|E] [-nested|-ring]\n   keepcols <colid-list>\n   meta [<item> ...]\n   progress\n   random\n   randomview\n   repeat [-row|-table] <count>\n   replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n              [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n              <col-id> <expr>\n   replaceval <old-val> <new-val> <colid-list>\n   rowrange <first> <last>|+<count>\n   select <expr>\n   seqview\n   setparam [-type byte|short|int|long|float|double|boolean|string]\n            [-desc <descrip>] [-unit <units>] [-ucd <ucd>]\n            [-utype <utype>] [-xtype <xtype>]\n            <pname> <pexpr>\n   shuffle [-seed <int>]\n   sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n   sorthead [-tail] [-down] [-nullsfirst] <nrows> <key-list>\n   stats [-[no]parallel] [-qapprox|-qexact] [<item> ...]\n   tablename <name>\n   tail <nrows>\n   transpose [-namecol <col-id>]\n   uniq [-count] [<colid-list>]\n\n"
    },
    {
        "prompt": "How can I convert a column `EPOCH` from Julian Day to Modified Julian Date?",
        "response": "stilts tpipe in=epochs.fits cmd='replacecol EPOCH jdToMjd(EPOCH)' cmd='colmeta -name MJD EPOCH' out=epochs_mjd.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From `test.fits`, keep only the columns from `COL_A` to `COL_F`.",
        "response": "stilts tpipe in=test.fits cmd='keepcols COL_A-COL_F' out=test_subset.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Add a new table parameter named 'PROCESSED_DATE' with the current timestamp.",
        "response": "stilts tpipe in=data.fits cmd='setparam PROCESSED_DATE toString(CURRENT_TIMESTAMP)' out=data_processed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a table of spectral lines. I need to select lines where the `WAVELENGTH` is between 4000 and 5000 Angstroms.",
        "response": "stilts tpipe in=spectral_lines.fits cmd='select WAVELENGTH>4000 && WAVELENGTH<5000' out=optical_lines.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' 'WAVELENGTH<5000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select WAVELENGTH>4000 && WAVELENGTH<5000\n\nUsage: select <expr>\n    (Unused arguments: '&&' 'WAVELENGTH<5000'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "How do I show every 500th row of `big_survey.fits` in my terminal?",
        "response": "stilts tpipe in=big_survey.fits cmd='every 500' ofmt=text",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From `data.fits`, create a table containing only unique rows, and add a column that counts the number of duplicates for each unique row.",
        "response": "stilts tpipe in=data.fits cmd='sort *' cmd='uniq -count *' out=unique_counts.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Add a column `SNR` calculated as `FLUX / FLUX_ERROR` and then keep only rows where `SNR` is greater than 5.",
        "response": "stilts tpipe in=detections.fits cmd='addcol SNR FLUX/FLUX_ERROR' cmd='select SNR > 5' out=high_snr.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select SNR > 5\n\nUsage: select <expr>\n    (Unused arguments: '>' '5'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My file `coords_sex.txt` has RA and Dec in sexagesimal format. How do I convert them to decimal degrees in new columns?",
        "response": "stilts tpipe ifmt=ascii in=coords_sex.txt cmd='addcol RA_DEG hmsToDegrees(RA_SEX)' cmd='addcol DEC_DEG dmsToDegrees(DEC_SEX)' out=coords_deg.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What's the command to get a list of all column names from `complex_table.fits`?",
        "response": "stilts tpipe in=complex_table.fits cmd='meta Name' ofmt=text",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From my catalog `stars.fits`, I need to select the 10 stars with the largest parallax.",
        "response": "stilts tpipe in=stars.fits cmd='sorthead -down 10 parallax' out=nearest_stars.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to clear all table parameters from `table_with_params.vot`.",
        "response": "stilts tpipe in=table_with_params.vot cmd='clearparams *' out=table_no_params.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "In `data.fits`, find rows where `ID_A` and `ID_B` are identical.",
        "response": "stilts tpipe in=data.fits cmd='select equals(ID_A,ID_B)' out=self_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "For my list of galaxies, I need to add a column for luminosity distance, assuming H0=70, OmegaM=0.3, OmegaLambda=0.7.",
        "response": "stilts tpipe in=galaxies.fits cmd='addcol LUM_DIST_MPC luminosityDistance(z,70,0.3,0.7)' out=galaxies_dist.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "From a list of source names, I want to resolve their coordinates using SIMBAD and add RA/DEC columns.",
        "response": "stilts tpipe ifmt=ascii in=source_names.txt cmd='addresolve NAME RA_SIMBAD DEC_SIMBAD' out=resolved_coords.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How can I extract HEALPix pixel values from `lambda_sfd_ebv.fits` for each coordinate in my table `targets.fits`?",
        "response": "stilts tpipe in=targets.fits cmd='addpixsample RA DEC lambda_sfd_ebv.fits' out=targets_with_ebv.fits",
        "chat.jar": "failed",
        "error": "Error: Error using pixel data file lambda_sfd_ebv.fits\n\nCommand was: addpixsample RA DEC lambda_sfd_ebv.fits\n\nUsage: addpixsample [-radius <expr-rad>] [-systems <in-sys> <pix-sys>]\n                    <expr-lon> <expr-lat> <healpix-file>\n    (Error using pixel data file lambda_sfd_ebv.fits\n        (No file, URL or command \"lambda_sfd_ebv.fits\"))\n"
    },
    {
        "prompt": "Take a table and show me the median, first, and third quartiles for every numeric column.",
        "response": "stilts tpipe in=my_data.fits cmd='stats Name Median Quartile1 Quartile3' ofmt=text",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a table of 1000 random points on the sky from `:skysim:1000`, convert to galactic coordinates, and keep only points near the galactic center (abs(l) < 10 && abs(b) < 10).",
        "response": "stilts tpipe in=:skysim:1000 cmd='addskycoords icrs galactic ra dec l b' cmd='select abs(l)<10 && abs(b)<10' out=galactic_center_sim.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' 'abs(b)<10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(l)<10 && abs(b)<10\n\nUsage: select <expr>\n    (Unused arguments: '&&' 'abs(b)<10'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "From `observations.fits`, I need to group rows by `FILTER` type, and for each filter, get the mean `AIRMASS` and the count of observations.",
        "response": "stilts tpipe in=observations.fits cmd='group FILTER AIRMASS;mean 0;count;NOBS' out=filter_summary.fits",
        "chat.jar": "failed",
        "error": "Error: Unknown processing command: mean\n\nAvailable filters:\n   addcol [-after <col-id> | -before <col-id>]\n          [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n          [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n          <col-name> <expr>\n   addpixsample [-radius <expr-rad>] [-systems <in-sys> <pix-sys>]\n                <expr-lon> <expr-lat> <healpix-file>\n   addresolve <col-id-objname> <col-name-ra> <col-name-dec>\n   addskycoords [-epoch <expr>] [-inunit deg|rad|sex] [-outunit deg|rad|sex]\n                <insys> <outsys> <col-id1> <col-id2> <col-name1> <col-name2>\n   assert <test-expr> [<msg-expr>]\n   badval <bad-val> <colid-list>\n   cache\n   check\n   clearparams <pname> ...\n   collapsecols [-[no]keepscalars] <array-colname> <col-id0> <ncol>\n   colmeta [-name <name>] [-units <units>] [-ucd <ucd>]\n           [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n           [-shape <n>[,<n>...][,*]] [-elsize <n>]\n           <colid-list>\n   constcol [-noparam] [-acceptnull] [-[no]parallel] [<colid-list>]\n   delcols <colid-list>\n   every [-exact|-approx] <step>\n   explodecols <colid-list>\n   explodeall [-ifndim <ndim>] [-ifshape <dims>]\n   fixcolnames \n   group [-[no]parallel] <key> [<key> ...] [<aggcol> ...]\n   head <nrows>\n   healpixmeta [-level <n>] [-implicit|-column <col-id>] [-csys C|G|E] [-nested|-ring]\n   keepcols <colid-list>\n   meta [<item> ...]\n   progress\n   random\n   randomview\n   repeat [-row|-table] <count>\n   replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n              [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n              <col-id> <expr>\n   replaceval <old-val> <new-val> <colid-list>\n   rowrange <first> <last>|+<count>\n   select <expr>\n   seqview\n   setparam [-type byte|short|int|long|float|double|boolean|string]\n            [-desc <descrip>] [-unit <units>] [-ucd <ucd>]\n            [-utype <utype>] [-xtype <xtype>]\n            <pname> <pexpr>\n   shuffle [-seed <int>]\n   sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n   sorthead [-tail] [-down] [-nullsfirst] <nrows> <key-list>\n   stats [-[no]parallel] [-qapprox|-qexact] [<item> ...]\n   tablename <name>\n   tail <nrows>\n   transpose [-namecol <col-id>]\n   uniq [-count] [<colid-list>]\n\n"
    },
    {
        "prompt": "I have an array column `PIXEL_VALUES`. I want to replace any negative values in it with zero.",
        "response": "stilts tpipe in=image_data.fits cmd='replacecol PIXEL_VALUES arrayFunc(\"max(x,0)\",PIXEL_VALUES)' out=image_data_nonneg.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',PIXEL_VALUES)'\n\nCommand was: replacecol PIXEL_VALUES arrayFunc(\"max(x,0)\",PIXEL_VALUES)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: ',PIXEL_VALUES)')\n"
    },
    {
        "prompt": "What is the command to just check if `my_table.fits` can be read by stilts without producing any output?",
        "response": "stilts tpipe in=my_table.fits omode=discard",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to take all columns from `table.fits` but add a new column 'ROW_ID' which is just the row number.",
        "response": "stilts tpipe in=table.fits cmd='addcol ROW_ID $0' out=table_with_ids.fits",
        "chat.jar": "executed successfully"
    }
]