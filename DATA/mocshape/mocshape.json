[
    {
        "prompt": "Create a MOC from the point positions in `my_catalog.fits`. The coordinate columns are RA_DEG and DEC_DEG.",
        "response": "stilts mocshape in=my_catalog.fits shape=point coords='array(RA_DEG, DEC_DEG)' out=point_moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a table of instrument pointings with a radius column in degrees. How can I generate the combined coverage MOC?",
        "response": "stilts mocshape in=pointings.vot shape=circle coords='array(RA, DEC, RADIUS_DEG)' out=pointing_coverage.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC from an ObsCore table using the `s_region` column. Save the output in JSON format.",
        "response": "stilts mocshape in=obscore_results.fits shape=stc-s coords=s_region mocfmt=json out=obscore_footprint.json",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My table has four corner coordinates for each entry: RA1, DEC1, RA2, DEC2, RA3, DEC3, RA4, DEC4. How do I make a MOC from these polygons?",
        "response": "stilts mocshape in=detector_footprints.fits shape=polygon coords='array(RA1,DEC1,RA2,DEC2,RA3,DEC3,RA4,DEC4)' out=detector_mosaic.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a text file where each line is an ASCII MOC string. How can I combine them all into a single FITS MOC?",
        "response": "stilts mocshape in=moc_list.txt ifmt=ascii shape=moc-ascii coords='$1' mocfmt=fits out=combined_moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a high-resolution MOC (order 14) for all sources brighter than G=15 in `gaia_dr3.fits`.",
        "response": "stilts mocshape in=gaia_dr3.fits icmd='select phot_g_mean_mag < 15' shape=point coords='array(ra, dec)' order=14 out=bright_gaia_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select phot_g_mean_mag < 15\n\nUsage: select <expr>\n    (Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What's the command to generate a MOC from UNIQ values in the `HPX_PIXEL` column?",
        "response": "stilts mocshape in=healpix_list.fits shape=uniq coords=HPX_PIXEL out=uniq_moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a summary of the MOC coverage for my catalog `sources.csv`, without creating a MOC file.",
        "response": "stilts mocshape in=sources.csv ifmt=csv shape=point coords='array(RA,DEC)' mocfmt=summary out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a low-resolution MOC (order 4) for a random sample of 10000 stars from a simulation.",
        "response": "stilts mocshape in=:skysim:10000 shape=point coords='array(ra, dec)' order=4 out=sim_sample_lowres.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My survey data is in galactic coordinates (`glon`, `glat`). How do I create an ICRS MOC?",
        "response": "stilts mocshape in=survey_galactic.fits icmd='addskycoords galactic icrs glon glat ra_icrs dec_icrs' shape=point coords='array(ra_icrs, dec_icrs)' out=survey_icrs.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How is `mocshape` different from `pixfoot`?",
        "response": "`mocshape` is more general than `pixfoot`. While `pixfoot` generates MOCs from points or circles by specifying `ra`, `dec`, and an optional `radius`, `mocshape` uses a `coords` expression and a `shape` parameter that can handle points, circles, polygons, STC-S strings, and even other MOCs [2, B.8, B.11].",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n/bin/sh: 1: pixfoot: not found\n/bin/sh: 1: pixfoot: not found\n/bin/sh: 1: ra: not found\n/bin/sh: 1: dec: not found\n/bin/sh: 1: radius: not found\n/bin/sh: 1: mocshape: not found\n/bin/sh: 1: coords: not found\n/bin/sh: 1: shape: not found\n\nNo such task: is\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC for circles where the radius in degrees is given by `sqrt(AREA_SQDEG/PI)`.",
        "response": "stilts mocshape in=source_areas.fits shape=circle coords='array(RA, DEC, sqrt(AREA_SQDEG/PI))' out=areas_as_circles.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate an ASCII MOC at order 9 for all objects classified as 'QSO'.",
        "response": "stilts mocshape in=classifications.fits icmd='select OBJ_TYPE==\"QSO\"' shape=point coords='array(RA,DEC)' order=9 mocfmt=ascii out=qso_coverage.moc.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to combine the `s_region` from two different ObsCore tables, `obs1.fits` and `obs2.fits`.",
        "response": "stilts tcat in=obs1.fits in=obs2.fits | stilts mocshape in=- shape=stc-s coords=s_region out=combined_obscore.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n"
    },
    {
        "prompt": "Create a MOC from a piped input stream of ASCII MOCs.",
        "response": "cat my_mocs.txt | stilts mocshape in=- ifmt=ascii shape=moc-ascii coords='$1' mocfmt=fits out=piped_moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: cat\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "My table has polygon vertices in a single space-separated string column named 'VERTICES'. How do I use it?",
        "response": "stilts mocshape in=polygon_strings.fits shape=polygon coords='parseDoubles(VERTICES)' out=string_polygons.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC from points, but only for the northern hemisphere.",
        "response": "stilts mocshape in=all_sky.fits icmd='select DEC >= 0' shape=point coords='array(RA, DEC)' out=north_sky.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select DEC >= 0\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What does `mocfmt=raw` do?",
        "response": "The `mocfmt=raw` option outputs the MOC as a simple binary stream of 64-bit integers representing the UNIQ values of the HEALPix cells. This is a compact but non-standard format.",
        "chat.jar": "failed",
        "error": "\nNo such task: The\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC for all objects in my table that are inside the 2MASS footprint.",
        "response": "stilts mocshape in=my_objects.fits icmd='select inMoc(\"II/246/out\", RA, DEC)' shape=point coords='array(RA, DEC)' out=in_2mass_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select inMoc(\"II/246/out\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n"
    },
    {
        "prompt": "My polygon vertices are in separate columns `v1x,v1y`, `v2x,v2y`, `v3x,v3y`. How do I make the MOC?",
        "response": "stilts mocshape in=vertices.fits shape=polygon coords='array(v1x,v1y, v2x,v2y, v3x,v3y)' out=triangle_moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a JSON MOC from a list of circles with 10 arcsecond radii.",
        "response": "stilts mocshape in=targets.fits shape=circle coords='array(RA,DEC,10.0/3600.0)' mocfmt=json out=target_circles.moc.json",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to see the sky fraction covered by my `s_region` column.",
        "response": "stilts mocshape in=my_table.fits shape=stc-s coords=s_region mocfmt=summary out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a very low-resolution MOC (order 2) from a list of polygons.",
        "response": "stilts mocshape in=polygons.fits shape=polygon coords='parseDoubles(VERTICES)' order=2 out=lowres_polygons.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My input table is an ECSV file. Generate a FITS MOC from it.",
        "response": "stilts mocshape in=data.ecsv ifmt=ecsv shape=point coords='array(ra,dec)' mocfmt=fits out=ecsv_source.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I specify a very high resolution, like order 18?",
        "response": "stilts mocshape in=small_patch.fits shape=point coords='array(RA,DEC)' order=18 out=hires_patch.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can `mocshape` handle non-ICRS coordinates in STC-S strings?",
        "response": "The documentation notes that for STC-S, `<frame>`, `<refpos>` and `<flavor>` metadata are ignored [4]. This implies that all coordinates are treated as ICRS degrees, so you may need to preprocess them into ICRS first.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: end of file unexpected\n"
    },
    {
        "prompt": "Create a MOC from UNIQ values, but only for those at HEALPix order 8.",
        "response": "stilts mocshape in=uniqs.fits icmd='select uniqToOrder(UNIQ_COL)==8' shape=uniq coords=UNIQ_COL order=8 out=order8_uniqs.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to generate the footprint of every 50th instrument pointing.",
        "response": "stilts mocshape in=pointings.fits icmd='every 50' shape=circle coords='array(RA,DEC,RADIUS)' out=sparse_pointings.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Which `mocimpl` option should I use for best performance?",
        "response": "The default `mocimpl=auto` chooses the implementation based on the MOC order [5]. The documentation suggests that performance characteristics may differ, and it may be worthwhile to experiment if you are working with very large tables [1].",
        "chat.jar": "failed",
        "error": "\nNo such task: The\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC from STC-S strings, but only for polygons with more than 4 vertices.",
        "response": "stilts mocshape in=obscore.vot shape=stc-s coords=s_region icmd='select size(parseDoubles(s_region)) > 8' out=many_vertex_polygons.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '8'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select size(parseDoubles(s_region)) > 8\n\nUsage: select <expr>\n    (Unused arguments: '>' '8'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My radius column is in arcseconds. How do I make circles?",
        "response": "stilts mocshape in=cat.fits shape=circle coords='array(RA,DEC,RADIUS_ARCSEC/3600.0)' out=arcsec_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from a list of MOCs stored in a FITS table.",
        "response": "stilts mocshape in=moc_table.fits shape=moc-ascii coords=MOC_ASCII_COL out=combined_from_table.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a `cds_json` format MOC. What is that?",
        "response": "The `cds_json` format is a specific JSON serialization used by some CDS services like Aladin Lite. You can generate it like this: `stilts mocshape in=cat.fits shape=point coords='array(RA,DEC)' mocfmt=cds_json out=aladin_lite.json`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: cds_json: not found\n/bin/sh: 1: mocshape: not found\n\nNo such task: The\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "My table has FK4 coordinates. Can I generate a MOC directly?",
        "response": "No, MOCs are defined in ICRS. You must first convert the coordinates using a filter: `stilts mocshape in=fk4.fits icmd='addskycoords fk4 fk5 RA_FK4 DEC_FK4 RA_ICRS DEC_ICRS' shape=point coords='array(RA_ICRS, DEC_ICRS)' out=fk4_converted.moc.fits`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: No,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "I need to get the MOC for the first 100 entries of my `s_region` column.",
        "response": "stilts mocshape in=obscore.fits icmd='head 100' shape=stc-s coords=s_region out=first_100_regions.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create the MOC for a list of HEALPix pixels given by order and index columns.",
        "response": "stilts mocshape in=pixels.fits shape=uniq coords='mocUniq(ORDER_COL, INDEX_COL)' out=pixels.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate the MOC for all sources where the `QUALITY` flag is not 'bad'.",
        "response": "stilts mocshape in=data.fits icmd='select QUALITY != \"bad\"' shape=point coords='array(RA,DEC)' out=good_quality.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'bad'\n\nCommand was: select QUALITY != \"bad\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'bad')\n"
    },
    {
        "prompt": "My polygon vertices are in an array-valued column `VERT_ARRAY`. How do I use it?",
        "response": "stilts mocshape in=polygons.fits shape=polygon coords=VERT_ARRAY out=polygon_arrays.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a FITS MOC from a list of circles with 1 arcminute radii.",
        "response": "stilts mocshape in=targets.fits shape=circle coords='array(RA,DEC,1.0/60.0)' mocfmt=fits out=arcmin_circles.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What does an order of 29 mean?",
        "response": "An order of 29 is the highest resolution for a MOC, corresponding to an extremely fine grid of pixels on the sky [6]. It is suitable only for very small regions. Example: `stilts mocshape in=small.fits order=29 ...`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: An\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC from the positions in a Parquet file.",
        "response": "stilts mocshape in=data.parquet shape=point coords='array(ra,dec)' out=parquet_moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I make a MOC from circles where the radius depends on magnitude, e.g., `5.0/phot_g_mean_mag`?",
        "response": "stilts mocshape in=gaia.fits shape=circle coords='array(ra,dec, 5.0/phot_g_mean_mag)' out=mag_dependent_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Combine the footprints of `survey_a.fits` (points) and `survey_b.fits` (STC-S polygons).",
        "response": "stilts tcatn nin=2 in1=survey_a.fits icmd1='addcol region array(RA,DEC)' in2=survey_b.fits icmd2='addcol region s_region' | stilts mocshape in=- shape=stc-s coords=region out=combined_surveys.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n"
    },
    {
        "prompt": "Can `mocshape` handle STC-S UNIONs?",
        "response": "Yes, the documentation indicates that `mocshape` with `shape=stc-s` can handle UNIONs of all shape types [7].",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: Yes,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate an order 0 MOC. What would that look like?",
        "response": "An order 0 MOC represents coverage using the 12 base HEALPix pixels. It is the coarsest possible MOC. `stilts mocshape in=mycat.fits shape=point coords='array(RA,DEC)' order=0 out=order0.moc.fits`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: An\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from a `colfits` file.",
        "response": "stilts mocshape in=data.colfits ifmt=colfits shape=point coords='array(ra,dec)' out=colfits_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt: Unknown format colfits\n    (No table handler available for colfits)\nUsage: ifmt=<in-format>\n\n"
    },
    {
        "prompt": "My input has STC-S strings, but some are invalid. Will `mocshape` fail?",
        "response": "It will likely produce warnings for the invalid rows and skip them, but continue processing the valid ones. You should check the output on standard error for any messages.",
        "chat.jar": "failed",
        "error": "\nNo such task: It\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC from all sources except those in the Small Magellanic Cloud.",
        "response": "stilts mocshape in=allsky.fits icmd='select skyDistanceDegrees(RA,DEC,13.18,-72.82) > 5' shape=point coords='array(RA,DEC)' out=no_smc.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistanceDegrees(RA,DEC,13.18,-72.82) > 5\n\nUsage: select <expr>\n    (Unused arguments: '>' '5'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I have a table of MOCs. I want to create a new column which is the sky fraction of each, and then make a combined MOC of only the large ones.",
        "response": "stilts tpipe in=mocs.fits cmd='addcol sky_frac mocSkyProportion($1)' cmd='select sky_frac > 0.01' | stilts mocshape in=- shape=moc-ascii coords='$1' out=large_mocs.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\nError: Unused arguments: '>' '0.01'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select sky_frac > 0.01\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.01'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Can `mocshape` read a gzipped CSV file?",
        "response": "Yes, STILTS commands automatically decompress gzipped inputs [8]. `stilts mocshape in=data.csv.gz ifmt=csv shape=point coords='array(ra,dec)' out=data.moc.fits`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: Yes,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate the MOC of all pointings from a log file that happened in 2023.",
        "response": "stilts mocshape in=log.fits icmd='select startsWith(OBS_DATE, \"2023\")' shape=circle coords='array(RA,DEC,FOV_RADIUS)' out=log_2023.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '2023' ')'\n\nCommand was: select startsWith(OBS_DATE, \"2023\")\n\nUsage: select <expr>\n    (Unused arguments: '2023' ')')\n"
    },
    {
        "prompt": "How do I handle polygons with holes in `mocshape`?",
        "response": "The documentation notes that for STC-S, POLYGON winding direction is ignored, and for TFCat, holes are not displayed correctly [4, 9]. This suggests that `mocshape` may not handle polygons with holes correctly and might fill them in.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: The\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from the positions in every FITS table within `my_archive.fits`.",
        "response": "stilts tcat in=my_archive.fits multi=true | stilts mocshape in=- shape=point coords='array(RA,DEC)' out=archive_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\nError: No file, URL or command \"my_archive.fits\"\n"
    },
    {
        "prompt": "Generate a MOC for circles whose radius is `0.1 * log10(FLUX)`.",
        "response": "stilts mocshape in=flux_cat.fits shape=circle coords='array(RA,DEC,0.1*log10(FLUX))' out=flux_scaled_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can I use `mocshape` to find regions with NO coverage?",
        "response": "Not directly. `mocshape` creates a MOC of the covered regions. You would need to use another tool or a script that can perform a 'NOT' operation on the generated MOC against an all-sky MOC.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: Not\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "My table has two radius columns, `R1` and `R2`. I need to use the larger of the two for the MOC.",
        "response": "stilts mocshape in=radii.fits shape=circle coords='array(RA,DEC,max(R1,R2))' out=max_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC for all sources with a parallax greater than 100 mas.",
        "response": "stilts mocshape in=gaia.fits icmd='select PARALLAX > 100' shape=point coords='array(ra,dec)' out=nearby_stars.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PARALLAX > 100\n\nUsage: select <expr>\n    (Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What does a negative order mean for `mocshape`?",
        "response": "The `order` parameter must be a non-negative integer between 0 and 29 [1]. A negative value is not permitted and will result in an error.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: order: not found\n\nNo such task: The\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from a table where the coordinates are in the FK4 system.",
        "response": "stilts mocshape in=fk4_cat.fits icmd='addskycoords fk4 fk5 RA_FK4 DEC_FK4 RA_J2000 DEC_J2000' shape=point coords='array(RA_J2000, DEC_J2000)' out=fk4_converted_moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need the footprint for sources where the flux error is less than 5% of the flux.",
        "response": "stilts mocshape in=fluxes.fits icmd='select FLUX_ERR < (0.05 * FLUX)' shape=point coords='array(RA,DEC)' out=low_relative_error.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '(0.05' '*' 'FLUX)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX_ERR < (0.05 * FLUX)\n\nUsage: select <expr>\n    (Unused arguments: '<' '(0.05' '*' 'FLUX)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My radius column `DIAM_ARCSEC` is a diameter in arcseconds. How do I use it?",
        "response": "stilts mocshape in=diameters.fits shape=circle coords='array(RA,DEC,DIAM_ARCSEC/2.0/3600.0)' out=diameters_moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC of all sources from a simulation with galactic latitude |b|>20.",
        "response": "stilts mocshape in=:skysim:1e6 icmd='addskycoords icrs galactic ra dec l b' icmd='select abs(b)>20' shape=point coords='array(ra,dec)' out=high_latitude.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate the MOC of all stars of spectral type 'M'.",
        "response": "stilts mocshape in=spectral_types.fits icmd='select startsWith(SP_TYPE, \"M\")' shape=point coords='array(RA,DEC)' out=m_stars.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'M' ')'\n\nCommand was: select startsWith(SP_TYPE, \"M\")\n\nUsage: select <expr>\n    (Unused arguments: 'M' ')')\n"
    },
    {
        "prompt": "I need the footprint for sources that are not saturated (`SATURATED==false`).",
        "response": "stilts mocshape in=photometry.fits icmd='select !SATURATED' shape=point coords='array(RA,DEC)' out=unsaturated.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can `mocshape` handle tables with millions of rows?",
        "response": "Yes, STILTS commands are generally designed to handle large tables, often by streaming data to keep memory usage low [10].",
        "chat.jar": "failed",
        "error": "\nNo such task: Yes,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC for all sources that are within 5 degrees of the galactic center.",
        "response": "stilts mocshape in=allsky.fits icmd='addskycoords icrs galactic RA DEC L B' icmd='select skyDistance(L,B,0,0) < 5' shape=point coords='array(RA,DEC)' out=galactic_center.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistance(L,B,0,0) < 5\n\nUsage: select <expr>\n    (Unused arguments: '<' '5'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What does a negative radius in a `shape=circle` coordinate mean?",
        "response": "A negative radius is physically meaningless for a circle. `mocshape` will likely ignore rows where the radius expression evaluates to a negative number, so they will not contribute to the final MOC.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: A\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC for polygons defined in an array column, but only if the polygon has exactly 4 vertices.",
        "response": "stilts mocshape in=polygons.fits icmd='select size(VERTICES)==8' shape=polygon coords=VERTICES out=quadrilaterals.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want the MOC for all sources in `my_data.fits` that are NOT near the Andromeda galaxy (within 1 degree).",
        "response": "stilts mocshape in=my_data.fits icmd='select skyDistanceDegrees(RA,DEC,10.6847,41.2690) > 1' shape=point coords='array(RA,DEC)' out=not_andromeda.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistanceDegrees(RA,DEC,10.6847,41.2690) > 1\n\nUsage: select <expr>\n    (Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Generate a `cds_fits` format MOC from my `s_region` column.",
        "response": "stilts mocshape in=obscore.fits shape=stc-s coords=s_region mocfmt=cds_fits out=obscore_cds.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "The radius of each source is its `PSF_WIDTH` in arcseconds divided by 2. Generate the footprint.",
        "response": "stilts mocshape in=psf_data.fits shape=circle coords='array(RA,DEC,PSF_WIDTH/2.0/3600.0)' out=psf_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from all sources that are NOT within the SDSS footprint.",
        "response": "stilts mocshape in=my_sources.fits icmd='select !inMoc(\"V/139/sdss9\", RA, DEC)' shape=point coords='array(RA,DEC)' out=not_in_sdss.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select !inMoc(\"V/139/sdss9\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n"
    },
    {
        "prompt": "My radius is `R_PIX` pixels, and my plate scale is `SCALE_AS` arcsec/pixel. How do I make the MOC?",
        "response": "stilts mocshape in=plate_data.fits shape=circle coords='array(RA,DEC, R_PIX * SCALE_AS / 3600.0)' out=plate_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC at order 12 from every 5th row of my catalog.",
        "response": "stilts mocshape in=mycat.fits icmd='every 5' order=12 shape=point coords='array(RA,DEC)' out=mycat_every5_o12.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What does a zero radius mean for `shape=circle`?",
        "response": "A radius of zero means each position is treated as a single point on the sky. The MOC will cover the smallest HEALPix pixel at the given order that contains each point.",
        "chat.jar": "failed",
        "error": "\nNo such task: A\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate an ASCII MOC for objects where the year of observation (`OBS_YEAR`) is 2023.",
        "response": "stilts mocshape in=obs_log.fits icmd='select OBS_YEAR==2023' shape=point coords='array(RA,DEC)' mocfmt=ascii out=obs_2023.moc.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My `csv` file has columns ra_sex and dec_sex. Make me a MOC.",
        "response": "stilts mocshape in=data.csv ifmt=csv shape=point coords='array(hmsToDegrees(ra_sex),dmsToDegrees(dec_sex))' out=data_sex.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC for all sources with `parallax_error < 0.1`.",
        "response": "stilts mocshape in=gaia.fits icmd='select parallax_error < 0.1' shape=point coords='array(ra,dec)' out=low_parallax_error.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select parallax_error < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What does a MOC look like in ASCII format?",
        "response": "An ASCII MOC is a space-separated list of HEALPix orders and pixel indices, like '4/1 2 3 5/10-15 ...' [11]. You can generate one with `mocfmt=ascii`.",
        "chat.jar": "failed",
        "error": "\nNo such task: An\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from `data.fits`, but only for rows where `ID` matches a regex `^GAL-`.",
        "response": "stilts mocshape in=data.fits icmd='select matches(ID, \"^GAL-\")' shape=point coords='array(RA,DEC)' out=gal_ids.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '^GAL-' ')'\n\nCommand was: select matches(ID, \"^GAL-\")\n\nUsage: select <expr>\n    (Unused arguments: '^GAL-' ')')\n"
    },
    {
        "prompt": "My radius column `R_KPC` is in kiloparsecs and I have distance `D_MPC`. Create MOC.",
        "response": "stilts mocshape in=physical.fits shape=circle coords='array(RA,DEC,atan(R_KPC*1e-3/D_MPC)*180/PI)' out=physical_to_angular.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC from `data.fits`, but only keep sources that are in the VizieR 2MASS footprint.",
        "response": "stilts mocshape in=my_sources.fits icmd='select inMoc(\"II/246/out\", RA, DEC)' shape=point coords='array(RA,DEC)' out=in_2mass.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select inMoc(\"II/246/out\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n"
    },
    {
        "prompt": "My table has two radius columns, `R_MAJ` and `R_MIN`, and a position angle `PA`. How can I make a MOC?",
        "response": "You can use the STC-S shape type. First, create the STC-S string: `icmd='addcol stc_s \"Ellipse ICRS \"+RA+\" \"+DEC+\" \"+R_MAJ+\" \"+R_MIN+\" \"+PA'` then use that column: `stilts mocshape in=... shape=stc-s coords=stc_s ...`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: You\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC for all sources that are not flagged (`FLAG_COL == 0`).",
        "response": "stilts mocshape in=flags.fits icmd='select FLAG_COL==0' shape=point coords='array(RA,DEC)' out=unflagged.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My RA column contains null values. Will `mocshape` work?",
        "response": "`mocshape` will ignore rows where the coordinate expressions evaluate to a null value and only process the valid rows.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: will\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a JSON MOC for the region of the Andromeda galaxy from a simulated catalog.",
        "response": "stilts mocshape in=:skysim:1e4 icmd='select skyDistanceDegrees(ra,dec,10.68,41.27)<2' shape=point coords='array(ra,dec)' mocfmt=json out=m31.json",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My table has circle centers, but all circles have a radius of 0.1 deg. How can I specify that?",
        "response": "stilts mocshape in=centers.fits shape=circle coords='array(RA,DEC,0.1)' out=fixed_radius_circles.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC from all sources that have a valid proper motion measurement.",
        "response": "stilts mocshape in=pm.fits icmd='select !NULL_PMRA && !NULL_PMDEC' shape=point coords='array(RA,DEC)' out=pm_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' '!NULL_PMDEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select !NULL_PMRA && !NULL_PMDEC\n\nUsage: select <expr>\n    (Unused arguments: '&&' '!NULL_PMDEC'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I have an ASCII file with three columns: ID, RA, Dec. How do I make a footprint?",
        "response": "stilts mocshape in=id_ra_dec.txt ifmt=ascii shape=point coords='array($2, $3)' out=id_ra_dec.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My radius column is in radians. How to use it for circles?",
        "response": "stilts mocshape in=rad_radius.fits shape=circle coords='array(RA,DEC,radiansToDegrees(RADIUS_RAD))' out=rad_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a FITS MOC from a 10 million star simulation at order 9.",
        "response": "stilts mocshape in=:skysim:1e7 shape=point coords='array(ra,dec)' order=9 out=sim_10M_o9.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can you generate the MOC for my data and save it as a JSON file named `celestial_tapestry.moc.json`?",
        "response": "stilts mocshape in=my_data.fits mocfmt=json shape=point coords='array(RA,DEC)' out=celestial_tapestry.moc.json",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC for objects where the `OBS_TYPE` column is 'SPECTROSCOPY'.",
        "response": "stilts mocshape in=obs_log.fits icmd='select OBS_TYPE==\"SPECTROSCOPY\"' shape=point coords='array(RA,DEC)' out=spectroscopy_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from `data.fits`, but only for rows where `ID` matches a regex `^GAL-`.",
        "response": "stilts mocshape in=data.fits icmd='select matches(ID, \"^GAL-\")' shape=point coords='array(RA,DEC)' out=gal_ids.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '^GAL-' ')'\n\nCommand was: select matches(ID, \"^GAL-\")\n\nUsage: select <expr>\n    (Unused arguments: '^GAL-' ')')\n"
    },
    {
        "prompt": "Can `mocshape` output anything other than a MOC?",
        "response": "No, the primary purpose of `mocshape` is to generate a Multi-Order Coverage map (MOC) [2, B.8]. It outputs this MOC in one of several formats controlled by `mocfmt` [1].",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: \"(\" unexpected\n"
    },
    {
        "prompt": "Create a MOC for all sources in `mycat.fits` that are near (within 0.1 deg) the celestial equator.",
        "response": "stilts mocshape in=mycat.fits icmd='select abs(DEC) < 0.1' shape=point coords='array(RA,DEC)' out=equator_sources.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(DEC) < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Generate a MOC for sources with a measurement epoch after 2015.0.",
        "response": "stilts mocshape in=epochs.fits icmd='select EPOCH > 2015.0' shape=point coords='array(RA,DEC)' out=post_2015.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '2015.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select EPOCH > 2015.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '2015.0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My radius column `R_KPC` is in kiloparsecs and I have distance `D_MPC`. Create a MOC of circles.",
        "response": "stilts mocshape in=physical.fits shape=circle coords='array(RA,DEC,atan(R_KPC*1e-3/D_MPC)*180/PI)' out=physical_to_angular.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What's the command to make a MOC from the `RA_GAL` and `DEC_GAL` columns?",
        "response": "stilts mocshape in=galactic_cat.fits icmd='addskycoords galactic icrs RA_GAL DEC_GAL RA_ICRS DEC_ICRS' shape=point coords='array(RA_ICRS,DEC_ICRS)' out=galactic_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My table has two sets of corners for a bowtie shape. Can I represent this with `mocshape`?",
        "response": "Yes, for `shape=polygon`, a `NaN, NaN` pair in the coordinate array delimits distinct polygons for a single row [4]. So you can use an expression like `coords='array(RA1,D1,RA2,D2,RA3,D3, NaN,NaN, RA4,D4,RA5,D5,RA6,D6)'`.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: NaN,: not found\n\nNo such task: Yes,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from all sources that have a non-zero `IS_VARIABLE` flag.",
        "response": "stilts mocshape in=variables.fits icmd='select IS_VARIABLE != 0' shape=point coords='array(RA,DEC)' out=variable_sources.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select IS_VARIABLE != 0\n\nUsage: select <expr>\n    (Unused arguments: '!=' '0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My radius column `DIAM_ARCSEC` is a diameter in arcseconds. How do I use it with `shape=circle`?",
        "response": "stilts mocshape in=diameters.fits shape=circle coords='array(RA,DEC,DIAM_ARCSEC / 2.0 / 3600.0)' out=diameters_moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate the MOC of all stars of spectral type 'G' from my catalog.",
        "response": "stilts mocshape in=spectral_types.fits icmd='select startsWith(SP_TYPE, \"G\")' shape=point coords='array(RA,DEC)' out=g_stars.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'G' ')'\n\nCommand was: select startsWith(SP_TYPE, \"G\")\n\nUsage: select <expr>\n    (Unused arguments: 'G' ')')\n"
    },
    {
        "prompt": "Create a MOC for all positions in `cat_a.fits` and `cat_b.csv` combined.",
        "response": "stilts tcatn nin=2 in1=cat_a.fits icmd1='keepcols \"RA DEC\"' in2=cat_b.csv ifmt2=csv icmd2='keepcols \"RA DEC\"' | stilts mocshape in=- shape=point coords='array(RA,DEC)' out=combined_ab.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n"
    },
    {
        "prompt": "Generate a MOC for sources with a given radius, but exclude sources near the galactic center.",
        "response": "stilts mocshape in=sources.fits icmd='addskycoords icrs galactic RA DEC L B' icmd='select skyDistance(L,B,0,0) > 10' shape=circle coords='array(RA,DEC,0.1)' out=no_gc_sources.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistance(L,B,0,0) > 10\n\nUsage: select <expr>\n    (Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I need the MOC of a list of UNIQ values at order 10.",
        "response": "stilts mocshape in=uniqs.fits shape=uniq coords=UNIQ_COL order=10 out=uniq_moc_o10.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC for all sources in `mycat.fits` with a radius of 0.",
        "response": "This is equivalent to `shape=point`. `stilts mocshape in=mycat.fits shape=point coords='array(RA,DEC)' out=points_only.moc.fits`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: This\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC from a table with a fixed 1 milliparcsecond radius per point.",
        "response": "stilts mocshape in=hires_points.fits shape=circle coords='array(RA,DEC,1.0/3600000.0)' out=mas_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create the footprint of all sources with a parallax measurement (`PARALLAX` is not null).",
        "response": "stilts mocshape in=gaia_sample.fits icmd='select !NULL_PARALLAX' shape=point coords='array(ra,dec)' out=parallax_sources_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My input table has a column 'footprint' with ASCII MOC strings. How can I combine them all into one MOC?",
        "response": "You can use `mocshape` for that: `stilts mocshape in=mocs_table.fits shape=moc-ascii coords=footprint out=combined.moc.fits` [4].",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n/bin/sh: 1: mocshape: not found\n\nNo such task: You\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC at the maximum supported resolution, order 29.",
        "response": "stilts mocshape in=small_area.fits order=29 shape=point coords='array(ra,dec)' out=max_resolution.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have RA and DEC in separate files. Can I make a footprint?",
        "response": "First you need to join them into a single table: `stilts tjoin nin=2 in1=ra_list.txt ifmt1=ascii in2=dec_list.txt ifmt2=ascii | stilts mocshape in=- ifmt=ascii shape=point coords='array($1, $2)' out=ra_dec_footprint.moc.fits`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: tjoin: not found\n/bin/sh: 1: mocshape: not found\n\nNo such task: First\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a JSON MOC for the galactic plane (|b| < 5 degrees).",
        "response": "stilts mocshape in=:skysim:1e6 icmd='addskycoords icrs galactic ra dec l b' icmd='select abs(b) < 5' shape=point coords='array(ra, dec)' mocfmt=json out=galactic_plane.moc.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(b) < 5\n\nUsage: select <expr>\n    (Unused arguments: '<' '5'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Generate a MOC for all sources where the error in position is below a certain threshold.",
        "response": "stilts mocshape in=errors.fits icmd='select hypot(RA_ERR,DEC_ERR) < 0.5' shape=point coords='array(RA,DEC)' out=low_total_err.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select hypot(RA_ERR,DEC_ERR) < 0.5\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.5'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Create a MOC for all data points that have an associated spectrum (`HAS_SPECTRUM` column is true).",
        "response": "stilts mocshape in=data_products.fits icmd='select HAS_SPECTRUM' shape=point coords='array(RA,DEC)' out=spectral_coverage.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC from a file `events.fits`, but only use rows with an even index number.",
        "response": "stilts mocshape in=events.fits icmd='select $0 % 2 == 0' shape=point coords='array(RA,DEC)' out=even_rows_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '%' '2' '==' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select $0 % 2 == 0\n\nUsage: select <expr>\n    (Unused arguments: '%' '2' '==' '0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Generate the footprint for objects where the magnitude is between 15 and 16.",
        "response": "stilts mocshape in=magnitudes.fits icmd='select MAG > 15 && MAG < 16' shape=point coords='array(RA,DEC)' out=mag_slice_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '15' '&&' 'MAG' '<' '16'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG > 15 && MAG < 16\n\nUsage: select <expr>\n    (Unused arguments: '>' '15' '&&' 'MAG' '<' '16'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My radius column `R_MAS` is in milliarcseconds. How do I use it for circles?",
        "response": "stilts mocshape in=mas_radius.fits shape=circle coords='array(RA,DEC,R_MAS / 3600000.0)' out=mas_radius_coverage.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate the MOC of all sources in a given RA range, e.g., 200 < RA < 210.",
        "response": "stilts mocshape in=survey.fits icmd='select RA > 200 && RA < 210' shape=point coords='array(RA,DEC)' out=ra_slice.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '200' '&&' 'RA' '<' '210'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select RA > 200 && RA < 210\n\nUsage: select <expr>\n    (Unused arguments: '>' '200' '&&' 'RA' '<' '210'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I need the footprint for sources with a color `g-r` less than 0.1.",
        "response": "stilts mocshape in=colors.fits icmd='select g-r < 0.1' shape=point coords='array(RA,DEC)' out=blue_sources_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select g-r < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My table has FK4 coords and a radius in arcmin. How to make a J2000 MOC?",
        "response": "stilts mocshape in=fk4_data.fits icmd='addskycoords fk4 fk5 RA_FK4 DEC_FK4 RA_J2000 DEC_J2000' shape=circle coords='array(RA_J2000,DEC_J2000,RADIUS_ARCMIN/60.0)' out=fk4_to_fk5_circles.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create the footprint for all sources except those where the `MASK` column is non-zero.",
        "response": "stilts mocshape in=masked_data.fits icmd='select MASK==0' shape=point coords='array(RA,DEC)' out=unmasked_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC for all sources that are present in both `cat_A.fits` and `cat_B.fits`.",
        "response": "stilts tmatch2 in1=cat_A.fits in2=cat_B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' | stilts mocshape in=- shape=point coords='array(RA_1,DEC_1)' out=common_AB.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n"
    },
    {
        "prompt": "Generate the footprint for all sources except those where `QUALITY` is 'bad'.",
        "response": "stilts mocshape in=quality.fits icmd='select QUALITY != \"bad\"' shape=point coords='array(RA,DEC)' out=good_quality.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'bad'\n\nCommand was: select QUALITY != \"bad\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'bad')\n"
    },
    {
        "prompt": "My RA column contains NaN values. What will happen?",
        "response": "`mocshape` ignores rows where the coordinate expressions result in a NaN or null value, so those rows will not contribute to the MOC.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: ignores\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a `cds_ascii` format MOC from `s_region`.",
        "response": "stilts mocshape in=obscore.fits shape=stc-s coords=s_region mocfmt=cds_ascii out=obscore.moc.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can `mocshape` read a bzipped FITS file?",
        "response": "Yes, `mocshape` can read files compressed with bzip2, gzip, or Unix compress automatically [8].",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: Yes,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC for pointings where the `OBSERVER` name is 'Hubble'.",
        "response": "stilts mocshape in=obs_log.fits icmd='select OBSERVER==\"Hubble\"' shape=circle coords='array(RA,DEC,FOV)' out=hubble_pointings.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My `csv` file has columns ra_hms and dec_dms. Make me a MOC.",
        "response": "stilts mocshape in=data.csv ifmt=csv shape=point coords='array(hmsToDegrees(ra_hms),dmsToDegrees(dec_dms))' out=data_sexagesimal.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from the positions in `my_data.fits`, but give me an error if any of the coordinates are null.",
        "response": "stilts mocshape in=my_data.fits icmd='assert !NULL_RA && !NULL_DEC' shape=point coords='array(RA,DEC)' out=asserted_coords.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!NULL_DEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: assert !NULL_RA && !NULL_DEC\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '!NULL_DEC'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Generate a MOC at order 11 covering all sources that are more than 10 degrees from the North Ecliptic Pole.",
        "response": "stilts mocshape in=all_sky.fits icmd='addskycoords icrs ecliptic RA DEC ELON ELAT' icmd='select skyDistance(ELON,ELAT,270,90) > 10' shape=point coords='array(RA,DEC)' out=far_from_nep.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistance(ELON,ELAT,270,90) > 10\n\nUsage: select <expr>\n    (Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I need the footprint for a 1 pixel radius from my camera, where the plate scale is 0.5 arcsec/pixel.",
        "response": "stilts mocshape in=detections.fits shape=circle coords='array(RA,DEC, 1.0 * 0.5 / 3600.0)' out=single_pixel_regions.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from the rows where the `MAG_ERROR` is at its minimum value for the whole table.",
        "response": "stilts mocshape in=photometry.fits icmd='select MAG_ERROR==minimum(MAG_ERROR)' shape=point coords='array(RA,DEC)' out=best_photometry.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can you generate a MOC for my data and save it as a JSON file named `celestial_tapestry.moc.json`?",
        "response": "stilts mocshape in=my_data.fits mocfmt=json shape=point coords='array(RA,DEC)' out=celestial_tapestry.moc.json",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My radius is given by column `R_UAS` in microarcseconds. How do I use it for circles?",
        "response": "stilts mocshape in=uas_radii.fits shape=circle coords='array(RA,DEC,R_UAS/3600000000.0)' out=uas_radii_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from a table with a fixed 0.5 arcsec radius, at order 15.",
        "response": "stilts mocshape in=points.fits shape=circle coords='array(RA,DEC,0.5/3600.0)' order=15 out=hires_circles.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need the footprint for sources that are not saturated (`SATURATED` column is false).",
        "response": "stilts mocshape in=photometry.fits icmd='select !SATURATED' shape=point coords='array(RA,DEC)' out=unsaturated.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What's the command to get a JSON MOC from a simulation of exactly 1 star?",
        "response": "stilts mocshape in=:skysim:1 shape=point coords='array(ra,dec)' mocfmt=json out=single_star.moc.json",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC at order 10 covering all sources that are more than 170 degrees away from the galactic center.",
        "response": "stilts mocshape in=all_sky.fits icmd='addskycoords icrs galactic RA DEC L B' icmd='select skyDistance(L,B,0,0) > 170' shape=point coords='array(RA,DEC)' out=far_field.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '170'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistance(L,B,0,0) > 170\n\nUsage: select <expr>\n    (Unused arguments: '>' '170'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Create a MOC from the rows where the `MAG_ERROR` is less than 0.05.",
        "response": "stilts mocshape in=photometry.fits icmd='select MAG_ERR < 0.05' shape=point coords='array(RA,DEC)' out=low_error_phot.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.05'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG_ERR < 0.05\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.05'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Generate a MOC for circles whose radius is determined by a lookup table based on the `TYPE` column.",
        "response": "stilts mocshape in=objects.fits shape=circle coords='array(RA,DEC,(TYPE==1 ? 0.1 : (TYPE==2 ? 0.2 : 0.05)))' out=type_dependent_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from a sample of rows where the row index is a prime number (up to a limit).",
        "response": "stilts mocshape in=huge_catalog.fits icmd='select isPrime($0)' shape=point coords='array(RA,DEC)' out=prime_rows.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My coordinate columns are simply named `c1` and `c2`. How do I generate a MOC?",
        "response": "stilts mocshape in=generic_coords.fits shape=point coords='array(c1, c2)' out=generic_coords_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have ecliptic coordinates in radians. How do I make the MOC?",
        "response": "stilts mocshape in=ecliptic_rad.fits icmd='addskycoords ecliptic icrs radiansToDegrees(ELON_RAD) radiansToDegrees(ELAT_RAD) RA_ICRS DEC_ICRS' shape=point coords='array(RA_ICRS,DEC_ICRS)' out=ecliptic_rad_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC for circles whose radius is `abs(MAGNITUDE)/100` degrees.",
        "response": "stilts mocshape in=magnitudes.fits shape=circle coords='array(RA,DEC,abs(MAGNITUDE)/100.0)' out=mag_scaled_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can `mocshape` read a file from a URL?",
        "response": "Yes, the `in` parameter can accept a URL [12]. For example: `stilts mocshape in=http://example.com/cat.fits ...`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: \"in\" unexpected\n"
    },
    {
        "prompt": "Generate a MOC for sources with a `CONFIDENCE_LEVEL` of 95% or higher.",
        "response": "stilts mocshape in=confident_detections.fits icmd='select CONFIDENCE_LEVEL >= 0.95' shape=point coords='array(RA,DEC)' out=confident_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0.95'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select CONFIDENCE_LEVEL >= 0.95\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0.95'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I need the footprint for the second HDU of my FITS file `multi_data.fits`.",
        "response": "stilts mocshape in=multi_data.fits#2 shape=point coords='array(RA,DEC)' out=hdu2_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC at order 11 from the combined positions of `a.csv`, `b.csv`, and `c.csv`.",
        "response": "stilts tcat ifmt=csv in=a.csv in=b.csv in=c.csv | stilts mocshape in=- order=11 shape=point coords='array($1,$2)' out=abc_combined.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n"
    },
    {
        "prompt": "Generate a MOC for objects where `COLOR_INDEX` is between 0.5 and 1.0.",
        "response": "stilts mocshape in=colors.fits icmd='select COLOR_INDEX > 0.5 && COLOR_INDEX < 1.0' shape=point coords='array(RA,DEC)' out=color_selected.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.5' '&&' 'COLOR_INDEX' '<' '1.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select COLOR_INDEX > 0.5 && COLOR_INDEX < 1.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.5' '&&' 'COLOR_INDEX' '<' '1.0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My `csv` file has headerless columns. How do I reference them to make a MOC?",
        "response": "You can reference them by index, starting with `$1`. For example: `stilts mocshape in=data.csv ifmt=csv icmd='select $3>0' shape=point coords='array($1,$2)' out=data.moc.fits`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: You\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from the central 50% of the rows in my catalog.",
        "response": "stilts mocshape in=mycat.fits icmd='select $0 > ($nrow*0.25) && $0 < ($nrow*0.75)' shape=point coords='array(RA,DEC)' out=central_50pct.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '($nrow*0.25)' '&&' '$0' '<' '($nrow*0.75)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select $0 > ($nrow*0.25) && $0 < ($nrow*0.75)\n\nUsage: select <expr>\n    (Unused arguments: '>' '($nrow*0.25)' '&&' '$0' '<' '($nrow*0.75)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Generate the footprint for all sources in the file `candidates.fits` at order 11.",
        "response": "stilts mocshape in=candidates.fits order=11 shape=point coords='array(RA,DEC)' out=candidates_o11.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from a `cdf` file.",
        "response": "stilts mocshape in=data.cdf ifmt=cdf shape=point coords='array(RA,DEC)' out=cdf_coverage.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC for all sources with a non-blank name.",
        "response": "stilts mocshape in=names.fits icmd='select !NULL_NAME' shape=point coords='array(RA,DEC)' out=named_objects_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need a MOC with a fixed radius of 0.001 degrees for all points.",
        "response": "stilts mocshape in=points.fits shape=circle coords='array(RA,DEC,0.001)' out=small_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create an ASCII MOC for the southern galactic hemisphere from a simulation.",
        "response": "stilts mocshape in=:skysim:1e5 icmd='addskycoords icrs galactic ra dec l b' icmd='select b < 0' shape=point coords='array(ra,dec)' mocfmt=ascii out=south_galactic_sim.txt",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select b < 0\n\nUsage: select <expr>\n    (Unused arguments: '<' '0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What are the output format options for `mocfmt`?",
        "response": "The `mocfmt` parameter supports `ascii`, `fits`, `json`, `raw`, `summary`, `cds_ascii`, `cds_json`, and `cds_fits` formats [1].",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocfmt: not found\n/bin/sh: 1: ascii: not found\n/bin/sh: 1: fits: not found\n/bin/sh: 1: json: not found\n/bin/sh: 1: raw: not found\n/bin/sh: 1: summary: not found\n/bin/sh: 1: cds_ascii: not found\n/bin/sh: 1: cds_json: not found\n/bin/sh: 1: cds_fits: not found\n\nNo such task: The\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC from every 5th row of my input table `observations.vot`.",
        "response": "stilts mocshape in=observations.vot icmd='every 5' shape=point coords='array(RA,DEC)' out=obs_every_5.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from a file where the RA column needs to be fixed with `ra = ra % 360`.",
        "response": "stilts mocshape in=wrapped_ra.fits icmd='replacecol ra \"ra % 360\"' shape=point coords='array(ra,dec)' out=unwrapped_ra.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a catalog of globular clusters. Generate a MOC with a 0.5 degree radius around each.",
        "response": "stilts mocshape in=globulars.fits shape=circle coords='array(RA,DEC,0.5)' out=globular_regions.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a FITS MOC at order 6 from a simulated dataset.",
        "response": "stilts mocshape in=:skysim:100000 shape=point coords='array(ra,dec)' order=6 out=sim_o6.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC of all sources within 10 degrees of the north celestial pole.",
        "response": "stilts mocshape in=allsky.fits icmd='select DEC > 80' shape=point coords='array(RA,DEC)' out=ncp_region.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '80'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select DEC > 80\n\nUsage: select <expr>\n    (Unused arguments: '>' '80'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My table has `RA_HRS` and `DEC_DMS`. How do I generate a footprint?",
        "response": "stilts mocshape in=mixed_sex.fits shape=point coords='array(hoursToDegrees(RA_HRS),dmsToDegrees(DEC_DMS))' out=mixed_sex_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What does a MOC generated by `mocshape` represent?",
        "response": "It represents the union of the coverage on the sky of all the shapes (points, circles, polygons, etc.) from your input table, described as a list of HEALPix pixels of different sizes [1].",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: \"(\" unexpected\n"
    },
    {
        "prompt": "Create an ASCII MOC at order 10 from a random 1% of my catalog.",
        "response": "stilts mocshape in=mycat.fits icmd='random 0.01' order=10 mocfmt=ascii shape=point coords='array(RA,DEC)' out=random_1pct.txt",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0.01'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 0.01\n\nUsage: random\n    (Unused arguments: '0.01'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "My table has two radius columns, `R_MAJ` and `R_MIN`, and a position angle `PA`. Can I make an STC-S MOC?",
        "response": "Yes, by constructing the STC-S string first: `stilts mocshape in=ellipses.fits icmd='addcol stcs \"Ellipse ICRS \"+RA+\" \"+DEC+\" \"+R_MAJ+\" \"+R_MIN+\" \"+PA' shape=stc-s coords=stcs out=ellipses.moc.fits`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: Yes,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a FITS MOC from a 10 million star simulation at order 9.",
        "response": "stilts mocshape in=:skysim:1e7 shape=point coords='array(ra,dec)' order=9 mocfmt=json out=sim_10M_o9.moc.json",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can `mocshape` generate a footprint from image files?",
        "response": "No, `mocshape` requires a tabular input with columns specifying sky shapes [2, B.8]. It cannot directly process image files like FITS images.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: No,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "My table has two sets of corners for a bowtie shape. How can I represent this?",
        "response": "For `shape=polygon`, a `NaN, NaN` pair in the coordinate array delimits distinct polygons for a single row [4]. So you can use an expression like `coords='array(RA1,D1,RA2,D2,RA3,D3, NaN,NaN, RA4,D4,RA5,D5,RA6,D6)'`.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: NaN,: not found\n\nNo such task: For\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a `cds_ascii` format MOC from `s_region`.",
        "response": "stilts mocshape in=obscore.fits shape=stc-s coords=s_region mocfmt=cds_ascii out=obscore.moc.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My table has FK4 coordinates. Can I generate a MOC directly?",
        "response": "No, MOCs are defined in ICRS. You must first convert the coordinates using a filter: `stilts mocshape in=fk4.fits icmd='addskycoords fk4 fk5 RA_FK4 DEC_FK4 RA_ICRS DEC_ICRS' shape=point coords='array(RA_ICRS, DEC_ICRS)' out=fk4_converted.moc.fits` [13]",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: No,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "I need to get the MOC for the first 100 entries of my `s_region` column.",
        "response": "stilts mocshape in=obscore.fits icmd='head 100' shape=stc-s coords=s_region out=first_100_regions.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create the MOC for a list of HEALPix pixels given by order and index columns.",
        "response": "stilts mocshape in=pixels.fits shape=uniq coords='mocUniq(ORDER_COL, INDEX_COL)' out=pixels.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate the MOC for all sources where the `QUALITY` flag is not 'bad'.",
        "response": "stilts mocshape in=data.fits icmd='select QUALITY != \"bad\"' shape=point coords='array(RA,DEC)' out=good_quality.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'bad'\n\nCommand was: select QUALITY != \"bad\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'bad')\n"
    },
    {
        "prompt": "My polygon vertices are in an array-valued column `VERT_ARRAY`. How do I use it?",
        "response": "stilts mocshape in=polygons.fits shape=polygon coords=VERT_ARRAY out=polygon_arrays.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a FITS MOC from a list of circles with 1 arcminute radii.",
        "response": "stilts mocshape in=targets.fits shape=circle coords='array(RA,DEC,1.0/60.0)' mocfmt=fits out=arcmin_circles.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What does an order of 29 mean?",
        "response": "An order of 29 is the highest resolution for a MOC, corresponding to an extremely fine grid of pixels on the sky [6]. It is suitable only for very small regions. Example: `stilts mocshape in=small.fits order=29 ...`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: An\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC from the positions in a Parquet file.",
        "response": "stilts mocshape in=data.parquet shape=point coords='array(ra,dec)' out=parquet_moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I make a MOC from circles where the radius depends on magnitude, e.g., `5.0/phot_g_mean_mag`?",
        "response": "stilts mocshape in=gaia.fits shape=circle coords='array(ra,dec, 5.0/phot_g_mean_mag)' out=mag_dependent_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Combine the footprints of `survey_a.fits` (points) and `survey_b.fits` (STC-S polygons).",
        "response": "stilts tcatn nin=2 in1=survey_a.fits icmd1='addcol region array(RA,DEC)' in2=survey_b.fits icmd2='addcol region s_region' | stilts mocshape in=- shape=stc-s coords=region out=combined_surveys.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n"
    },
    {
        "prompt": "Can `mocshape` handle STC-S UNIONs?",
        "response": "Yes, the documentation indicates that `mocshape` with `shape=stc-s` can handle UNIONs of all shape types [7].",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: Yes,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate an order 0 MOC. What would that look like?",
        "response": "An order 0 MOC represents coverage using the 12 base HEALPix pixels. It is the coarsest possible MOC. `stilts mocshape in=mycat.fits shape=point coords='array(RA,DEC)' order=0 out=order0.moc.fits` [6]",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: An\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from a `colfits` file.",
        "response": "stilts mocshape in=data.colfits ifmt=colfits shape=point coords='array(ra,dec)' out=colfits_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt: Unknown format colfits\n    (No table handler available for colfits)\nUsage: ifmt=<in-format>\n\n"
    },
    {
        "prompt": "My input has STC-S strings, but some are invalid. Will `mocshape` fail?",
        "response": "It will likely produce warnings for the invalid rows and skip them, but continue processing the valid ones. You should check the output on standard error for any messages.",
        "chat.jar": "failed",
        "error": "\nNo such task: It\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate a MOC for all sources except those in the Small Magellanic Cloud.",
        "response": "stilts mocshape in=allsky.fits icmd='select skyDistanceDegrees(RA,DEC,13.18,-72.82) > 5' shape=point coords='array(RA,DEC)' out=no_smc.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistanceDegrees(RA,DEC,13.18,-72.82) > 5\n\nUsage: select <expr>\n    (Unused arguments: '>' '5'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I have a table of MOCs. I want to create a new column which is the sky fraction of each, and then make a combined MOC of only the large ones.",
        "response": "stilts tpipe in=mocs.fits cmd='addcol sky_frac mocSkyProportion($1)' cmd='select sky_frac > 0.01' | stilts mocshape in=- shape=moc-ascii coords='$1' out=large_mocs.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\nError: Unused arguments: '>' '0.01'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select sky_frac > 0.01\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.01'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Can `mocshape` read a gzipped CSV file?",
        "response": "Yes, STILTS commands automatically decompress gzipped inputs [8]. `stilts mocshape in=data.csv.gz ifmt=csv shape=point coords='array(ra,dec)' out=data.moc.fits`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: Yes,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate the MOC of all pointings from a log file that happened in 2023.",
        "response": "stilts mocshape in=log.fits icmd='select startsWith(OBS_DATE, \"2023\")' shape=circle coords='array(RA,DEC,FOV_RADIUS)' out=log_2023.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '2023' ')'\n\nCommand was: select startsWith(OBS_DATE, \"2023\")\n\nUsage: select <expr>\n    (Unused arguments: '2023' ')')\n"
    },
    {
        "prompt": "How do I handle polygons with holes in `mocshape`?",
        "response": "The documentation notes that for STC-S, POLYGON winding direction is ignored, and for TFCat, holes are not displayed correctly [4, 9]. This suggests that `mocshape` may not handle polygons with holes correctly and might fill them in.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: The\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from the positions in every FITS table within `my_archive.fits`.",
        "response": "stilts tcat in=my_archive.fits multi=true | stilts mocshape in=- shape=point coords='array(RA,DEC)' out=archive_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\nError: No file, URL or command \"my_archive.fits\"\n"
    },
    {
        "prompt": "Generate a MOC for circles whose radius is `0.1 * log10(FLUX)`.",
        "response": "stilts mocshape in=flux_cat.fits shape=circle coords='array(RA,DEC,0.1*log10(FLUX))' out=flux_scaled_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can I use `mocshape` to find regions with NO coverage?",
        "response": "Not directly. `mocshape` creates a MOC of the covered regions. You would need to use another tool or a script that can perform a 'NOT' operation on the generated MOC against an all-sky MOC.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: Not\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "My table has two radius columns, `R1` and `R2`. I need to use the larger of the two for the MOC.",
        "response": "stilts mocshape in=radii.fits shape=circle coords='array(RA,DEC,max(R1,R2))' out=max_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC for all sources with a parallax greater than 100 mas.",
        "response": "stilts mocshape in=gaia.fits icmd='select PARALLAX > 100' shape=point coords='array(ra,dec)' out=nearby_stars.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PARALLAX > 100\n\nUsage: select <expr>\n    (Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What does a negative radius in a `shape=circle` coordinate mean?",
        "response": "A negative radius is physically meaningless for a circle. `mocshape` will likely ignore rows where the radius expression evaluates to a negative number, so they will not contribute to the final MOC.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: A\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC for polygons defined in an array column, but only if the polygon has exactly 4 vertices.",
        "response": "stilts mocshape in=polygons.fits icmd='select size(VERTICES)==8' shape=polygon coords=VERTICES out=quadrilaterals.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want the MOC for all sources in `my_data.fits` that are NOT near the Andromeda galaxy (within 1 degree).",
        "response": "stilts mocshape in=my_data.fits icmd='select skyDistanceDegrees(RA,DEC,10.6847,41.2690) > 1' shape=point coords='array(RA,DEC)' out=not_andromeda.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistanceDegrees(RA,DEC,10.6847,41.2690) > 1\n\nUsage: select <expr>\n    (Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Generate a `cds_fits` format MOC from my `s_region` column.",
        "response": "stilts mocshape in=obscore.fits shape=stc-s coords=s_region mocfmt=cds_fits out=obscore_cds.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "The radius of each source is its `PSF_WIDTH` in arcseconds divided by 2. Generate the footprint.",
        "response": "stilts mocshape in=psf_data.fits shape=circle coords='array(RA,DEC,PSF_WIDTH/2.0/3600.0)' out=psf_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a MOC from all sources that are NOT within the SDSS footprint.",
        "response": "stilts mocshape in=my_sources.fits icmd='select !inMoc(\"V/139/sdss9\", RA, DEC)' shape=point coords='array(RA,DEC)' out=not_in_sdss.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select !inMoc(\"V/139/sdss9\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n"
    },
    {
        "prompt": "My radius is `R_PIX` pixels, and my plate scale is `SCALE_AS` arcsec/pixel. How do I make the MOC?",
        "response": "stilts mocshape in=plate_data.fits shape=circle coords='array(RA,DEC, R_PIX * SCALE_AS / 3600.0)' out=plate_footprint.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC at order 12 from every 5th row of my catalog.",
        "response": "stilts mocshape in=mycat.fits icmd='every 5' order=12 shape=point coords='array(RA,DEC)' out=mycat_every5_o12.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What does a zero radius mean for `shape=circle`?",
        "response": "A radius of zero means each position is treated as a single point on the sky. The MOC will cover the smallest HEALPix pixel at the given order that contains each point.",
        "chat.jar": "failed",
        "error": "\nNo such task: A\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Generate an ASCII MOC for objects where the year of observation (`OBS_YEAR`) is 2023.",
        "response": "stilts mocshape in=obs_log.fits icmd='select OBS_YEAR==2023' shape=point coords='array(RA,DEC)' mocfmt=ascii out=obs_2023.moc.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My `csv` file has columns ra_sex and dec_sex. Make me a MOC.",
        "response": "stilts mocshape in=data.csv ifmt=csv shape=point coords='array(hmsToDegrees(ra_sex),dmsToDegrees(dec_sex))' out=data_sex.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC for all sources with `parallax_error < 0.1`.",
        "response": "stilts mocshape in=gaia.fits icmd='select parallax_error < 0.1' shape=point coords='array(ra,dec)' out=low_parallax_error.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select parallax_error < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "What does a MOC look like in ASCII format?",
        "response": "An ASCII MOC is a space-separated list of HEALPix orders and pixel indices, like '4/1 2 3 5/10-15 ...' [11]. You can generate one with `mocfmt=ascii`.",
        "chat.jar": "failed",
        "error": "\nNo such task: An\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from `data.fits`, but only for rows where `ID` matches a regex `^GAL-`.",
        "response": "stilts mocshape in=data.fits icmd='select matches(ID, \"^GAL-\")' shape=point coords='array(RA,DEC)' out=gal_ids.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '^GAL-' ')'\n\nCommand was: select matches(ID, \"^GAL-\")\n\nUsage: select <expr>\n    (Unused arguments: '^GAL-' ')')\n"
    },
    {
        "prompt": "My radius column `R_KPC` is in kiloparsecs and I have distance `D_MPC`. Create MOC.",
        "response": "stilts mocshape in=physical.fits shape=circle coords='array(RA,DEC,atan(R_KPC*1e-3/D_MPC)*180/PI)' out=physical_to_angular.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC from `data.fits`, but only keep sources that are in the VizieR 2MASS footprint.",
        "response": "stilts mocshape in=my_sources.fits icmd='select inMoc(\"II/246/out\", RA, DEC)' shape=point coords='array(RA,DEC)' out=in_2mass.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select inMoc(\"II/246/out\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n"
    },
    {
        "prompt": "My table has two radius columns, `R_MAJ` and `R_MIN`, and a position angle `PA`. How can I make a MOC?",
        "response": "You can use the STC-S shape type. First, create the STC-S string: `icmd='addcol stc_s \"Ellipse ICRS \"+RA+\" \"+DEC+\" \"+R_MAJ+\" \"+R_MIN+\" \"+PA'` then use that column: `stilts mocshape in=... shape=stc-s coords=stc_s ...`",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: You\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a MOC from all sources that are not flagged (`FLAG_COL == 0`).",
        "response": "stilts mocshape in=flags.fits icmd='select FLAG_COL==0' shape=point coords='array(RA,DEC)' out=unflagged.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a JSON MOC for the region of the Andromeda galaxy from a simulated catalog.",
        "response": "stilts mocshape in=:skysim:1e4 icmd='select skyDistanceDegrees(ra,dec,10.68,41.27)<2' shape=point coords='array(ra,dec)' mocfmt=json out=m31.json",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My table has circle centers, but all circles have a radius of 0.1 deg. How can I specify that?",
        "response": "stilts mocshape in=centers.fits shape=circle coords='array(RA,DEC,0.1)' out=fixed_radius_circles.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a MOC from all sources that have a valid proper motion measurement.",
        "response": "stilts mocshape in=pm.fits icmd='select !NULL_PMRA && !NULL_PMDEC' shape=point coords='array(RA,DEC)' out=pm_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' '!NULL_PMDEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select !NULL_PMRA && !NULL_PMDEC\n\nUsage: select <expr>\n    (Unused arguments: '&&' '!NULL_PMDEC'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I have an ASCII file with three columns: ID, RA, Dec. How do I make a footprint?",
        "response": "stilts mocshape in=id_ra_dec.txt ifmt=ascii shape=point coords='array($2, $3)' out=id_ra_dec.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My radius column is in radians. How to use it for circles?",
        "response": "stilts mocshape in=rad_radius.fits shape=circle coords='array(RA,DEC,radiansToDegrees(RADIUS_RAD))' out=rad_radius.moc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a FITS MOC from a 10 million star simulation at order 9.",
        "response": "stilts mocshape in=:skysim:1e7 shape=point coords='array(ra,dec)' order=9 mocfmt=json out=sim_10M_o9.moc.json",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can `mocshape` generate a footprint from image files?",
        "response": "No, `mocshape` requires a tabular input with columns specifying sky shapes [2, B.8]. It cannot directly process image files like FITS images.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nNo such task: No,\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "My table has two sets of corners for a bowtie shape. How can I represent this?",
        "response": "For `shape=polygon`, a `NaN, NaN` pair in the coordinate array delimits distinct polygons for a single row [4]. So you can use an expression like `coords='array(RA1,D1,RA2,D2,RA3,D3, NaN,NaN, RA4,D4,RA5,D5,RA6,D6)'`.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: NaN,: not found\n\nNo such task: For\n\nUsage:\n   stilts [-help] [-version] [-verbose] [-allowunused] [-prompt] [-bench]\n          [-debug] [-batch] [-memory] [-disk] [-memgui]\n          [-checkversion <vers>] [-stdout <file>] [-stderr <file>]\n          <task-name> <task-args>\n\n   stilts <task-name> help[=<param-name>|*]\n\n   Known tasks:\n      arrayjoin\n      calc\n      cdsskymatch\n      cone\n      coneskymatch\n      datalinklint\n      funcs\n      mocshape\n      parqlint\n      parqlook\n      pixfoot\n      pixsample\n      plot2d\n      plot3d\n      plothist\n      regquery\n      server\n      sqlclient\n      sqlskymatch\n      sqlupdate\n      taplint\n      tapquery\n      tapresume\n      tapskymatch\n      tcat\n      tcatn\n      tcopy\n      tcube\n      tgridmap\n      tgroup\n      tjoin\n      tloop\n      tmatch1\n      tmatch2\n      tmatchn\n      tmulti\n      tmultin\n      tpipe\n      tskymap\n      tskymatch2\n      votcopy\n      votlint\n      xsdvalidate\n      plot2plane\n      plot2sky\n      plot2cube\n      plot2sphere\n      plot2corner\n      plot2time\n\n"
    },
    {
        "prompt": "Create a `cds_ascii` format MOC from `s_region`.",
        "response": "stilts mocshape in=obscore.fits shape=stc-s coords=s_region mocfmt=cds_ascii out=obscore.moc.txt",
        "chat.jar": "executed successfully"
    }
]