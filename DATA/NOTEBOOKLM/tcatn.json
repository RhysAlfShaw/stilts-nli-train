[
    {
        "prompt": "Concatenate two FITS files, `survey_part1.fits` and `survey_part2.fits`, into a single FITS file.",
        "response": "stilts tcatn nin=2 in1=survey_part1.fits in2=survey_part2.fits out=survey_full.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "How do I combine a CSV file and a VOTable into a new FITS file?",
        "response": "stilts tcatn nin=2 in1=data.csv ifmt1=csv in2=more_data.vot out=combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I have three tables, `t1.fits`, `t2.fits`, `t3.fits`. Combine them and add a column named 'SourceTable' indicating which file each row came from.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits seqcol=SourceTable out=combined_with_source.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "My first table has columns 'RA', 'DEC', but the second has 'ALPHA', 'DELTA'. How can I concatenate them?",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits icmd2='colmeta -name RA ALPHA; colmeta -name DEC DELTA' ocmd='keepcols \"RA DEC MAG\"' out=aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine `cat_a.fits` and `cat_b.fits`, but only keep the 'ID', 'RA', and 'DEC' columns from both before joining.",
        "response": "stilts tcatn nin=2 in1=cat_a.fits icmd1='keepcols \"ID RA DEC\"' in2=cat_b.fits icmd2='keepcols \"ID RA DEC\"' out=common_cols.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate `bright_stars.vot` and `faint_stars.fits`, then sort the final combined table by magnitude.",
        "response": "stilts tcatn nin=2 in1=bright_stars.vot in2=faint_stars.fits ocmd='sort V_MAG' out=sorted_stars.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Just count the total number of rows from combining `file1.csv`, `file2.csv`, and `file3.csv`.",
        "response": "stilts tcatn nin=3 ifmt1=csv in1=file1.csv ifmt2=csv in2=file2.csv ifmt3=csv in3=file3.csv omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables from a pipe and a file, and write the result to standard output as text.",
        "response": "cat stream.csv | stilts tcatn nin=2 in1=disk_data.fits in2=- ifmt2=csv ofmt=text out=-",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "I need to combine two tables, but the second table is missing the 'FLUX_ERR' column. How can I add it with null values?",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits icmd2='addcol FLUX_ERR null' ocmd='keepcols \"ID FLUX FLUX_ERR\"' out=complete.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables and add a column with the original filename for each row.",
        "response": "stilts tcatn nin=2 in1=source_a.vot in2=source_b.vot loccol=OriginFile out=combined_loc.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine only the sources with magnitude brighter than 15 from `deep_survey.fits` with all sources from `shallow_survey.fits`.",
        "response": "stilts tcatn nin=2 in1=deep_survey.fits icmd1='select MAG < 15' in2=shallow_survey.fits out=mixed_depth.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG < 15\n\nUsage: select <expr>\n    (Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "I have two tables with different column orders. How do I concatenate them with columns in the order: NAME, RA_DEG, DEC_DEG?",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='keepcols \"NAME RA_DEG DEC_DEG\"' in2=t2.fits icmd2='keepcols \"NAME RA_DEG DEC_DEG\"' out=ordered.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine `data.ecsv` and `data.parquet` and send the result directly to TOPCAT.",
        "response": "stilts tcatn nin=2 in1=data.ecsv ifmt1=ecsv in2=data.parquet omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "My second table has coordinates in radians. Convert them to degrees before concatenating with the first table.",
        "response": "stilts tcatn nin=2 in1=t1_deg.fits in2=t2_rad.fits icmd2='replacecol RA_DEG radiansToDegrees(RA_RAD); replacecol DEC_DEG radiansToDegrees(DEC_RAD)' ocmd='keepcols \"RA_DEG DEC_DEG\"' out=degrees.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine `table1.fits` and `table2.fits`, but only keep the first 100 rows from each.",
        "response": "stilts tcatn nin=2 in1=table1.fits icmd1='head 100' in2=table2.fits icmd2='head 100' out=sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "After concatenating two tables, I want to remove any duplicate rows based on the 'ID' column.",
        "response": "stilts tcatn nin=2 in1=cat1.fits in2=cat2.fits ocmd='sort ID' ocmd='uniq ID' out=unique_sources.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an IPAC table and a FITS table into an ECSV file.",
        "response": "stilts tcatn nin=2 in1=data.tbl ifmt1=ipac in2=data.fits out=combined.ecsv",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four different CSV files into one.",
        "response": "stilts tcatn nin=4 ifmt1=csv in1=q1.csv ifmt2=csv in2=q2.csv ifmt3=csv in3=q3.csv ifmt4=csv in4=q4.csv out=full_year.csv",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I need to combine two tables and add a 'SURVEY' column saying 'SDSS' for the first and '2MASS' for the second.",
        "response": "stilts tcatn nin=2 in1=sdss.fits icmd1='addcol SURVEY \"SDSS\"' in2=2mass.fits icmd2='addcol SURVEY \"2MASS\"' out=surveys.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "How do I combine a FITS file with a simulated sky catalog of 1000 stars?",
        "response": "stilts tcatn nin=2 in1=my_real_data.fits in2=:skysim:1000 out=real_plus_sim.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "My tables have a 'DATE' column as a string. I want to add a new 'MJD' column to both before joining.",
        "response": "stilts tcatn nin=2 in1=obs1.fits icmd1='addcol MJD isoToMjd(DATE)' in2=obs2.fits icmd2='addcol MJD isoToMjd(DATE)' out=obs_with_mjd.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, but rename the 'MAG' column to 'V_MAG' in the first table before doing so.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='colmeta -name V_MAG MAG' in2=t2.fits out=renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables and then calculate the mean and standard deviation of the final result.",
        "response": "stilts tcatn nin=2 in1=part1.fits in2=part2.fits omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I have two tables, one with magnitudes and one with fluxes. Convert the fluxes to magnitudes in the second table before concatenating.",
        "response": "stilts tcatn nin=2 in1=mags.fits in2=fluxes.fits icmd2='replacecol MAG janskyToAb(FLUX_JY)' ocmd='keepcols \"ID MAG\"' out=all_mags.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, but drop all columns except for 'RA', 'DEC', and 'Z' from both.",
        "response": "stilts tcatn nin=2 in1=qso1.fits icmd1='keepcols \"RA DEC Z\"' in2=qso2.fits icmd2='keepcols \"RA DEC Z\"' out=qso_xyz.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Take `list1.txt` and `list2.txt` (ASCII format) and combine them into a single FITS file, adding a column to show which list they came from.",
        "response": "stilts tcatn nin=2 ifmt1=ascii in1=list1.txt ifmt2=ascii in2=list2.txt seqcol=ListID out=combined_list.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine `catA.fits` and `catB.fits`. `catB.fits` has FK4 coordinates that need to be converted to FK5.",
        "response": "stilts tcatn nin=2 in1=catA.fits in2=catB.fits icmd2='addskycoords fk4 fk5 RA_B1950 DEC_B1950 RA_J2000 DEC_J2000' ocmd='keepcols \"RA_J2000 DEC_J2000 MAG\"' out=fk5_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I need to combine three tables, but the second one is gzipped.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits.gz in3=t3.fits out=t_all.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two Parquet files and output as a single Parquet file.",
        "response": "stilts tcatn nin=2 in1=data1.parquet in2=data2.parquet out=combined.parquet",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables and just show the first 10 rows of the result on the terminal.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='head 10' ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "How to combine three tables where the second one has a different magnitude column name?",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits icmd2='colmeta -name Vmag V_band' in3=t3.fits ocmd='keepcols Vmag' out=combined_vmag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, but only if the 'QUALITY' flag is 'A' in the first table.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='select QUALITY==\"A\"' in2=t2.fits out=filtered.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I need to join `file1.fits` with the second extension of `file2.fits`.",
        "response": "stilts tcatn nin=2 in1=file1.fits in2=file2.fits#2 out=joined_hdu.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables and replace the value -999 with null in the 'FLUX' column of the final table.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits ocmd='badval -999 FLUX' out=cleaned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Can I combine a local FITS file with a VOTable from a URL?",
        "response": "stilts tcatn nin=2 in1=local.fits in2=http://example.com/remote.vot out=combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, then add a new column which is the ratio of 'FLUX_A' and 'FLUX_B'.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits ocmd='addcol FLUX_RATIO FLUX_A/FLUX_B' out=with_ratio.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "My two tables have some duplicate column names. How can I join them, keeping all columns but renaming duplicates?",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits fixcols=dups suffix1=_t1 suffix2=_t2 out=renamed_dups.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_t1 suffix2=_t2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a table of galaxies and a table of stars, adding a 'TYPE' column to each before joining.",
        "response": "stilts tcatn nin=2 in1=gals.fits icmd1='addcol TYPE \"GALAXY\"' in2=stars.fits icmd2='addcol TYPE \"STAR\"' out=classified.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate a table with itself to double its length.",
        "response": "stilts tcatn nin=2 in1=my_table.fits in2=my_table.fits out=doubled.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join the last 500 rows of table A with the first 500 rows of table B.",
        "response": "stilts tcatn nin=2 in1=table_A.fits icmd1='tail 500' in2=table_B.fits icmd2='head 500' out=splice.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, but replace the 'RA_STRING' column in the second table with a numeric degree value.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='replacecol RA hmsToDegrees(RA_STRING)' ocmd='keepcols \"RA DEC\"' out=numeric_ra.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I have a FITS file, an ECSV file, and a Parquet file. Combine them into a single FITS file.",
        "response": "stilts tcatn nin=3 in1=d1.fits in2=d2.ecsv ifmt2=ecsv in3=d3.parquet out=multi_format.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, and add a column that shows the unique part of each input filename.",
        "response": "stilts tcatn nin=2 in1=data_field_A.fits in2=data_field_B.fits uloccol=FieldID out=combined_uloc.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "How to join two tables where one has an extra column that I want to discard?",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='keepcols \"ID RA DEC MAG\"' in2=t2.fits icmd2='keepcols \"ID RA DEC MAG\"' out=aligned_cols.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, then show the final metadata in the terminal.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine `field_1.fits` with the results of a TAP query.",
        "response": "stilts tcatn nin=2 in1=field_1.fits in2='<stilts tapquery tapurl=... adql=... ofmt=fits' ifmt2=fits out=combined_with_tap.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "My two tables have matching columns, but one has 'ra', 'dec' and the other has 'RA', 'DEC'. Will `tcatn` handle this?",
        "response": "Yes, STILTS column name matching is case-insensitive, so they should concatenate without any preprocessing. `stilts tcatn nin=2 in1=lower.fits in2=upper.fits out=case_insensitive.fits`",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate `events_1.fits` and `events_2.fits`, then run `pixfoot` on the result.",
        "response": "stilts tcatn nin=2 in1=events_1.fits in2=events_2.fits | stilts pixfoot in=- out=combined_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join an MRT file with a TST file into a VOTable.",
        "response": "stilts tcatn nin=2 in1=data.mrt in2=data.tst out=combined.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, keeping only the 'ID', 'X', and 'Y' columns from all of them.",
        "response": "stilts tcatn nin=3 in1=t1.fits icmd1='keepcols \"ID X Y\"' in2=t2.fits icmd2='keepcols \"ID X Y\"' in3=t3.fits icmd3='keepcols \"ID X Y\"' out=minimal.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I want to join `table1.fits` with every 100th row of `table2.fits`.",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits icmd2='every 100' out=sparse_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "After concatenating, I want a new column which is the logarithm of the 'FLUX' column.",
        "response": "stilts tcatn nin=2 in1=f1.fits in2=f2.fits ocmd='addcol LOG_FLUX log10(FLUX)' out=with_log.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, one of which is at a URL.",
        "response": "stilts tcatn nin=3 in1=local1.fits in2=http://example.com/remote.fits in3=local2.fits out=combined_remote.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Can I combine two tables, but filter out rows where `FLAG` is set in the second table?",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='select FLAG==0' out=filtered_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two ASCII tables, then display the result in the GUI.",
        "response": "stilts tcatn nin=2 ifmt1=ascii in1=a.txt ifmt2=ascii in2=b.txt omode=gui",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "My second table has flux in erg/s/cm2/A and I need it in Jy before combining.",
        "response": "stilts tcatn nin=2 in1=t1_jy.fits in2=t2_erg.fits icmd2='addcol FLUX_JY ergscmaToJansky(FLUX_ERG, WAVE_ANGSTROM)' ocmd='keepcols \"FLUX_JY\"' out=all_jy.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'WAVE_ANGSTROM)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol FLUX_JY ergscmaToJansky(FLUX_ERG, WAVE_ANGSTROM)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'WAVE_ANGSTROM)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "How to concatenate two tables where one has a column 'magnitude' and the other 'mag'?",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='colmeta -name magnitude mag' ocmd='keepcols magnitude' out=consistent_mag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two datasets and only keep rows where the final magnitude is between 18 and 19.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits ocmd='select MAG>18 && MAG<19' out=mag_slice.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' 'MAG<19'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG>18 && MAG<19\n\nUsage: select <expr>\n    (Unused arguments: '&&' 'MAG<19'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine `data_g_band.fits` and `data_r_band.fits`, adding a 'FILTER' column to each first.",
        "response": "stilts tcatn nin=2 in1=data_g_band.fits icmd1='addcol FILTER \"g\"' in2=data_r_band.fits icmd2='addcol FILTER \"r\"' out=multi_band.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate the first table of `multi1.fits` with the second table of `multi2.fits`.",
        "response": "stilts tcatn nin=2 in1=multi1.fits in2=multi2.fits#2 out=selected_hdus.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "How do I use `tcatn` to create a table with a header from one file and data from another?",
        "response": "This is not what `tcatn` is for. You might be able to achieve this with system commands piped into `tpipe`, for instance: `cat header.txt data.txt | stilts tpipe in=- ifmt=ascii out=table.fits`",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, and then shuffle the rows of the final table.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd=shuffle out=shuffled.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Can you combine a PDS4 file with a CDF file?",
        "response": "stilts tcatn nin=2 in1=data.xml ifmt1=pds4 in2=data.cdf ifmt2=cdf ocmd='keepcols \"TIME VALUE\"' out=combined_space.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join the first 10 rows of table A with the last 10 rows of table B.",
        "response": "stilts tcatn nin=2 in1=table_A.fits icmd1='head 10' in2=table_B.fits icmd2='tail 10' out=head_tail.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "After combining tables, I want to see the result as a LaTeX table.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ofmt=latex out=table.tex",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables where the second one needs its 'RA_HMS' column converted to decimal degrees.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='replacecol RA hmsToDegrees(RA_HMS)' ocmd='keepcols \"RA DEC\"' out=degrees_out.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join five different regions of a survey together.",
        "response": "stilts tcatn nin=5 in1=r1.fits in2=r2.fits in3=r3.fits in4=r4.fits in5=r5.fits out=full_survey.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, but ensure the final table name is 'CombinedCatalog'.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits ocmd='tablename CombinedCatalog' out=named_catalog.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I need to join table `a.fits` with the output of `tloop`.",
        "response": "stilts tcatn nin=2 in1=a.fits in2=:loop:100 icmd1='keepcols i' icmd2='addcol x i*2' out=joined_loop.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, but use a pipe `|` to separate values in the final CSV output.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ofmt='csv(delimiter=|)' out=pipe.csv",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join three tables, all of which are gzipped FITS files.",
        "response": "stilts tcatn nin=3 in1=t1.fits.gz in2=t2.fits.gz in3=t3.fits.gz out=all.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table1 and table2, but make sure all columns from table2 have a `_t2` suffix.",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits fixcols=dups suffix2=_t2 out=suffixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix2=_t2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "How to append a single row to a table using `tcatn`?",
        "response": "You can create a single-row table with `tpipe` and `head 1`, then `tcatn`. E.g., `stilts tpipe in=single_row_source.fits cmd='head 1' out=single_row.fits`, then `stilts tcatn nin=2 in1=main_table.fits in2=single_row.fits out=appended.fits`.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join a Feather file with a FITS file.",
        "response": "stilts tcatn nin=2 in1=data.feather in2=data.fits out=combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, and show the result in HTML format.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits ofmt=html out=table.html",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "My two tables have an 'ID' column as integer in one and string in another. How can I join them?",
        "response": "stilts tcatn nin=2 in1=t1_int.fits icmd1='replacecol ID toString(ID)' in2=t2_str.fits out=strings.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables and add a column showing which file each row came from.",
        "response": "stilts tcatn nin=3 in1=f1.fits in2=f2.fits in3=f3.fits loccol=SourceFile out=with_files.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I need to combine an ASCII table (headerless) with a FITS table.",
        "response": "stilts tcatn nin=2 in1=data.txt ifmt1=ascii icmd1='colmeta -name C1 $1; colmeta -name C2 $2' in2=data.fits ocmd='keepcols \"C1 C2\"' out=combined_ascii.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join table A with a random sample of 100 rows from table B.",
        "response": "stilts tcatn nin=2 in1=table_A.fits in2=table_B.fits icmd2='random 100' out=random_sample_join.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 100\n\nUsage: random\n    (Unused arguments: '100'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "After combining tables, I need to assert that all 'MAG' values are positive.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='assert MAG>0' out=asserted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a local CSV file with a CSV file from a URL.",
        "response": "stilts tcatn nin=2 ifmt1=csv in1=local.csv ifmt2=csv in2=http://example.com/remote.csv out=combined_csv.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join three tables, but only if they have more than 1000 rows each.",
        "response": "This requires pre-checking row counts. You would typically do this in a script rather than a single `tcatn` command.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "My second table's columns are all uppercase. Can I convert them to lowercase before concatenating?",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2=fixcolnames out=lower_case.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join table A with every other row of table B.",
        "response": "stilts tcatn nin=2 in1=table_A.fits in2=table_B.fits icmd2='every 2' out=every_other.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I want to combine two tables, but the second one uses 'T'/'F' for booleans. I need true/false.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='replacecol FLAG \"FLAG == \\'T\\'\"' out=booleans.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: Unterminated quoted string\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "How do I combine the results from two different `tpipe` commands?",
        "response": "stilts tcatn nin=2 in1='<stilts tpipe ... ofmt=fits' ifmt1=fits in2='<stilts tpipe ... ofmt=fits' ifmt2=fits out=combined_pipes.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine `cat1.fits`, `cat2.fits`, `cat3.fits`, and `cat4.fits`, and add a sequence number column.",
        "response": "stilts tcatn nin=4 in1=cat1.fits in2=cat2.fits in3=cat3.fits in4=cat4.fits seqcol=CAT_ID out=all_cats.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join a HAPI stream file with a FITS file.",
        "response": "stilts tcatn nin=2 in1=data.hapi in2=data.fits out=combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "After concatenating, I want to see the result as a Mirage file.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ofmt=mirage out=out.mirage",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "How to join two tables where one has columns `RA_H`, `RA_M`, `RA_S` that need to be combined into a single `RA` column?",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='addcol RA hmsToDegrees(RA_H,RA_M,RA_S)' ocmd='keepcols \"RA DEC\"' out=combined_ra.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, and then get a checksum of the final result.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join table A with table B, but only keeping rows from table B where 'SNR' > 10.",
        "response": "stilts tcatn nin=2 in1=table_A.fits in2=table_B.fits icmd2='select SNR>10' out=high_snr.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I have two tables from different instruments. They have different column names for flux. How do I combine them?",
        "response": "stilts tcatn nin=2 in1=inst1.fits icmd1='colmeta -name FLUX FLUX_INST1' in2=inst2.fits icmd2='colmeta -name FLUX FLUX_INST2' ocmd='keepcols FLUX' out=unified_flux.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join table1.fits with a random view of table2.fits.",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits icmd2=randomview out=random_view.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "What's the difference between `tcat` and `tcatn`?",
        "response": "`tcat` is for concatenating multiple similar tables, applying the same input format and processing to all of them. `tcatn` is more flexible and is used for heterogeneous tables, allowing you to specify different formats and preprocessing commands for each input table individually [2, B.31, B.32].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Can you concatenate three tables and output to a gzipped FITS file?",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits out=all.fits.gz",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for all.fits.gz\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, but ensure that any duplicated column names across them are suffixed with `_1`, `_2`, `_3`.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 out=all_suffixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_1 suffix2=_2 suffix3=_3\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "I need to join a WDC format file and a CSV file.",
        "response": "stilts tcatn nin=2 in1=data.wdc ifmt1=wdc in2=data.csv ifmt2=csv ocmd='keepcols \"TIME VALUE\"' out=combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "After combining my tables, I want to replace any occurrence of the string 'N/A' with a null value in the 'NOTES' column.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='replaceval \"N/A\" null NOTES' out=clean_notes.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables (t1.fits, t2.fits, t3.fits). In t2, rename the 'ERR_FLUX' column to 'FLUX_ERROR' and convert it from Jy to mJy before joining.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits icmd2='replacecol FLUX_ERROR ERR_FLUX * 1000' in3=t3.fits out=combined.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '*' '1000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol FLUX_ERROR ERR_FLUX * 1000\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '*' '1000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate a VOTable and a FITS table, keeping all columns but renaming duplicates by adding suffix \"_A\" for the first table's columns and \"_B\" for the second.",
        "response": "stilts tcatn nin=2 in1=data_A.vot in2=data_B.fits fixcols=all suffix1=_A suffix2=_B out=renamed_all.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_A suffix2=_B\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two CSV files where the resulting table should only contain the first 500 rows in total, ordered by 'TIME'.",
        "response": "stilts tcatn nin=2 ifmt1=csv in1=ts1.csv ifmt2=csv in2=ts2.csv ocmd='sort TIME' ocmd='head 500' out=sample_sorted.csv",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join table_A.fits and table_B.fits, then output the metadata of the final combined table.",
        "response": "stilts tcatn nin=2 in1=table_A.fits in2=table_B.fits omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate deep_field.fits with shallow_field.fits, ensuring the final table uses the VOTable BINARY2 serialization format.",
        "response": "stilts tcatn nin=2 in1=deep_field.fits in2=shallow_field.fits ofmt='votable(format=BINARY2)' out=combined.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables from different years, but only keep sources brighter than 17th magnitude from all of them.",
        "response": "stilts tcatn nin=3 in1=2019.fits icmd1='select MAG < 17' in2=2020.fits icmd2='select MAG < 17' in3=2021.fits icmd3='select MAG < 17' out=bright_only.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '17'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG < 17\n\nUsage: select <expr>\n    (Unused arguments: '<' '17'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate a table containing positions (ra, dec) with a table containing fluxes (flux, flux_err). The output should only include rows where fluxes are measured (flux > 0).",
        "response": "stilts tcatn nin=2 in1=pos.fits in2=flux.fits icmd2='select FLUX > 0' out=clean_data.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "I need to combine an ECSV file and a HAPI data stream piped via standard input, outputting the row count.",
        "response": "cat hapi_data.hapi | stilts tcatn nin=2 in1=local.ecsv ifmt1=ecsv in2=- ifmt2=hapi omode=count",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a table from a URL (remote.vot) and a local file (local.fits), adding a column showing the unique part of the file name (e.g., 'remote' and 'local').",
        "response": "stilts tcatn nin=2 in1=http://example.com/remote.vot in2=local.fits uloccol=OriginName out=combined_origin.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table A and table B. Table A has an extra column 'FLAG' I want to drop before combining.",
        "response": "stilts tcatn nin=2 in1=table_A.fits icmd1='delcols FLAG' in2=table_B.fits out=no_flag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three FITS files, calculating the checksum of the resulting combined data.",
        "response": "stilts tcatn nin=3 in1=f1.fits in2=f2.fits in3=f3.fits omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables table1.fits and table2.fits, renaming columns in table2 with proper motions 'PM_RA_MYS' and 'PM_DEC_MYS' to 'PM_RA' and 'PM_DEC' respectively.",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits icmd2='colmeta -name PM_RA PM_RA_MYS; colmeta -name PM_DEC PM_DEC_MYS' out=renamed_pm.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a file 'data.fits' with a simulated table of 5000 stars, then view the final table in TOPCAT.",
        "response": "stilts tcatn nin=2 in1=data.fits in2=:skysim:5000 omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate observations obs_1.fits and obs_2.fits. In obs_1.fits, select only rows where 'QUALITY' is greater than 5. In obs_2.fits, keep only columns ID, RA, DEC, and FLUX.",
        "response": "stilts tcatn nin=2 in1=obs_1.fits icmd1='select QUALITY > 5' in2=obs_2.fits icmd2='keepcols \"ID RA DEC FLUX\"' out=hetero_filtered.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select QUALITY > 5\n\nUsage: select <expr>\n    (Unused arguments: '>' '5'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, then perform row processing to sort the combined output by 'ID' and remove any duplicated rows based on 'ID'.",
        "response": "stilts tcatn nin=2 in1=cat_a.fits in2=cat_b.fits ocmd='sort ID' ocmd='uniq ID' out=unique_sorted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I have two FITS files. In the second file, the coordinates (RA_FK4, DEC_FK4) are in the old FK4 system; convert them to ICRS before concatenating.",
        "response": "stilts tcatn nin=2 in1=t_icrs.fits in2=t_fk4.fits icmd2='addskycoords fk4 icrs RA_FK4 DEC_FK4 RA DEC' ocmd='keepcols \"RA DEC\"' out=icrs_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three ASCII tables (d1.txt, d2.txt, d3.txt), and add a column 'SourceNum' indicating the sequence of the input file.",
        "response": "stilts tcatn nin=3 ifmt1=ascii in1=d1.txt ifmt2=ascii in2=d2.txt ifmt3=ascii in3=d3.txt seqcol=SourceNum out=indexed_ascii.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate observations obs_1.fits and obs_2.fits. The final table should use a column calculated by converting proper motion from mas/yr to km/s using parallax (plx).",
        "response": "stilts tcatn nin=2 in1=obs_1.fits in2=obs_2.fits ocmd='addcol V_RA rvMasyrToKms(PM_RA, plx); addcol V_DEC rvMasyrToKms(PM_DEC, plx)' out=velocity_concat.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'plx)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol V_RA rvMasyrToKms(PM_RA, plx)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'plx)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine part1.parquet and part2.parquet into a single ECSV file.",
        "response": "stilts tcatn nin=2 in1=part1.parquet in2=part2.parquet ofmt=ecsv out=full.ecsv",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table_A.fits and table_B.fits. Table A is missing the column 'G_FLUX' that exists in table B. Add G_FLUX to table A with null values before joining.",
        "response": "stilts tcatn nin=2 in1=table_A.fits icmd1='addcol G_FLUX NULL' in2=table_B.fits out=aligned_flux.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables (t1.fits through t4.fits), but only write out the metadata (excluding row data) to the terminal.",
        "response": "stilts tcatn nin=4 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits omode=meta out=-",
        "chat.jar": "failed",
        "error": "Error: out=-: out and ofmt parameters can only be used when omode=out\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine list1.vot and list2.vot. In the final output, replace the magic value -999.0 with null in the 'MAG' column.",
        "response": "stilts tcatn nin=2 in1=list1.vot in2=list2.vot ocmd='badval -999.0 MAG' out=cleaned_mag.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables. For the first table, remove all columns except 'ID' and 'Z'. For the second table, keep only 'ID' and 'REDSHIFT', renaming 'REDSHIFT' to 'Z'.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='keepcols \"ID Z\"' in2=t2.fits icmd2='colmeta -name Z REDSHIFT; keepcols \"ID Z\"' out=z_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join three tables, then transpose the resulting single table so that columns become rows.",
        "response": "stilts tcatn nin=3 in1=a.fits in2=b.fits in3=c.fits ocmd='transpose' out=transposed_data.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine data.fits with a table derived from executing a command pipeline: cat pipe.csv.",
        "response": "stilts tcatn nin=2 in1=data.fits in2='cat pipe.csv|' ifmt2=csv out=combined_pipe.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table1.fits and table2.fits, adding a boolean column named 'IS_FAINT' which is true if MAG > 20 in the final table.",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits ocmd='addcol IS_FAINT MAG > 20' out=with_flag.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_FAINT MAG > 20\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, but only rows from table2 that have a quality flag 'GOOD' should be included.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='select QUALITY == \"GOOD\"' out=filtered_on_quality.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '==' 'GOOD'\n\nCommand was: select QUALITY == \"GOOD\"\n\nUsage: select <expr>\n    (Unused arguments: '==' 'GOOD')\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an IPAC table and a FITS table, converting the output to an HTML report table.",
        "response": "stilts tcatn nin=2 in1=data.tbl ifmt1=ipac in2=data.fits ofmt=html out=report.html",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a VOTable with a table generated by looping 100 times, adding the loop index 'i' as a provenance column for the loop table.",
        "response": "stilts tcatn nin=2 in1=catalog.vot in2=:loop:100 uloccol=LoopIndex out=cat_plus_loop.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine cat_a.fits and cat_b.fits, but drop all columns named 'X_POS' and 'Y_POS' from both tables before joining.",
        "response": "stilts tcatn nin=2 in1=cat_a.fits icmd1='delcols \"X_POS Y_POS\"' in2=cat_b.fits icmd2='delcols \"X_POS Y_POS\"' out=reduced_cat.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three files: part_a.fits, part_b.fits, part_c.fits. Combine them, but first multiply the 'FLUX' column by 1e-6 in all three tables.",
        "response": "stilts tcatn nin=3 in1=part_a.fits icmd1='replacecol FLUX FLUX * 1e-6' in2=part_b.fits icmd2='replacecol FLUX FLUX * 1e-6' in3=part_c.fits icmd3='replacecol FLUX FLUX * 1e-6' out=flux_scaled.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '*' '1e-6'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol FLUX FLUX * 1e-6\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '*' '1e-6'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, then calculate statistics on a derived column: (MAG_B - MAG_R) / ERROR.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='addcol C_ERR (MAG_B - MAG_R) / ERROR' ocmd='keepcols C_ERR' omode=stats",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_R)' '/' 'ERROR'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol C_ERR (MAG_B - MAG_R) / ERROR\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'MAG_R)' '/' 'ERROR'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine catalog.fits with table.vot. After concatenation, show the first 20 rows to the screen as text output.",
        "response": "stilts tcatn nin=2 in1=catalog.fits in2=table.vot ocmd='head 20' ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables that use Galactic coordinates (GLON, GLAT) and convert them to ICRS (RA, DEC) before concatenation.",
        "response": "stilts tcatn nin=2 in1=gal1.fits icmd1='addskycoords galactic icrs GLON GLAT RA_ICRS DEC_ICRS' in2=gal2.fits icmd2='addskycoords galactic icrs GLON GLAT RA_ICRS DEC_ICRS' ocmd='keepcols \"RA_ICRS DEC_ICRS MAG\"' out=icrs_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three FITS files. The second file is accessed via HTTP.",
        "response": "stilts tcatn nin=3 in1=local1.fits in2=http://archive.org/data.fits in3=local3.fits out=remote_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables A and B. Table B contains array columns that need to be flattened into scalar columns before combination.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits icmd2='explodeall' out=flattened_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate data1.fits and data2.fits, but only include rows from the first table where the 'ID_STR' starts with 'NGC'.",
        "response": "stilts tcatn nin=2 in1=data1.fits icmd1='select startsWith(ID_STR, \"NGC\")' in2=data2.fits out=NGC_combined.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: select startsWith(ID_STR, \"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine multiple tables, ensuring the output format is the FITS column-oriented format (colfits-plus).",
        "response": "stilts tcatn nin=2 in1=data1.fits in2=data2.fits ofmt='fits(col=true,primary=votable)' out=combined.colfits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a table containing metadata parameters (params.fits) with a table containing observations (obs.fits).",
        "response": "stilts tcatn nin=2 in1=params.fits in2=obs.fits out=meta_obs.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables T1 and T2. T1's RA/DEC columns are in radians; T2's are in degrees. Convert T1's to degrees before combination.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='replacecol RA radiansToDegrees(RA); replacecol DEC radiansToDegrees(DEC)' in2=T2.fits out=deg_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables from an HTM-tiled survey, but only keep the first 100 rows from each input file.",
        "response": "stilts tcatn nin=3 in1=tile1.fits icmd1='head 100' in2=tile2.fits icmd2='head 100' in3=tile3.fits icmd3='head 100' out=sample_tiles.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join three tables, renaming all output columns by using the column name and index, e.g. ID_1, ID_2, etc.",
        "response": "stilts tcatn nin=3 in1=a.fits in2=b.fits in3=c.fits fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 out=indexed_cols.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_1 suffix2=_2 suffix3=_3\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table1.fits and table2.fits, but discard all rows where the 'FLAG' column in the first table is non-zero.",
        "response": "stilts tcatn nin=2 in1=table1.fits icmd1='select FLAG == 0' in2=table2.fits out=flag_zero_concat.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '==' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLAG == 0\n\nUsage: select <expr>\n    (Unused arguments: '==' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate a VOTable and a FITS table, ensuring the combined result is streamed as VOTable with BINARY serialization.",
        "response": "stilts tcatn nin=2 in1=data.vot in2=data.fits ofmt='votable(format=BINARY)' out=combined_binary.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an ASCII file and an IPAC file, defining their null values as -99 globally.",
        "response": "stilts tcatn nin=2 ifmt1=ascii in1=a.txt ifmt2=ipac in2=i.tbl ocmd='replaceval NULL -99 MAG' out=null_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, then shuffle the resulting rows randomly.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='shuffle' out=shuffled_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate observations from two FITS extensions within the same file: file.fits#1 and file.fits#2.",
        "response": "stilts tcatn nin=2 in1=file.fits#1 in2=file.fits#2 out=extensions_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table A and table B, eliminating any rows where 'FLUX' in the combined result is less than zero.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits ocmd='select FLUX >= 0' out=positive_flux.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX >= 0\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a table containing positions (ra, dec) with a synthetic table that simply loops from 1 to 1000, adding the resulting loop index column.",
        "response": "stilts tcatn nin=2 in1=pos.fits in2=:loop:1,1001 out=pos_with_index.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, renaming the combined table itself to 'Master_Catalog'.",
        "response": "stilts tcatn nin=2 in1=c1.fits in2=c2.fits ocmd='tablename Master_Catalog' out=master.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables, discarding all output, just checking for errors.",
        "response": "stilts tcatn nin=3 in1=d1.fits in2=d2.fits in3=d3.fits omode=discard",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine multiple ECSV files that have been sorted by 'RA' in descending order.",
        "response": "stilts tcatn nin=2 ifmt1=ecsv in1=e1.ecsv ifmt2=ecsv in2=e2.ecsv ocmd='sort -down RA' out=ecsv_sorted_down.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Join table1.fits and table2.fits. For table1, select only rows where Vmag < 15. For table2, only keep the first 100 rows.",
        "response": "stilts tcatn nin=2 in1=table1.fits icmd1='select Vmag < 15' in2=table2.fits icmd2='head 100' out=mixed_filter_concat.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Vmag < 15\n\nUsage: select <expr>\n    (Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine catalogue A and catalogue B. Rename all columns in A by prefixing them with 'CAT_A_' and all columns in B by prefixing with 'CAT_B_'.",
        "response": "stilts tcatn nin=2 in1=A.fits fixcols=all suffix1=_A_ in2=B.fits fixcols=all suffix2=_B_ out=all_prefixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_A_ fixcols=all suffix2=_B_\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, forcing the output to a compressed FITS format with the original filenames.",
        "response": "stilts tcatn nin=2 in1=archive/full/dataA.fits in2=archive/full/dataB.fits loccol=OriginalName out=combined.fits.gz",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for combined.fits.gz\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table T1 and T2. Table T2 (Parquet) needs its 'DEC' column converted from radians to degrees before combining with T1.",
        "response": "stilts tcatn nin=2 in1=t1_deg.fits in2=t2_rad.parquet icmd2='replacecol DEC_DEG radiansToDegrees(DEC_RAD)' out=deg_parquet.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate data1.fits and data2.fits, then calculate the median absolute deviation (MAD) of the combined 'MAG' column.",
        "response": "stilts tcatn nin=2 in1=data1.fits in2=data2.fits ocmd='addcol MAG_ABS_DEV abs(MAG - median(MAG))' ocmd='keepcols MAG_ABS_DEV' omode=stats",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'median(MAG))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_ABS_DEV abs(MAG - median(MAG))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'median(MAG))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables and keep a custom column derived from the combined ID and an added source identifier.",
        "response": "stilts tcatn nin=3 in1=a.fits in2=b.fits in3=c.fits seqcol=SourceNum ocmd='addcol UniqueID concat(ID, toString(SourceNum))' out=id_with_num.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'toString(SourceNum))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol UniqueID concat(ID, toString(SourceNum))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'toString(SourceNum))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table1.fits and table2.fits, but omit the final row from table2.",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits icmd2='tail $nrow - 1' out=trimmed_concat.fits",
        "chat.jar": "failed",
        "error": "Error: Row count $nrow not numeric\n\nCommand was: tail $nrow - 1\n\nUsage: tail <nrows>\n    (Row count $nrow not numeric)\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate a table containing spectra arrays (spec.fits) with a simple catalog table (cat.fits), adding the array columns.",
        "response": "stilts tcatn nin=2 in1=spec.fits in2=cat.fits out=spec_catalog.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, filtering out all rows from the second table if their magnitude ('MAG') is null.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='select !NULL_MAG' out=no_null_mag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables A and B. In table B, explode the array column 'FLUX_ARRAY[1]' into three scalar columns before concatenation.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits icmd2='explodecols FLUX_ARRAY' out=exploded_concat.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables, then filter the final table to keep only every 100th row.",
        "response": "stilts tcatn nin=4 in1=d1.fits in2=d2.fits in3=d3.fits in4=d4.fits ocmd='every 100' out=sparse_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine observations where the first table has coordinates (RA, DEC) in degrees, and the second has them in Galactic coordinates (GLON, GLAT). Standardize output to Galactic coordinates.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='addskycoords icrs galactic RA DEC GLON_T1 GLAT_T1' in2=t2.fits icmd2='keepcols \"GLON GLAT MAG\"' ocmd='colmeta -name GLON GLON_T1; colmeta -name GLAT GLAT_T1; keepcols \"GLON GLAT MAG\"' out=to_galactic.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, discarding the 'ERROR' column from both inputs before joining.",
        "response": "stilts tcatn nin=2 in1=c1.fits icmd1='delcols ERROR' in2=c2.fits icmd2='delcols ERROR' out=error_free.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables and show the metadata of the resulting table structure.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine data_1.fits and data_2.fits. In the second table, rename the column 'FLUX_TOT' to 'FLUX', and remove the 'BACKGROUND' column.",
        "response": "stilts tcatn nin=2 in1=data_1.fits in2=data_2.fits icmd2='colmeta -name FLUX FLUX_TOT; delcols BACKGROUND' out=clean_flux.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, forcing the output to be readable by humans using the text output format.",
        "response": "stilts tcatn nin=2 in1=data_a.fits in2=data_b.fits ofmt=text out=combined_human.txt",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, sorting the final table by 'ID' and keeping the 'ID' column as the final table's primary column.",
        "response": "stilts tcatn nin=2 in1=a.fits in2=b.fits ocmd='sort ID; keepcols ID *' out=id_first_sorted.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '*'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was:  keepcols ID *\n\nUsage: keepcols <colid-list>\n    (Unused arguments: '*'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine multiple photometric tables, ensuring all 'MAG' columns are converted to 32-bit floats.",
        "response": "stilts tcatn nin=3 in1=p1.fits icmd1='replacecol MAG toFloat(MAG)' in2=p2.fits icmd2='replacecol MAG toFloat(MAG)' in3=p3.fits icmd3='replacecol MAG toFloat(MAG)' out=float_mags.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table1.fits and table2.fits, keeping only the first 10 rows of the resulting total output.",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits ocmd='head 10' out=top_ten_all.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables that might contain duplicated column names. Rename duplicated columns with suffix '_T1' and '_T2'.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits fixcols=dups suffix1=_T1 suffix2=_T2 out=dup_renamed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_T1 suffix2=_T2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an ECSV file and a FITS file. Filter the FITS file to only include sources where 'RA' is greater than 300 degrees.",
        "response": "stilts tcatn nin=2 in1=e.ecsv ifmt1=ecsv in2=f.fits icmd2='select RA > 300' out=filtered_ecsv_fits.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '300'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select RA > 300\n\nUsage: select <expr>\n    (Unused arguments: '>' '300'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, adding a column to the output indicating the original filename including the full path/location.",
        "response": "stilts tcatn nin=2 in1=archive/full/dataA.fits in2=archive/full/dataB.fits loccol=FullLocation out=combined_with_location.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an ASCII table that has X and Y coordinates with a FITS file. Ensure the ASCII input format uses a semicolon delimiter.",
        "response": "stilts tcatn nin=2 ifmt1='ascii(delimiter=;)' in1=coords.txt in2=catalog.fits out=semicolon_combined.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt1: Unknown format ascii(delimiter=;)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"delimiter=;\" - Options are maxSample=<int>, decoders=<Decoder[]>, notypes=<type>[;<type>...]\n        (Failed setting \"delimiter=;\" - Options are maxSample=<int>, decoders=<Decoder[]>, notypes=<type>[;<type>...]\n            (No method setDelimiter in uk.ac.starlink.table.formats.AsciiTableBuilder)))\nUsage: ifmt1=<in-format>\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables, preserving only columns named ID, RA, DEC, and MAG from all inputs.",
        "response": "stilts tcatn nin=3 in1=a.fits icmd1='keepcols \"ID RA DEC MAG\"' in2=b.fits icmd2='keepcols \"ID RA DEC MAG\"' in3=c.fits icmd3='keepcols \"ID RA DEC MAG\"' out=uniform_subset.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, keeping only the final 50 rows of the resulting unified table.",
        "response": "stilts tcatn nin=2 in1=cat1.fits in2=cat2.fits ocmd='tail 50' out=final_slice.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a FITS table with a remote VOTable. Rename the combined table to 'Remote_Local_Join'.",
        "response": "stilts tcatn nin=2 in1=local.fits in2=http://remote.org/remote.vot ocmd='tablename Remote_Local_Join' out=remote_local.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables. The first table uses 'X_PIX' and 'Y_PIX', and the second uses 'COL_1' and 'COL_2'. Align them so both use 'X' and 'Y'.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='colmeta -name X X_PIX; colmeta -name Y Y_PIX' in2=t2.fits icmd2='colmeta -name X COL_1; colmeta -name Y COL_2' out=xy_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a table where the magnitude is in the 'Jansky' column, converting it to AB magnitude before concatenation.",
        "response": "stilts tcatn nin=2 in1=flux.fits icmd1='replacecol MAG janskyToAb(Jansky)' in2=other.fits out=abmag_normalized.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate table A and table B. After joining, filter out any rows where the magnitude difference (MAG_A - MAG_B) is greater than 0.5.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits fixcols=all suffix1=_A suffix2=_B ocmd='select abs(MAG_A - MAG_B) <= 0.5' out=diff_filtered.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_B)' '<=' '0.5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(MAG_A - MAG_B) <= 0.5\n\nUsage: select <expr>\n    (Unused arguments: '-' 'MAG_B)' '<=' '0.5'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two VOTables and output the result as a LaTeX document table.",
        "response": "stilts tcatn nin=2 in1=small_1.vot in2=small_2.vot ofmt=latex out=report.tex",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a catalog and an error table. In the error table, convert the 'ERR_MAS' column from mas to degrees before concatenation.",
        "response": "stilts tcatn nin=2 in1=cat.fits in2=err.fits icmd2='replacecol ERR_DEG ERR_MAS / 3600000.0' out=mas_to_deg.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '/' '3600000.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol ERR_DEG ERR_MAS / 3600000.0\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '/' '3600000.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three files and output statistics, specifically mean and standard deviation for the magnitude column.",
        "response": "stilts tcatn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits ocmd='keepcols MAG' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, and then remove any duplicate rows based on all column values.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits ocmd='uniq' out=full_unique.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table A and table B. Table A has an integer quality column 'Q' and table B has a boolean quality column 'FLAG'. Convert B's boolean column to an integer (0/1) quality column 'Q' before combining.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits icmd2='replacecol Q (FLAG ? 1 : 0)' out=quality_aligned.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '?' '1' ':' '0)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol Q (FLAG ? 1 : 0)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '?' '1' ':' '0)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a VOTable with itself, then keep only the last 100 rows.",
        "response": "stilts tcatn nin=2 in1=self.vot in2=self.vot ocmd='tail 100' out=self_concat_tail.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, applying the 'fixcolnames' filter to both inputs to standardize names before joining.",
        "response": "stilts tcatn nin=2 in1=messy_a.fits icmd1='fixcolnames' in2=messy_b.fits icmd2='fixcolnames' out=fixed_names_concat.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an ObsCore table with a supplementary data table, keeping only rows from the ObsCore table that successfully join.",
        "response": "stilts tcatn nin=2 in1=obscore.fits in2=suppl.fits out=filtered_obscore.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, but in the output remove any column metadata related to UCDs.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='colmeta -ucd NULL *' out=ucd_stripped.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate five ASCII files into one single output file, adding a sequence column named 'Part'.",
        "response": "stilts tcatn nin=5 ifmt1=ascii in1=p1.txt in2=p2.txt in3=p3.txt in4=p4.txt in5=p5.txt seqcol=Part out=five_part_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, calculating the total count of rows for the resulting table (omitting checksum calculation to save time).",
        "response": "stilts tcatn nin=2 in1=large1.fits in2=large2.fits omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine data.fits and header.vot. The header.vot file only contains table parameters. Keep all columns and parameters.",
        "response": "stilts tcatn nin=2 in1=data.fits in2=header.vot out=data_with_header.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, sorting the final output primarily by 'RA' ascending, then secondarily by 'DEC' descending.",
        "response": "stilts tcatn nin=2 in1=c1.fits in2=c2.fits ocmd='sort RA -down DEC' out=multi_sort.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-down' 'DEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: sort RA -down DEC\n\nUsage: sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n    (Unused arguments: '-down' 'DEC'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables and add a final column containing a unique, deterministic ID based on the row index.",
        "response": "stilts tcatn nin=3 in1=a.fits in2=b.fits in3=c.fits ocmd='addcol ID_INDEX $0' out=indexed_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table A and table B, requiring only their respective 'NAME' columns to pass through to the final output.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='keepcols NAME' in2=B.fits icmd2='keepcols NAME' out=names_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a FITS table with a remote, gzipped VOTable file.",
        "response": "stilts tcatn nin=2 in1=local.fits in2=http://archive.org/data.vot.gz out=remote_gzipped.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, applying a velocity calculation to a column in the second table before joining, assuming distance 'dist_pc' is shared.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='replacecol V_Z rvMasyrToKms(PM_Z, 1000/dist_pc)' out=vel_calc_join.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '1000/dist_pc)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol V_Z rvMasyrToKms(PM_Z, 1000/dist_pc)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '1000/dist_pc)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, stripping all columns except those marked with the UCD 'phot.mag'.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='keepcols ucd$phot_mag_*' in2=t2.fits icmd2='keepcols ucd$phot_mag_*' out=mag_ucd_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, marking the original file location, and storing the resulting table in a persistent cache location.",
        "response": "stilts tcatn nin=3 in1=d1.fits in2=d2.fits in3=d3.fits loccol=OriginalFile storage=persistent out=cached_result.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: storage=persistent\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a large FITS file with a multi-extension FITS file, extracting only extension #3 from the multi-extension file.",
        "response": "stilts tcatn nin=2 in1=large.fits in2=multi.fits#3 out=ext3_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate multiple tables, ensuring the magnitude 'MAG' is replaced by NULL if it is less than 5 (i.e., too bright for the sensor).",
        "response": "stilts tcatn nin=3 in1=s1.fits in2=s2.fits in3=s3.fits ocmd='select MAG > 5 || NULL_MAG || replaceval MAG NULL MAG' out=filtered_bright.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '5' '||' 'NULL_MAG' '||' 'replaceval' 'MAG' 'NULL' 'MAG'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG > 5 || NULL_MAG || replaceval MAG NULL MAG\n\nUsage: select <expr>\n    (Unused arguments: '>' '5' '||' 'NULL_MAG' '||' 'replaceval' 'MAG' 'NULL' 'MAG'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, extracting only the three columns corresponding to RA, DEC, and MAG from both inputs, based on UCDs.",
        "response": "stilts tcatn nin=2 in1=c1.fits icmd1='keepcols \"ucd$pos_eq_ra ucd$pos_eq_dec ucd$phot_mag\"' in2=c2.fits icmd2='keepcols \"ucd$pos_eq_ra ucd$pos_eq_dec ucd$phot_mag\"' out=ucd_subset.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, removing any column that contains only identical values after concatenation.",
        "response": "stilts tcatn nin=2 in1=v1.fits in2=v2.fits ocmd='constcol' out=variable_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine data from a remote TAP query result table with a local file.",
        "response": "stilts tcatn nin=2 in1=tap_query_result.vot in2=local_data.fits out=tap_local_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables. For the first table, convert its Galactic coordinates (GLON, GLAT) to Ecliptic coordinates (ELON, ELAT) before combining.",
        "response": "stilts tcatn nin=2 in1=gal.fits icmd1='addskycoords galactic ecliptic GLON GLAT ELON ELAT' in2=ecl.fits out=ecl_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table 1 and table 2. For table 2, skip the final 10 rows before concatenating.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='tail $nrow - 10' out=t2_minus_10.fits",
        "chat.jar": "failed",
        "error": "Error: Row count $nrow not numeric\n\nCommand was: tail $nrow - 10\n\nUsage: tail <nrows>\n    (Row count $nrow not numeric)\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a data table with three columns ('A', 'B', 'C') and another table where 'A' is actually 'A_old', renaming it first.",
        "response": "stilts tcatn nin=2 in1=t_new.fits in2=t_old.fits icmd2='colmeta -name A A_old' out=a_normalized.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables, ensuring the output format is VOTable version 1.4.",
        "response": "stilts tcatn nin=4 in1=a.fits in2=b.fits in3=c.fits in4=d.fits ofmt='votable(version=V14)' out=v14_output.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, adding an integer column 'ERROR_INT' which is the floor of the 'ERROR_FLOAT' column, before finalizing.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='addcol ERROR_INT (int)floor(ERROR_FLOAT)' out=with_int_error.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate a FITS table and a simulated table that represents a strange attractor with 1000 points.",
        "response": "stilts tcatn nin=2 in1=real_data.fits in2=:attractor:1000,clifford out=real_plus_attractor.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine data_A.fits and data_B.fits, keeping only the ID, RA, DEC, and ensuring these are the first three columns in the output.",
        "response": "stilts tcatn nin=2 in1=data_A.fits icmd1='keepcols \"ID RA DEC MAG\"' in2=data_B.fits icmd2='keepcols \"ID RA DEC FLUX\"' ocmd='keepcols \"ID RA DEC\"' out=minimal_columns.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, performing a sophisticated normalization on the magnitude: MAG_NORM = MAG - MJD*0.01 + 10.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='addcol MAG_NORM MAG - MJD*0.01 + 10' out=normalized_mag_output.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MJD*0.01' '+' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_NORM MAG - MJD*0.01 + 10\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'MJD*0.01' '+' '10'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, but rename the 'OBJID' column in the second table to 'SourceID' before combination.",
        "response": "stilts tcatn nin=2 in1=c1.fits in2=c2.fits icmd2='colmeta -name SourceID OBJID' out=source_id_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, using the first table as a filter by keeping only the columns present in the first table in the final output.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits icmd2='keepcols *' in3=t3.fits icmd3='keepcols *' out=t1_structure_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, generating a statistical summary of the angular distance between RA1/DEC1 and RA2/DEC2 in the combined table.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='addcol SEP_DEG skyDistanceDegrees(RA1, DEC1, RA2, DEC2)' ocmd='keepcols SEP_DEG' omode=stats",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'DEC1,' 'RA2,' 'DEC2)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol SEP_DEG skyDistanceDegrees(RA1, DEC1, RA2, DEC2)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'DEC1,' 'RA2,' 'DEC2)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables and replace string value 'UNKNOWN' with NULL in the 'CLASS' column of the final result.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits ocmd='replaceval \"UNKNOWN\" NULL CLASS' out=class_cleaned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an ASCII table and an ECSV table. Use the optional ECSV header feature for the ECSV file.",
        "response": "stilts tcatn nin=2 in1=data.txt ifmt1=ascii in2=data.ecsv ifmt2='ecsv(header=ecsv_meta.yaml)' out=meta_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, sorting the output in parallel by magnitude.",
        "response": "stilts tcatn nin=2 in1=p1.fits in2=p2.fits runner=parallel ocmd='sort MAG' out=parallel_sorted.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table A (in Galactic coords GLON, GLAT) and table B (in Ecliptic coords ELON, ELAT). Convert both to ICRS (RA, DEC) before joining.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='addskycoords galactic icrs GLON GLAT RA_A DEC_A' in2=B.fits icmd2='addskycoords ecliptic icrs ELON ELAT RA_B DEC_B' ocmd='keepcols \"RA_A DEC_A RA_B DEC_B\"' out=double_convert.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a large table with itself, tracking the original file location as a provenance column.",
        "response": "stilts tcatn nin=2 in1=large.fits in2=large.fits loccol=SourceFile out=self_joined_loc.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables and explicitly set the output to verbose FITS (FITS-plus).",
        "response": "stilts tcatn nin=2 in1=a.fits in2=b.fits ofmt=fits-plus out=verbose_fits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, but exclude rows from the resulting table where the 'ERROR' column is less than zero or null.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='select ERROR >= 0 && !NULL_ERROR' out=clean_errors.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0' '&&' '!NULL_ERROR'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ERROR >= 0 && !NULL_ERROR\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0' '&&' '!NULL_ERROR'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, making the output report highly verbose metadata to aid debugging.",
        "response": "stilts tcatn nin=3 in1=a.fits in2=b.fits in3=c.fits omode=meta -verbose -verbose",
        "chat.jar": "failed",
        "error": "\nUnused arguments: -verbose -verbose\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, maintaining the metadata associated with the columns marked with the UCD 'target.name'.",
        "response": "stilts tcatn nin=2 in1=c1.fits icmd1='keepcols ucd$target_name *' in2=c2.fits icmd2='keepcols ucd$target_name *' out=target_name_join.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '*'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols ucd$target_name *\n\nUsage: keepcols <colid-list>\n    (Unused arguments: '*'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine data files from two different instruments. The first has X, Y coordinates, and the second has X_P, Y_P. Rename to 'X' and 'Y' before joining.",
        "response": "stilts tcatn nin=2 in1=inst1.fits in2=inst2.fits icmd2='colmeta -name X X_P; colmeta -name Y Y_P' out=instrument_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables, ensuring any multi-dimensional array columns present in the combined result are flattened into 1D arrays.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits ocmd='collapsecols *' out=flattened_arrays.fits",
        "chat.jar": "failed",
        "error": "Error: Bad collapsecols specification\n\nCommand was: collapsecols *\n\nUsage: collapsecols [-[no]keepscalars] <array-colname> <col-id0> <ncol>\n    (Bad collapsecols specification)\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two files, sorting the results first, and only keeping the rows where the absolute magnitude is brighter than -10.",
        "response": "stilts tcatn nin=2 in1=gals.fits in2=qso.fits ocmd='sort -down ABS_MAG' ocmd='select ABS_MAG < -10' out=bright_sorted_filtered.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '-10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ABS_MAG < -10\n\nUsage: select <expr>\n    (Unused arguments: '<' '-10'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, and explicitly request to keep columns ID, RA, and DEC from both inputs, regardless of duplication, using positional column references.",
        "response": "stilts tcatn nin=2 in1=c1.fits icmd1='keepcols \"$1 $2 $3\"' in2=c2.fits icmd2='keepcols \"$1 $2 $3\"' out=pos_only_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a FITS file and a VOTable, adding a column to the combined table indicating the original file's sequence index.",
        "response": "stilts tcatn nin=2 in1=c1.fits in2=c2.vot seqcol=TabIndex out=indexed_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables, ensuring the output is written to standard output as text.",
        "response": "stilts tcatn nin=4 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a table and a binary Parquet file, maintaining data types.",
        "response": "stilts tcatn nin=2 in1=data.fits in2=data.parquet out=combined_parquet.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables and filter out rows where both 'FLAG_A' and 'FLAG_B' are true.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits ocmd='select !(FLAG_A && FLAG_B)' out=filtered_flags.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' 'FLAG_B)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select !(FLAG_A && FLAG_B)\n\nUsage: select <expr>\n    (Unused arguments: '&&' 'FLAG_B)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, calculating the total angular distance in micro-arcseconds from coordinates RA, DEC and RA_2, DEC_2.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits ocmd='addcol SEP_UAS skyDistanceDegrees(RA, DEC, RA_2, DEC_2) * 3600000000.0' out=sep_uas.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'DEC,' 'RA_2,' 'DEC_2)' '*' '3600000000.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol SEP_UAS skyDistanceDegrees(RA, DEC, RA_2, DEC_2) * 3600000000.0\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'DEC,' 'RA_2,' 'DEC_2)' '*' '3600000000.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine observation data from multiple non-standard file formats (MRT and PDS4).",
        "response": "stilts tcatn nin=2 in1=obs.mrt ifmt1=mrt in2=planets.xml ifmt2=pds4 out=multi_planet_data.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables A and B. For table B, remove a complex data column 'POLYGON_VERTICES' before concatenation.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits icmd2='delcols POLYGON_VERTICES' out=polygon_removed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, but only take the first 10 rows from the result after shuffling the entire combined dataset.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits ocmd='shuffle' ocmd='head 10' out=shuffled_sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables and then display statistics for the combined table, ensuring the statistics calculation runs in parallel.",
        "response": "stilts tcatn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits runner=parallel omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, converting a time column 'DATE_STRING' formatted as ISO 8601 strings into MJD before joining.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='replacecol MJD isoToMjd(DATE_STRING)' in2=t2.fits icmd2='replacecol MJD isoToMjd(DATE_STRING)' out=mjd_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine catalog.fits and err_data.fits, removing duplicate rows based only on the 'ID' column in the combined dataset.",
        "response": "stilts tcatn nin=2 in1=catalog.fits in2=err_data.fits ocmd='uniq ID' out=id_unique_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate a table with a binary VOTable received via standard input.",
        "response": "cat binary.vot | stilts tcatn nin=2 in1=data.fits in2=- ifmt2=votable out=combined_binary_input.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, explicitly marking columns from the first input as '_IN1' and the second as '_IN2', even for non-duplicate columns.",
        "response": "stilts tcatn nin=2 in1=t1.fits fixcols=all suffix1=_IN1 in2=t2.fits fixcols=all suffix2=_IN2 out=full_provenance.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_IN1 fixcols=all suffix2=_IN2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, adding a column that flags if the 'FLUX' value is greater than the mean flux of the entire combined dataset.",
        "response": "stilts tcatn nin=2 in1=a.fits in2=b.fits ocmd='addcol IS_HIGH_FLUX FLUX > mean(FLUX)' out=high_flux_flagged.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' 'mean(FLUX)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_HIGH_FLUX FLUX > mean(FLUX)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '>' 'mean(FLUX)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, retaining only columns with the UCD 'pos.eq.ra' and renaming them 'RA_DEGS'.",
        "response": "stilts tcatn nin=2 in1=c1.fits icmd1='keepcols ucd$pos_eq_ra' in2=c2.fits icmd2='keepcols ucd$pos_eq_ra' ocmd='colmeta -name RA_DEGS ucd$pos_eq_ra' out=ra_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. If table 2 contains a temporary column named 'TEMP_FLAG' discard it before joining.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits icmd2='delcols TEMP_FLAG' in3=t3.fits out=temp_flag_removed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine files, ensuring the result is stored in the compressed FITS format that retains full VOTable metadata in the primary HDU.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits ofmt='fits-plus(compress=gzip)' out=metadata_rich.fits.gz",
        "chat.jar": "failed",
        "error": "Error: No handler for output format fits-plus(compress=gzip)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"compress=gzip\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n        (Failed setting \"compress=gzip\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n            (No method setCompress in uk.ac.starlink.votable.UnifiedFitsTableWriter)))\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate multiple tables, extracting only the three columns corresponding to X, Y, and Z coordinates.",
        "response": "stilts tcatn nin=4 in1=c1.fits icmd1='keepcols \"X Y Z\"' in2=c2.fits icmd2='keepcols \"X Y Z\"' in3=c3.fits icmd3='keepcols \"X Y Z\"' in4=c4.fits icmd4='keepcols \"X Y Z\"' out=xyz_only_multi.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, extracting statistics (min, max, mean) for all numeric columns in parallel.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits runner=parallel omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables. For the first table, include a constant value column 'VERSION' set to 1.0.",
        "response": "stilts tcatn nin=2 in1=t1.fits icmd1='addcol VERSION 1.0' in2=t2.fits out=versioned_t1.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine files F1.fits, F2.vot, and F3.csv listed in input_list.txt. F1 is the definitive input; keep only the ID column from F2 and F3.",
        "response": "stilts tcatn nin=3 in1=F1.fits in2=F2.vot icmd2='keepcols ID' in3=F3.csv ifmt3=csv icmd3='keepcols ID' out=combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate the first four data segments (D1, D2, D3, D4.fits). In D3, select only rows where FLAG is 1.",
        "response": "stilts tcatn nin=4 in1=D1.fits in2=D2.fits in3=D3.fits icmd3='select FLAG==1' in4=D4.fits out=filtered_batch.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge time series data from three sources. The second source, TS2.dat, uses IPAC format, so specify it explicitly.",
        "response": "stilts tcatn nin=3 in1=TS1.fits in2=TS2.dat ifmt2=ipac in3=TS3.fits out=time_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three observations (O1.fits, O2.fits, O3.fits). O2 has magnitude in AB units; add 20.0 to O1 and O3's magnitude column (MAG) to match.",
        "response": "stilts tcatn nin=3 in1=O1.fits icmd1='replacecol MAG MAG+20.0' in2=O2.fits in3=O3.fits icmd3='replacecol MAG MAG+20.0' out=magnitude_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "I have 5 tables (P1-P5.fits). Merge them and add a column 'PartNum' indicating the original index order (1 through 5).",
        "response": "stilts tcatn nin=5 in1=P1.fits in2=P2.fits in3=P3.fits in4=P4.fits in5=P5.fits seqcol=PartNum out=indexed_parts.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four files (C1-C4.fits). Use FITS-plus output format for preservation of rich metadata.",
        "response": "stilts tcatn nin=4 in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits ofmt=fits-plus out=multi_source_rich.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three deep field catalogues (DF1, DF2, DF3). In DF1, convert RA/DEC from radians to degrees before merging.",
        "response": "stilts tcatn nin=3 in1=DF1.fits icmd1='replacecol RA radiansToDegrees(RA); replacecol DEC radiansToDegrees(DEC)' in2=DF2.fits in3=DF3.fits out=rad_to_deg_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two local tables and one table piped from standard input (TS_pipe). Output the row count only.",
        "response": "cat stream.csv | stilts tcatn nin=3 in1=TS1.fits in2=TS2.fits in3=- ifmt3=votable omode=count",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a list of observation logs (L1, L2, L3). Log L3.csv is CSV format; explicitly name its magnitude column 'M' to align with 'MAG' in L1 and L2.",
        "response": "stilts tcatn nin=3 in1=L1.fits in2=L2.fits in3=L3.csv ifmt3=csv icmd3='colmeta -name MAG M' out=log_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, T_MAIN and T_SUPP. T_SUPP has an array column 'FLUX_ARRAY' that must be flattened into scalar columns before combining.",
        "response": "stilts tcatn nin=2 in1=T_MAIN.fits in2=T_SUPP.fits icmd2='explodeall' out=flat_array_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge three tables (S1, S2, S3). S3 is large, so enforce sequential processing on S3 to limit memory usage.",
        "response": "stilts tcatn nin=3 in1=S1.fits in2=S2.fits in3=S3.fits istream3=true out=seq_streamed_merge.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"S3.fits\"\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine files A, B, C. Rename all columns from B with the prefix '_B' due to potential name duplication.",
        "response": "stilts tcatn nin=3 in1=A.fits in2=B.fits fixcols=all suffix2=_B in3=C.fits out=prefixed_columns.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix2=_B\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four measurement files. Drop the 'SIGMA_CLIP' column from the first file, M1.fits.",
        "response": "stilts tcatn nin=4 in1=M1.fits icmd1='delcols SIGMA_CLIP' in2=M2.fits in3=M3.fits in4=M4.fits out=reduced_measurements.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, T_GAL and T_QSO. T_QSO has coordinates in the FK4 system. Convert them to ICRS before concatenation.",
        "response": "stilts tcatn nin=2 in1=T_GAL.fits in2=T_QSO.fits icmd2='addskycoords fk4 icrs RA_FK4 DEC_FK4 RA_ICRS DEC_ICRS' out=icrs_normalized.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. The resulting table must be sorted by 'TIME' descending, and then output as an ECSV file.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits ocmd='sort -down TIME' ofmt=ecsv out=time_sorted.ecsv",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a simulated star field (:skysim:1000) with local data.fits. Only keep sources with magnitude G < 18 in the final output.",
        "response": "stilts tcatn nin=2 in1=data.fits in2=:skysim:1000 ocmd='select G < 18' out=sim_filtered.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select G < 18\n\nUsage: select <expr>\n    (Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables (T1, T2, T3). T1 is gzipped FITS. T2 is a remote VOTable. T3 is local ASCII.",
        "response": "stilts tcatn nin=3 in1=T1.fits.gz in2=http://archive.org/T2.vot in3=T3.txt ifmt3=ascii out=mixed_location_formats.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three files. Calculate the checksum of the resulting combined data structure.",
        "response": "stilts tcatn nin=3 in1=D1.fits in2=D2.fits in3=D3.fits omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge files F1.fits and F2.fits. In F2, calculate a new column 'LOG_FLUX' as log10(FLUX) before joining F1.",
        "response": "stilts tcatn nin=2 in1=F1.fits in2=F2.fits icmd2='addcol LOG_FLUX log10(FLUX)' out=log_flux_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate observation data from OBS_A.fits and OBS_B.fits. Only retain the columns whose names start with 'PM' in both inputs.",
        "response": "stilts tcatn nin=2 in1=OBS_A.fits icmd1='keepcols PM*' in2=OBS_B.fits icmd2='keepcols PM*' out=pm_columns_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine four survey parts (S1-S4). Label the original file location using the unique filename part (S1, S2, etc.) in a column named 'SurveyID'.",
        "response": "stilts tcatn nin=4 in1=S1.fits in2=S2.fits in3=S3.fits in4=S4.fits uloccol=SurveyID out=provenance_uloc.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge T_LEFT and T_RIGHT. After combining, check for and remove any rows where 'Z' (redshift) is null.",
        "response": "stilts tcatn nin=2 in1=T_LEFT.fits in2=T_RIGHT.fits ocmd='select !NULL_Z' out=no_null_redshift.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables T1.fits and T2.fits. For T1, keep only the first 50 rows before appending T2.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='head 50' in2=T2.fits out=head_50_plus.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. After merging, convert any 'MAG' values of 99.0 to null.",
        "response": "stilts tcatn nin=3 in1=D1.fits in2=D2.fits in3=D3.fits ocmd='badval 99.0 MAG' out=magnitude_cleaned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, A.fits and B.fits. A column 'FLAG' exists only in B. Add 'FLAG' with null values to A before concatenation.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='addcol FLAG null' in2=B.fits out=flag_padded.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine photometry data from Phot1, Phot2, Phot3. Phot1's column 'Err_R' must be renamed to 'R_ERR' to match the others.",
        "response": "stilts tcatn nin=3 in1=Phot1.fits icmd1='colmeta -name R_ERR Err_R' in2=Phot2.fits in3=Phot3.fits out=error_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four files. After merging, display the final table directly in TOPCAT.",
        "response": "stilts tcatn nin=4 in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a table A and table B. Apply the filter 'fixcolnames' to both inputs to standardize column names before joining.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='fixcolnames' in2=B.fits icmd2='fixcolnames' out=name_standardized_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two survey sections. Output the joined table as a multi-table VOTable file with BINARY2 encoding.",
        "response": "stilts tcatn nin=2 in1=S1.fits in2=S2.fits ofmt='votable(format=BINARY2)' out=binary2_concat.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate data in files D1 and D2. D2 uses Galactic coordinates (GLON, GLAT); rename these to 'RA' and 'DEC' for consistent output.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits icmd2='colmeta -name RA GLON; colmeta -name DEC GLAT' out=gal_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge four tables (M1-M4) and remove duplicate rows based entirely on all column values in the result.",
        "response": "stilts tcatn nin=4 in1=M1.fits in2=M2.fits in3=M3.fits in4=M4.fits ocmd='uniq' out=fully_unique_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three logs. Log 1 has 'DATE' strings; convert them to MJD before concatenation.",
        "response": "stilts tcatn nin=3 in1=Log1.fits icmd1='replacecol DATE isoToMjd(DATE)' in2=Log2.fits in3=Log3.fits out=mjd_standardized.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a remote FITS table (R.fits) and a local VOTable (L.vot). Only output the metadata of the resulting table.",
        "response": "stilts tcatn nin=2 in1=http://remote.server/R.fits in2=L.vot omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate T_POS and T_FLUX. T_FLUX columns are in a fixed order; drop T_FLUX's first two columns (ID, Name) before combining.",
        "response": "stilts tcatn nin=2 in1=T_POS.fits in2=T_FLUX.fits icmd2='delcols \"$1 $2\"' out=columns_shifted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine five input files (I1-I5.fits). After combining, calculate and display the mean and standard deviation of all numeric columns.",
        "response": "stilts tcatn nin=5 in1=I1.fits in2=I2.fits in3=I3.fits in4=I4.fits in5=I5.fits omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge observation list Obs1.fits and a custom looping table with 500 rows (:loop:500).",
        "response": "stilts tcatn nin=2 in1=Obs1.fits in2=:loop:500 out=obs_plus_loop.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables. Table 2 must be filtered to keep only rows where the 'ERROR' column is positive (non-negative).",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits icmd2='select ERROR >= 0' in3=T3.fits out=positive_error_only.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ERROR >= 0\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine file D_MAIN.fits and a file streamed via a pipe (D_STREAM.ipac). D_STREAM is IPAC format.",
        "response": "cat D_STREAM.ipac | stilts tcatn nin=2 in1=D_MAIN.fits in2=- ifmt2=ipac out=piped_ipac_merge.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge four tables. Drop all table parameters (metadata) from the final combined table.",
        "response": "stilts tcatn nin=4 in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits ocmd='clearparams *' out=params_removed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables T_A and T_B. T_A uses columns X_PIX, Y_PIX; rename them to 'X' and 'Y' respectively to match T_B.",
        "response": "stilts tcatn nin=2 in1=T_A.fits icmd1='colmeta -name X X_PIX; colmeta -name Y Y_PIX' in2=T_B.fits out=pixel_coords_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. In T3.fits, calculate a new column 'COLOR' based on 'MAG_B - MAG_R' before merging.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='addcol COLOR MAG_B-MAG_R' out=color_calculated.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge four tables (G1-G4.fits). Only output the final result to standard output in plain text format.",
        "response": "stilts tcatn nin=4 in1=G1.fits in2=G2.fits in3=G3.fits in4=G4.fits ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, T_LEFT and T_RIGHT. Sort the entire result by 'ID' ascending.",
        "response": "stilts tcatn nin=2 in1=T_LEFT.fits in2=T_RIGHT.fits ocmd='sort ID' out=id_sort_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables A and B. Table A has string column 'NAME' and B has integer ID. Convert A's name column to integer ID using hashing before joining.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='replacecol ID hashCode(NAME)' in2=B.fits out=name_hash_to_id.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two large tables. Use parallel processing for the concatenation to speed up execution.",
        "response": "stilts tcatn nin=2 in1=huge_1.fits in2=huge_2.fits runner=parallel out=parallel_concat.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three files. Add a location column named 'SourceFile' detailing the full path/URL of each original file.",
        "response": "stilts tcatn nin=3 in1=data/A.fits in2=http://remote/B.fits in3=C.fits loccol=SourceFile out=full_location_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine four files. For the first file (F1), select only rows where 'MAG' is less than 12. For the last file (F4), only keep the last 50 rows.",
        "response": "stilts tcatn nin=4 in1=F1.fits icmd1='select MAG < 12' in2=F2.fits in3=F3.fits in4=F4.fits icmd4='tail 50' out=mixed_end_filtering.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '12'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG < 12\n\nUsage: select <expr>\n    (Unused arguments: '<' '12'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge T_GOOD and T_BAD. In T_BAD, replace all boolean 'TRUE' values in the 'FLAG' column with integer 1, and 'FALSE' with 0, before merging.",
        "response": "stilts tcatn nin=2 in1=T_GOOD.fits in2=T_BAD.fits icmd2='replacecol FLAG (FLAG ? 1 : 0)' out=boolean_to_int_merge.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '?' '1' ':' '0)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol FLAG (FLAG ? 1 : 0)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '?' '1' ':' '0)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three VOTables and output the final result in LaTeX table format.",
        "response": "stilts tcatn nin=3 in1=V1.vot in2=V2.vot in3=V3.vot ofmt=latex out=output_report.tex",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two FITS files. In the second file, rename columns 'FLUX_U', 'FLUX_G' to 'U', 'G' respectively.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='colmeta -name U FLUX_U; colmeta -name G FLUX_G' out=flux_channel_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, both of which contain duplicate column names. Rename duplicated columns with suffix '_A' and '_B'.",
        "response": "stilts tcatn nin=2 in1=A_dup.fits in2=B_dup.fits fixcols=dups suffix1=_A suffix2=_B out=duplicate_safe_merge.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_A suffix2=_B\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine four data files. After merging, use the 'constcol' filter to remove any columns found to have constant values across the entire result set.",
        "response": "stilts tcatn nin=4 in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits ocmd='constcol' out=variable_data_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine FITS file F1.fits with VOTable F2.vot, but ensure F1 is processed to select only rows where 'SNR' is greater than 10, while F2 uses only columns ID and FLUX.",
        "response": "stilts tcatn nin=2 in1=F1.fits icmd1='select SNR > 10' in2=F2.vot icmd2='keepcols \"ID FLUX\"' out=filtered_mixed.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select SNR > 10\n\nUsage: select <expr>\n    (Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables. The first is raw_data.csv (ASCII format) and the second is headerless.fits. The output should track provenance by sequence number.",
        "response": "stilts tcatn nin=2 in1=raw_data.csv ifmt1=ascii in2=headerless.fits seqcol=InputIndex out=sequenced_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an ECSV file and a Parquet file. Before combining, drop columns with constant values from both inputs.",
        "response": "stilts tcatn nin=2 in1=meta.ecsv ifmt1=ecsv icmd1='constcol' in2=binary.parquet icmd2='constcol' out=clean_const.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four FITS files (P1-P4.fits). In P3, convert coordinates RA_RAD and DEC_RAD from radians to degrees.",
        "response": "stilts tcatn nin=4 in1=P1.fits in2=P2.fits in3=P3.fits icmd3='addcol RA_DEG radiansToDegrees(RA_RAD); addcol DEC_DEG radiansToDegrees(DEC_RAD)' in4=P4.fits out=rad_converted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge time series from a remote HAPI service URL and a local VOTable. Output the result to standard output in plain text.",
        "response": "stilts tcatn nin=2 in1='https://vires.services/hapi/data?dataset=GRACE_A_MAG&start=2009-01-01&stop=2009-01-02' ifmt1=hapi in2=local_events.vot ofmt=text out=-",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine files A and B. In A, fields X_ERR and Y_ERR are in mas; convert them to degrees before joining.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='replacecol X_ERR X_ERR/3600000.0; replacecol Y_ERR Y_ERR/3600000.0' in2=B.fits out=mas_to_deg_convert.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a simulated catalogue of 10,000 stars with a real catalogue (real_cat.fits). Keep only the first 500 rows total, sorted by magnitude.",
        "response": "stilts tcatn nin=2 in1=:skysim:10000 in2=real_cat.fits ocmd='sort gmag' ocmd='head 500' out=mixed_sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two survey tables. The second table has an array column 'FLUX_VALUES' that must be fully exploded into scalar columns.",
        "response": "stilts tcatn nin=2 in1=S1.fits in2=S2.fits icmd2='explodeall' out=scalarized_concat.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables and compute the population standard deviation of the final 'REDSHIFT' column.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits ocmd='keepcols REDSHIFT' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a table of observation positions (pos.fits) with a table created by looping 500 times. Name the loop index column 'LOOP_I'.",
        "response": "stilts tcatn nin=2 in1=pos.fits in2=:loop:500 ocmd='colmeta -name LOOP_I $0' out=pos_loop_joined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine catalogue_A and catalogue_B. Catalogue_A uses 'ID' and 'B' uses 'SOURCE_ID'. Rename B's column to match A's before joining.",
        "response": "stilts tcatn nin=2 in1=catalogue_A.fits in2=catalogue_B.fits icmd2='colmeta -name ID SOURCE_ID' out=id_unified.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables (t1-t4.fits). T2 contains a column named 'MAG' which is an array of 5 elements; replace it with the mean of the array before concatenation.",
        "response": "stilts tcatn nin=4 in1=t1.fits in2=t2.fits icmd2='replacecol MAG mean(MAG)' in3=t3.fits in4=t4.fits out=mean_mag_replaced.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge FITS tables F1 and F2. F2 has FK4 coordinates; convert them to ICRS using the current epoch before concatenation.",
        "response": "stilts tcatn nin=2 in1=F1.fits in2=F2.fits icmd2='addskycoords fk4 icrs RA_B DEC_B RA_I DEC_I' out=fk4_icrs_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a local file (local.fits) and a remote VOTable accessed via HTTPS, ensuring all output columns are renamed with suffixes '_L' and '_R'.",
        "response": "stilts tcatn nin=2 in1=local.fits fixcols=all suffix1=_L in2=https://archive.org/remote.vot fixcols=all suffix2=_R out=prefixed_remote.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_L fixcols=all suffix2=_R\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables T1 and T2, but T1 needs a synthetic column 'COLOR' defined as B_MAG - V_MAG added before joining T2.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='addcol COLOR B_MAG-V_MAG' in2=T2.fits out=color_appended.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table A and table B, maintaining only the metadata of the final structure, excluding row data.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge logs L1, L2, L3. L2 has a date column as an ISO-8601 string; convert it to MJD before concatenation.",
        "response": "stilts tcatn nin=3 in1=L1.fits in2=L2.fits icmd2='replacecol DATE_MJD isoToMjd(DATE_STR)' in3=L3.fits out=mjd_converted_logs.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, applying a global filter to keep only rows where magnitude is less than 18, and outputting to FITS-plus format.",
        "response": "stilts tcatn nin=2 in1=T_BRIGHT.fits in2=T_FAINT.fits ocmd='select MAG < 18' ofmt=fits-plus out=bright_subset.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG < 18\n\nUsage: select <expr>\n    (Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables A and B. A contains array columns; flatten them into scalar columns using explodeall before joining B.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='explodeall' in2=B.fits out=exploded_A.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge three survey epochs, adding a column 'Source' indicating the file name without extensions (uloccol).",
        "response": "stilts tcatn nin=3 in1=epoch_2018.fits in2=epoch_2019.fits in3=epoch_2020.fits uloccol=Source out=uloc_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an IPAC table and an ASCII table. The final output must be sorted by the concatenation of two string columns, ID and NAME.",
        "response": "stilts tcatn nin=2 in1=ipac.tbl ifmt1=ipac in2=ascii.txt ifmt2=ascii ocmd='addcol SORT_KEY concat(ID, NAME)' ocmd='sort SORT_KEY' out=sorted_ipac_ascii.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NAME)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol SORT_KEY concat(ID, NAME)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'NAME)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, dropping the columns named 'RA_ERR' and 'DEC_ERR' only from the second input table.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='delcols \"RA_ERR DEC_ERR\"' out=error_dropped.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge file1.fits and file2.fits. In file1, change the name of column $3 to 'Z_SPEC' and ensure it's kept as a 32-bit integer.",
        "response": "stilts tcatn nin=2 in1=file1.fits icmd1='colmeta -name Z_SPEC $3; replacecol Z_SPEC toInteger(Z_SPEC)' in2=file2.fits out=spec_z_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a local file with the results of a remote TAP query, executed asynchronously. Output mode should only count the rows.",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap adql='SELECT TOP 1000 source_id FROM gaiadr3.gaia_source' out=temp.vot; stilts tcatn nin=2 in1=local.fits in2=temp.vot omode=count",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: tcatn: not found\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, T_GALS and T_QSOS. T_GALS requires conversion of 'FLUX_MILIJY' to Janskys before joining.",
        "response": "stilts tcatn nin=2 in1=T_GALS.fits icmd1='replacecol FLUX_JY FLUX_MILIJY / 1000.0' in2=T_QSOS.fits out=flux_normalized.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '/' '1000.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol FLUX_JY FLUX_MILIJY / 1000.0\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '/' '1000.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, keeping only the final 50 rows from the first table and the first 50 rows from the second table.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='tail 50' in2=T2.fits icmd2='head 50' out=combined_slice.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables C1, C2, and C3. C1 uses 'ID' for identification; C2 uses 'Name'; C3 uses 'UID'. Standardize all names to 'ID' using colmeta.",
        "response": "stilts tcatn nin=3 in1=C1.fits in2=C2.fits icmd2='colmeta -name ID Name' in3=C3.fits icmd3='colmeta -name ID UID' out=id_standardized.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a multi-extension FITS file (data.fits) selecting extension #2, with a single FITS file (cat.fits).",
        "response": "stilts tcatn nin=2 in1=data.fits#2 in2=cat.fits out=ext_2_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. The entire output must be shuffled randomly.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits ocmd='shuffle' out=random_shuffle.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, keeping all columns but fixing duplicated names using suffixes '_1' and '_2'.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits fixcols=all suffix1=_1 suffix2=_2 out=all_renamed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_1 suffix2=_2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a remote PDS4 planetary data file with local FITS table, outputting the checksum.",
        "response": "stilts tcatn nin=2 in1=http://pds.nasa.gov/data/mars.xml ifmt1=pds4 in2=local.fits omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. For all inputs, filter to include only rows where 'QUALITY_FLAG' is not null.",
        "response": "stilts tcatn nin=3 in1=Q1.fits icmd1='select !NULL_QUALITY_FLAG' in2=Q2.fits icmd2='select !NULL_QUALITY_FLAG' in3=Q3.fits icmd3='select !NULL_QUALITY_FLAG' out=no_null_quality.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables and replace the magic value -99.0 with NULL in the 'FLUX' column after combination.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits ocmd='badval -99.0 FLUX' out=flux_badval_clean.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a table where magnitudes are in Janskys, converting them to AB magnitudes, before combining with a magnitude table.",
        "response": "stilts tcatn nin=2 in1=fluxes.fits icmd1='replacecol MAG janskyToAb(FLUX_JY)' in2=mags.fits out=ab_mag_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, T1, T2, T3. Only keep those columns that have a UCD starting with 'phot.mag'.",
        "response": "stilts tcatn nin=3 in1=T1.fits icmd1='keepcols ucd$phot_mag*' in2=T2.fits icmd2='keepcols ucd$phot_mag*' in3=T3.fits icmd3='keepcols ucd$phot_mag*' out=mag_ucds_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables that use Galactic coordinates (GLON, GLAT) and convert them to Ecliptic coordinates (ELON, ELAT) before joining.",
        "response": "stilts tcatn nin=2 in1=G1.fits icmd1='addskycoords galactic ecliptic GLON GLAT ELON_1 ELAT_1' in2=G2.fits icmd2='addskycoords galactic ecliptic GLON GLAT ELON_2 ELAT_2' out=ecliptic_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate an ASCII file and an ECSV file. In the ASCII file, drop columns named 'V_old' and 'I_old' prior to merging.",
        "response": "stilts tcatn nin=2 in1=data.txt ifmt1=ascii icmd1='delcols \"V_old I_old\"' in2=data.ecsv ifmt2=ecsv out=reduced_ascii_ecsv.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a VOTable and a multi-row FITS table extension read via standard input, converting the output to Parquet.",
        "response": "cat stream.fits | stilts tcatn nin=2 in1=local.vot in2=- ifmt2=fits ofmt=parquet out=piped_to_parquet.parquet",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge survey files T1 and T2. Apply the 'fixcolnames' filter to T1 to ensure clean column names compatible with algebraic expressions.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='fixcolnames' in2=T2.fits out=fixed_names_concat_2.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables T1, T2, T3. If the final combined magnitude 'MAG' is null, replace it with 99.9.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits ocmd='replacecol MAG NULL_MAG ? 99.9 : MAG' out=null_filled_mag.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '?' '99.9' ':' 'MAG'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol MAG NULL_MAG ? 99.9 : MAG\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '?' '99.9' ':' 'MAG'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a table and itself, adding a constant column 'REPLICA' set to 'TRUE' for the second instance.",
        "response": "stilts tcatn nin=2 in1=original.fits in2=original.fits icmd2='addcol REPLICA \"TRUE\"' out=self_replicated.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, T_MAIN and T_SUPP. T_SUPP contains a 3D velocity vector array 'VELOCITY_VEC'. Explode only this column.",
        "response": "stilts tcatn nin=2 in1=T_MAIN.fits in2=T_SUPP.fits icmd2='explodecols VELOCITY_VEC' out=velocity_exploded.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate data from two files, listing the original full file location in a column named 'SOURCE_LOC'.",
        "response": "stilts tcatn nin=2 in1=/path/to/archive/dataA.fits in2=/path/to/archive/dataB.fits loccol=SOURCE_LOC out=combined_full_loc.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine five tables (A-E.fits). Then apply a row filter to keep only every 50th row globally.",
        "response": "stilts tcatn nin=5 in1=A.fits in2=B.fits in3=C.fits in4=D.fits in5=E.fits ocmd='every 50' out=sparse_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge observation files, and rename the output table itself to 'MasterObsLog' before writing.",
        "response": "stilts tcatn nin=2 in1=log1.fits in2=log2.fits ocmd='tablename MasterObsLog' out=master_log.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine T1 and T2. In T2, use the inverse hyperbolic sine function to scale the 'FLUX' column before concatenation.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='replacecol FLUX asinh(FLUX)' out=asinh_flux_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables, ensuring the output is column-oriented FITS (colfits-plus).",
        "response": "stilts tcatn nin=4 in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits ofmt=colfits-plus out=multi_colfits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine T_BIG and T_SMALL. T_BIG has an extra column 'NOTES' which must be removed before joining.",
        "response": "stilts tcatn nin=2 in1=T_BIG.fits icmd1='delcols NOTES' in2=T_SMALL.fits out=notes_removed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, adding a column to the result indicating if 'ID_A' equals 'ID_B' (assuming duplicate column renaming).",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits fixcols=all suffix1=_A suffix2=_B ocmd='addcol MATCHED equals(ID_A, ID_B)' out=matched_flagged.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'ID_B)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MATCHED equals(ID_A, ID_B)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'ID_B)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, calculating the total row count (omode=count) in parallel.",
        "response": "stilts tcatn nin=3 in1=H1.fits in2=H2.fits in3=H3.fits runner=parallel omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge data.fits with a table generated by summing the fluxes from an array column 'FLUX_ARRAY'.",
        "response": "stilts tcatn nin=2 in1=data.fits in2='tpipe in=spec.fits cmd=\"addcol TOTAL_FLUX sum(FLUX_ARRAY)\"' out=total_flux_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, T_LEFT and T_RIGHT. For T_RIGHT, filter out rows where the 'ERROR' column is negative.",
        "response": "stilts tcatn nin=2 in1=T_LEFT.fits in2=T_RIGHT.fits icmd2='select ERROR >= 0' out=positive_error_only_concat.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ERROR >= 0\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine multiple tables, adding a new column 'LOG_MASS' which is log10(MASS) calculated post-concatenation.",
        "response": "stilts tcatn nin=3 in1=M1.fits in2=M2.fits in3=M3.fits ocmd='addcol LOG_MASS log10(MASS)' out=log_mass_appended.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a source catalogue with a table containing polygons defined by vertices in a single string column 'VERTICES'.",
        "response": "stilts tcatn nin=2 in1=cat.fits in2=polygons.fits out=cat_plus_polygons.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two FITS files. T1 has coordinates RA_J2000 in radians, convert them to degrees before joining T2.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='replacecol RA_J2000 radiansToDegrees(RA_J2000)' in2=T2.fits out=rad_to_deg_preprocessed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables A and B. In the combined output, rename all columns containing 'ERROR' in their name by prefixing them with 'E_'.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits ocmd='colmeta -name E_* *ERROR*' out=error_prefixed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge three ASCII tables, defining their null value as 999.0 globally, and outputting to ECSV.",
        "response": "stilts tcatn nin=3 ifmt1=ascii in1=d1.txt ifmt2=ascii in2=d2.txt ifmt3=ascii in3=d3.txt ocmd='badval 999.0 *' ofmt=ecsv out=null_fixed_ecsv.ecsv",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, removing duplicate rows based only on the 'NAME' column.",
        "response": "stilts tcatn nin=2 in1=R1.fits in2=R2.fits ocmd='sort NAME' ocmd='uniq NAME' out=name_unique_sorted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a table containing positions with a table containing proper motions (PM_RA, PM_DEC). For the latter, calculate a total proper motion magnitude 'PM_TOT'.",
        "response": "stilts tcatn nin=2 in1=pos.fits in2=pm.fits icmd2='addcol PM_TOT hypot(PM_RA, PM_DEC)' out=pm_magnitude_combined.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PM_DEC)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PM_TOT hypot(PM_RA, PM_DEC)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PM_DEC)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables T1 and T2, but only include rows from T1 where the column 'Z_QUALITY' is exactly equal to 'GOOD'.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='select equals(Z_QUALITY, \"GOOD\")' in2=T2.fits out=z_quality_filter.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GOOD' ')'\n\nCommand was: select equals(Z_QUALITY, \"GOOD\")\n\nUsage: select <expr>\n    (Unused arguments: 'GOOD' ')')\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. T1 has 'ID_1', T2 has 'ID_2', T3 has 'ID_3'. Unify their identifiers to 'MASTER_ID' using colmeta.",
        "response": "stilts tcatn nin=3 in1=T1.fits icmd1='colmeta -name MASTER_ID ID_1' in2=T2.fits icmd2='colmeta -name MASTER_ID ID_2' in3=T3.fits icmd3='colmeta -name MASTER_ID ID_3' out=master_id_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, T_LEFT and T_RIGHT. T_LEFT's coordinate system is in Supergalactic coordinates. Convert them to ICRS before joining.",
        "response": "stilts tcatn nin=2 in1=T_LEFT.fits icmd1='addskycoords supergalactic icrs SGL SGB RA_ICRS DEC_ICRS' in2=T_RIGHT.fits out=supergalactic_to_icrs.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a single table with a synthetic attractor dataset containing 1 million points, just to get a row count.",
        "response": "stilts tcatn nin=2 in1=real.fits in2=:attractor:1e6,clifford omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables, preserving only columns that appear in all three tables, defined by their names.",
        "response": "stilts tcatn nin=3 in1=C1.fits in2=C2.fits in3=C3.fits ocmd='keepcols intersect(C1.*, C2.*, C3.*)' out=common_cols_intersect.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'C2.*,' 'C3.*)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols intersect(C1.*, C2.*, C3.*)\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'C2.*,' 'C3.*)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, resulting in a VOTable output encoded in binary format (BINARY2 serialization).",
        "response": "stilts tcatn nin=2 in1=V1.fits in2=V2.fits ofmt='votable(format=BINARY2)' out=binary2_combined.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine observations O1.fits and O2.fits. O1 requires an 'ASSERT' filter to ensure all rows have POS_ERR > 0.",
        "response": "stilts tcatn nin=2 in1=O1.fits icmd1='assert POS_ERR > 0' in2=O2.fits out=asserted_valid_errors.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: assert POS_ERR > 0\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables, restricting the total number of output rows to 1000, then display statistics.",
        "response": "stilts tcatn nin=4 in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits ocmd='head 1000' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables. The output should be converted into a LaTeX table format for reporting.",
        "response": "stilts tcatn nin=2 in1=report_part1.fits in2=report_part2.fits ofmt=latex out=final_report.tex",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables A and B. A contains metadata parameters I wish to keep; propagate all of them to the output.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits out=metadata_preserved.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables. T2 uses an array column 'FLUX_MEASUREMENTS'; replace it with the maximum value found in the array.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='replacecol FLUX_MEASUREMENTS maximum(FLUX_MEASUREMENTS)' out=max_value_replaced.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables. In T1, drop the final column by using its positional index '$NCOL'.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='delcols $ncol' in2=T2.fits out=final_col_dropped.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an IPAC table and a FITS table. The final table must explicitly use long (64-bit) integers for column 'INDEX'.",
        "response": "stilts tcatn nin=2 in1=ipac.tbl ifmt1=ipac in2=fits.fits ocmd='replacecol INDEX toLong(INDEX)' out=long_index_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge 5 tables. After concatenation, apply a filter to remove all duplicate rows based on all column values.",
        "response": "stilts tcatn nin=5 in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits in5=C5.fits ocmd='uniq' out=full_deduped.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, T_POS and T_FLUX. T_FLUX rows should only be included if 'FLAG_MEASURE' equals 1.",
        "response": "stilts tcatn nin=2 in1=T_POS.fits in2=T_FLUX.fits icmd2='select FLAG_MEASURE == 1' out=flagged_flux_combined.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '==' '1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLAG_MEASURE == 1\n\nUsage: select <expr>\n    (Unused arguments: '==' '1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables T1 and T2. T2 contains coordinates GLON, GLAT. Add a column 'GAL_RAD' calculating the distance from the galactic center (0,0) before joining.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='addcol GAL_RAD skyDistanceDegrees(GLON, GLAT, 0, 0)' out=galactic_distance_merged.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GLAT,' '0,' '0)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol GAL_RAD skyDistanceDegrees(GLON, GLAT, 0, 0)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'GLAT,' '0,' '0)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables, and explicitly set the output format to VOTable version 1.4.",
        "response": "stilts tcatn nin=2 in1=V1.fits in2=V2.fits ofmt='votable(version=V14)' out=v14_output.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine four input tables. For the first table, apply a head filter to keep only the initial 100 rows.",
        "response": "stilts tcatn nin=4 in1=I1.fits icmd1='head 100' in2=I2.fits in3=I3.fits in4=I4.fits out=head100_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables. Output column 'FLUX_MJD' is calculated as FLUX * MJD post-combination.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='addcol FLUX_MJD FLUX * MJD' out=multiplied_column.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '*' 'MJD'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol FLUX_MJD FLUX * MJD\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '*' 'MJD'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables (A.fits, B.csv, C.vot). A and C use magnitude MAG; in B (CSV format), calculate MAG = 25 - 2.5 * log10(FLUX) before joining.",
        "response": "stilts tcatn nin=3 in1=A.fits in2=B.csv ifmt2=csv icmd2='addcol MAG 25 - 2.5 * log10(FLUX)' in3=C.vot out=combined_mag_calc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' '2.5' '*' 'log10(FLUX)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG 25 - 2.5 * log10(FLUX)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' '2.5' '*' 'log10(FLUX)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables T1 and T2. T1 is remote FITS via HTTPS; T2 is local VOTable. Output the checksum only.",
        "response": "stilts tcatn nin=2 in1=https://example.com/T1.fits in2=T2.vot omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four catalog tiles (T1-T4.fits). In T3, filter out sources where 'FLAG_SATURATION' is set (FLAG & 2 != 0) before combination.",
        "response": "stilts tcatn nin=4 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='select (FLAG & 2) == 0' in4=T4.fits out=unsaturated_tiles.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&' '2)' '==' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select (FLAG & 2) == 0\n\nUsage: select <expr>\n    (Unused arguments: '&' '2)' '==' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine photometry data: Vis.fits, IR.fits, and UV.fits. In Vis.fits, normalize the FLUX column by dividing by 1e-12.",
        "response": "stilts tcatn nin=3 in1=Vis.fits icmd1='replacecol FLUX FLUX / 1e-12' in2=IR.fits in3=UV.fits out=normalized_phot.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '/' '1e-12'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol FLUX FLUX / 1e-12\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '/' '1e-12'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, A.fits and B.fits. A is a huge catalog; enforce sequential streaming for A and cache the final result before outputting.",
        "response": "stilts tcatn nin=2 in1=A.fits istream1=true in2=B.fits ocmd='cache' out=streamed_cached.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"A.fits\"\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine positional data (pos.fits) with a generated table of 100,000 strange attractor points (clifford family).",
        "response": "stilts tcatn nin=2 in1=pos.fits in2=:attractor:100000,clifford out=pos_attractor.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables, renaming duplicate columns in the output by adding the table index as a suffix (e.g., ID_1, ID_2, ID_3).",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 out=indexed_dups.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine ObsCore metadata (obs.fits) and an external EPN-TAP planetary service result (epn.vot). Only keep rows in obs.fits if 'time_exp' > 100s.",
        "response": "stilts tcatn nin=2 in1=obs.fits icmd1='select time_exp > 100' in2=epn.vot out=filtered_obscore.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select time_exp > 100\n\nUsage: select <expr>\n    (Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge CDF data (cdf_ts.cdf) and a VOTable. In the CDF data, select only the second table extension (#1).",
        "response": "stilts tcatn nin=2 in1=cdf_ts.cdf#1 ifmt1=cdf in2=local.vot out=cdf_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables, removing any column that becomes constant in value across the entire resulting dataset.",
        "response": "stilts tcatn nin=4 in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits ocmd='constcol' out=variable_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine catalogue parts A and B. A uses Galactic coordinates (GLON, GLAT). Convert A's coordinates to Ecliptic (ELON, ELAT) before combining.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='addskycoords galactic ecliptic GLON GLAT ELON ELAT' in2=B.fits out=ecliptic_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables T1 and T2. T2 contains proper motion components (PM_X, PM_Y) in mas/yr. Calculate the total proper motion magnitude 'PM_TOT' before joining.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='addcol PM_TOT hypot(PM_X, PM_Y)' out=pm_magnitude_added.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PM_Y)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PM_TOT hypot(PM_X, PM_Y)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PM_Y)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, applying the logarithmic scaling function `symlog(1, 0.5, X)` to column `X` in both before merging.",
        "response": "stilts tcatn nin=2 in1=D1.fits icmd1='replacecol X symlog(1, 0.5, X)' in2=D2.fits icmd2='replacecol X symlog(1, 0.5, X)' out=symlog_scaled.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0.5,' 'X)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol X symlog(1, 0.5, X)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '0.5,' 'X)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine file D1.fits with a table generated by summing the squares of 100 loop indices, adding the total sum as a column.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2='tpipe in=:loop:101 cmd=\"addcol SQUARERED $0*$0\" cmd=\"keepcols SQUARERED\" ocmd=\"stats sum\" omode=out' out=data_plus_sum.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, applying the 'fixcolnames' filter to both inputs and then outputting the combined result as a multi-extension FITS file.",
        "response": "stilts tcatn nin=2 in1=M1.fits icmd1='fixcolnames' in2=M2.fits icmd2='fixcolnames' ofmt=fits-plus out=clean_multi.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two time series tables, ensuring that the final output is sorted chronologically by the 'MJD' column.",
        "response": "stilts tcatn nin=2 in1=ts_early.fits in2=ts_late.fits ocmd='sort MJD' out=chronological.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, dropping the columns named 'ERROR_RA' and 'ERROR_DEC' from all inputs before combining.",
        "response": "stilts tcatn nin=3 in1=C1.fits icmd1='delcols \"ERROR_RA ERROR_DEC\"' in2=C2.fits icmd2='delcols \"ERROR_RA ERROR_DEC\"' in3=C3.fits icmd3='delcols \"ERROR_RA ERROR_DEC\"' out=error_stripped.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge an ASCII table and an IPAC table. In the ASCII table, specify the input format options to sample only the first 500 rows to guess column types.",
        "response": "stilts tcatn nin=2 in1=input.txt ifmt1='ascii(maxSample=500)' in2=input.tbl ifmt2=ipac out=sample_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables. In the resulting table, add a Boolean column 'IS_GALAXY' which is true if the 'CLASS' column starts with 'G'.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='addcol IS_GALAXY startsWith(CLASS, \"G\")' out=classified_data.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'G' ')'\n\nCommand was: addcol IS_GALAXY startsWith(CLASS, \"G\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'G' ')')\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate T_POS.fits and T_FLUX.fits. T_FLUX has an array column 'SPEC_ARRAY'. Replace it with the maximum value in that array before joining.",
        "response": "stilts tcatn nin=2 in1=T_POS.fits in2=T_FLUX.fits icmd2='replacecol SPEC_ARRAY maximum(SPEC_ARRAY)' out=max_flux_scalar.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge data from a remote HAPI service (GRACE_A_MAG) covering a short time range with local calibration data.",
        "response": "stilts tcatn nin=2 in1='https://vires.services/hapi/data?dataset=GRACE_A_MAG&start=2009-01-01&stop=2009-01-01&include=header' ifmt1=hapi in2=calib.fits out=hapi_local.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine T1 and T2. T1 is in FITS format, T2 is in Parquet. Output the result in the FITS column-oriented format (colfits).",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.parquet ofmt=colfits-plus out=combined.colfits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables (obs1, obs2, obs3). In obs3, add a new column 'LOG_FLUX' which is the natural logarithm of FLUX.",
        "response": "stilts tcatn nin=3 in1=obs1.fits in2=obs2.fits in3=obs3.fits icmd3='addcol LOG_FLUX ln(FLUX)' out=log_flux_added.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge data sets A and B. After joining, remove any row where the magnitude difference (MAG_A - MAG_B) is exactly zero.",
        "response": "stilts tcatn nin=2 in1=A.fits fixcols=all suffix1=_A in2=B.fits fixcols=all suffix2=_B ocmd='select abs(MAG_A - MAG_B) != 0' out=nonzero_diff.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_B)' '!=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(MAG_A - MAG_B) != 0\n\nUsage: select <expr>\n    (Unused arguments: '-' 'MAG_B)' '!=' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a VOTable and a PDS4 planetary data file (label.xml). Output only the table metadata to standard output.",
        "response": "stilts tcatn nin=2 in1=data.vot in2=label.xml ifmt2=pds4 omode=meta out=-",
        "chat.jar": "failed",
        "error": "Error: out=-: out and ofmt parameters can only be used when omode=out\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate T1 and T2. T2 contains columns RA_MAS and DEC_MAS in milliarcseconds. Convert them to degrees before combining.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='addcol RA_DEG RA_MAS/3600000.0; addcol DEC_DEG DEC_MAS/3600000.0' out=mas_converted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge three tables, then sort the output by the concatenation of 'FIELD_ID' and 'SOURCE_NUM'.",
        "response": "stilts tcatn nin=3 in1=F1.fits in2=F2.fits in3=F3.fits ocmd='addcol SORT_KEY concat(FIELD_ID, toString(SOURCE_NUM))' ocmd='sort SORT_KEY' out=sorted_composite_key.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'toString(SOURCE_NUM))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol SORT_KEY concat(FIELD_ID, toString(SOURCE_NUM))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'toString(SOURCE_NUM))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a local file with a synthetic table representing a henon strange attractor with parameters a=-0.68, b=1.64, c=0.36.",
        "response": "stilts tcatn nin=2 in1=local_data.fits in2=':attractor:50000,henon,-0.68,1.64,0.36' out=hemon_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables, keeping the original filename in a provenance column named 'SourceFile' for the final output.",
        "response": "stilts tcatn nin=4 in1=dir/d1.fits in2=dir/d2.fits in3=dir/d3.fits in4=dir/d4.fits loccol=SourceFile out=full_provenance.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge T1.fits and T2.fits. T1 has magnitude in Vega; T2 has magnitude in AB. Convert T1's 'MAG' to AB magnitude using the constant 2.5 log10(F_nu_AB/F_nu_Vega) = -0.04.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='replacecol MAG MAG + VEGA_AB_g' in2=T2.fits out=ab_vega_aligned.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'VEGA_AB_g'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol MAG MAG + VEGA_AB_g\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '+' 'VEGA_AB_g'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. T2 has an extra header parameter 'PROC_VERSION'. Include this parameter as a scalar column 'Version' in the final output.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits icmd2='addcol Version param$PROC_VERSION' in3=T3.fits ocmd='keepcols Version *' out=with_version_col.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '*'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols Version *\n\nUsage: keepcols <colid-list>\n    (Unused arguments: '*'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, dropping all columns that have null UCDs or UCDs starting with 'meta.id' in both inputs.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='delcols ucd$meta_id*' in2=B.fits icmd2='delcols ucd$meta_id*' out=ucd_filtered.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge CDF data and FITS data. In the CDF input, select the HEALPix pixel index column and convert it from HEALPix Ring scheme (level 5) to Nested scheme.",
        "response": "stilts tcatn nin=2 in1=cdf.cdf ifmt1=cdf icmd1='addcol HPX_NEST healpixRingToNest(5, PIXEL_INDEX)' in2=fits.fits out=hpx_converted.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PIXEL_INDEX)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol HPX_NEST healpixRingToNest(5, PIXEL_INDEX)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PIXEL_INDEX)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, ensuring that the final output is written to an ECSV file using a space delimiter and without a header row.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ofmt='ecsv(delimiter=space)' out=space_delimited.ecsv",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate T1 and T2. T1 contains proper motions (PMRA, PMDEC) and parallax (PLX). Calculate the tangential velocity 'VTAN' (in km/s) in T1 before joining.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='addcol VTAN hypot(rvMasyrToKms(PMRA, PLX), rvMasyrToKms(PMDEC, PLX))' in2=T2.fits out=with_vtan.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PLX),' 'rvMasyrToKms(PMDEC,' 'PLX))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol VTAN hypot(rvMasyrToKms(PMRA, PLX), rvMasyrToKms(PMDEC, PLX))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PLX),' 'rvMasyrToKms(PMDEC,' 'PLX))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, T_LEFT and T_RIGHT. T_RIGHT is large; use parallel execution and output the row count to verify completion.",
        "response": "stilts tcatn nin=2 in1=T_LEFT.fits in2=T_RIGHT.fits runner=parallel omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine observation data from two FITS HDUs, data.fits#1 and data.fits#2, ensuring the output has a column indicating the original HDU index.",
        "response": "stilts tcatn nin=2 in1=data.fits#1 in2=data.fits#2 seqcol=HDU_Index out=hdu_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a simulated table of 500 stars (:skysim:500) with a local CSV file, dropping any rows in the CSV where 'ErrorFlag' is true.",
        "response": "stilts tcatn nin=2 in1=:skysim:500 in2=local.csv ifmt2=csv icmd2='select !ErrorFlag' out=sim_local_filtered.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables A and B. In B, replace any missing string values in 'TARGET_NAME' with the placeholder 'UNKNOWN'.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits icmd2='replaceval null \"UNKNOWN\" TARGET_NAME' out=strings_filled.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables T1 and T2. T2 contains J2000 coordinates (RA, DEC) in radians. Convert them to degrees in T2 and keep only the degree columns before joining T1.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='replacecol RA_DEG radiansToDegrees(RA); replacecol DEC_DEG radiansToDegrees(DEC); keepcols RA_DEG DEC_DEG' out=rad_to_deg_prejoin.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'DEC_DEG'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was:  keepcols RA_DEG DEC_DEG\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'DEC_DEG'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge data files F1 and F2. F2 contains magnitude errors (MAG_ERR) in percent. Convert these to linear magnitude errors before combining.",
        "response": "stilts tcatn nin=2 in1=F1.fits in2=F2.fits icmd2='replacecol MAG_ERR MAG_ERR / 100.0' out=linear_error.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '/' '100.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol MAG_ERR MAG_ERR / 100.0\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '/' '100.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables T1, T2, T3. In T3, keep only the first 100 rows and randomly shuffle them.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='head 100' icmd3='shuffle' out=shuffled_sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two photometric tables, A and B. In the combined table, calculate the K-correction K(r) for redshift Z, using the g-r color value.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits ocmd='addcol KR_CORR kCorr(KCF_r, Z, KCC_gr, gmag-rmag)' out=kcorr_calculated.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Z,' 'KCC_gr,' 'gmag-rmag)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol KR_CORR kCorr(KCF_r, Z, KCC_gr, gmag-rmag)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'Z,' 'KCC_gr,' 'gmag-rmag)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge source tables S1 and S2. Output the resulting data structure metadata, including details on VOTable COOSYS references.",
        "response": "stilts tcatn nin=2 in1=S1.fits in2=S2.fits ocmd='meta CoosysSystem CoosysEpoch' omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, ensuring that any numeric values in the 'MAG' column exactly equal to 999 are converted to NULL after joining.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='badval 999 MAG' out=null_cleaned_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate data.fits and header.vot. Header.vot contains table parameters; discard the row data from header.vot before merging, keeping only parameters.",
        "response": "stilts tcatn nin=2 in1=data.fits in2=header.vot icmd2='head 0' out=data_with_header.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine catalogue parts. Part B has arrays that need collapsing: combine scalar columns 'FLUX_1', 'FLUX_2', 'FLUX_3' into one array column 'FLUX_ARRAY' before concatenation.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits icmd2='collapsecols FLUX_ARRAY FLUX_1 3; delcols \"FLUX_1 FLUX_2 FLUX_3\"' out=collapsed_flux.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge observation log A and B. A contains timestamps in decimal year; convert to MJD before combining with B.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='replacecol MJD decYearToMjd(DECYEAR)' in2=B.fits out=mjd_aligned_ts.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. After concatenation, add a unique row index column, 'GlobalRowID', starting from 1.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits ocmd='addcol GlobalRowID $0' out=global_indexed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two Parquet files. In the final output, convert the structure to VOTable BINARY2 format.",
        "response": "stilts tcatn nin=2 in1=P1.parquet in2=P2.parquet ofmt='votable(format=BINARY2)' out=parquet_to_binary2.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate data tables. In the second table, D2, drop all string columns except for 'NAME'.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits icmd2='keepcols NAME; keepcols -exclude NAME *string*' out=string_subset_merge.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NAME' '*string*'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was:  keepcols -exclude NAME *string*\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'NAME' '*string*'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables. T1 has 'DATE_STRINGS'. Convert these to Unix seconds before joining T2.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='replacecol TIME_SEC isoToUnixSec(DATE_STRINGS)' in2=T2.fits out=unix_time_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables, but for the third input (T3), retain only objects that have a non-null UCD starting with 'phot.mag'.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='keepcols ucd$phot_mag*' out=phot_ucd_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine files A and B. In A, there are columns 'Luminosity' and 'Distance_Mpc'. Calculate absolute magnitude 'ABS_MAG' before combining.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='addcol ABS_MAG -2.5*log10(Luminosity) - 5*(log10(Distance_Mpc*1e6)-1)' in2=B.fits out=abs_mag_combined.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' '5*(log10(Distance_Mpc*1e6)-1)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol ABS_MAG -2.5*log10(Luminosity) - 5*(log10(Distance_Mpc*1e6)-1)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' '5*(log10(Distance_Mpc*1e6)-1)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, restricting the total number of output rows to 500, then display statistics only on the 'FLUX' column.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='head 500' ocmd='keepcols FLUX' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables A and B. B is an ASCII file with a vertical bar delimiter. Specify this delimiter explicitly in the format string.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.txt ifmt2='ascii(delimiter=|)' out=pipe_delimited.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt2: Unknown format ascii(delimiter=|)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"delimiter=|\" - Options are maxSample=<int>, decoders=<Decoder[]>, notypes=<type>[;<type>...]\n        (Failed setting \"delimiter=|\" - Options are maxSample=<int>, decoders=<Decoder[]>, notypes=<type>[;<type>...]\n            (No method setDelimiter in uk.ac.starlink.table.formats.AsciiTableBuilder)))\nUsage: ifmt2=<in-format>\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables T1 and T2. T2 contains an array column 'PM_VEC'. Explode this array column into scalar components named 'PM_VEC_0', 'PM_VEC_1', etc.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='explodecols PM_VEC' out=pm_vector_exploded.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables and apply the formula `y = asinh(x/a)` to column 'FLUX' in all three inputs, using `a=1e-5`.",
        "response": "stilts tcatn nin=3 in1=D1.fits icmd1='replacecol FLUX asinh(FLUX/1e-5)' in2=D2.fits icmd2='replacecol FLUX asinh(FLUX/1e-5)' in3=D3.fits icmd3='replacecol FLUX asinh(FLUX/1e-5)' out=asinh_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, sorting the resulting rows first by 'RA' ascending, then by 'DEC' descending.",
        "response": "stilts tcatn nin=2 in1=C1.fits in2=C2.fits ocmd='sort RA -down DEC' out=multi_key_sorted.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-down' 'DEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: sort RA -down DEC\n\nUsage: sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n    (Unused arguments: '-down' 'DEC'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a table of photometry (phot.fits) with a table of spectra (spec.fits). The spectrum table has columns that must be renamed 'FLUX' and 'WAVELENGTH' for compatibility.",
        "response": "stilts tcatn nin=2 in1=phot.fits in2=spec.fits icmd2='colmeta -name FLUX SPEC_VAL; colmeta -name WAVELENGTH WAVE_VAL' out=spec_phot_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, keeping only rows from the first table where 'SNR' > 5 AND 'QUALITY' is true.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='select SNR > 5 && QUALITY' in2=T2.fits out=high_quality_snr.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '5' '&&' 'QUALITY'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select SNR > 5 && QUALITY\n\nUsage: select <expr>\n    (Unused arguments: '>' '5' '&&' 'QUALITY'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge survey files, adding a sequence column 'TileID' to label input order and outputting to VOTable 1.4 version.",
        "response": "stilts tcatn nin=3 in1=tile1.fits in2=tile2.fits in3=tile3.fits seqcol=TileID ofmt='votable(version=V14)' out=v14_indexed.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables A and B. In A, calculate a redshift (Z) estimate from comoving distance (DC_Mpc) using a flat LCDM cosmology.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='addcol Z distToZ(DC_Mpc)' in2=B.fits out=redshift_estimated.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables T1 and T2. T2 is a very wide FITS file (>999 columns). Output the combined result to FITS that supports all columns.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits out=wide_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, removing all rows in the combined output where 'FLUX' is infinite.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='select FLUX != Infinity' out=no_infinite_flux.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'Infinity'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX != Infinity\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'Infinity'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine an ECSV table with a FITS table. The FITS file needs its columns renamed to comply with the ECSV file's column names ('RA_ICRS' to 'RA').",
        "response": "stilts tcatn nin=2 in1=E.ecsv ifmt1=ecsv in2=F.fits icmd2='colmeta -name RA RA_ICRS' out=ecsv_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge three tables, retaining only columns that possess a UCD, and outputting the final table in LaTeX format.",
        "response": "stilts tcatn nin=3 in1=D1.fits in2=D2.fits in3=D3.fits ocmd='keepcols ucd$*' ofmt=latex out=ucd_latex_report.tex",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, T_MAIN and T_AUX. T_AUX rows should only be included if the proper motion error (PM_ERR) is less than 0.1 mas/yr.",
        "response": "stilts tcatn nin=2 in1=T_MAIN.fits in2=T_AUX.fits icmd2='select PM_ERR < 0.1' out=low_pm_error.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PM_ERR < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables and calculate the total number of rows, reporting only that count.",
        "response": "stilts tcatn nin=3 in1=P1.fits in2=P2.fits in3=P3.fits omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, adding a column to the second input that uses the hyperbolic sine function: `Y_HYP = sinh(Y_RAW)`.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='addcol Y_HYP sinh(Y_RAW)' out=hyp_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge data, ensuring that the second table (T2) is entirely included, but only if the magnitude 'MAG' is non-null.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='select !NULL_MAG' out=mag_nonnull_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. T1 has MJD timestamps; T2 has ISO 8601 strings; T3 has Julian Dates (JD). Convert all to MJD before concatenation.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits icmd2='replacecol MJD isoToMjd(TIMESTAMP_STR)' in3=T3.fits icmd3='replacecol MJD jdToMjd(JD)' out=universal_time.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, T1 and T2. T2 contains a column 'ARRAY_VALUES'. Explode it into scalar columns, keeping only the first three elements.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='explodecols ARRAY_VALUES; keepcols * ARRAY_VALUES_0 ARRAY_VALUES_1 ARRAY_VALUES_2' out=partial_explode.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'ARRAY_VALUES_0' 'ARRAY_VALUES_1' 'ARRAY_VALUES_2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was:  keepcols * ARRAY_VALUES_0 ARRAY_VALUES_1 ARRAY_VALUES_2\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'ARRAY_VALUES_0' 'ARRAY_VALUES_1' 'ARRAY_VALUES_2'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables, dropping all rows in the combined result where the RA coordinate falls outside the range [0, 360).",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='select RA >= 0 && RA < 360' out=clean_ra_range.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0' '&&' 'RA' '<' '360'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select RA >= 0 && RA < 360\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0' '&&' 'RA' '<' '360'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine table T1 and a simulated table that randomly samples 10% of T1, tracking T1's original row index in the synthetic table.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2='tpipe in=T1.fits cmd=\"random 0.1\" cmd=\"addcol OriginalIndex $0\" omode=out' out=T1_plus_sample.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables. In T1, rename columns 'X_POS' and 'Y_POS' to 'X' and 'Y'. In T2, rename 'COL1' and 'COL2' to 'X' and 'Y'.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='colmeta -name X X_POS; colmeta -name Y Y_POS' in2=T2.fits icmd2='colmeta -name X COL1; colmeta -name Y COL2' out=xy_harmonized.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables (A, B, C) and add a column that contains the name of the input file without path or extension (unique location part).",
        "response": "stilts tcatn nin=3 in1=data/A.fits in2=data/B.fits in3=data/C.fits uloccol=BaseName out=uloc_base.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge FITS and Feather files. Feather file needs error columns 'e_ra' and 'e_dec' converted from mas to arcseconds.",
        "response": "stilts tcatn nin=2 in1=fits.fits in2=feather.fea ifmt2=feather icmd2='replacecol e_ra e_ra / 1000.0; replacecol e_dec e_dec / 1000.0' out=feather_corrected.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '/' '1000.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol e_ra e_ra / 1000.0\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '/' '1000.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables. Output metadata of the combined tables, listing column names, UCDs, and Units.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='meta Name UCD Units' omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine T1 and T2. T1 is remote (URL); T2 is piped via standard input (VOTable).",
        "response": "cat stream.vot | stilts tcatn nin=2 in1=http://remote.org/cat.fits in2=- ifmt2=votable out=remote_piped.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge catalogs, adding a column 'Z_HELIO' calculated using the K-correction formula: `Z_HELIO = Z + Z_OFFSET` (where Z_OFFSET is a table parameter).",
        "response": "stilts tcatn nin=2 in1=C1.fits in2=C2.fits ocmd='addcol Z_HELIO Z + param$Z_OFFSET' out=offset_redshift.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'param$Z_OFFSET'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol Z_HELIO Z + param$Z_OFFSET\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'param$Z_OFFSET'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three files. T2 contains a boolean column 'PASS_FLAG'. Replace it with an integer column 'QUALITY' (1 if true, 0 if false) before joining.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits icmd2='replacecol QUALITY (PASS_FLAG ? 1 : 0)' in3=T3.fits out=bool_to_int.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '?' '1' ':' '0)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol QUALITY (PASS_FLAG ? 1 : 0)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '?' '1' ':' '0)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, T_SMALL and T_BIG. Ensure T_BIG has columns 'MAG_U', 'MAG_G', 'MAG_R' converted to 32-bit float types before concatenation.",
        "response": "stilts tcatn nin=2 in1=T_SMALL.fits in2=T_BIG.fits icmd2='replacecol MAG_U toFloat(MAG_U); replacecol MAG_G toFloat(MAG_G); replacecol MAG_R toFloat(MAG_R)' out=float_conversion.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables T1 and T2. After combining, sort the output randomly.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits ocmd='shuffle' out=random_order_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine data.fits with a table derived from a simple loop, only including every 10th row from the loop table.",
        "response": "stilts tcatn nin=2 in1=data.fits in2='tpipe in=:loop:1000 cmd=\"every 10\" omode=out' out=sparse_loop_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge three tables. In the final output, keep only the columns shared by ALL three original input tables.",
        "response": "stilts tcatn nin=3 in1=A.fits in2=B.fits in3=C.fits ocmd='keepcols intersect(A.*, B.*, C.*)' out=intersection_cols.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'B.*,' 'C.*)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols intersect(A.*, B.*, C.*)\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'B.*,' 'C.*)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate T1 and T2. T2 contains ICRS coordinates, convert them to Galactic coordinates (GLON, GLAT) and keep only GLON, GLAT before merge.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='addskycoords icrs galactic RA DEC GLON GLAT; keepcols GLON GLAT' out=to_galactic_subset.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GLAT'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was:  keepcols GLON GLAT\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'GLAT'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables. T1 has RA/DEC. T2 has a 2-element array column 'POS_ARRAY'. Rename 'POS_ARRAY' elements to RA/DEC before joining T1.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='addcol RA POS_ARRAY; addcol DEC POS_ARRAY[1]; delcols POS_ARRAY' out=array_to_scalar.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge four tables, applying parallel processing for maximum speed.",
        "response": "stilts tcatn nin=4 in1=L1.fits in2=L2.fits in3=L3.fits in4=L4.fits runner=parallel out=max_speed_concat.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables A and B. In A, define a new column 'LOG_R' as `log10(R)`. In B, ensure the magnitude 'MAG' is represented by a 64-bit double.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='addcol LOG_R log10(R)' in2=B.fits icmd2='replacecol MAG toDouble(MAG)' out=log_mag_64bit.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate observation data. For the second observation (O2), filter out all rows after the 1000th row.",
        "response": "stilts tcatn nin=2 in1=O1.fits in2=O2.fits icmd2='head 1000' out=o2_trimmed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge photometry tables, ensuring that the combined result contains columns 'MAG_B' and 'MAG_V' in Vega units, converting if necessary.",
        "response": "stilts tcatn nin=2 in1=T1_AB.fits icmd1='replacecol MAG_B MAG_B - JOHNSON_AB_B' in2=T2_Vega.fits out=vega_unified.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'JOHNSON_AB_B'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol MAG_B MAG_B - JOHNSON_AB_B\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '-' 'JOHNSON_AB_B'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine CDF data (file.cdf) and a VOTable. Explicitly name the CDF input format and then inspect the combined metadata.",
        "response": "stilts tcatn nin=2 in1=file.cdf ifmt1=cdf in2=other.vot omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge three tables. Output the result in HTML table format.",
        "response": "stilts tcatn nin=3 in1=D1.fits in2=D2.fits in3=D3.fits ofmt=html out=report.html",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate FITS tables, dropping rows where both 'FLUX_U' and 'FLUX_G' are null in the respective input files.",
        "response": "stilts tcatn nin=2 in1=F1.fits icmd1='select !NULL_FLUX_U' in2=F2.fits icmd2='select !NULL_FLUX_G' out=no_null_fluxes.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables. T1 has Cartesian coordinates (X, Y). T2 has cylindrical coordinates (R, THETA). Convert T2 to Cartesian before merging.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='addcol X R*cos(THETA); addcol Y R*sin(THETA)' out=cartesian_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge large tables, keeping the input file location's unique name part, and discard output to check performance.",
        "response": "stilts tcatn nin=2 in1=huge_a.fits in2=huge_b.fits uloccol=FilePart omode=discard",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate T1 and T2. After joining, add a column that flags if the 'FLUX' is below the global 5th percentile of the combined flux distribution.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits ocmd='addcol IS_LOW_FLUX FLUX < quantile(FLUX, 0.05)' out=quantile_flagged.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' 'quantile(FLUX,' '0.05)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_LOW_FLUX FLUX < quantile(FLUX, 0.05)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '<' 'quantile(FLUX,' '0.05)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, ensuring that any missing time values (MJD) are replaced by the constant `55000.0`.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='replacecol MJD NULL_MJD ? 55000.0 : MJD' out=mjd_defaulted.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '?' '55000.0' ':' 'MJD'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol MJD NULL_MJD ? 55000.0 : MJD\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '?' '55000.0' ':' 'MJD'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge survey data. In the second survey (S2), select rows corresponding to groups of objects (GroupSize > 1) and keep only one representative per group.",
        "response": "stilts tcatn nin=2 in1=S1.fits in2=S2.fits icmd2='select GroupSize > 1; uniq GroupID' out=group_representatives.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select GroupSize > 1\n\nUsage: select <expr>\n    (Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, adding a column 'PAR_VOL' calculated as `parallax * parallax * parallax` in the final output.",
        "response": "stilts tcatn nin=2 in1=C1.fits in2=C2.fits ocmd='addcol PAR_VOL pow(parallax, 3)' out=parallax_volume.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '3)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PAR_VOL pow(parallax, 3)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '3)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables and write the final result to a compressed VOTable using BINARY serialization.",
        "response": "stilts tcatn nin=3 in1=A.fits in2=B.fits in3=C.fits ofmt='votable(format=BINARY)' out=compressed_binary.vot.gz",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge T1.fits and T2.fits. T1 has arrays; explode all fixed-size arrays in T1 into individual scalar columns before concatenation.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='explodeall' in2=T2.fits out=t1_exploded_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two CDF files from a single input stream, separating them using the file indexing feature.",
        "response": "cat cdf_data.cdf | stilts tcatn nin=2 in1=-#0 ifmt1=cdf in2=-#1 ifmt2=cdf out=cdf_parts.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, restricting the output to only the last 100 rows of the total combined dataset.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='tail 100' out=final_100_rows.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, explicitly keeping all columns, but renaming duplicate columns with '_L' for the first table and '_R' for the second.",
        "response": "stilts tcatn nin=2 in1=L.fits in2=R.fits fixcols=all suffix1=_L suffix2=_R out=full_renaming.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_L suffix2=_R\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables T1 and T2. T2 requires conversion of its string-based right ascension 'RA_STR' into numeric degrees.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='replacecol RA hmsToDegrees(RA_STR)' out=hms_converted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a simulated table of 10 stars with a simulated table using a rampe strange attractor model (2000 points).",
        "response": "stilts tcatn nin=2 in1=:skysim:10 in2=:attractor:2000,rampe out=mixed_sim_data.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables (M1.fits, M2.fits, M3.fits). In M2, select only the columns named 'ID', 'FLUX', and 'ERROR'. In M3, drop the 'FLAG' column.",
        "response": "stilts tcatn nin=3 in1=M1.fits in2=M2.fits icmd2='keepcols \"ID FLUX ERROR\"' in3=M3.fits icmd3='delcols FLAG' out=subset_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables. The first (Gaia.fits) has coordinates RA/DEC in degrees. The second (Chandra.vot) has coordinates in Galactic (GLON/GLAT). Convert Chandra's coordinates to ICRS before combining.",
        "response": "stilts tcatn nin=2 in1=Gaia.fits in2=Chandra.vot icmd2='addskycoords galactic icrs GLON GLAT RA DEC' out=icrs_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate log_A.csv and log_B.csv. Log_A uses a comma delimiter; log_B uses a pipe delimiter. Output the result as a single FITS file.",
        "response": "stilts tcatn nin=2 in1=log_A.csv ifmt1=csv in2=log_B.csv ifmt2='csv(delimiter=|)' out=pipe_delimited_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three files, T1, T2, T3. In T3, replace any occurrences of the magic value 99.0 with null in all columns before joining.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='badval 99.0 *' out=magic_value_cleaned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge a simulated sky catalogue of 5000 stars with a local survey catalog survey.fits.",
        "response": "stilts tcatn nin=2 in1=:skysim:5000 in2=survey.fits out=sim_and_real.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four tables (P1-P4.fits). Before concatenation, ensure that the columns RA and DEC in P2 are converted from radians to degrees.",
        "response": "stilts tcatn nin=4 in1=P1.fits in2=P2.fits icmd2='replacecol RA radiansToDegrees(RA); replacecol DEC radiansToDegrees(DEC)' in3=P3.fits in4=P4.fits out=rad_converted_batch.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two FITS files, then transpose the resulting table (rows become columns).",
        "response": "stilts tcatn nin=2 in1=data_rows.fits in2=more_rows.fits ocmd='transpose' out=transposed_table.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables. T1 has 'Flux_uJy'; convert this to Janskys in T1 before concatenating with T2.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='replacecol FLUX_JY Flux_uJy * 1e-6' in2=T2.fits out=flux_unit_aligned.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '*' '1e-6'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol FLUX_JY Flux_uJy * 1e-6\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '*' '1e-6'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three FITS tables, and add a column 'OriginIndex' indicating the sequential position of the input file.",
        "response": "stilts tcatn nin=3 in1=f1.fits in2=f2.fits in3=f3.fits seqcol=OriginIndex out=sequenced_files.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate tables A and B. A contains array columns (e.g., 'SPEC_FLUX'). Explode all arrays into scalar columns in A before joining.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='explodeall' in2=B.fits out=all_exploded_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, then sort the output by 'ID' and remove any duplicated rows based on 'ID'.",
        "response": "stilts tcatn nin=2 in1=t_dups_a.fits in2=t_dups_b.fits ocmd='sort ID' ocmd='uniq ID' out=deduped_sorted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge T1 and T2. T2 contains a string column 'MJD_STRINGS'. Convert these ISO 8601 strings to MJD numeric values before combination.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='replacecol MJD isoToMjd(MJD_STRINGS)' out=mjd_numeric_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. T2 requires streaming input to handle its size.",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits istream2=true in3=T3.fits out=stream_concat.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"T2.fits\"\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate a FITS table with an IPAC table. Output the resulting table to TOPCAT.",
        "response": "stilts tcatn nin=2 in1=fits_data.fits in2=ipac_data.tbl ifmt2=ipac omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables, T_LEFT and T_RIGHT. Only include rows from T_RIGHT where the quality flag 'QC' is not null.",
        "response": "stilts tcatn nin=2 in1=T_LEFT.fits in2=T_RIGHT.fits icmd2='select !NULL_QC' out=qc_clean_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine data_A.fits and data_B.fits. Data_A has an extra column 'NOTES' I want to rename to 'COMMENT' to align with data_B.",
        "response": "stilts tcatn nin=2 in1=data_A.fits icmd1='colmeta -name COMMENT NOTES' in2=data_B.fits out=comment_aligned.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables and just output the combined row count.",
        "response": "stilts tcatn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine T1.fits and T2.fits. T1 has duplicated columns names. Rename duplicates with suffix '_1' and '_2'.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits fixcols=dups suffix1=_1 suffix2=_2 out=dup_resolved.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_1 suffix2=_2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables, and calculate a new column 'COLOR' = 'G_MAG - R_MAG' post-concatenation.",
        "response": "stilts tcatn nin=2 in1=photo1.fits in2=photo2.fits ocmd='addcol COLOR G_MAG-R_MAG' out=with_color_final.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a local file with the result of a piped command, forcing the piped input to be VOTable format.",
        "response": "cat stream_data.vot | stilts tcatn nin=2 in1=local.fits in2=- ifmt2=votable out=piped_merge.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate data_A.fits and data_B.fits. A column named 'ID_STRING' in A needs to be converted to a numeric hash ID before joining B.",
        "response": "stilts tcatn nin=2 in1=data_A.fits icmd1='replacecol ID_NUM hashCode(ID_STRING)' in2=data_B.fits out=hashed_id_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge observations from OBS1 and OBS2. Filter OBS2 to include only rows where 'TIME' is between MJD 59000 and MJD 60000.",
        "response": "stilts tcatn nin=2 in1=OBS1.fits in2=OBS2.fits icmd2='select TIME > 59000 && TIME < 60000' out=time_filtered_concat.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '59000' '&&' 'TIME' '<' '60000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select TIME > 59000 && TIME < 60000\n\nUsage: select <expr>\n    (Unused arguments: '>' '59000' '&&' 'TIME' '<' '60000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, then export the metadata of the resulting structure.",
        "response": "stilts tcatn nin=3 in1=m1.fits in2=m2.fits in3=m3.fits omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate a FITS table and a remote ECSV file accessed via HTTPS, then output as Parquet.",
        "response": "stilts tcatn nin=2 in1=local.fits in2=https://archive.org/remote.ecsv ifmt2=ecsv ofmt=parquet out=remote_ecsv_parquet.parquet",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge T_GOOD and T_BAD. In T_BAD, drop columns related to errors, e.g., columns whose name contains 'ERR'.",
        "response": "stilts tcatn nin=2 in1=T_GOOD.fits in2=T_BAD.fits icmd2='delcols *ERR*' out=error_cols_removed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables, T1, T2, T3. In T1, calculate a column 'LOG_FLUX' = log10(FLUX) and delete the original FLUX column before joining.",
        "response": "stilts tcatn nin=3 in1=T1.fits icmd1='addcol LOG_FLUX log10(FLUX)' icmd1='delcols FLUX' in2=T2.fits in3=T3.fits out=log_flux_preprocessed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables. After concatenation, add a boolean column 'IS_FAINT' which is true if the magnitude 'MAG' is greater than 25.",
        "response": "stilts tcatn nin=2 in1=data1.fits in2=data2.fits ocmd='addcol IS_FAINT MAG > 25' out=faint_flagged.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '25'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_FAINT MAG > 25\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '>' '25'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables T_A and T_B. T_B has Galactic coordinates GLON, GLAT; rename these to 'LON' and 'LAT' to match T_A.",
        "response": "stilts tcatn nin=2 in1=T_A.fits in2=T_B.fits icmd2='colmeta -name LON GLON; colmeta -name LAT GLAT' out=coords_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge four tables (D1-D4.fits). Output the result in FITS format with the original filenames (without extension) in a column named 'SourceID'.",
        "response": "stilts tcatn nin=4 in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits uloccol=SourceID out=uloc_id_fits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine a VOTable and a FITS table. Ensure the output VOTable uses the BINARY serialization format.",
        "response": "stilts tcatn nin=2 in1=v1.vot in2=f1.fits ofmt='votable(format=BINARY)' out=combined_binary.vot",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two large tables, forcing the use of parallel processing during concatenation to speed up the operation.",
        "response": "stilts tcatn nin=2 in1=large_a.fits in2=large_b.fits runner=parallel out=parallel_concat_large.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge four tables. After combining, randomly shuffle all rows in the final table.",
        "response": "stilts tcatn nin=4 in1=d1.fits in2=d2.fits in3=d3.fits in4=d4.fits ocmd='shuffle' out=fully_shuffled.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables A and B. A contains B1950 FK4 coordinates; propagate them to J2000 ICRS using epoch 1950.0 before combining.",
        "response": "stilts tcatn nin=2 in1=A.fits icmd1='addskycoords fk4 icrs RA_FK4 DEC_FK4 RA_ICRS DEC_ICRS' in2=B.fits out=fk4_prop_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge two tables. The first table is a multi-extension FITS file; use only extension #1.",
        "response": "stilts tcatn nin=2 in1=multi.fits#1 in2=single.fits out=ext1_merged.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three photometric tables, retaining only columns with the UCD 'phot.mag' in all three inputs.",
        "response": "stilts tcatn nin=3 in1=c1.fits icmd1='keepcols ucd$phot_mag*' in2=c2.fits icmd2='keepcols ucd$phot_mag*' in3=c3.fits icmd3='keepcols ucd$phot_mag*' out=mag_ucd_subset.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine two tables, keeping only the rows where the total flux, 'FLUX_TOT', is greater than the average flux of the combined set.",
        "response": "stilts tcatn nin=2 in1=f1.fits in2=f2.fits ocmd='select FLUX_TOT > mean(FLUX_TOT)' out=above_average_flux.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' 'mean(FLUX_TOT)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX_TOT > mean(FLUX_TOT)\n\nUsage: select <expr>\n    (Unused arguments: '>' 'mean(FLUX_TOT)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge catalog.fits and errors.fits. The errors table has a 'SIGMA' column; convert it from mas to arcseconds before joining.",
        "response": "stilts tcatn nin=2 in1=catalog.fits in2=errors.fits icmd2='replacecol SIGMA_ARCSEC SIGMA_MAS / 1000.0' out=mas_to_arcsec_merge.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '/' '1000.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol SIGMA_ARCSEC SIGMA_MAS / 1000.0\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '/' '1000.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine T1 and T2. T1 is a streaming input from a system command pipeline; T2 is a local file.",
        "response": "echo 'RA,DEC\n10,20' | stilts tcatn nin=2 in1='cat -|' ifmt1=csv in2=T2.fits out=piped_input_concat.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate three tables, preserving the full location string (URL/path) in a column 'SourceLoc' for debugging provenance.",
        "response": "stilts tcatn nin=3 in1=a/b/c1.fits in2=http://remote/c2.fits in3=c/c3.fits loccol=SourceLoc out=full_loc_provenance.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables, T1 and T2. In T2, calculate the distance modulus 'DIST_MOD' from the parallax 'PLX' before concatenation.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='addcol DIST_MOD modulusToDistance(1000.0/PLX)' out=dist_mod_combined.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine files A and B. In B, rename all columns named 'FLUX*' with the prefix 'F_'.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits icmd2='colmeta -name F_* FLUX*' out=flux_prefixed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate four FITS files, then keep only the first 100 rows of the total combined output.",
        "response": "stilts tcatn nin=4 in1=s1.fits in2=s2.fits in3=s3.fits in4=s4.fits ocmd='head 100' out=first_100_rows.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine T1 and T2. T2 contains a column 'ARRAY_COORDS' which is a 3-element array (x, y, z). Explode this into three scalar columns: 'X', 'Y', 'Z' before joining.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits icmd2='addcol X ARRAY_COORDS; addcol Y ARRAY_COORDS[1]; addcol Z ARRAY_COORDS[2]; delcols ARRAY_COORDS' out=array_elements_extracted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge four tables, then calculate and display statistics (min, max, mean, stdev) on all numeric columns.",
        "response": "stilts tcatn nin=4 in1=d1.fits in2=d2.fits in3=d3.fits in4=d4.fits omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine tables, writing the output in the FITS format that supports rich metadata (FITS-plus).",
        "response": "stilts tcatn nin=2 in1=a.fits in2=b.fits ofmt=fits-plus out=rich_metadata_fits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate two tables, but filter out all rows where 'Z_REDSHIFT' is greater than 5.0.",
        "response": "stilts tcatn nin=2 in1=high_z.fits in2=low_z.fits ocmd='select Z_REDSHIFT <= 5.0' out=z_filtered.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<=' '5.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Z_REDSHIFT <= 5.0\n\nUsage: select <expr>\n    (Unused arguments: '<=' '5.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge T1 and T2. T1 is ASCII format. T2 is FITS. Only keep columns 'ID' and 'VALUE' from both tables.",
        "response": "stilts tcatn nin=2 in1=T1.txt ifmt1=ascii icmd1='keepcols \"ID VALUE\"' in2=T2.fits icmd2='keepcols \"ID VALUE\"' out=minimal_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine three tables. T1 has 'ERROR_FLUX'. T2 and T3 have 'FLUX_ERR'. Rename T1's column before joining.",
        "response": "stilts tcatn nin=3 in1=T1.fits icmd1='colmeta -name FLUX_ERR ERROR_FLUX' in2=T2.fits in3=T3.fits out=error_col_unified.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Concatenate data_A and data_B. Add a column 'ROW_COUNT_GLOBAL' to the output indicating the overall row index starting from 1.",
        "response": "stilts tcatn nin=2 in1=data_A.fits in2=data_B.fits ocmd='addcol ROW_COUNT_GLOBAL $0' out=global_indexed_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Merge tables T_EARLY and T_LATE. Only keep the columns 'ID' and 'TIME' from T_EARLY, and keep all columns from T_LATE.",
        "response": "stilts tcatn nin=2 in1=T_EARLY.fits icmd1='keepcols \"ID TIME\"' in2=T_LATE.fits out=partial_cols_merge.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    },
    {
        "prompt": "Combine T1 and T2. In T1, drop the column that is third from the end.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='delcols $ncol-2' in2=T2.fits out=t1_col_dropped.fits",
        "chat.jar": "executed successfully",
        "cmd": "tcatn"
    }
]