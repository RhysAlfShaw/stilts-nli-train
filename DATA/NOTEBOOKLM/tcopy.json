[
    {
        "prompt": "Convert a FITS table to a VOTable, letting STILTS guess the formats from the filenames.",
        "response": "stilts tcopy in=my_catalog.fits out=my_catalog.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I convert a CSV file to a FITS file?",
        "response": "stilts tcopy in=data.csv out=data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to convert a VOTable to a simple ASCII text file for a quick look.",
        "response": "stilts tcopy in=results.vot ofmt=ascii out=results.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a VOTable, but use the compact BINARY2 encoding.",
        "response": "stilts tcopy in=data.fits out=data.vot ofmt='votable(format=BINARY2)'",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a table in IPAC format. How can I convert it to a standard FITS table?",
        "response": "stilts tcopy ifmt=ipac in=ipac_table.tbl ofmt=fits out=standard.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table to CSV, but use a pipe character '|' as the delimiter.",
        "response": "stilts tcopy in=my_table.fits ofmt='csv(delimiter=|)' out=pipe_delimited.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Take a gzipped FITS file from a URL and convert it to a local ECSV file.",
        "response": "stilts tcopy in=http://example.com/data/survey.fits.gz out=survey.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How can I pipe a CSV file into `tcopy` and get a FITS file out?",
        "response": "cat data.csv | stilts tcopy ifmt=csv in=- ofmt=fits out=from_pipe.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Extract the third table extension from a FITS file and save it as a VOTable.",
        "response": "stilts tcopy in=multi_extension.fits#3 out=ext3.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert my table to a 'basic' FITS file without the extra VOTable metadata in the primary HDU.",
        "response": "stilts tcopy in=my_table.vot ofmt=fits-basic out=basic.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a 1000-row simulated star catalog and save it directly as a Parquet file.",
        "response": "stilts tcopy in=:skysim:1000 ofmt=parquet out=sim_stars.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a VOTable. How can I generate an HTML table from it to put on a web page?",
        "response": "stilts tcopy in=results.vot ofmt=html out=results.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a column-oriented FITS file.",
        "response": "stilts tcopy in=row_oriented.fits ofmt=colfits out=column_oriented.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My ASCII file `data.dat` has no header. How do I convert it to CSV with a header?",
        "response": "stilts tcopy ifmt=ascii in=data.dat ofmt='csv(header=true)' out=data.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ECSV file to a Feather file for use in R or Python.",
        "response": "stilts tcopy in=my_data.ecsv out=my_data.feather",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I just display the contents of a FITS file on my terminal in a readable format?",
        "response": "stilts tcopy in=my_table.fits ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table to a specific version of VOTable, say v1.2.",
        "response": "stilts tcopy in=data.fits ofmt='votable(version=V12)' out=data_v12.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a NASA PDS4 file. Can I convert it to a VOTable?",
        "response": "stilts tcopy in=pds4_data.xml out=pds4_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a simple table with a loop and save it as a FITS file.",
        "response": "stilts tcopy in=:loop:1,101 out=loop.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How can I convert a table into a format for a LaTeX document?",
        "response": "stilts tcopy in=publication_data.fits ofmt=latex out=table.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a gzipped CSV file. Can `tcopy` read it directly to produce a VOTable?",
        "response": "stilts tcopy in=data.csv.gz out=data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to a FITS file.",
        "response": "stilts tcopy in=my_data.parquet out=my_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What's the command to convert a CDF file into a VOTable?",
        "response": "stilts tcopy in=space_data.cdf out=space_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a CSV file without the header row.",
        "response": "stilts tcopy in=data.fits ofmt='csv(header=false)' out=noheader.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a table in MRT (Machine-Readable Table) format. Convert it to FITS.",
        "response": "stilts tcopy in=journal_table.mrt out=journal_table.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Use a system command to generate input for `tcopy`. For instance, combine two text files first.",
        "response": "stilts tcopy in='<cat header.txt data.txt' ifmt=ascii ofmt=fits out=combined.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I convert a table to the old TST (Tab-Separated Table) format?",
        "response": "stilts tcopy in=my_catalog.fits ofmt=tst out=my_catalog.tst",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Feather file back to a VOTable.",
        "response": "stilts tcopy in=from_python.feather out=for_vo.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a test table and save it as an ECSV file.",
        "response": "stilts tcopy in=:test:100,bs ofmt=ecsv out=test_data.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a FITS file with multiple tables. How do I copy just the first one?",
        "response": "stilts tcopy in=multi.fits out=first_table.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can you convert my table into a standalone HTML document?",
        "response": "stilts tcopy in=data.fits ofmt='html(standalone=true)' out=report.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a GBIN file to FITS (assuming I have the necessary Gaia libraries on my classpath).",
        "response": "stilts tcopy ifmt=gbin in=my_data.gbin ofmt=fits out=my_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table while explicitly stating both input and output formats.",
        "response": "stilts tcopy ifmt=fits ofmt=votable in=input.fits out=output.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to convert a VOTable to a Parquet file with Snappy compression.",
        "response": "stilts tcopy in=data.vot ofmt='parquet(compression=snappy)' out=data.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What is the command to convert a WDC format file to CSV?",
        "response": "stilts tcopy ifmt=wdc in=data.wdc ofmt=csv out=data.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Take a table from a URL and display it on the terminal.",
        "response": "stilts tcopy in=http://example.com/data.fits out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert my table into a tab-delimited file.",
        "response": "stilts tcopy in=data.fits ofmt='csv(delimiter=\\t)' out=data.tsv",
        "chat.jar": "failed",
        "error": "Error: No handler for output format csv(delimiter=\\t)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"delimiter=\\t\" - Usage is delimiter=<char>|0xNN\n        (Failed setting \"delimiter=\\t\" - Usage is delimiter=<char>|0xNN\n            (character to be escaped is missing)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Generate a table from a Clifford attractor and save it as a FITS file.",
        "response": "stilts tcopy in=:attractor:10000,clifford out=attractor.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I read a TST file and write it out as a VOTable?",
        "response": "stilts tcopy ifmt=tst in=old_data.tst out=new_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a HAPI stream file to a local FITS table.",
        "response": "stilts tcopy ifmt=hapi in=stream.hapi out=table.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a FITS table to another FITS table. Is this useful?",
        "response": "Yes, it can be. For example, it can be used to regularize a non-standard FITS file into a standard one: `stilts tcopy in=weird.fits out=standard.fits`",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "How can I convert a table into the Mirage format?",
        "response": "stilts tcopy in=data.fits ofmt=mirage out=data.mirage",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable with TABLEDATA to one with BINARY encoding, preserving the version.",
        "response": "stilts tcopy in=tabledata.vot ofmt='votable(format=BINARY)' out=binary.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have an ASCII file with space-separated values. Can `tcopy` convert it to FITS?",
        "response": "stilts tcopy ifmt=ascii in=space_separated.txt ofmt=fits out=table.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What's the shortest way to view the second HDU of a FITS file on the terminal?",
        "response": "stilts tcopy multi.fits#2",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to a basic column-oriented FITS file.",
        "response": "stilts tcopy in=my_table.vot ofmt=colfits-basic out=col_basic.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a standalone LaTeX file from my table.",
        "response": "stilts tcopy in=my_table.fits ofmt='latex(standalone=true)' out=my_table.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can `tcopy` handle bzipped input files?",
        "response": "Yes, it handles `.bz2` compressed files automatically. For example: `stilts tcopy in=data.fits.bz2 out=data.vot`",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a FITS file to ECSV using spaces instead of commas.",
        "response": "stilts tcopy in=data.fits ofmt='ecsv(delimiter=space)' out=data.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a 20-row test table and display it in `text` format.",
        "response": "stilts tcopy in=:test:20 ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert the first table from a CDF file to a CSV file.",
        "response": "stilts tcopy in=data.cdf#1 out=data.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to convert a table to VOTable 1.4 with BINARY2 encoding.",
        "response": "stilts tcopy in=data.fits ofmt='votable(version=V14,format=BINARY2)' out=data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Take a table from a URL, convert it to CSV, and pipe it to another command.",
        "response": "stilts tcopy in=http://example.com/data.vot ofmt=csv out=- | other_command",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: other_command: not found\n"
    },
    {
        "prompt": "Convert a Parquet file from a URL to a local FITS file.",
        "response": "stilts tcopy in=http://example.com/data.parquet out=local.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How to convert an `ascii` file to an `ipac` table?",
        "response": "stilts tcopy ifmt=ascii in=mydata.txt ofmt=ipac out=mydata.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a single-column table from 100 to 200 and save as a VOTable.",
        "response": "stilts tcopy in=:loop:100,201 out=numbers.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table to HTML format without the full HTML document structure.",
        "response": "stilts tcopy in=data.fits ofmt='html(standalone=false)' out=table_fragment.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can you convert a FITS table from a URL directly to a Parquet file?",
        "response": "stilts tcopy in=http://example.com/catalog.fits out=catalog.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a plain text file. How can I see what `tcopy` makes of it?",
        "response": "stilts tcopy ifmt=ascii in=data.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to a Feather file.",
        "response": "stilts tcopy in=for_r.vot ofmt=feather out=for_r.feather",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table to a VOTable using TABLEDATA encoding explicitly.",
        "response": "stilts tcopy in=data.fits ofmt='votable(format=TABLEDATA)' out=data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from one FITS file to another, but convert it to column-oriented format.",
        "response": "stilts tcopy in=input.fits ofmt='fits(col=true)' out=output.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a test table with a wide variety of column types and save it as FITS.",
        "response": "stilts tcopy in=:test:50,* out=test.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My ASCII file is very large. Does `tcopy` have to read it twice?",
        "response": "Yes, the `ascii` reader often requires two passes to determine column types. You can limit this by using `ifmt='ascii(maxSample=1000)'` to guess types from the first 1000 rows, which is faster but may guess wrong.",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a specific table from a multi-table VOTable file.",
        "response": "stilts tcopy in=multi.vot#2 out=table2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How can I convert a table into a simple text representation with table parameters included?",
        "response": "stilts tcopy in=data.fits ofmt='text(params=true)' out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file from a URL to a local CSV file.",
        "response": "stilts tcopy in=https://example.com/archive/data.fit ofmt=csv out=data.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Take the output of a command and pipe it into `tcopy` to create a FITS file.",
        "response": "my_command | stilts tcopy ifmt=ascii in=- ofmt=fits out=output.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert an IPAC table to ECSV.",
        "response": "stilts tcopy ifmt=ipac in=data.tbl ofmt=ecsv out=data.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I check the structure of a remote FITS file quickly?",
        "response": "stilts tcopy in=http://example.com/data.fits ofmt=text out=- icmd='head 5'",
        "chat.jar": "failed",
        "error": "\nUnused arguments: icmd=head 5\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert a FITS table to a VOTable, ensuring the output version is 1.4.",
        "response": "stilts tcopy in=data.fits ofmt='votable(version=V14)' out=data_v14.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What's the command to convert a FITS BINTABLE to a FITS ASCII table?",
        "response": "This is not directly supported by `tcopy`'s `ofmt` options, which only writes BINTABLE extensions. You would need a different tool for that specific conversion.",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Can `tcopy` convert a FITS image to a table?",
        "response": "No, `tcopy` and STILTS are for tabular data. A FITS file with an image in the primary HDU and no table extensions will result in an error.",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a CSV file to a FITS file, letting `tcopy` guess the input format from the `.csv` extension.",
        "response": "stilts tcopy in=data.csv out=data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a test table and save it to a gzipped FITS file.",
        "response": "stilts tcopy in=:test:200 out=test.fits.gz",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for test.fits.gz\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "I need to convert a table for an old application that only reads VOTable 1.1.",
        "response": "stilts tcopy in=latest.vot ofmt='votable(version=V11)' out=legacy.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table to ASCII format and show the table parameters.",
        "response": "stilts tcopy in=data.fits ofmt='ascii(params=true)' out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Is it possible to convert a table to a JPEG or other image format?",
        "response": "No, `tcopy` only converts between tabular formats. You would need one of the `plot` commands like `plot2plane` to create an image.",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert the first table from a multi-extension FITS file at a URL to a local CSV.",
        "response": "stilts tcopy in=http://example.com/multi.fits#1 out=first_ext.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert my table to a CSV file where the delimiter is a semicolon.",
        "response": "stilts tcopy in=data.fits ofmt='csv(delimiter=;)' out=data.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a table from 0.0 to 1.0 in steps of 0.1 and save as FITS.",
        "response": "stilts tcopy in=:loop:0,1.01,0.1 ofmt=fits out=steps.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I convert a table into a very compact FITS file?",
        "response": "You can try converting it to a column-oriented FITS file, which can be more efficient for some access patterns: `stilts tcopy in=data.vot ofmt=colfits out=data.colfits`",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Can `tcopy` read from a `.zip` file?",
        "response": "Not directly. `tcopy` can read `.gz` and `.bz2` files, but you would need to unzip a `.zip` archive first, for instance using a command pipeline: `unzip -p archive.zip table.fits | stilts tcopy in=- out=table.vot`",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a VOTable to a FITS file, but without the FITS-plus headers.",
        "response": "stilts tcopy in=data.vot ofmt='fits(primary=basic)' out=basic.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to view just the header of an IPAC table file.",
        "response": "You can use `tpipe` for that with `omode=meta`. A `tcopy` approach would be `stilts tcopy ifmt=ipac in=data.tbl icmd='head 0' ofmt=text` to show the column headers.",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "What's the simplest command to verify if a file is a readable table?",
        "response": "stilts tcopy in=my_file.dat omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert a table to a VOTable with data in an external FITS file.",
        "response": "stilts tcopy in=data.csv ofmt='votable(format=FITS,inline=false)' out=data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Take a table from standard input and write it to standard output, changing format from CSV to text.",
        "response": "stilts tcopy ifmt=csv ofmt=text",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter in: null value not allowed\nUsage: in=<table>\n\n"
    },
    {
        "prompt": "Can I convert a table to JSON format?",
        "response": "STILTS `tcopy` does not support a generic JSON table output format. However, `ecsv` is based on YAML/JSON, and you could use `tpipe` with specific filters to construct JSON text.",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Copy a table from one FITS file to another, effectively 'cleaning' it.",
        "response": "stilts tcopy in=messy.fits out=clean.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How to convert an `ascii` file with 5 header lines to FITS?",
        "response": "`tcopy` itself can't skip headers. You should use `tpipe` for that: `stilts tpipe ifmt=ascii in=data.txt icmd='tail ($nrow-5)' out=data.fits`",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Create a small FITS file from a simulated dataset for testing purposes.",
        "response": "stilts tcopy in=:skysim:100 out=test_catalog.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable into a CSV file and show it on the screen.",
        "response": "stilts tcopy in=my_data.vot ofmt=csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a remote compressed VOTable to a local FITS file.",
        "response": "stilts tcopy in=http://example.com/data/table.vot.gz out=table.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can you convert my CSV file to a FITS BINTABLE?",
        "response": "Yes, that's the default FITS output format. The command is simply: `stilts tcopy in=my.csv out=my.fits`",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "How to convert a FITS table to a VOTable and specify the output table name in the VOTable metadata?",
        "response": "This is a metadata manipulation task, so `tpipe` is more suitable: `stilts tpipe in=data.fits cmd='tablename \"My Table\"' out=data.vot`",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "What does `ofmt=(auto)` mean?",
        "response": "It means STILTS will try to guess the desired output format from the filename extension of the `out` file, for example, `.fits` for FITS or `.csv` for CSV. This is the default behavior [12, 13].",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert the astronomical catalogue 'source_data.fits' into a standard VOTable document named 'source_data.vot'.",
        "response": "stilts tcopy in=source_data.fits out=source_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy the remote VOTable file from 'http://archive.org/catalog.xml' and save it locally as 'local_catalog.fits'.",
        "response": "stilts tcopy in=http://archive.org/catalog.xml out=local_catalog.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'raw_measurements.csv' into a FITS file, explicitly specifying the input format since CSV cannot be auto-detected by content.",
        "response": "stilts tcopy in=raw_measurements.csv ifmt=csv out=measurements.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'gaia_dr3.fits' into a VOTable using the memory-efficient **BINARY2** serialization format.",
        "response": "stilts tcopy in=gaia_dr3.fits ofmt='votable(format=BINARY2)' out=gaia_dr3.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from standard input (VOTable format) and output it as an ECSV file.",
        "response": "stilts tcopy in=- ifmt=votable ofmt=ecsv out=stream_output.ecsv",
        "chat.jar": "failed",
        "error": "Error: uk.ac.starlink.table.TableFormatException\n    (Premature end of file.)\n"
    },
    {
        "prompt": "Convert the IPAC table 'target_list.tbl' into a simple, human-readable text file named 'target_list.txt'.",
        "response": "stilts tcopy in=target_list.tbl ifmt=ipac ofmt=text out=target_list.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy the FITS file 'deep_field.fits' and write the output using the **column-oriented FITS** format.",
        "response": "stilts tcopy in=deep_field.fits ofmt=colfits-plus out=deep_field.colfits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file into a LaTeX tabular environment for use in a document.",
        "response": "stilts tcopy in=report.csv ifmt=csv ofmt=latex out=report_table.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read the second extension (#2) from the multi-extension FITS file 'archive.fits' and save it as a new VOTable.",
        "response": "stilts tcopy in=archive.fits#2 out=extension_2.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ECSV file 'data.ecsv' to a Parquet file 'data.parquet'.",
        "response": "stilts tcopy in=data.ecsv out=data.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy an ASCII table 'raw_positions.txt' and output it as a FITS file, enabling automatic format detection for the input format hint.",
        "response": "stilts tcopy in=raw_positions.txt ifmt=ascii out=positions.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'big_data.fits' to VOTable, specifying binary serialization and writing the binary data to an external file rather than inline.",
        "response": "stilts tcopy in=big_data.fits ofmt='votable(format=BINARY,href=true)' out=big_data.vot",
        "chat.jar": "failed",
        "error": "Error: No handler for output format votable(format=BINARY,href=true)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n        (Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n            (No method setHref in uk.ac.starlink.votable.VOTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read from a system pipe: process CSV data piped from a command and save the result as a FITS file.",
        "response": "cat input.csv | stilts tcopy in=- ifmt=csv out=piped_result.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a FITS file to an HTML table suitable for embedding in a web page.",
        "response": "stilts tcopy in=data.fits ofmt=html out=data_report.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Create a copy of 'catalog.vot' but force the output to the bare **FITS-basic** format, stripping rich metadata.",
        "response": "stilts tcopy in=catalog.vot ofmt=fits-basic out=basic_catalog.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local FITS file to a VOTable format version 1.1.",
        "response": "stilts tcopy in=file_1.fits ofmt='votable(version=V11)' out=file_1_v11.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy an ECSV file but explicitly use a **space delimiter** in the output ECSV file.",
        "response": "stilts tcopy in=input.ecsv ofmt='ecsv(delimiter=space)' out=space_delimited.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'ts_data.cdf' (CDF format) into a VOTable, reading the format automatically based on extension (if possible).",
        "response": "stilts tcopy in=ts_data.cdf ifmt=cdf out=ts_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table read from a Parquet file, ensuring the output Parquet file uses **gzip** compression.",
        "response": "stilts tcopy in=input.parquet ofmt='parquet(compression=gzip)' out=gzipped.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the loop scheme (:loop:1000) and convert it directly to an ASCII file on standard output.",
        "response": "stilts tcopy in=:loop:1000 ofmt=ascii out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC file to CSV, ensuring no header line is written to the CSV output.",
        "response": "stilts tcopy in=ipac_data.tbl ifmt=ipac ofmt='csv(header=false)' out=no_header.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table containing >1000 columns into a standard VOTable.",
        "response": "stilts tcopy in=wide_fits.fits out=wide_vot.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy 'positions.fits' to 'positions.fits.gz', utilizing automatic compression based on extension.",
        "response": "stilts tcopy in=positions.fits out=positions.fits.gz",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for positions.fits.gz\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Copy a remote FITS file via HTTPS URL and convert it to ECSV format.",
        "response": "stilts tcopy in=https://data.archive/remote.fits out=remote_data.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC table to a CSV file using a semicolon as the delimiter.",
        "response": "stilts tcopy in=input.tbl ifmt=ipac ofmt='csv(delimiter=;)' out=semicolon.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable to a FITS file, selecting extension #0 (the primary HDU) only (though this extension does not typically contain table data).",
        "response": "stilts tcopy in=data.vot#0 out=data_primary.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Feather file 'results.fea' to a VOTable document.",
        "response": "stilts tcopy in=results.fea out=results.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a simulated sky catalog (:skysim:100) to a local VOTable.",
        "response": "stilts tcopy in=:skysim:100 out=sim_sample.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to an **uncompressed** Parquet file.",
        "response": "stilts tcopy in=input.fits ofmt='parquet(compression=uncompressed)' out=uncompressed.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy an ASCII file but set the output format to be IPAC, including table parameters.",
        "response": "stilts tcopy in=raw.txt ifmt=ascii ofmt=ipac out=formatted.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to FITS, forcing the use of the **normal, row-oriented FITS** format (fits-basic).",
        "response": "stilts tcopy in=input.vot out=output.fits ofmt=fits-basic",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from the astronomical MRT format (Machine-Readable Table) and convert it to CSV.",
        "response": "stilts tcopy in=mrt_data.txt ifmt=mrt out=mrt_converted.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy an input table but output the result as a multi-line, readable **text** output format to the terminal.",
        "response": "stilts tcopy in=archive.fits ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local FITS file to a VOTable, ensuring XML character encoding is UTF-16.",
        "response": "stilts tcopy in=table.fits ofmt='votable(encoding=UTF-16)' out=utf16.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a strange attractor simulation (:attractor:1e4,henon) and save it as a CSV.",
        "response": "stilts tcopy in=:attractor:1e4,henon out=henon_data.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'data.fits' to VOTable, but explicitly request VOTable version 1.0.",
        "response": "stilts tcopy in=data.fits ofmt='votable(version=V10)' out=v10_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable to a FITS file, ensuring the output uses **var-length arrays** (fits-var).",
        "response": "stilts tcopy in=input.vot out=output.fits ofmt=fits-var",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ECSV file and output it as a FITS file, explicitly naming the column-oriented output format.",
        "response": "stilts tcopy in=ecsv_data.ecsv ifmt=ecsv ofmt=colfits-plus out=ecsv_colfits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to a Feather file, preserving the column-oriented structure.",
        "response": "stilts tcopy in=input.parquet out=output.fea",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from standard input (CSV format, delimited by tab) and output it as FITS.",
        "response": "cat tab_data.txt | stilts tcopy in=- ifmt='csv(delimiter=tab)' out=tab_stream.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a VOTable to LaTeX, ensuring the output is a **standalone document**.",
        "response": "stilts tcopy in=small_cat.vot ofmt='latex(standalone=true)' out=standalone.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a JDBC query (assuming proper configuration) and save the results as an ASCII file.",
        "response": "stilts tcopy in='jdbc:mysql://localhost/db1#SELECT ra, dec FROM table' out=sql_dump.txt ofmt=ascii",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file that contains quoted strings with internal spaces, and save it as a FITS file.",
        "response": "stilts tcopy in=quoted_strings.txt ifmt=ascii out=string_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a PDS4 file 'mars_data.xml' into an ECSV table.",
        "response": "stilts tcopy in=mars_data.xml ifmt=pds4 out=mars_data.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to VOTable, ensuring the VOTable output writes a datestamp comment (the default behavior).",
        "response": "stilts tcopy in=input.fits ofmt='votable(date=true)' out=dated.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a Parquet file and output it to standard output as a raw data stream (no formatting).",
        "response": "stilts tcopy in=data.parquet ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the generic scheme specification for a test table (:test:10,is) and save it as an IPAC file.",
        "response": "stilts tcopy in=:test:10,is out=test_ipac.tbl ifmt=ipac",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a large FITS file to a VOTable, ensuring **streamed reading** of the input.",
        "response": "stilts tcopy in=huge.fits istream=true out=huge_streamed.vot",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"huge.fits\"\n"
    },
    {
        "prompt": "Convert a local FITS file to a remote FITS file location via an obsolete protocol URL.",
        "response": "stilts tcopy in=local.fits out=myspace:/remote/copy.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from an external system command pipeline output, interpreting the output as CSV, and saving it as FITS.",
        "response": "stilts tcopy in='cat file.csv|' ifmt=csv out=pipeline_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local VOTable to FITS, explicitly specifying the input format as VOTable.",
        "response": "stilts tcopy in=local.vot ifmt=votable out=local_copy.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert the remote VOTable document 'http://archive.org/data.vot' into a local FITS file, 'remote_data.fits'.",
        "response": "stilts tcopy in=http://archive.org/data.vot out=remote_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'raw_data.csv' (comma-separated values) to the ECSV format.",
        "response": "stilts tcopy in=raw_data.csv ifmt=csv out=processed.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a FITS file and output it as a VOTable document using the efficient **BINARY2** serialization.",
        "response": "stilts tcopy in=source_cat.fits ofmt='votable(format=BINARY2)' out=binary2_cat.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC table 'obs.tbl' into a standard FITS table.",
        "response": "stilts tcopy in=obs.tbl ifmt=ipac out=obs_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from standard input (assuming VOTable format) and display it on the terminal using the simple text format.",
        "response": "stilts tcopy in=- ifmt=votable ofmt=text out=-",
        "chat.jar": "failed",
        "error": "Error: uk.ac.starlink.table.TableFormatException\n    (Premature end of file.)\n"
    },
    {
        "prompt": "Convert 'large_survey.fits' to a Parquet file, ensuring the output uses **GZIP** compression.",
        "response": "stilts tcopy in=large_survey.fits ofmt='parquet(compression=gzip)' out=survey.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Extract the third extension (#3) from a multi-extension FITS file 'archive.fits' and save it as an IPAC table.",
        "response": "stilts tcopy in=archive.fits#3 out=ext3.tbl ifmt=ipac",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ASCII catalogue 'star_list.txt' into a LaTeX tabular environment file.",
        "response": "stilts tcopy in=star_list.txt ifmt=ascii ofmt=latex out=stars.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a table of 10,000 rows using the `:loop:` scheme and save it as a FITS file.",
        "response": "stilts tcopy in=:loop:10000 out=loop_table.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to a FITS file, forcing the use of the **column-oriented FITS-plus** format.",
        "response": "stilts tcopy in=input.vot out=output.colfits ofmt=colfits-plus",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a remote CDF file and save it locally as a VOTable, explicitly identifying the input format.",
        "response": "stilts tcopy in=http://remote/ts_data.cdf ifmt=cdf out=ts_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'gaia.fits' into an HTML table fragment for web display, ensuring it is not a standalone document.",
        "response": "stilts tcopy in=gaia.fits ofmt='html(standalone=false)' out=gaia_fragment.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy 'positions.vot' and output it as a FITS file, ensuring the data is read in **streaming mode**.",
        "response": "stilts tcopy in=positions.vot istream=true out=streamed.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"positions.vot\"\n"
    },
    {
        "prompt": "Convert a CSV file to ECSV, providing an external YAML header file for metadata definition.",
        "response": "stilts tcopy in=data.csv ifmt=csv out=data.ecsv ofmt='ecsv(header=metadata.yaml)'",
        "chat.jar": "failed",
        "error": "Error: No handler for output format ecsv(header=metadata.yaml)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"header=metadata.yaml\" - Options are delimiter=comma|space\n        (Failed setting \"header=metadata.yaml\" - Options are delimiter=comma|space\n            (No method setHeader in uk.ac.starlink.ecsv.EcsvTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read the second table element (#1) from a multi-TABLE VOTable and convert it to FITS.",
        "response": "stilts tcopy in=multi_cat.vot#1 out=second_table.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to a Feather file.",
        "response": "stilts tcopy in=input.parquet out=output.fea",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local FITS file to a VOTable, forcing the use of **VOTable version 1.0**.",
        "response": "stilts tcopy in=legacy.fits ofmt='votable(version=V10)' out=legacy_v10.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy data from a simulation scheme (`:skysim:`) generating 500 stars and save it as a CSV file.",
        "response": "stilts tcopy in=:skysim:500 out=sim_stars.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ASCII table that uses **tabs** as delimiters to a standard FITS file.",
        "response": "stilts tcopy in=tab_data.txt ifmt='ascii(delimiter=tab)' out=tab_converted.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt: Unknown format ascii(delimiter=tab)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"delimiter=tab\" - Options are maxSample=<int>, decoders=<Decoder[]>, notypes=<type>[;<type>...]\n        (Failed setting \"delimiter=tab\" - Options are maxSample=<int>, decoders=<Decoder[]>, notypes=<type>[;<type>...]\n            (No method setDelimiter in uk.ac.starlink.table.formats.AsciiTableBuilder)))\nUsage: ifmt=<in-format>\n\n"
    },
    {
        "prompt": "Read a gzipped VOTable file from a URL and convert it to a local ECSV file.",
        "response": "stilts tcopy in=http://remote.org/cat.vot.gz out=local_cat.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'spectral_data.fits' to VOTable, ensuring the **FITS serialization** is used.",
        "response": "stilts tcopy in=spectral_data.fits ofmt='votable(format=FITS)' out=spec.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet table to a local FITS file, ensuring the Parquet reading process uses **column caching** for speed.",
        "response": "stilts tcopy in=large.parquet ifmt='parquet(cachecols=true)' out=large_cached.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from the second table extension of a CDF file, identified by variable name 'Epoch_A', and save it as VOTable.",
        "response": "stilts tcopy in=data.cdf#Epoch_A ifmt=cdf out=epoch_a.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file containing VOParquet metadata to a FITS file, explicitly reading the **metadata from an external VOTable file**.",
        "response": "stilts tcopy in=input.parquet ifmt='parquet(votable=meta.vot)' out=meta_overridden.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable to a FITS file, forcing the **VOTable metadata** to be stored in the Primary HDU (FITS-plus).",
        "response": "stilts tcopy in=data.vot ofmt=fits-plus out=rich_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a large FITS file to a compressed FITS file with a `.fits.gz` extension, relying on auto-detection for compression.",
        "response": "stilts tcopy in=big_file.fits out=big_file.fits.gz",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for big_file.fits.gz\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read an ASCII file, forcing the data sampling to determine column types to check only the first 100 rows.",
        "response": "stilts tcopy in=test.txt ifmt='ascii(maxSample=100)' out=sample_check.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to LaTeX output, specifying semicolon as the delimiter in the output.",
        "response": "stilts tcopy in=input.csv ifmt=csv ofmt='csv(delimiter=;)' out=semi_latex.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a system command pipe output (VOTable) and save it as an IPAC table.",
        "response": "cat remote.vot | stilts tcopy in=- ifmt=votable ofmt=ipac out=piped.tbl",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a FITS file to VOTable, ensuring the output uses **VOTable version 1.4**.",
        "response": "stilts tcopy in=data.fits ofmt='votable(version=V14)' out=v14.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy data from a test table scheme (:test:10,is) and save it as a text file.",
        "response": "stilts tcopy in=':test:10,is' ofmt=text out=test_data.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a PDS4 planetary XML label file to FITS, explicitly setting the input format.",
        "response": "stilts tcopy in=pds_label.xml ifmt=pds4 out=pds_converted.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ECSV file to a text file, ensuring that the ECSV is read automatically by content detection.",
        "response": "stilts tcopy in=data.ecsv out=data_out.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table while explicitly forcing the output to FITS using **variable-length arrays** (fits-var).",
        "response": "stilts tcopy in=array_input.vot ofmt=fits-var out=var_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from the HAPI time series scheme and output it as FITS.",
        "response": "stilts tcopy in=':hapi:https://vires.services/hapi;GRACE_A_MAG;start=2009-01-01;stop=2009-01-01T00:00:10;include=header' out=hapi_out.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to ECSV, specifying that **no header line** should be present in the ECSV output body.",
        "response": "stilts tcopy in=input.csv ifmt=csv ofmt='ecsv(header=false)' out=no_header.ecsv",
        "chat.jar": "failed",
        "error": "Error: No handler for output format ecsv(header=false)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"header=false\" - Options are delimiter=comma|space\n        (Failed setting \"header=false\" - Options are delimiter=comma|space\n            (No method setHeader in uk.ac.starlink.ecsv.EcsvTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read an ASCII table, explicitly excluding 16-bit integer types during type inference.",
        "response": "stilts tcopy in=numeric.txt ifmt='ascii(notypes=short)' out=long_only.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable and output it to standard output as a VOTable with **TABLEDATA** serialization.",
        "response": "stilts tcopy in=input.vot ofmt='votable(format=TABLEDATA)' out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table from FITS to the obsolete **Mirage format**.",
        "response": "stilts tcopy in=table.fits ofmt=mirage out=output.mirage",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from the **MRT (Machine-Readable Table)** format and output it as a VOTable.",
        "response": "stilts tcopy in=mrt_catalogue.txt ifmt=mrt out=mrt_converted.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Feather file to a VOTable, relying on automatic detection for both formats.",
        "response": "stilts tcopy in=data.fea out=data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a FITS file and force the output to FITS, ensuring **no Primary HDU** is written.",
        "response": "stilts tcopy in=extension_only.fits ofmt='fits(primary=none)' out=no_phdu.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC table to FITS, ensuring table parameters are output as well as row data (IPAC default).",
        "response": "stilts tcopy in=input.tbl ifmt=ipac ofmt='ipac(params=true)' out=ipac_params.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the JDBC scheme to pull data from a MySQL database and convert it to CSV.",
        "response": "stilts tcopy in=':jdbc:mysql://host/db#SELECT ID, RA FROM objects' out=query_dump.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local VOTable to FITS, specifying the output VOTable version as 1.3.",
        "response": "stilts tcopy in=data.vot ofmt='votable(version=V13)' out=v13_out.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it as a text file, setting the maximum cell width to 60 characters.",
        "response": "stilts tcopy in=long_strings.fits ofmt='text(maxCell=60)' out=truncated_text.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to Feather format.",
        "response": "stilts tcopy in=input.fits out=output.feather",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a VOTable but disable the automatic caching mechanism that guarantees random access.",
        "response": "stilts tcopy in=huge.vot random=false out=sequential_read.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: random=false\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert an ASCII table to IPAC format, ensuring table parameters are included in the output.",
        "response": "stilts tcopy in=ascii_data.txt ifmt=ascii ofmt='ipac(params=true)' out=ascii_to_ipac.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable and output it to FITS, forcing variable-length array storage pointers to 64-bit.",
        "response": "stilts tcopy in=array.vot ofmt='fits(var=Q)' out=q_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a PDS4 file, ignoring the initial check for PDS4 magic content (checkmagic=false).",
        "response": "stilts tcopy in=unknown.xml ifmt='pds4(checkmagic=false)' out=pds_forced.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table from a strange attractor scheme (Rampe, 10e6 points) to a VOTable.",
        "response": "stilts tcopy in=':attractor:10e6,rampe' out=rampe.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to LaTeX, ensuring the output is **not** a standalone document (default for LaTeX).",
        "response": "stilts tcopy in=data.csv ifmt=csv ofmt='latex(standalone=false)' out=frag.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a FITS file and output the entire raw table data to standard output (not metadata).",
        "response": "stilts tcopy in=archive.fits ofmt=fits out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable to a CSV file, setting the output delimiter to a **semicolon** (;).",
        "response": "stilts tcopy in=input.vot out=semicolon.csv ofmt='csv(delimiter=;)'",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table from a loop scheme to a VOTable, forcing the binary data to be written as **external files**.",
        "response": "stilts tcopy in=:loop:5000 ofmt='votable(format=BINARY,href=true)' out=loop_ext.vot",
        "chat.jar": "failed",
        "error": "Error: No handler for output format votable(format=BINARY,href=true)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n        (Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n            (No method setHref in uk.ac.starlink.votable.VOTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Copy a table and output it as a text file, ensuring table parameters are **not** included.",
        "response": "stilts tcopy in=params.fits ofmt='text(params=false)' out=no_params.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to Parquet, explicitly setting the **dictionary encoding to false**.",
        "response": "stilts tcopy in=input.fits ofmt='parquet(usedict=false)' out=no_dict.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file where all integer/float columns must be treated as 64-bit precision (long/double).",
        "response": "stilts tcopy in=high_prec.txt ifmt='ascii(notypes=short;int;float)' out=full_prec.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to FITS, writing column metadata into the FITS primary HDU (fits-plus convention).",
        "response": "stilts tcopy in=meta.vot ofmt='fits(primary=votable)' out=meta_phdu.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output the result in the **TST format** (Tab-Separated Table).",
        "response": "stilts tcopy in=input.fits out=output.tst ofmt=tst",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to CSV, ensuring **no header line** is written.",
        "response": "stilts tcopy in=no_header_in.fits ofmt='csv(header=false)' out=no_header_out.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the loop scheme and output the result using the **BINARY2** VOTable format.",
        "response": "stilts tcopy in=:loop:100 out=binary2_loop.vot ofmt='votable(format=BINARY2)'",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Feather file to Parquet, using a fixed number of reader threads (e.g., 4) during the input process.",
        "response": "stilts tcopy in=threads.fea ifmt='parquet(nThread=4)' out=threads.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a simulation scheme (:test:5,v) containing variable-length array columns to a VOTable.",
        "response": "stilts tcopy in=':test:5,v' out=var_test.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to LaTeX, specifying the output line thickness for table ruling as 3 pixels.",
        "response": "stilts tcopy in=data.vot ofmt='latex(thick=3)' out=thick.tex",
        "chat.jar": "failed",
        "error": "Error: No handler for output format latex(thick=3)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"thick=3\" - Options are standalone=true|false\n        (Failed setting \"thick=3\" - Options are standalone=true|false\n            (No method setThick in uk.ac.starlink.table.formats.LatexTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read an ECSV file, forcing the input to be treated as ECSV 1.0.",
        "response": "stilts tcopy in=old.ecsv ifmt='ecsv(version=V10)' out=ecsv_v10.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt: Unknown format ecsv(version=V10)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"version=V10\" - Options are header=<filename-or-url>, colcheck=IGNORE|WARN|FAIL\n        (Failed setting \"version=V10\" - Options are header=<filename-or-url>, colcheck=IGNORE|WARN|FAIL\n            (No method setVersion in uk.ac.starlink.ecsv.EcsvTableBuilder)))\nUsage: ifmt=<in-format>\n\n"
    },
    {
        "prompt": "Convert a Parquet file to FITS, guaranteeing that the FITS output includes long string metadata (Wide FITS support).",
        "response": "stilts tcopy in=wide_parquet.parquet out=wide_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a VOTable and convert it to FITS, ensuring the output uses VOTable version 1.2 metadata in the primary HDU.",
        "response": "stilts tcopy in=data.vot ofmt='fits(primary=votable1.2)' out=v12_phdu.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a remote FITS file and convert it to the **simple ASCII format** on standard output.",
        "response": "stilts tcopy in=http://archive.com/file.fits ofmt=ascii out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table, reading from a system pipe which produces IPAC data, and save it as VOTable.",
        "response": "cat input.tbl | stilts tcopy in=- ifmt=ipac out=piped_ipac.vot",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Copy a local file to a remote URL using the obsolete AstroGrid MySpace protocol.",
        "response": "stilts tcopy in=local.fits out=myspace:/remote/data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to CSV, setting the output cell width limit to 100 characters.",
        "response": "stilts tcopy in=input.fits ofmt='csv(maxCell=100)' out=width_limited.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from the WDC format and convert it to FITS.",
        "response": "stilts tcopy in=wdc_data.txt ifmt=wdc out=wdc_converted.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it using the **TST format**.",
        "response": "stilts tcopy in=data.fits out=output.tst",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file, explicitly excluding boolean and date types from the inferred column types.",
        "response": "stilts tcopy in=mixed.txt ifmt='ascii(notypes=boolean;date)' out=mixed_no_bool.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local file to VOTable, overriding the default XML encoding to **ISO-8859-1**.",
        "response": "stilts tcopy in=data.fits ofmt='votable(encoding=ISO-8859-1)' out=iso_vot.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a multi-extension FITS file, selecting extension #2 by name 'PRIMARY_CATALOG', and save it.",
        "response": "stilts tcopy in=multi.fits#PRIMARY_CATALOG out=named_ext.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Feather file to a CSV, streaming the CSV output to standard output.",
        "response": "stilts tcopy in=feather.fea ofmt=csv out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a simulation (Clifford attractor) and save it as a compressed Parquet file.",
        "response": "stilts tcopy in=':attractor:1e5,clifford' ofmt='parquet(compression=lz4_raw)' out=clifford.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CSV file and convert it to FITS, specifying that the CSV uses a **tab delimiter**.",
        "response": "stilts tcopy in=data.txt ifmt='csv(delimiter=tab)' out=tab_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to LaTeX, ensuring the output uses a **serif font style** for annotations (LaTeX config option).",
        "response": "stilts tcopy in=report.vot ofmt='latex(fontstyle=serif)' out=serif.tex",
        "chat.jar": "failed",
        "error": "Error: No handler for output format latex(fontstyle=serif)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"fontstyle=serif\" - Options are standalone=true|false\n        (Failed setting \"fontstyle=serif\" - Options are standalone=true|false\n            (No method setFontstyle in uk.ac.starlink.table.formats.LatexTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Copy a FITS table and output it as a FITS file, setting the Primary HDU content to basic (no VOTable metadata).",
        "response": "stilts tcopy in=input.fits ofmt='fits(primary=basic)' out=basic_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ECSV file, forcing validation to ignore cases where header columns differ from CSV columns (colcheck=IGNORE).",
        "response": "stilts tcopy in=mismatch.ecsv ifmt='ecsv(colcheck=IGNORE)' out=forced_read.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ASCII table to a FITS file, explicitly reading it as ASCII format.",
        "response": "stilts tcopy in=unstructured.txt ifmt=ascii out=structured.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it to standard output as a VOTable document using the efficient **BINARY** serialization.",
        "response": "stilts tcopy in=data.fits ofmt='votable(format=BINARY)' out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the generic scheme `:class:uk.ac.starlink.table.LoopTableScheme:50` and save it as FITS.",
        "response": "stilts tcopy in=':class:uk.ac.starlink.table.LoopTableScheme:50' out=class_loop.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC file to a CSV file, ensuring parameters are **not** written.",
        "response": "stilts tcopy in=data.tbl ifmt=ipac ofmt='csv(header=false)' out=no_params_csv.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a FITS file and save it as a local Parquet file, ensuring the output respects the default FITS format setting.",
        "response": "stilts tcopy in=input.fits out=output.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a VOTable document but force streaming mode reading, to reduce memory usage for large files.",
        "response": "stilts tcopy in=huge.vot istream=true out=huge_stream.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"huge.vot\"\n"
    },
    {
        "prompt": "Read the output of a pipeline command (producing ECSV) and convert it to FITS.",
        "response": "tpipe in=raw.fits cmd='addcol X 1' | stilts tcopy in=- ifmt=ecsv out=pipe_ecsv.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Copy a VOTable to a FITS file, using a large (300-pixel) marker size in the FITS output (plot annotation config).",
        "response": "stilts tcopy in=input.vot ofmt='fits(maxsize=300)' out=large_marker_fits.fits",
        "chat.jar": "failed",
        "error": "Error: No handler for output format fits(maxsize=300)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"maxsize=300\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n        (Failed setting \"maxsize=300\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n            (No method setMaxsize in uk.ac.starlink.votable.UnifiedFitsTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert a FITS file to VOTable, guaranteeing that **no datestamp comment** is included in the XML output.",
        "response": "stilts tcopy in=undated.fits ofmt='votable(date=false)' out=nodate.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy an ASCII file and output it in the IPAC format, limiting maximum cell width to 50 characters.",
        "response": "stilts tcopy in=strings.txt ifmt=ascii ofmt='ipac(maxCell=50)' out=ipac_trunc.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CDF file and save its data as a VOTable, selecting a different extension by index #2.",
        "response": "stilts tcopy in=multi.cdf#2 ifmt=cdf out=cdf_ext2.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a multi-extension FITS file, selecting HDU #4, and output it as CSV.",
        "response": "stilts tcopy in=archive.fits#4 out=hdu4.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local FITS file to a VOTable, explicitly setting the output version to 1.5 (latest standard).",
        "response": "stilts tcopy in=new_data.fits ofmt='votable(version=V15)' out=v15_out.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the JDBC scheme and output the result as a raw, multi-table FITS stream.",
        "response": "stilts tcopy in=':jdbc:postgresql://db#SELECT RA,DEC FROM cat' ofmt=fits out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a synthetic test scheme that includes basic scalar columns and fixed arrays (:test:10,bf) to FITS.",
        "response": "stilts tcopy in=':test:10,bf' out=fixed_array_test.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to HTML output, ensuring the output is a full, standalone HTML document.",
        "response": "stilts tcopy in=data.csv ifmt=csv ofmt='html(standalone=true)' out=standalone_report.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a file in the AAS MRT format, explicitly setting `errmode=FAIL` to stop on formatting errors.",
        "response": "stilts tcopy in=mrt_risky.txt ifmt='mrt(errmode=FAIL)' out=safe_mrt.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to Parquet, using **LZ4_RAW** compression.",
        "response": "stilts tcopy in=v.vot ofmt='parquet(compression=lz4_raw)' out=lz4_parq.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable file to a FITS file, preserving the VOTable metadata in the Primary HDU.",
        "response": "stilts tcopy in=input.vot out=output.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table from standard input (CSV) and output it as an ECSV file, streaming the CSV input.",
        "response": "cat stream.csv | stilts tcopy in=- ifmt=csv out=stream.ecsv",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a FITS file to LaTeX output, ensuring it outputs a complete, compilable document.",
        "response": "stilts tcopy in=fits.fits out=compilable.tex ofmt='latex(standalone=true)'",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a Feather file to an uncompressed FITS file.",
        "response": "stilts tcopy in=large.fea out=large.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table from a PDS4 file, specifically selecting table #1 by index.",
        "response": "stilts tcopy in=pds_archive.xml#1 ifmt=pds4 out=pds_table1.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ASCII file to FITS, using the **FITS-basic** format (no rich metadata).",
        "response": "stilts tcopy in=flat.txt ifmt=ascii ofmt=fits-basic out=basic.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a FITS file and convert it to ECSV, specifying the ECSV delimiter as comma.",
        "response": "stilts tcopy in=input.fits out=comma.ecsv ofmt='ecsv(delimiter=comma)'",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable and explicitly output it using the **TST format**.",
        "response": "stilts tcopy in=cat.vot out=cat.tst ofmt=tst",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table to Parquet, setting key-value metadata in the footer (e.g., 'Author:STILTS').",
        "response": "stilts tcopy in=data.fits ofmt='parquet(kvmap=Author:STILTS)' out=kv_data.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file where fields are separated by **multiple spaces** (using default ASCII handler).",
        "response": "stilts tcopy in=spaced.txt ifmt=ascii out=spaced.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a table from FITS to VOTable, ensuring the output uses **VOTable version 1.1**.",
        "response": "stilts tcopy in=old.fits ofmt='votable(version=V11)' out=v11.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table from a system command pipe where the output is a compressed FITS file.",
        "response": "gunzip -c data.fits.gz | stilts tcopy in=- ifmt=fits out=decompressed.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Copy a VOTable to a FITS file, forcing the column width metadata to be optimized for narrow strings.",
        "response": "stilts tcopy in=short_strings.vot out=opt_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a PDS4 file, restricting the read only to observational tables.",
        "response": "stilts tcopy in=pds_obs.xml ifmt='pds4(observational=true)' out=obs_only.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC file to FITS, explicitly limiting the maximum cell width in the output IPAC format definition (though FITS is the output).",
        "response": "stilts tcopy in=long.tbl ifmt='ipac(maxCell=500)' out=long.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt: Unknown format ipac(maxCell=500)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"maxCell=500\" - No config options available\n        (Failed setting \"maxCell=500\" - No config options available\n            (No method setMaxCell in uk.ac.starlink.table.formats.IpacTableBuilder)))\nUsage: ifmt=<in-format>\n\n"
    },
    {
        "prompt": "Copy a table from a synthetic test scheme that includes roughly 1000 columns (:test:10,k) to FITS.",
        "response": "stilts tcopy in=':test:10,k' out=wide_test.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to HTML output, setting the maximum cell width to 500 characters.",
        "response": "stilts tcopy in=data.csv ifmt=csv ofmt='html(maxCell=500)' out=html_limited.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it to a GZIP-compressed Parquet file, ensuring dictionary encoding is used.",
        "response": "stilts tcopy in=input.fits ofmt='parquet(compression=gzip,usedict=true)' out=dict_gzip.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the JDBC scheme and output the resulting table as a VOTable, ensuring binary serialization.",
        "response": "stilts tcopy in=':jdbc:psql://db/cat#SELECT * FROM table' ofmt='votable(format=BINARY)' out=jdbc_binary.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a VOTable, preserving the FITS variable-length array storage pointers (fits-var).",
        "response": "stilts tcopy in=var_fits.fits ofmt='fits(var=true)' out=var_fits_copy.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert the astronomical catalogue 'data.fits' into a VOTable document, forcing the output to use VOTable version 1.5.",
        "response": "stilts tcopy in=data.fits ofmt='votable(version=V15)' out=data_v15.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy an ASCII file 'numeric.txt' to a FITS file, explicitly setting the input format to ignore short integers during type detection.",
        "response": "stilts tcopy in=numeric.txt ifmt='ascii(notypes=short)' out=long_only.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from a JDBC query using the scheme specification and save the output as a Tab-Separated Table (TST) file.",
        "response": "stilts tcopy in=':jdbc:sqlite:///db.sqlite#SELECT * FROM sources' ofmt=tst out=sqlite_dump.tst",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local VOTable to Parquet format, ensuring the Parquet file uses Snappy compression for efficiency.",
        "response": "stilts tcopy in=local.vot ofmt='parquet(compression=snappy)' out=snappy.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read the content of an HTML file 'report.html' (assuming it contains a valid table) and convert it to ECSV.",
        "response": "stilts tcopy in=report.html ifmt=html out=html_extract.ecsv",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt: Unknown format html\n    (No table handler available for html)\nUsage: ifmt=<in-format>\n\n"
    },
    {
        "prompt": "Copy FITS data to a VOTable, ensuring the output uses UTF-16 XML character encoding.",
        "response": "stilts tcopy in=unicode.fits ofmt='votable(encoding=UTF-16)' out=utf16_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a file from MRT (Machine-Readable Table) format to FITS.",
        "response": "stilts tcopy in=mrt_cat.txt ifmt=mrt out=mrt_converted.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to a VOTable, explicitly forcing the output to use the FITS serialization method within the XML structure.",
        "response": "stilts tcopy in=data.parquet ofmt='votable(format=FITS)' out=fits_votable.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a local CSV file to standard output, suppressing the header line.",
        "response": "stilts tcopy in=data.csv ifmt=csv ofmt='csv(header=false)' out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a huge VOTable, forcing non-random access (streaming mode) to conserve memory, and saving the output as FITS.",
        "response": "stilts tcopy in=huge.vot random=false out=sequential.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: random=false\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert a FITS file to a LaTeX tabular environment, specifying it must be a standalone document.",
        "response": "stilts tcopy in=small.fits ofmt='latex(standalone=true)' out=doc.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a table of 100 rows using the `:loop:` scheme and save it as a simple ASCII file.",
        "response": "stilts tcopy in=:loop:100 ofmt=ascii out=loop.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read VOTable data piped from a command line and save it locally as a FITS file.",
        "response": "cat stream.vot | stilts tcopy in=- ifmt=votable out=piped_in.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a planetary data file in PDS4 format to ECSV.",
        "response": "stilts tcopy in=mars_data.xml ifmt=pds4 out=pds_converted.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a remote, compressed FITS file via URL and output it to the terminal in human-readable text format.",
        "response": "stilts tcopy in=http://archive.org/data.fits.gz ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to a FITS file, specifying that the metadata should be provided by an external VOTable file, overriding any internal metadata.",
        "response": "stilts tcopy in=input.parquet ifmt='parquet(votable=meta.vot)' out=meta_override.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Extract the sixth extension (#5) from a multi-extension FITS file 'multi_ext.fits' and save it as a new VOTable file.",
        "response": "stilts tcopy in=multi_ext.fits#5 out=ext5.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to IPAC format, ensuring table parameters (metadata) are included in the output.",
        "response": "stilts tcopy in=meta.vot ofmt='ipac(params=true)' out=meta.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CSV file where the header line is explicitly indicated as absent (`header=false`), and output as FITS.",
        "response": "stilts tcopy in=no_header.csv ifmt='csv(header=false)' out=forced_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'old_data.fits' to VOTable, explicitly forcing the output VOTable standard version to 1.2.",
        "response": "stilts tcopy in=old_data.fits ofmt='votable(version=V12)' out=data_v12.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a Feather file, explicitly identifying the input format.",
        "response": "stilts tcopy in=results.feather ifmt=feather out=results.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read the first table element (#0) from a CDF file and convert it to FITS.",
        "response": "stilts tcopy in=ts_data.cdf#0 ifmt=cdf out=ts_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable with many columns to FITS, relying on **Wide FITS** support to encode columns beyond 999.",
        "response": "stilts tcopy in=wide_vot.vot out=wide_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy data from a remote HAPI service URL and save it as an ECSV file.",
        "response": "stilts tcopy in='https://vires.services/hapi/data?dataset=GRACE_A_MAG&start=2009-01-01&stop=2009-01-02&include=header' ifmt=hapi out=hapi_data.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to CSV, using a **tab character** as the delimiter in the output.",
        "response": "stilts tcopy in=input.fits ofmt='csv(delimiter=tab)' out=tab_data.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a Parquet file, explicitly enabling **dictionary encoding** in the output for better compression efficiency.",
        "response": "stilts tcopy in=data.parquet ofmt='parquet(usedict=true)' out=dict_output.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC table to ECSV.",
        "response": "stilts tcopy in=star.tbl ifmt=ipac out=star.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CSV file 'input.csv' that uses a semicolon delimiter and convert it to FITS.",
        "response": "stilts tcopy in=input.csv ifmt='csv(delimiter=;)' out=semicolon.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a synthetic table of 500 Clifford attractor points to an ASCII file.",
        "response": "stilts tcopy in=:attractor:500,clifford ofmt=ascii out=attractor.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to VOTable, explicitly requesting the pure XML **TABLEDATA** format.",
        "response": "stilts tcopy in=input.fits ofmt='votable(format=TABLEDATA)' out=output_td.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table containing arrays to FITS, forcing the output to use **variable-length arrays** (`fits-var`).",
        "response": "stilts tcopy in=array_in.vot ofmt=fits-var out=var_out.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ECSV file to FITS, explicitly setting the ECSV input delimiter to space.",
        "response": "stilts tcopy in=space.ecsv ifmt='ecsv(delimiter=space)' out=space_ecsv.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt: Unknown format ecsv(delimiter=space)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"delimiter=space\" - Options are header=<filename-or-url>, colcheck=IGNORE|WARN|FAIL\n        (Failed setting \"delimiter=space\" - Options are header=<filename-or-url>, colcheck=IGNORE|WARN|FAIL\n            (No method setDelimiter in uk.ac.starlink.ecsv.EcsvTableBuilder)))\nUsage: ifmt=<in-format>\n\n"
    },
    {
        "prompt": "How do I copy a table and output only its statistics (e.g., mean and standard deviation)?",
        "response": "stilts tpipe in=data.fits omode=stats",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a CSV file to an ECSV file, sampling only the first 50 rows to guess column types for fast initialization.",
        "response": "stilts tcopy in=big.csv ifmt='csv(maxSample=50)' out=quick_check.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ASCII catalogue to IPAC format, limiting the maximum width of any output cell to 50 characters.",
        "response": "stilts tcopy in=input.txt ifmt=ascii ofmt='ipac(maxCell=50)' out=limited.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from CDF format and convert it to Parquet.",
        "response": "stilts tcopy in=cdf_input.cdf ifmt=cdf out=cdf_to_parquet.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert 'large_survey.fits' to a GZIP-compressed FITS file.",
        "response": "stilts tcopy in=large_survey.fits out=large_survey.fits.gz",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for large_survey.fits.gz\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Copy data from a synthetic table (:test:10,is) and save it as a VOTable.",
        "response": "stilts tcopy in=':test:10,is' out=scalar_test.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to an HTML table fragment, explicitly limiting cells to 100 characters.",
        "response": "stilts tcopy in=data.fits ofmt='html(maxCell=100)' out=report.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table generating 100,000 loop rows and output the row count only.",
        "response": "stilts tpipe in=:loop:100000 omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to ECSV, using an external YAML header file for metadata definition.",
        "response": "stilts tcopy in=data.csv ifmt=csv ofmt='ecsv(header=meta.yaml)' out=ecsv_meta.fits",
        "chat.jar": "failed",
        "error": "Error: No handler for output format ecsv(header=meta.yaml)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"header=meta.yaml\" - Options are delimiter=comma|space\n        (Failed setting \"header=meta.yaml\" - Options are delimiter=comma|space\n            (No method setHeader in uk.ac.starlink.ecsv.EcsvTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read data from a HAPI service using the scheme specification and convert it to CSV.",
        "response": "stilts tcopy in=':hapi:https://vires.services/hapi;GRACE_A_MAG;start=2009-01-01;stop=2009-01-02' out=hapi_csv.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a FITS table and output it to FITS, explicitly forcing **no primary HDU** (`primary=none`).",
        "response": "stilts tcopy in=input.fits ofmt='fits(primary=none)' out=no_phdu.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CSV file, explicitly excluding boolean and date type inference during conversion.",
        "response": "stilts tcopy in=mixed.csv ifmt='csv(notypes=boolean;date)' out=numeric_only.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to a Feather file, specifying a multi-threaded read using 8 parallel reader threads.",
        "response": "stilts tcopy in=input.parquet ifmt='parquet(nThread=8)' out=feather_parallel.fea",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable to FITS, forcing the output to FITS-plus convention to store full VOTable metadata.",
        "response": "stilts tcopy in=rich.vot ofmt=fits-plus out=rich.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to LaTeX, specifying the font size in the output to 16pt.",
        "response": "stilts tcopy in=pub.fits ofmt='latex(fontsize=16)' out=pub.tex",
        "chat.jar": "failed",
        "error": "Error: No handler for output format latex(fontsize=16)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"fontsize=16\" - Options are standalone=true|false\n        (Failed setting \"fontsize=16\" - Options are standalone=true|false\n            (No method setFontsize in uk.ac.starlink.table.formats.LatexTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read a WDC format file and save it as FITS.",
        "response": "stilts tcopy in=wdc_data.txt ifmt=wdc out=wdc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to IPAC format, explicitly ensuring table parameters are suppressed.",
        "response": "stilts tcopy in=data.vot ofmt='ipac(params=false)' out=no_params.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read CSV data from standard input, using a **tab delimiter**, and save the result as an ECSV file.",
        "response": "cat stream.tsv | stilts tcopy in=- ifmt='csv(delimiter=tab)' out=piped.ecsv",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a FITS file to a VOTable, ensuring the output uses external binary data references (`href=true`).",
        "response": "stilts tcopy in=data.fits ofmt='votable(format=BINARY,href=true)' out=external_binary.vot",
        "chat.jar": "failed",
        "error": "Error: No handler for output format votable(format=BINARY,href=true)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n        (Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n            (No method setHref in uk.ac.starlink.votable.VOTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Copy a table from a remote URL that references the third HDU (#3) of a compressed FITS file and save it locally.",
        "response": "stilts tcopy in=http://archive.com/multi.fits.gz#3 out=remote_ext3.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ASCII file where fields are separated by multiple spaces, relying on the ASCII parser's default delimiter handling.",
        "response": "stilts tcopy in=spaced_data.txt ifmt=ascii out=spaced_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table to Parquet, using LZ4_RAW compression.",
        "response": "stilts tcopy in=input.fits ofmt='parquet(compression=lz4_raw)' out=lz4_out.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ECSV file and output it as a FITS file, explicitly requesting the **column-oriented FITS** convention.",
        "response": "stilts tcopy in=data.ecsv ifmt=ecsv ofmt=colfits-plus out=colfits_output.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to FITS, specifically requesting the output to be FITS using VOTable version 1.2 metadata in the primary HDU.",
        "response": "stilts tcopy in=data.vot ofmt='fits(primary=votable1.2)' out=v12_phdu.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table to a text file, setting the maximum parameter value width to 500 characters.",
        "response": "stilts tcopy in=params.fits ofmt='text(maxParam=500)' out=wide_params.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a VOTable, outputting it as a VOTable but ensuring **TABLEDATA** serialization (easier to debug/read).",
        "response": "stilts tcopy in=input.vot ofmt='votable(format=TABLEDATA)' out=td_copy.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to VOTable, ensuring the output is written in **BINARY2** serialization.",
        "response": "stilts tcopy in=data.fits ofmt='votable(format=BINARY2)' out=data_binary2.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the loop scheme, generating rows from 10 to 100 in steps of 0.5, and save it as a FITS file.",
        "response": "stilts tcopy in=:loop:10,100,0.5 out=half_steps.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ASCII table to IPAC format, specifying a multi-space delimiter for input parsing (default ASCII behavior).",
        "response": "stilts tcopy in=multi_space.txt ifmt=ascii out=multi_space.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a synthetic test scheme that includes basic scalar columns and fixed arrays (:test:10,bf) to FITS.",
        "response": "stilts tcopy in=':test:10,bf' out=fixed_array_test.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to HTML output, ensuring the output uses a minimum column width via explicit styling (not directly supported by format options, rely on default HTML output).",
        "response": "stilts tcopy in=data.csv ifmt=csv ofmt=html out=styled_report.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a VOTable, forcing the use of the FITS-plus reader to detect rich metadata.",
        "response": "stilts tcopy in=input.fits ifmt=fits-plus out=rich_meta_read.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a Feather file using the `.fea` extension.",
        "response": "stilts tcopy in=input.fits out=output.fea",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a synthetic attractor simulation (Henon, 1e7 points) to a Parquet file.",
        "response": "stilts tcopy in=:attractor:1e7,henon out=henon_large.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to VOTable, explicitly setting VOTable version 1.4.",
        "response": "stilts tcopy in=latest.fits ofmt='votable(version=V14)' out=latest.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a VOTable document, ensuring the data is processed with streaming enabled (`istream=true`).",
        "response": "stilts tcopy in=streamable.vot istream=true out=stream_copy.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"streamable.vot\"\n"
    },
    {
        "prompt": "Copy a table to a GZIP compressed FITS file, explicitly using the GZIP compression option in the output format definition.",
        "response": "stilts tcopy in=input.fits ofmt='fits(compress=gzip)' out=manual_gzip.fits",
        "chat.jar": "failed",
        "error": "Error: No handler for output format fits(compress=gzip)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"compress=gzip\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n        (Failed setting \"compress=gzip\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n            (No method setCompress in uk.ac.starlink.votable.UnifiedFitsTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read a table using the CDF format, selecting a specific table extension by index #2, and save it as VOTable.",
        "response": "stilts tcopy in=data.cdf#2 ifmt=cdf out=cdf_ext2.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ECSV file to FITS, ensuring validation handles cases where column names might differ between header and CSV body (`colcheck=IGNORE`).",
        "response": "stilts tcopy in=mismatch.ecsv ifmt='ecsv(colcheck=IGNORE)' out=forced_ecsv.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it as a text file, ensuring parameters are included.",
        "response": "stilts tcopy in=data.fits ofmt='text(params=true)' out=with_params.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a VOTable, ensuring the output uses external FITS data reference (`href=true`).",
        "response": "stilts tcopy in=data.fits ofmt='votable(format=FITS,href=true)' out=ext_fits_vot.vot",
        "chat.jar": "failed",
        "error": "Error: No handler for output format votable(format=FITS,href=true)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n        (Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n            (No method setHref in uk.ac.starlink.votable.VOTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert a VOTable file 'spec_archive.vot' to a local Parquet file, ensuring maximum compression using the ZSTD algorithm.",
        "response": "stilts tcopy in=spec_archive.vot ofmt='parquet(compression=zstd)' out=spec_archive.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy 'gaia_dr3_subset.fits' to a VOTable using **VOTable version 1.3** and binary serialization.",
        "response": "stilts tcopy in=gaia_dr3_subset.fits ofmt='votable(version=V13,format=BINARY)' out=gaia_v13.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read astronomical data from an IPAC table 'obs.tbl' and write it to standard output as a simple **ASCII table**, including table parameters.",
        "response": "stilts tcopy in=obs.tbl ifmt=ipac ofmt='ascii(params=true)' out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to HTML format, ensuring the output is a **standalone** HTML document.",
        "response": "stilts tcopy in=summary.fits ofmt='html(standalone=true)' out=summary.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file 'catalog.txt' that uses **multiple spaces** as delimiters, and save it as a VOTable.",
        "response": "stilts tcopy in=catalog.txt ifmt=ascii out=catalog.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy the second table extension from 'multi.fits' and convert it to ECSV format.",
        "response": "stilts tcopy in=multi.fits#2 out=ext2.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to FITS, using the **column-oriented FITS-plus** convention to preserve rich metadata.",
        "response": "stilts tcopy in=data.parquet ofmt=colfits-plus out=data_col.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from the synthetic attractor scheme (Henon) with 50,000 points and output the coordinates as a CSV file.",
        "response": "stilts tcopy in=:attractor:50000,henon out=henon_coords.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local FITS file to a VOTable, ensuring the output uses **ISO-8859-1** character encoding.",
        "response": "stilts tcopy in=input.fits ofmt='votable(encoding=ISO-8859-1)' out=latin1.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy data from a CDF file, identified by variable name 'SPECTRA', and save it as a local FITS file.",
        "response": "stilts tcopy in=ts_data.cdf#SPECTRA ifmt=cdf out=spectra_table.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to LaTeX format, using a **semicolon delimiter** in the output CSV data block.",
        "response": "stilts tcopy in=input.csv ifmt=csv ofmt='csv(delimiter=;)' out=semicolon_latex.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a remote compressed VOTable via HTTPS and save it locally as an **uncompressed** FITS file.",
        "response": "stilts tcopy in=https://archive.org/cat.vot.gz out=cat_uncompressed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable to an IPAC table format, explicitly ensuring parameters are **not** written to the output file.",
        "response": "stilts tcopy in=with_params.vot ofmt='ipac(params=false)' out=no_params.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to ECSV, where the output ECSV file uses **space** rather than comma as the delimiter.",
        "response": "stilts tcopy in=input.fits ofmt='ecsv(delimiter=space)' out=space_delimited.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from the first 50 rows of an ASCII file to guess column types, then convert the whole file to FITS.",
        "response": "stilts tcopy in=large.txt ifmt='ascii(maxSample=50)' out=type_inferred.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a multi-table VOTable file, but explicitly specify the output format to be FITS, which will automatically combine extensions.",
        "response": "stilts tcopy in=multi_tab.vot out=combined.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a VOTable, specifying the BINARY serialization format and **external data reference** (`href=true`).",
        "response": "stilts tcopy in=data.fits ofmt='votable(format=BINARY,href=true)' out=external_binary.vot",
        "chat.jar": "failed",
        "error": "Error: No handler for output format votable(format=BINARY,href=true)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n        (Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n            (No method setHref in uk.ac.starlink.votable.VOTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read a table using the loop scheme from 10 to 100 with step 10, and output the row count.",
        "response": "stilts tcopy in=':loop:10,101,10' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert a Feather file to a CSV file, outputting to standard output.",
        "response": "stilts tcopy in=data.fea ofmt=csv out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it using the **obsolete Mirage format**.",
        "response": "stilts tcopy in=input.fits out=output.mirage ofmt=mirage",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a remote HAPI stream for GRACE_A_MAG and save the result locally as a VOTable.",
        "response": "stilts tcopy in='https://vires.services/hapi/data?dataset=GRACE_A_MAG&start=2009-01-01&stop=2009-01-02&include=header' ifmt=hapi out=grace_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ECSV file with array columns to a FITS file.",
        "response": "stilts tcopy in=array_data.ecsv ifmt=ecsv out=array_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy FITS data and output it as a FITS file, forcing the use of **variable-length arrays (fits-var)**.",
        "response": "stilts tcopy in=input.fits ofmt=fits-var out=output_var.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a PDS4 planetary data XML file and output its content as FITS.",
        "response": "stilts tcopy in=cassini_data.xml ifmt=pds4 out=cassini.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC file to a LaTeX table, specifying it should **not** be a standalone document.",
        "response": "stilts tcopy in=report.tbl ifmt=ipac ofmt='latex(standalone=false)' out=report_frag.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a VOTable but enforce **VOTable version 1.0** compliance during output.",
        "response": "stilts tcopy in=data.vot ofmt='votable(version=V10)' out=v10_strict.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table to a text output, limiting the maximum width of any cell to **20 characters**.",
        "response": "stilts tcopy in=wide_columns.fits ofmt='text(maxCell=20)' out=narrow_text.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from a system command pipeline that returns ASCII data, and save it as VOTable.",
        "response": "cat raw_data.txt | stilts tcopy in=- ifmt=ascii out=piped_ascii.vot",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a FITS file to a Parquet file, ensuring the output Parquet file uses **Snappy compression**.",
        "response": "stilts tcopy in=big_cat.fits ofmt='parquet(compression=snappy)' out=snappy_cat.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy data from a simulated sky catalog of 1 million stars to a FITS file.",
        "response": "stilts tcopy in=:skysim:1000000 out=simulated_large.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file where columns are defined to exclude `boolean` and `date` types during parsing.",
        "response": "stilts tcopy in=mixed_types.txt ifmt='ascii(notypes=boolean;date)' out=type_clean.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to a FITS file, forcing the inclusion of the VOTable metadata in the Primary HDU (FITS-plus).",
        "response": "stilts tcopy in=meta.vot ofmt=fits-plus out=fits_plus_meta.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it using the **Tab-Separated Table (TST) format**.",
        "response": "stilts tcopy in=input.fits out=output.tst ofmt=tst",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using a JDBC connection to SQLite and save the results as FITS.",
        "response": "stilts tcopy in='jdbc:sqlite:mydata.db#SELECT id, time FROM log' out=sqlite_log.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to a CSV file, explicitly suppressing the column header line.",
        "response": "stilts tcopy in=header_fits.fits ofmt='csv(header=false)' out=data_only.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a URL and output its metadata only to the terminal.",
        "response": "stilts tpipe in=http://remote.org/data.fits omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a VOTable, enforcing the FITS serialization method within the XML.",
        "response": "stilts tcopy in=raw.fits ofmt='votable(format=FITS)' out=raw_votable_fits.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read the second table element of a multi-table VOTable and output it as an IPAC file.",
        "response": "stilts tcopy in=multi.vot#1 out=table_1.tbl ifmt=ipac",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ECSV file to FITS, supplying an **external YAML header** file for metadata processing.",
        "response": "stilts tcopy in=data.csv ifmt='ecsv(header=metadata.yaml)' out=data_with_meta.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a local FITS table to a compressed VOTable file (`.vot.gz`), relying on the extension for compression.",
        "response": "stilts tcopy in=local_data.fits out=local_data.vot.gz",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for local_data.vot.gz\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert a FITS file to Feather format, relying on Feather's ability to handle the data types.",
        "response": "stilts tcopy in=input_types.fits out=output_types.fea",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table from standard input (CSV) and output it as FITS.",
        "response": "cat input.csv | stilts tcopy in=- ifmt=csv out=streamed_fits.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Copy data from a remote GZIPped VOTable and output it to standard output as text.",
        "response": "stilts tcopy in=http://remote.org/compressed.vot.gz ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to a FITS file, ensuring the output respects the FITS standard column limit (using basic FITS).",
        "response": "stilts tcopy in=input.parquet ofmt=fits-basic out=basic_fits.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an MRT format file and convert it to ECSV.",
        "response": "stilts tcopy in=mrt_catalogue.txt ifmt=mrt out=mrt_output.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to HTML, ensuring that long cell contents are truncated at 150 characters.",
        "response": "stilts tcopy in=long_text.csv ifmt=csv ofmt='html(maxCell=150)' out=truncated.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table, enforcing streaming mode on input (`istream=true`) to reduce memory load for large files, and convert it to VOTable.",
        "response": "stilts tcopy in=huge_file.fits istream=true out=huge_file.vot",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"huge_file.fits\"\n"
    },
    {
        "prompt": "Read an ASCII file, defining the output maximum string size (`elsize`) for the ASCII handler based on content sampling.",
        "response": "stilts tcopy in=strings.txt ifmt=ascii out=strings.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to LaTeX, ensuring the output text uses a **serif font style**.",
        "response": "stilts tcopy in=document.vot ofmt='latex(fontstyle=serif)' out=serif_table.tex",
        "chat.jar": "failed",
        "error": "Error: No handler for output format latex(fontstyle=serif)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"fontstyle=serif\" - Options are standalone=true|false\n        (Failed setting \"fontstyle=serif\" - Options are standalone=true|false\n            (No method setFontstyle in uk.ac.starlink.table.formats.LatexTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Copy data from the synthetic loop scheme (`:loop:5000`) and save the index column as a FITS file.",
        "response": "stilts tcopy in=:loop:5000 out=index_list.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a VOTable document using the efficient BINARY serialization format and explicitly setting VOTable version 1.4.",
        "response": "stilts tcopy in=big_cat.fits ofmt='votable(format=BINARY,version=V14)' out=cat_binary_v14.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy data from a remote URL 'http://archive.org/data.vot' and save it locally as an ECSV file, streaming the remote input.",
        "response": "stilts tcopy in=http://archive.org/data.vot istream=true out=remote_streamed.ecsv",
        "chat.jar": "failed",
        "error": "Error: http://archive.org/data.vot\n"
    },
    {
        "prompt": "Convert an ASCII catalogue where columns are separated by multiple spaces (default ASCII behavior) into a standard FITS table.",
        "response": "stilts tcopy in=raw_data.txt ifmt=ascii out=raw_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read the output of a JDBC query and write the result to standard output in plain text format.",
        "response": "stilts tcopy in=':jdbc:mysql://localhost/db#SELECT ID, RA FROM objects' ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to a CSV file, ensuring that the output CSV uses a **semicolon** as the delimiter.",
        "response": "stilts tcopy in=input.vot out=semicolon_delim.csv ofmt='csv(delimiter=;)'",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy 'wide_table.fits' to FITS, forcing the use of the FITS-plus convention to preserve rich metadata in the primary HDU.",
        "response": "stilts tcopy in=wide_table.fits out=wide_table_plus.fits ofmt=fits-plus",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to FITS, explicitly setting **GZIP** compression for the final FITS file.",
        "response": "stilts tcopy in=input.parquet out=output.fits.gz ofmt='fits(compress=gzip)'",
        "chat.jar": "failed",
        "error": "Error: No handler for output format fits(compress=gzip)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"compress=gzip\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n        (Failed setting \"compress=gzip\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n            (No method setCompress in uk.ac.starlink.votable.UnifiedFitsTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read the first table extension (#1) from a multi-extension CDF file and convert it to VOTable.",
        "response": "stilts tcopy in=multi_ts.cdf#1 ifmt=cdf out=ts_ext1.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy an IPAC table to a CSV file, ensuring the CSV output does **not** include a header row.",
        "response": "stilts tcopy in=data.tbl ifmt=ipac ofmt='csv(header=false)' out=no_header.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a table of 100 rows using the loop scheme and convert it to a local ECSV file.",
        "response": "stilts tcopy in=:loop:100 out=loop_100.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to a Feather file.",
        "response": "stilts tcopy in=source.fits out=source.fea",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable and output it as a LaTeX table fragment (non-standalone document).",
        "response": "stilts tcopy in=small_data.vot ofmt='latex(standalone=false)' out=table_fragment.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CSV file that specifies a custom delimiter (`|`) and convert it to a FITS file.",
        "response": "stilts tcopy in=piped_data.txt ifmt='csv(delimiter=|)' out=piped_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to FITS, ensuring the data arrays are stored using **variable-length arrays** in the FITS format (fits-var).",
        "response": "stilts tcopy in=array_data.vot ofmt=fits-var out=array_data_var.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table from the MRT (Machine-Readable Table) format and output it as a VOTable.",
        "response": "stilts tcopy in=mrt_cat.txt ifmt=mrt out=mrt_cat.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a remote FITS file via HTTPS and output its content to the terminal using the simple text format.",
        "response": "stilts tcopy in=https://data.archive/big.fits ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local FITS file to a VOTable, ensuring the output is encoded in **UTF-16**.",
        "response": "stilts tcopy in=input.fits ofmt='votable(encoding=UTF-16)' out=utf16_output.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a PDS4 planetary data XML file and save its table data as a FITS file.",
        "response": "stilts tcopy in=pds_label.xml ifmt=pds4 out=pds_table.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a simulated star catalog of 5000 rows and convert it to a Parquet file.",
        "response": "stilts tcopy in=:skysim:5000 out=sim_stars.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ECSV file to a CSV file, explicitly suppressing the ECSV header to produce a clean CSV output.",
        "response": "stilts tcopy in=input.ecsv out=clean.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a FITS table to FITS, ensuring the output is written in the **column-oriented FITS** format (colfits).",
        "response": "stilts tcopy in=input.fits ofmt=colfits-plus out=output.colfits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a local VOTable and output it as a VOTable, but forcing the version to **VOTable 1.1**.",
        "response": "stilts tcopy in=input.vot ofmt='votable(version=V11)' out=v11_output.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC table to a LaTeX file.",
        "response": "stilts tcopy in=ipac.tbl ifmt=ipac ofmt=latex out=ipac_report.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a WDC (World Data Centre) format file and convert it to CSV.",
        "response": "stilts tcopy in=wdc_data.txt ifmt=wdc out=wdc_data.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a Parquet file to FITS, ensuring that **dictionary encoding** is disabled during the Parquet read process.",
        "response": "stilts tcopy in=input.parquet ifmt='parquet(usedict=false)' out=no_dict.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt: Unknown format parquet(usedict=false)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"usedict=false\" - Options are cachecols=true|false|null, nThread=<int>, tryUrl=true|false, votmeta=true|false|null, votable=<filename-or-url>\n        (Failed setting \"usedict=false\" - Options are cachecols=true|false|null, nThread=<int>, tryUrl=true|false, votmeta=true|false|null, votable=<filename-or-url>\n            (No method setUsedict in uk.ac.starlink.parquet.ParquetTableBuilder)))\nUsage: ifmt=<in-format>\n\n"
    },
    {
        "prompt": "Read the multi-extension FITS file 'data.fits' but specifically copy only the table extension named 'SPECTRA' to a new file.",
        "response": "stilts tcopy in=data.fits#SPECTRA out=spectra_only.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to VOTable, using the binary format but storing the binary data in an **external file** (href=true).",
        "response": "stilts tcopy in=input.fits ofmt='votable(format=BINARY,href=true)' out=external_data.vot",
        "chat.jar": "failed",
        "error": "Error: No handler for output format votable(format=BINARY,href=true)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n        (Failed setting \"href=true\" - Options are encoding=UTF-8|UTF-16|..., date=true|false, format=TABLEDATA|BINARY|BINARY2|FITS, inline=true|false, xMLDeclaration=<String>, version=V10|V11|V12|V13|V14|V15, compact=true|false|null, resourceType=results|meta, writeSchemaLocation=true|false, stringElementSizer=NOCALC|READ|SAMPLE|FIXED2|ERROR_IF_USED|ASSERT_UNUSED\n            (No method setHref in uk.ac.starlink.votable.VOTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Copy an ASCII table, explicitly telling the parser to skip type checking and treat all columns as strings (notypes).",
        "response": "stilts tcopy in=mixed_data.txt ifmt='ascii(notypes=int;float;double)' out=strings_only.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a Parquet file and output it as a VOTable, ensuring the VOTable version is **1.5**.",
        "response": "stilts tcopy in=data.parquet ofmt='votable(version=V15)' out=v15_output.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to HTML output, specifying that long cells should be truncated at 500 characters.",
        "response": "stilts tcopy in=long_fields.fits ofmt='html(maxCell=500)' out=truncated_html.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from a system command pipeline that outputs VOTable data, and save it as FITS.",
        "response": "cat pipeline_out.vot | stilts tcopy in=- ifmt=votable out=piped_votable.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a FITS table to ECSV, specifying that the ECSV file should use a **tab delimiter**.",
        "response": "stilts tcopy in=input.fits ofmt='ecsv(delimiter=tab)' out=tab_delimited.ecsv",
        "chat.jar": "failed",
        "error": "Error: No handler for output format ecsv(delimiter=tab)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"delimiter=tab\" - Options are delimiter=comma|space\n        (Failed setting \"delimiter=tab\" - Options are delimiter=comma|space\n            (java.lang.reflect.InvocationTargetException\n                (Illegal delimiter \"tab\"))))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read a table using the generic test scheme with variable array columns (:test:10,v) and save it as a VOTable.",
        "response": "stilts tcopy in=':test:10,v' out=variable_arrays.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local FITS file to a VOTable, ensuring the output document does **not** include the current date stamp comment.",
        "response": "stilts tcopy in=input.fits ofmt='votable(date=false)' out=undated.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable to a CSV file, setting the output cell width limit to 100 characters.",
        "response": "stilts tcopy in=input.vot ofmt='csv(maxCell=100)' out=width_limited.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a gzipped FITS file from a URL and save it locally as a VOTable.",
        "response": "stilts tcopy in=http://archive.org/data.fits.gz out=remote_data.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to FITS, forcing the output to FITS-basic (stripping VOTable metadata from Primary HDU).",
        "response": "stilts tcopy in=input.fits ofmt=fits-basic out=basic.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file, explicitly using only the first 500 rows to determine column types (maxSample).",
        "response": "stilts tcopy in=big_ascii.txt ifmt='ascii(maxSample=500)' out=sampled_types.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC file to FITS, guaranteeing that table parameters are included in the output FITS headers.",
        "response": "stilts tcopy in=input.tbl ifmt=ipac out=output.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table to a text file, ensuring table parameters are **not** output.",
        "response": "stilts tcopy in=input.fits ofmt='text(params=false)' out=no_params.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to a VOTable, ensuring the XML uses **TABLEDATA** serialization.",
        "response": "stilts tcopy in=input.fits ofmt='votable(format=TABLEDATA)' out=tabledata.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read the table extension identified by the name 'GALAXY_CAT' from a multi-extension FITS file 'survey.fits'.",
        "response": "stilts tcopy in=survey.fits#GALAXY_CAT out=galaxy_only.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy data from the HAPI scheme for GRACE_A_MAG and save it as a local FITS file.",
        "response": "stilts tcopy in=':hapi:https://vires.services/hapi;GRACE_A_MAG;start=2009-01-01;stop=2009-01-02;include=header' out=hapi_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to ECSV, explicitly setting `colcheck=FAIL` to enforce strict consistency between header and data columns.",
        "response": "stilts tcopy in=data.csv ifmt='ecsv(colcheck=FAIL)' out=strict.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CSV file where the header guessing should be explicitly forced to assume the **first line is a header**.",
        "response": "stilts tcopy in=header_guess.csv ifmt='csv(header=true)' out=forced_header.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local FITS table to a VOTable, reading the FITS file in **streaming mode** to reduce memory consumption.",
        "response": "stilts tcopy in=huge_data.fits istream=true out=huge_streamed.vot",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"huge_data.fits\"\n"
    },
    {
        "prompt": "Copy a VOTable to a Parquet file, explicitly setting the compression type to **ZSTD**.",
        "response": "stilts tcopy in=input.vot ofmt='parquet(compression=zstd)' out=zstd_compressed.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a PDS4 file and save it to standard output in simple ASCII format.",
        "response": "stilts tcopy in=mars_mission.xml ifmt=pds4 ofmt=ascii out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to LaTeX output, ensuring the output uses a **serif font** for rendering text.",
        "response": "stilts tcopy in=input.fits ofmt='latex(fontstyle=serif)' out=serif_output.tex",
        "chat.jar": "failed",
        "error": "Error: No handler for output format latex(fontstyle=serif)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"fontstyle=serif\" - Options are standalone=true|false\n        (Failed setting \"fontstyle=serif\" - Options are standalone=true|false\n            (No method setFontstyle in uk.ac.starlink.table.formats.LatexTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read an ECSV file and convert it to FITS, ensuring the ECSV format version 1.0 is strictly enforced during reading.",
        "response": "stilts tcopy in=ecsv_v10.ecsv ifmt='ecsv(version=V10)' out=ecsv_v10_out.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter ifmt: Unknown format ecsv(version=V10)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"version=V10\" - Options are header=<filename-or-url>, colcheck=IGNORE|WARN|FAIL\n        (Failed setting \"version=V10\" - Options are header=<filename-or-url>, colcheck=IGNORE|WARN|FAIL\n            (No method setVersion in uk.ac.starlink.ecsv.EcsvTableBuilder)))\nUsage: ifmt=<in-format>\n\n"
    },
    {
        "prompt": "Copy a table from a loop scheme with step 0.5 and save it as a CSV file.",
        "response": "stilts tcopy in=:loop:1,10,0.5 out=half_step_loop.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to FITS, using VOTable version 1.4 metadata in the FITS Primary HDU (fits(primary=votable1.4)).",
        "response": "stilts tcopy in=input.vot out=phdu_v14.fits ofmt='fits(primary=votable1.4)'",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CSV file where numeric columns should be forced to 64-bit precision (long and double) by ignoring 32-bit types (notypes).",
        "response": "stilts tcopy in=numeric_input.csv ifmt='csv(notypes=int;float)' out=high_precision.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a FITS table to FITS, ensuring that **no Primary HDU** is written, which is useful when appending to an existing FITS chain.",
        "response": "stilts tcopy in=input.fits ofmt='fits(primary=none)' out=extension_only.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ASCII table to IPAC format, limiting maximum parameter length to 500 characters.",
        "response": "stilts tcopy in=ascii_meta.txt ifmt=ascii ofmt='ipac(maxParam=500)' out=ipac_limited.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the generic scheme `:class:` pointing to a simple LoopTable and save the result as FITS.",
        "response": "stilts tcopy in=:class:uk.ac.starlink.table.LoopTableScheme:200 out=class_test.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Feather file to a Parquet file.",
        "response": "stilts tcopy in=feather.fea out=feather_to_parquet.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy FITS data to VOTable, requesting the BINARY2 serialization and explicitly setting version 1.3.",
        "response": "stilts tcopy in=input.fits ofmt='votable(format=BINARY2,version=V13)' out=binary2_v13.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a large CSV file, piping the output of a command that decompresses it, and convert it to FITS.",
        "response": "gunzip -c archive.csv.gz | stilts tcopy in=- ifmt=csv out=decompressed.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert an IPAC table to a CSV file, ensuring that the output CSV uses a **tab delimiter**.",
        "response": "stilts tcopy in=input.tbl ifmt=ipac ofmt='csv(delimiter=tab)' out=tab_delimited.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table from a synthetic strange attractor scheme (Clifford) and output it as a FITS file.",
        "response": "stilts tcopy in=:attractor:1e5,clifford out=clifford_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable and output it as a LaTeX table, specifying that the font weight should be **bold**.",
        "response": "stilts tcopy in=input.vot ofmt='latex(fontweight=bold)' out=bold_report.tex",
        "chat.jar": "failed",
        "error": "Error: No handler for output format latex(fontweight=bold)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"fontweight=bold\" - Options are standalone=true|false\n        (Failed setting \"fontweight=bold\" - Options are standalone=true|false\n            (No method setFontweight in uk.ac.starlink.table.formats.LatexTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert a FITS file to FITS, but force the output to be compressed using **Unix compress** format (not GZIP).",
        "response": "stilts tcopy in=input.fits out=output.fits.Z",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for output.fits.Z\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read a PDS4 file, but explicitly instruct the reader to **ignore** the initial magic number check.",
        "response": "stilts tcopy in=risky.xml ifmt='pds4(checkmagic=false)' out=forced_pds4.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an ECSV file to FITS, ensuring the output FITS file is written using **FITS-basic** format.",
        "response": "stilts tcopy in=input.ecsv ofmt=fits-basic out=basic_ecsv.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it as a text file, ensuring maximum cell width is 80 characters.",
        "response": "stilts tcopy in=input.fits ofmt='text(maxCell=80)' out=narrow_text.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to a VOTable, ensuring XML output encoding is **ISO-8859-1**.",
        "response": "stilts tcopy in=input.fits ofmt='votable(encoding=ISO-8859-1)' out=iso8859_vot.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table from a synthetic scheme with exactly 1000 columns (:test:1,k) and save it as a CSV file.",
        "response": "stilts tcopy in=':test:1,k' out=wide_csv.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a remote VOTable from a URL that uses the obsolete MySpace protocol.",
        "response": "stilts tcopy in=myspace:/remote/data.vot out=local_myspace.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to Parquet, using **LZ4_RAW** compression.",
        "response": "stilts tcopy in=input.fits ofmt='parquet(compression=lz4_raw)' out=lz4_data.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file, forcing all numbers to be detected as floating point (double) by excluding integer types.",
        "response": "stilts tcopy in=int_float.txt ifmt='ascii(notypes=int;long)' out=forced_float.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from the loop scheme and output it as an IPAC file.",
        "response": "stilts tcopy in=:loop:50 out=loop_ipac.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to FITS, ensuring the FITS output uses the Primary HDU for VOTable metadata (fits(primary=votable)).",
        "response": "stilts tcopy in=input.vot ofmt='fits(primary=votable)' out=fits_phdu.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CDF file, selecting the table extension by name 'MAG_FIELD', and save it as FITS.",
        "response": "stilts tcopy in=data.cdf#MAG_FIELD ifmt=cdf out=mag_field.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to Feather, using the Parquet reader in **parallel mode** with 4 threads.",
        "response": "stilts tcopy in=input.parquet ifmt='parquet(nThread=4)' out=parallel_read.fea",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a FITS file and output it to standard output as a VOTable with **BINARY2** serialization.",
        "response": "stilts tcopy in=input.fits ofmt='votable(format=BINARY2)' out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from the WDC format and save it as FITS.",
        "response": "stilts tcopy in=wdc_flux.txt ifmt=wdc out=wdc_flux.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a CSV file to LaTeX, specifying that the output should be a **standalone document**.",
        "response": "stilts tcopy in=data.csv ifmt=csv ofmt='latex(standalone=true)' out=standalone_report.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it using the **obsolete Mirage format**.",
        "response": "stilts tcopy in=input.fits out=output.mirage ofmt=mirage",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file where comment lines start with '!' and save it as a FITS file.",
        "response": "stilts tcopy in=commented.txt ifmt=ascii out=commented.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to VOTable, ensuring that the VOTable output explicitly uses version **1.2**.",
        "response": "stilts tcopy in=input.fits ofmt='votable(version=V12)' out=v12_output.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ECSV file, forcing validation to ignore minor header inconsistencies (colcheck=WARN, which is default).",
        "response": "stilts tcopy in=risky.ecsv ifmt='ecsv(colcheck=WARN)' out=risky.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table to a text file, setting the sampled rows for width determination to 1000.",
        "response": "stilts tcopy in=huge.fits ofmt='text(sampledRows=1000)' out=sampled_width.txt",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a Parquet file to FITS, forcing the output to FITS-plus.",
        "response": "stilts tcopy in=input.parquet ofmt=fits-plus out=parquet_plus.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table using the `:test:` scheme with integer and string scalar columns and save it as CSV.",
        "response": "stilts tcopy in=':test:5,is' out=test_is.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable to a CSV file, ensuring that the output string values are **not** quoted (default behavior).",
        "response": "stilts tcopy in=input.vot ofmt=csv out=unquoted.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to an HTML table, specifying that the output should be just a table fragment (standalone=false).",
        "response": "stilts tcopy in=data.fits ofmt='html(standalone=false)' out=data_fragment.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an IPAC table and output it as a VOTable with BINARY serialization.",
        "response": "stilts tcopy in=input.tbl ifmt=ipac ofmt='votable(format=BINARY)' out=ipac_binary.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it as a FITS file, ensuring the output uses **BZIP2** compression.",
        "response": "stilts tcopy in=input.fits out=output.fits.bz2",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for output.fits.bz2\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Convert an ECSV file to FITS, supplying an **external YAML header** file for metadata overriding.",
        "response": "stilts tcopy in=plain.csv ifmt='ecsv(header=external.yaml)' out=with_yaml_meta.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a CSV file and convert it to FITS, explicitly specifying that **no rows are sampled** to determine column types (fastest metadata acquisition).",
        "response": "stilts tcopy in=known_types.csv ifmt='csv(maxSample=0)' out=fixed_types.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy data from the synthetic attractor scheme (Rampe) and save it as a local FITS file.",
        "response": "stilts tcopy in=:attractor:1000,rampe out=rampe_data.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a local VOTable to FITS, ensuring the FITS uses VOTable version 1.3 metadata in the Primary HDU.",
        "response": "stilts tcopy in=input.vot ofmt='fits(primary=votable1.3)' out=phdu_v13.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII file, excluding only `date` and `time` related column types from inference.",
        "response": "stilts tcopy in=time_series.txt ifmt='ascii(notypes=date;hms;dms)' out=numeric_ts.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table to Parquet, setting key-value metadata in the footer: 'VERSION:1.0' and 'SOURCE:MAST'.",
        "response": "stilts tcopy in=data.fits ofmt='parquet(kvmap=VERSION:1.0;SOURCE:MAST)' out=kv_metadata.parquet",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a multi-table VOTable and output all tables as a single FITS file, implicitly selecting the first table from the VOTable.",
        "response": "stilts tcopy in=multi_table.vot out=first_table.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to VOTable, ensuring the XML uses **VOTable version 1.0**.",
        "response": "stilts tcopy in=old_cat.fits ofmt='votable(version=V10)' out=old_cat_v10.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table from the loop scheme and output the resulting TST format to the terminal.",
        "response": "stilts tcopy in=:loop:20 ofmt=tst out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a PDS4 planetary data XML file, explicitly focusing on observational files only.",
        "response": "stilts tcopy in=pds_mission.xml ifmt='pds4(observational=true)' out=obs_pds4.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert an IPAC table to FITS, ensuring the IPAC parameters are suppressed during output.",
        "response": "stilts tcopy in=input.tbl ifmt=ipac ofmt='ipac(params=false)' out=no_ipac_params.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a FITS table to CSV, but explicitly set the output cell width limit to 20 characters.",
        "response": "stilts tcopy in=long_values.fits ofmt='csv(maxCell=20)' out=truncated.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from the HAPI scheme, ensuring output is converted to a VOTable document.",
        "response": "stilts tcopy in=':hapi:https://vires.services/hapi;GRACE_A_MAG;start=2009-01-01;stop=2009-01-02;include=header' out=hapi_out.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS table to VOTable, ensuring that the XML output version is **1.3**.",
        "response": "stilts tcopy in=input.fits ofmt='votable(version=V13)' out=v13_strict.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read an ASCII table, saving the output in IPAC format.",
        "response": "stilts tcopy in=data.txt ifmt=ascii out=data.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output it as a FITS file, ensuring **LZ4_RAW** compression is used.",
        "response": "stilts tcopy in=input.fits out=output.fits.lz4 ofmt='fits(compress=lz4)'",
        "chat.jar": "failed",
        "error": "Error: No handler for output format fits(compress=lz4)\n    (Handler configuration failed: uk.ac.starlink.util.LoadException: Failed setting \"compress=lz4\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n        (Failed setting \"compress=lz4\" - Options are primary=basic|votable[n.n]|none, var=FALSE|TRUE|P|Q, col=true|false, storagePolicy=PREFER_MEMORY|PREFER_DISK|SIDEWAYS|DISCARD|ADAPTIVE, formatName=<String>, allowSignedByte=true|false, wide=<WideFits>, date=true|false, allowZeroLengthString=true|false, padCharacter=<byte>\n            (No method setCompress in uk.ac.starlink.votable.UnifiedFitsTableWriter)))\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n"
    },
    {
        "prompt": "Read an MRT file and convert it to CSV format.",
        "response": "stilts tcopy in=input.mrt ifmt=mrt out=output.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a VOTable to a CSV file, explicitly allowing the use of double quotes for string fields (default CSV quoting).",
        "response": "stilts tcopy in=input.vot out=quoted.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a FITS file to an ECSV file, forcing the output delimiter to a comma.",
        "response": "stilts tcopy in=input.fits ofmt='ecsv(delimiter=comma)' out=comma.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a table and output the resulting human-readable text to standard error (using `stilts -stderr`).",
        "response": "stilts -stderr - tcopy in=input.fits ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read a table from the generic scheme with fixed length array columns (:test:10,f) and save it as a FITS file.",
        "response": "stilts tcopy in=':test:10,f' out=fixed_array.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Convert a VOTable to FITS, ensuring column metadata is preserved using the **FITS-plus** convention.",
        "response": "stilts tcopy in=input.vot ofmt=fits-plus out=metadata_rich.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Copy a remote FITS file from an FTP URL and save it locally.",
        "response": "stilts tcopy in=ftp://archive.org/public/data.fits out=local_ftp.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Read data from standard input (FITS format) and convert it to a Feather file.",
        "response": "cat input.fits | stilts tcopy in=- ifmt=fits out=piped_feather.fea",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Convert a CSV file to HTML output, setting the max cell width to 100 characters.",
        "response": "stilts tcopy in=input.csv ifmt=csv ofmt='html(maxCell=100)' out=limited.html",
        "chat.jar": "executed successfully"
    }
]