[
    {
        "prompt": "Create a default-resolution FITS MOC from the sky positions in `survey_catalog.fits`.",
        "response": "stilts pixfoot in=survey_catalog.fits out=survey_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for my CSV file `targets.csv`, assuming RA and Dec columns are named 'RA_DEG' and 'DEC_DEG'. Save it as a JSON MOC.",
        "response": "stilts pixfoot in=targets.csv ifmt=csv ra=RA_DEG dec=DEC_DEG mocfmt=json out=targets_coverage.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a low-resolution MOC (order 5) for all the sources in `deep_field.vot`. Please output it in ASCII format.",
        "response": "stilts pixfoot in=deep_field.vot order=5 mocfmt=ascii out=deep_field_lowres.moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How can I generate the footprint for circular regions of 30 arcseconds around each object in my `clusters_list.fits` catalog?",
        "response": "stilts pixfoot in=clusters_list.fits radius=30./3600. out=cluster_regions.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My catalog `old_survey.dat` is in ASCII format and uses B1950 coordinates (`RA_1950`, `DEC_1950`). Can I still generate a J2000 MOC from it?",
        "response": "stilts pixfoot in=old_survey.dat ifmt=ascii icmd='addskycoords fk4 fk5 RA_1950 DEC_1950 RA_J2000 DEC_J2000' ra=RA_J2000 dec=DEC_J2000 out=old_survey_j2000_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a high-resolution MOC (order 15) from a simulated all-sky catalog of 100,000 stars and output it to standard output.",
        "response": "stilts pixfoot in=:skysim:100000 ra=ra dec=dec order=15 out=-",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC from my `bright_stars.vot` table, but only for stars with a V magnitude brighter than 10.",
        "response": "stilts pixfoot in=bright_stars.vot icmd='select VMAG < 10' out=vmag_lt_10.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select VMAG < 10\n\nUsage: select <expr>\n    (Unused arguments: '<' '10'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have a catalog where each object has a positional error `pos_err_arcsec`. How do I create a MOC representing the 3-sigma error circles?",
        "response": "stilts pixfoot in=catalog_with_errors.fits radius='pos_err_arcsec * 3 / 3600.' out=3sigma_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Convert the galactic coordinates `GLON`, `GLAT` in `bulge_stars.fits` to ICRS and then create a MOC at order 9.",
        "response": "stilts pixfoot in=bulge_stars.fits icmd='addskycoords galactic icrs GLON GLAT RA_ICRS DEC_ICRS' ra=RA_ICRS dec=DEC_ICRS order=9 out=bulge_icrs_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What's the command to get a JSON MOC for the first 1000 objects in my `large_survey.colfits` file?",
        "response": "stilts pixfoot in=large_survey.colfits icmd='head 1000' mocfmt=json out=survey_sample.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC from a piped ASCII stream. The RA is column 3 and Dec is column 4.",
        "response": "cat data.txt | stilts pixfoot in=- ifmt=ascii ra=$3 dec=$4 out=piped_footprint.moc.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC representing a 1-degree radius around every source in `radio_sources.fits`.",
        "response": "stilts pixfoot in=radio_sources.fits radius=1.0 out=radio_source_areas.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint of all objects classified as 'GALAXY' in `object_list.ecsv`.",
        "response": "stilts pixfoot in=object_list.ecsv ifmt=ecsv icmd='select CLASS==\"GALAXY\"' out=galaxy_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a very high-resolution MOC (order 16) for a small patch of sky defined by `RA > 180 AND RA < 181 AND DEC > 20 AND DEC < 21`.",
        "response": "stilts pixfoot in=all_sky.fits icmd='select RA > 180 && RA < 181 && DEC > 20 && DEC < 21' order=16 out=small_patch_hires.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '180' '&&' 'RA' '<' '181' '&&' 'DEC' '>' '20' '&&' 'DEC' '<' '21'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select RA > 180 && RA < 181 && DEC > 20 && DEC < 21\n\nUsage: select <expr>\n    (Unused arguments: '>' '180' '&&' 'RA' '<' '181' '&&' 'DEC' '>' '20' '&&' 'DEC' '<' '21'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How can I create an ASCII MOC at order 7 from `instrument_fov.dat`?",
        "response": "stilts pixfoot in=instrument_fov.dat ifmt=ascii order=7 mocfmt=ascii out=instrument_coverage.moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My RA coordinates are in hours in column `RA_HMS`. Convert them to degrees before creating the footprint.",
        "response": "stilts pixfoot in=my_catalog.fits ra='hmsToDegrees(RA_HMS)' dec=DEC out=hms_converted_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a footprint for every 100th object in `dense_catalog.fits` to get a quick idea of the coverage.",
        "response": "stilts pixfoot in=dense_catalog.fits icmd='every 100' out=sparse_coverage_map.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a MOC for a table with a varying search radius, specified by the `SEARCH_RAD_DEG` column.",
        "response": "stilts pixfoot in=variable_radius.fits radius=SEARCH_RAD_DEG out=dynamic_radius_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC from a simulated catalog of 500,000 stars.",
        "response": "stilts pixfoot in=:skysim:500000 ra=ra dec=dec mocfmt=json out=simulated_sky.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What is the command to create a MOC from `data.parquet` at order 11?",
        "response": "stilts pixfoot in=data.parquet order=11 out=parquet_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the footprint for all sources where `FLAG` bit 3 is set.",
        "response": "stilts pixfoot in=flagged_sources.fits icmd='select hasBit(FLAG,3)' out=flagged_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from my `pds4_data.xml` file, which is in PDS4 format.",
        "response": "stilts pixfoot in=pds4_data.xml ifmt=pds4 out=pds4_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How to create a MOC for circles whose radius is `sqrt(AREA/PI)` from the `AREA` column?",
        "response": "stilts pixfoot in=source_areas.fits radius='sqrt(AREA/PI)' out=area_derived_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC at order 4 for a simulated catalog of 1000 stars and display it on the terminal.",
        "response": "stilts pixfoot in=:skysim:1000 ra=ra dec=dec order=4 mocfmt=ascii out=-",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC where the radius for each object is 5 times its `pos_error` in arcsec.",
        "response": "stilts pixfoot in=err_cat.fits radius='5 * pos_error / 3600.0' out=scaled_error_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My catalog has ecliptic coordinates `ELON` and `ELAT`. How do I generate a standard ICRS MOC?",
        "response": "stilts pixfoot in=ecliptic_cat.fits icmd='addskycoords ecliptic icrs ELON ELAT RA_ICRS DEC_ICRS' ra=RA_ICRS dec=DEC_ICRS out=ecliptic_to_icrs.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC from a `gbin` file at order 12.",
        "response": "stilts pixfoot in=mydata.gbin ifmt=gbin order=12 out=gbin_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a very coarse MOC (order 2) of my all-sky survey.",
        "response": "stilts pixfoot in=all_sky_survey.fits order=2 out=coarse_allsky.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a FITS MOC for objects with `REDSHIFT > 2` from my quasar catalog.",
        "response": "stilts pixfoot in=quasar_catalog.fits icmd='select REDSHIFT > 2' out=high_z_qso.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select REDSHIFT > 2\n\nUsage: select <expr>\n    (Unused arguments: '>' '2'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How to generate a MOC with a fixed 1 arcminute radius for every point in `points.csv`?",
        "response": "stilts pixfoot in=points.csv ifmt=csv radius=1.0/60.0 mocfmt=fits out=arcmin_radius_points.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My coordinates are in separate columns for degrees, minutes, and seconds. Can I combine them for `pixfoot`?",
        "response": "stilts pixfoot in=dms_coords.fits icmd='addcol RA_DEG dmsToDegrees(RA_D,RA_M,RA_S)' icmd='addcol DEC_DEG dmsToDegrees(DEC_D,DEC_M,DEC_S)' ra=RA_DEG dec=DEC_DEG out=combined_dms.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC from `ipac_table.tbl` at order 9.",
        "response": "stilts pixfoot in=ipac_table.tbl ifmt=ipac order=9 out=ipac_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint for every source that is NOT flagged as an artifact (`ARTIFACT_FLAG == 0`).",
        "response": "stilts pixfoot in=sources.fits icmd='select ARTIFACT_FLAG == 0' out=clean_sources.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '==' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ARTIFACT_FLAG == 0\n\nUsage: select <expr>\n    (Unused arguments: '==' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC with a radius of 0.1 degrees for the last 500 entries in `event_stream.fits`.",
        "response": "stilts pixfoot in=event_stream.fits icmd='tail 500' radius=0.1 out=last_500_events.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC for a 2-degree radius around a small list of superclusters.",
        "response": "stilts pixfoot in=superclusters.vot radius=2.0 mocfmt=json out=supercluster_areas.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My input table `survey_radians.fits` has coordinates in radians. How do I use `pixfoot`?",
        "response": "stilts pixfoot in=survey_radians.fits ra='radiansToDegrees(RA_RAD)' dec='radiansToDegrees(DEC_RAD)' out=radians_converted.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the positions in `mrt_table.txt`, which is in MRT format.",
        "response": "stilts pixfoot in=mrt_table.txt ifmt=mrt out=mrt_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the footprint for all objects whose name starts with 'NGC'.",
        "response": "stilts pixfoot in=object_names.fits icmd='select startsWith(NAME, \"NGC\")' out=ngc_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: select startsWith(NAME, \"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have an `image_centers.fits` table. Generate a MOC for a 0.25 degree radius around each center point, at order 8.",
        "response": "stilts pixfoot in=image_centers.fits radius=0.25 order=8 out=image_footprints.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What is the command to create an order-10 ASCII MOC from a simulated catalog?",
        "response": "stilts pixfoot in=:skysim:10000 ra=ra dec=dec order=10 mocfmt=ascii out=sim_ascii.moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for sources with a signal-to-noise ratio > 10.",
        "response": "stilts pixfoot in=detections.fits icmd='select SNR > 10' out=high_snr_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select SNR > 10\n\nUsage: select <expr>\n    (Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How do I specify a radius of 2.5 arcminutes for my MOC generation?",
        "response": "stilts pixfoot in=my_table.fits radius=2.5/60.0 out=my_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My table has supergalactic coordinates `SGL`, `SGB`. Create a MOC.",
        "response": "stilts pixfoot in=supergalactic_data.fits icmd='addskycoords supergalactic icrs SGL SGB RA_ICRS DEC_ICRS' ra=RA_ICRS dec=DEC_ICRS out=supergalactic_to_icrs.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC from every 10th row of a 1 million star simulation.",
        "response": "stilts pixfoot in=:skysim:1e6 icmd='every 10' ra=ra dec=dec mocfmt=json out=sim_subsample.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a footprint for a feather file `data.feather`.",
        "response": "stilts pixfoot in=data.feather order=9 out=feather_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need to generate a MOC for all objects, but the `RADIUS_COL` is in arcseconds. How do I use it?",
        "response": "stilts pixfoot in=data.fits radius='RADIUS_COL/3600.0' out=arcsec_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for all entries in a catalog except those at the celestial poles (`abs(DEC) > 89`).",
        "response": "stilts pixfoot in=allsky.fits icmd='select abs(DEC) <= 89' out=no_poles_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<=' '89'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(DEC) <= 89\n\nUsage: select <expr>\n    (Unused arguments: '<=' '89'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What's the simplest `pixfoot` command to check if my table `test.fits` has readable coordinates?",
        "response": "stilts pixfoot in=test.fits omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a FITS MOC from `catalog.dat`, reading it as a stream to save memory.",
        "response": "stilts pixfoot in=catalog.dat ifmt=ascii istream=true out=streamed_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"catalog.dat\"\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a footprint of the northern celestial hemisphere from a simulated all-sky catalog.",
        "response": "stilts pixfoot in=:skysim:1e6 icmd='select dec>=0' ra=ra dec=dec out=north_hemi.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a very fine-grained MOC (order 18) for a tiny area around a specific target.",
        "response": "stilts pixfoot in=target_area.fits order=18 out=target_fine_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My catalog has a `COVERAGE` column in degrees-squared. Create a MOC using a circular approximation.",
        "response": "stilts pixfoot in=coverage_areas.fits radius='sqrt(COVERAGE/PI)' out=coverage_approx.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Take a random sample of 5000 objects from `big_survey.fits` and generate a MOC from them.",
        "response": "stilts pixfoot in=big_survey.fits icmd='random 5000' out=big_survey_sample.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '5000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 5000\n\nUsage: random\n    (Unused arguments: '5000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What is the maximum order `pixfoot` supports?",
        "response": "The `order` parameter for `pixfoot` supports values up to 29.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC at order 0. What does that mean?",
        "response": "stilts pixfoot in=one_point.fits order=0 out=order0.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC from the positions in a `tst` file.",
        "response": "stilts pixfoot in=legacy_data.tst ifmt=tst mocfmt=json out=legacy_coverage.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I want the footprint for sources that are not null in the `FLUX` column.",
        "response": "stilts pixfoot in=flux_data.fits icmd='select !NULL_FLUX' out=valid_flux_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC at order 13, which is the default.",
        "response": "stilts pixfoot in=my_sources.fits order=13 out=my_sources_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a footprint for all objects that have a proper motion greater than 1000 mas/yr.",
        "response": "stilts pixfoot in=proper_motions.fits icmd='select hypot(PMRA,PMDEC) > 1000' out=high_pm_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select hypot(PMRA,PMDEC) > 1000\n\nUsage: select <expr>\n    (Unused arguments: '>' '1000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How do I create a MOC from an ECSV file and output it in ASCII format?",
        "response": "stilts pixfoot in=my_cat.ecsv ifmt=ecsv mocfmt=ascii out=my_cat_coverage.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the first half of my catalog.",
        "response": "stilts pixfoot in=full_cat.fits icmd='select $0 <= ($nrow/2)' out=first_half.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<=' '($nrow/2)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select $0 <= ($nrow/2)\n\nUsage: select <expr>\n    (Unused arguments: '<=' '($nrow/2)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a footprint for sources where the `ID` string contains 'XMM'.",
        "response": "stilts pixfoot in=ids.fits icmd='select contains(ID, \"XMM\")' out=xmm_sources.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'XMM' ')'\n\nCommand was: select contains(ID, \"XMM\")\n\nUsage: select <expr>\n    (Unused arguments: 'XMM' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My file has sexagesimal coordinates. Create a MOC.",
        "response": "stilts pixfoot in=sexagesimal.txt ifmt=ascii ra='hmsToDegrees(RA_SEX)' dec='dmsToDegrees(DEC_SEX)' out=sexagesimal_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from a simulated catalog where the radius of each point is a random number between 0 and 0.1 degrees.",
        "response": "stilts pixfoot in=:skysim:10000 icmd='addcol rand_rad random()*0.1' ra=ra dec=dec radius=rand_rad out=random_radius_sim.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC at order 14.",
        "response": "stilts pixfoot in=data.fits order=14 mocfmt=json out=data_o14.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a MOC representing the coverage of a 5 arcsec radius around every source.",
        "response": "stilts pixfoot in=source_list.fits radius=5.0/3600.0 out=coverage_5arcsec.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter my table to keep only rows with `GOOD_QUALITY=true`, then generate the footprint.",
        "response": "stilts pixfoot in=quality.fits icmd='select GOOD_QUALITY' out=good_quality_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for the galactic anti-center region from a simulated all-sky catalog.",
        "response": "stilts pixfoot in=:skysim:1e6 icmd='addskycoords icrs galactic ra dec l b' icmd='select skyDistance(l,b,180,0)<10' ra=ra dec=dec out=anti_center.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC with a 0.01 degree radius for each point.",
        "response": "stilts pixfoot in=points.vot radius=0.01 mocfmt=ascii out=points_coverage.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How do I make a MOC from the tail end (last 10%) of my catalog?",
        "response": "stilts pixfoot in=long_catalog.fits icmd='select $0 > ($nrow * 0.9)' out=tail_end_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '($nrow' '*' '0.9)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select $0 > ($nrow * 0.9)\n\nUsage: select <expr>\n    (Unused arguments: '>' '($nrow' '*' '0.9)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the MOC of all objects between declination -10 and +10.",
        "response": "stilts pixfoot in=all_sky.fits icmd='select DEC > -10 && DEC < 10' out=equatorial_strip.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '-10' '&&' 'DEC' '<' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select DEC > -10 && DEC < 10\n\nUsage: select <expr>\n    (Unused arguments: '>' '-10' '&&' 'DEC' '<' '10'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My radius is in arcminutes in the `RAD_MIN` column. How do I use that?",
        "response": "stilts pixfoot in=data.fits radius='RAD_MIN/60.0' out=arcmin_radius_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from every 1000th point of a 2 million star simulation.",
        "response": "stilts pixfoot in=:skysim:2e6 icmd='every 1000' ra=ra dec=dec out=sim_2M_sparse.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need to get the footprint from `pointing_log.fits`, but the coordinates are named `L` and `B`.",
        "response": "stilts pixfoot in=pointing_log.fits ra=L dec=B out=log_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC for the footprint of objects in `object_cat.fits` that have a non-zero parallax.",
        "response": "stilts pixfoot in=object_cat.fits icmd='select PARALLAX != 0' mocfmt=json out=parallax_objects.moc.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PARALLAX != 0\n\nUsage: select <expr>\n    (Unused arguments: '!=' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What's the command to create an ASCII MOC for circles of 15 arcsec around each source in `source_list.txt`?",
        "response": "stilts pixfoot in=source_list.txt ifmt=ascii radius=15.0/3600.0 mocfmt=ascii out=source_circles.moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have `file_a.fits` and `file_b.fits`. Can you create a single MOC that covers the combined sky area of both?",
        "response": "stilts tcat in=file_a.fits in=file_b.fits | stilts pixfoot in=- out=combined_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How do I get a MOC for all sources in `survey.fits` that lie on a specific HEALPix pixel, say index 1234 at order 5?",
        "response": "stilts pixfoot in=survey.fits icmd='select healpixRingIndex(5,RA,DEC)==1234' order=10 out=single_pixel_sources.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My `radius` column is in radians. How do I make a MOC from it?",
        "response": "stilts pixfoot in=radian_radii.fits radius='radiansToDegrees(radius)' out=radian_radius_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC at order 6 from the first 50 rows of my table.",
        "response": "stilts pixfoot in=my_table.fits icmd='head 50' order=6 out=first50_o6.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Please generate a MOC for all sources in `mycat.vot` with a circular footprint of 0.5 degrees.",
        "response": "stilts pixfoot in=mycat.vot radius=0.5 out=half_degree_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My coordinates are `ALPHA` and `DELTA`. Create a MOC for them from `star_catalog.fits`.",
        "response": "stilts pixfoot in=star_catalog.fits ra=ALPHA dec=DELTA out=alpha_delta_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC for objects where `PROBABILITY > 0.99`.",
        "response": "stilts pixfoot in=candidates.fits icmd='select PROBABILITY > 0.99' mocfmt=json out=high_prob_candidates.moc.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.99'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PROBABILITY > 0.99\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.99'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How to create a MOC from an ASCII file where RA and Dec are columns 5 and 6?",
        "response": "stilts pixfoot in=mydata.txt ifmt=ascii ra=$5 dec=$6 out=mydata_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a very high resolution MOC (order 20) for a 1 arcsecond radius around each point in `calibrators.fits`.",
        "response": "stilts pixfoot in=calibrators.fits radius=1.0/3600.0 order=20 out=calibrator_regions_hires.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What is the smallest MOC order I can use?",
        "response": "stilts pixfoot in=:skysim:1 ra=ra dec=dec order=0 out=smallest_order.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for sources within the galactic plane (abs(b) < 2 degrees).",
        "response": "stilts pixfoot in=all_sky.fits icmd='addskycoords icrs galactic RA DEC L B' icmd='select abs(B) < 2' out=galactic_plane.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(B) < 2\n\nUsage: select <expr>\n    (Unused arguments: '<' '2'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint for my `hapi` stream data.",
        "response": "stilts pixfoot in=my_stream.hapi ifmt=hapi out=hapi_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My table uses `wdc` format. Can you generate a MOC from it?",
        "response": "stilts pixfoot in=solar_data.wdc ifmt=wdc out=solar_data_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for circles whose radius is `10**LOG_RADIUS_DEG`.",
        "response": "stilts pixfoot in=log_radii.fits radius='pow(10,LOG_RADIUS_DEG)' out=log_radii_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the footprint for all sources in `survey.fits` that fall within the VizieR 2MASS footprint.",
        "response": "stilts pixfoot in=survey.fits icmd='select inMoc(\"II/246/out\", RA, DEC)' out=in_2mass.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select inMoc(\"II/246/out\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How can I combine three MOCs into one? Say, `moc1.fits`, `moc2.fits`, and `moc3.fits`.",
        "response": "stilts tcat in=moc1.fits in=moc2.fits in=moc3.fits | stilts pixfoot in=- out=combined_moc.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for objects with non-negative flux values.",
        "response": "stilts pixfoot in=fluxes.fits icmd='select FLUX >= 0' out=non_neg_flux.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX >= 0\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC for the last 10 objects in `transient_alerts.vot`.",
        "response": "stilts pixfoot in=transient_alerts.vot icmd='tail 10' mocfmt=ascii out=last_10_alerts.moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What does `mocfmt` do in the pixfoot command?",
        "response": "The `mocfmt` parameter determines the output format for the MOC file. Your options are `fits`, `json`, or `ascii`.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I want a MOC for all objects in `catalog.fits` with a radius of 0.05 degrees, but at order 10.",
        "response": "stilts pixfoot in=catalog.fits radius=0.05 order=10 out=catalog_footprint_o10.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My RA is column `RA_J2000` and Dec is `DE_J2000`. Create a MOC.",
        "response": "stilts pixfoot in=data.fits ra=RA_J2000 dec=DE_J2000 out=data_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for rows where `EXTENDED_SOURCE` is true.",
        "response": "stilts pixfoot in=sources.fits icmd='select EXTENDED_SOURCE' out=extended_sources_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have sexagesimal RA in `RA_SEX` and decimal Dec in `DEC_DECIMAL`. Can you make a MOC?",
        "response": "stilts pixfoot in=mixed_coords.fits ra='hmsToDegrees(RA_SEX)' dec=DEC_DECIMAL out=mixed_coords_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Just count how many pixels at order 8 would be covered by my `survey.fits` catalog.",
        "response": "stilts pixfoot in=survey.fits order=8 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a JSON MOC for the southern galactic hemisphere.",
        "response": "stilts pixfoot in=:skysim:1e6 icmd='addskycoords icrs galactic ra dec l b' icmd='select b < 0' ra=ra dec=dec mocfmt=json out=south_galactic_hemi.moc.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select b < 0\n\nUsage: select <expr>\n    (Unused arguments: '<' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "The radius of each source is its `FWHM` in arcseconds. Generate the footprint.",
        "response": "stilts pixfoot in=source_sizes.fits radius='FWHM/3600.0' out=fwhm_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint for all sources in `my_data.fits` that are NOT near the Andromeda galaxy (within 1 degree).",
        "response": "stilts pixfoot in=my_data.fits icmd='select skyDistanceDegrees(RA,DEC,10.6847,41.2690) > 1' out=not_andromeda.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistanceDegrees(RA,DEC,10.6847,41.2690) > 1\n\nUsage: select <expr>\n    (Unused arguments: '>' '1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a FITS MOC from a simulated catalog of 20 million stars, but use a sparse sample for speed.",
        "response": "stilts pixfoot in=:skysim:20_000_000 icmd='every 1000' ra=ra dec=dec out=sim_20M_sparse.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for all sources with `QUALITY = A`.",
        "response": "stilts pixfoot in=quality_data.fits icmd='select QUALITY==\"A\"' out=quality_A_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My radius is `R_PIX` pixels, and my plate scale is `SCALE_AS` arcsec/pixel. How do I make the MOC?",
        "response": "stilts pixfoot in=plate_data.fits radius='R_PIX * SCALE_AS / 3600.0' out=plate_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC at order 12 from every 5th row of my catalog.",
        "response": "stilts pixfoot in=mycat.fits icmd='every 5' order=12 out=mycat_every5_o12.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have `file1.fits`, `file2.fits`, and `file3.fits`. Create a JSON MOC covering all of them.",
        "response": "stilts tcat in=file1.fits in=file2.fits in=file3.fits | stilts pixfoot in=- mocfmt=json out=three_file_coverage.moc.json",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What does a zero radius mean for `pixfoot`?",
        "response": "A radius of zero (which is the default) means each position is treated as a single point on the sky. The MOC will cover the smallest HEALPix pixel at the given order that contains each point.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC for objects where the `OBS_DATE` is after 2020.",
        "response": "stilts pixfoot in=obs_log.fits icmd='select OBS_DATE > 2020' mocfmt=ascii out=post_2020_obs.moc.txt",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '2020'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select OBS_DATE > 2020\n\nUsage: select <expr>\n    (Unused arguments: '>' '2020'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for the positions in `my_data.fits` but exclude any rows that have null RA or Dec values.",
        "response": "stilts pixfoot in=my_data.fits icmd='select !NULL_RA && !NULL_DEC' out=valid_coords.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' '!NULL_DEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select !NULL_RA && !NULL_DEC\n\nUsage: select <expr>\n    (Unused arguments: '&&' '!NULL_DEC'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My input file is `strange.fits`, and I want a JSON moc at order 11.",
        "response": "stilts pixfoot in=strange.fits order=11 mocfmt=json out=strange_coverage.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for circular regions where the radius in degrees is `1/(10*PARALLAX)`.",
        "response": "stilts pixfoot in=parallax_data.fits radius='1/(10*PARALLAX)' out=parallax_radius_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the positions in a `cdf` file.",
        "response": "stilts pixfoot in=space_data.cdf ifmt=cdf out=spacecraft_path.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What's the command to get a FITS MOC from a simulated catalog of 1.5 million stars?",
        "response": "stilts pixfoot in=:skysim:1.5e6 ra=ra dec=dec mocfmt=fits out=sim_1.5M.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC at order 10 covering all sources that are within 5 degrees of the ecliptic plane.",
        "response": "stilts pixfoot in=all_sky_data.fits icmd='addskycoords icrs ecliptic RA DEC ELON ELAT' icmd='select abs(ELAT) < 5' out=ecliptic_plane_sources.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(ELAT) < 5\n\nUsage: select <expr>\n    (Unused arguments: '<' '5'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint for a 0.2 arcmin radius around each source.",
        "response": "stilts pixfoot in=sources.fits radius=0.2/60.0 out=point_two_arcmin.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the rows where the error in magnitude is less than 0.05.",
        "response": "stilts pixfoot in=photometry.fits icmd='select MAG_ERR < 0.05' out=low_error_phot.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.05'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG_ERR < 0.05\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.05'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Can you generate a MOC for my data and name the RA column `ALPHA` and the Dec column `DELTA`?",
        "response": "stilts pixfoot in=my_data.fits ra=ALPHA dec=DELTA out=alpha_delta_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC for the footprint of all objects whose name does not contain the word 'STAR'.",
        "response": "stilts pixfoot in=object_list.fits icmd='select !contains(NAME, \"STAR\")' mocfmt=json out=non_stellar_objects.moc.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'STAR' ')'\n\nCommand was: select !contains(NAME, \"STAR\")\n\nUsage: select <expr>\n    (Unused arguments: 'STAR' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How can I generate a MOC for circles whose radius is `0.1 * log10(FLUX)`?",
        "response": "stilts pixfoot in=flux_cat.fits radius='0.1 * log10(FLUX)' out=flux_scaled_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from a random sample of 1% of the rows in `huge_catalog.fits`.",
        "response": "stilts pixfoot in=huge_catalog.fits icmd='random 0.01' out=huge_cat_1percent.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0.01'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 0.01\n\nUsage: random\n    (Unused arguments: '0.01'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Please generate a MOC at order 9 covering the sources listed in `my_targets.csv`.",
        "response": "stilts pixfoot in=my_targets.csv ifmt=csv order=9 out=my_targets_o9.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have `ra_h`, `ra_m`, `ra_s` and `dec_d`, `dec_m`, `dec_s`. How do I make the MOC?",
        "response": "stilts pixfoot in=sexagesimal_parts.fits ra='hmsToDegrees(ra_h,ra_m,ra_s)' dec='dmsToDegrees(dec_d,dec_m,dec_s)' out=sexagesimal_parts.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the footprint of objects where `FLAG_A` AND `FLAG_B` are both true.",
        "response": "stilts pixfoot in=flagged_data.fits icmd='select FLAG_A && FLAG_B' out=both_flags_set.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' 'FLAG_B'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLAG_A && FLAG_B\n\nUsage: select <expr>\n    (Unused arguments: '&&' 'FLAG_B'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My radius is given by column `R_MAS` in milliarcseconds. How do I use that?",
        "response": "stilts pixfoot in=mas_radii.fits radius='R_MAS/3600000.0' out=mas_radii_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for all sources in `mycat.fits` that are NOT within the SDSS footprint.",
        "response": "stilts pixfoot in=mycat.fits icmd='select !inMoc(\"V/139/sdss9\", RA, DEC)' out=not_in_sdss.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select !inMoc(\"V/139/sdss9\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC for the objects in the middle 2000 rows of my catalog.",
        "response": "stilts pixfoot in=my_catalog.fits icmd='rowrange ($nrow/2 - 1000) +2000' mocfmt=json out=middle_2k.moc.json",
        "chat.jar": "failed",
        "error": "Error: Row index ($nrow/2 must be integer >0\n\nCommand was: rowrange ($nrow/2 - 1000) +2000\n\nUsage: rowrange <first> <last>|+<count>\n    (Row index ($nrow/2 must be integer >0)\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What does a negative order mean for `pixfoot`?",
        "response": "The `order` parameter must be a non-negative integer between 0 and 29. A negative value is not permitted and will result in an error.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from my `astropy_table.fits` file. The radius of each circle should be 1/parallax.",
        "response": "stilts pixfoot in=astropy_table.fits radius='1.0/parallax' out=parallax_inverted_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How do I specify a radius of 0.5 arcseconds?",
        "response": "stilts pixfoot in=my_table.fits radius=0.5/3600.0 out=half_arcsec_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for sources with a `CONFIDENCE_LEVEL` of 95% or higher.",
        "response": "stilts pixfoot in=confident_detections.fits icmd='select CONFIDENCE_LEVEL >= 0.95' out=confident_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0.95'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select CONFIDENCE_LEVEL >= 0.95\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0.95'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint for the second HDU of my FITS file `multi_data.fits`.",
        "response": "stilts pixfoot in=multi_data.fits#2 out=hdu2_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC at order 11 from the combined positions of `a.csv`, `b.csv`, and `c.csv`.",
        "response": "stilts tcat ifmt=csv in=a.csv in=b.csv in=c.csv | stilts pixfoot in=- order=11 out=abc_combined.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Can `pixfoot` read a gzipped FITS file?",
        "response": "Yes, `pixfoot` can read compressed files, including gzipped FITS files, transparently. For example: `stilts pixfoot in=my_data.fits.gz out=my_data_footprint.moc.fits`",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for objects where `COLOR_INDEX` is between 0.5 and 1.0.",
        "response": "stilts pixfoot in=colors.fits icmd='select COLOR_INDEX > 0.5 && COLOR_INDEX < 1.0' out=color_selected.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.5' '&&' 'COLOR_INDEX' '<' '1.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select COLOR_INDEX > 0.5 && COLOR_INDEX < 1.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.5' '&&' 'COLOR_INDEX' '<' '1.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a FITS MOC from a HAPI stream file `solar_wind.hapi`.",
        "response": "stilts pixfoot in=solar_wind.hapi ifmt=hapi out=solar_wind_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My RA is column `alpha_j2000` and Dec is `delta_j2000`. Generate a JSON MOC.",
        "response": "stilts pixfoot in=data.fits ra=alpha_j2000 dec=delta_j2000 mocfmt=json out=custom_coord_names.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a footprint for all objects in `survey.fits` that are near the Andromeda galaxy (within 1 degree).",
        "response": "stilts pixfoot in=survey.fits icmd='select skyDistanceDegrees(RA,DEC,10.6847,41.2690) < 1' out=andromeda_region.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistanceDegrees(RA,DEC,10.6847,41.2690) < 1\n\nUsage: select <expr>\n    (Unused arguments: '<' '1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How to create a MOC from an ASCII file with columns `RA_HMS` and `DEC_DMS`?",
        "response": "stilts pixfoot in=data.txt ifmt=ascii ra='hmsToDegrees(RA_HMS)' dec='dmsToDegrees(DEC_DMS)' out=data_hmsdms.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for sources with a luminosity greater than 1e30.",
        "response": "stilts pixfoot in=luminosities.fits icmd='select LUMINOSITY > 1e30' out=bright_sources.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1e30'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select LUMINOSITY > 1e30\n\nUsage: select <expr>\n    (Unused arguments: '>' '1e30'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC at order 8, with a 1 arcmin radius for each point.",
        "response": "stilts pixfoot in=points.vot radius=1.0/60.0 order=8 mocfmt=ascii out=points_arcmin.moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint of `my_data.fits`, but only keep every 15th row.",
        "response": "stilts pixfoot in=my_data.fits icmd='every 15' out=data_every15.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for the region covered by a 5 degree radius around the North Galactic Pole.",
        "response": "stilts pixfoot in=:skysim:100000 icmd='addskycoords icrs galactic ra dec l b' icmd='select skyDistance(l,b,0,90) < 5' ra=ra dec=dec out=ngp_region.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistance(l,b,0,90) < 5\n\nUsage: select <expr>\n    (Unused arguments: '<' '5'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Can you generate the MOC for my data and save it as a JSON file named `celestial_tapestry.moc.json`?",
        "response": "stilts pixfoot in=my_data.fits mocfmt=json out=celestial_tapestry.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for objects where the `OBS_TYPE` column is 'SPECTROSCOPY'.",
        "response": "stilts pixfoot in=obs_log.fits icmd='select OBS_TYPE==\"SPECTROSCOPY\"' out=spectroscopy_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "The radius of each source is its `PSF_WIDTH` in arcseconds divided by 2. Generate the footprint.",
        "response": "stilts pixfoot in=psf_data.fits radius='PSF_WIDTH/2.0/3600.0' out=psf_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for all sources in `mycat.fits` that are NOT within 2 degrees of the galactic center.",
        "response": "stilts pixfoot in=mycat.fits icmd='addskycoords icrs galactic RA DEC L B' icmd='select skyDistance(L,B,0,0) > 2' out=not_gc.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistance(L,B,0,0) > 2\n\nUsage: select <expr>\n    (Unused arguments: '>' '2'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Just tell me how many pixels at order 12 would be covered by a 1 degree radius circle around each point in `centers.fits`.",
        "response": "stilts pixfoot in=centers.fits radius=1.0 order=12 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC from a `colfits` file.",
        "response": "stilts pixfoot in=my_data.colfits out=colfits_coverage.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have ecliptic coordinates in radians. How do I make the MOC?",
        "response": "stilts pixfoot in=ecliptic_rad.fits icmd='addskycoords ecliptic icrs radiansToDegrees(ELON_RAD) radiansToDegrees(ELAT_RAD) RA_ICRS DEC_ICRS' ra=RA_ICRS dec=DEC_ICRS out=ecliptic_rad_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for circles whose radius is `abs(MAGNITUDE)/100` degrees.",
        "response": "stilts pixfoot in=magnitudes.fits radius='abs(MAGNITUDE)/100.0' out=mag_scaled_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the footprint for all sources in `survey.fits` that fall within the footprint of any VizieR catalog.",
        "response": "This is not directly possible with a single `pixfoot` command. You would need to obtain the combined MOC for all VizieR catalogs first, then use that in an `icmd` filter with `inMoc()`.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC at order 1, covering the entire sky.",
        "response": "stilts pixfoot in=:skysim:1000 ra=ra dec=dec order=1 out=all_sky_o1.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC for the first 10 and last 10 objects in `my_catalog.fits`.",
        "response": "stilts tcat in=my_catalog.fits icmd='head 10' in=my_catalog.fits icmd='tail 10' | stilts pixfoot in=- mocfmt=json out=head_and_tail.moc.json",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What does an `order` of 29 mean?",
        "response": "An `order` of 29 represents the highest possible resolution in HEALPix, corresponding to roughly 3.4 x 10^18 pixels covering the entire sky. This is an extremely fine grid, suitable only for very small regions of interest.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from my `data.fits`, using a radius that is the mean of `ERR_MAJ` and `ERR_MIN` columns (in degrees).",
        "response": "stilts pixfoot in=data.fits radius='(ERR_MAJ+ERR_MIN)/2.0' out=mean_error_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the footprint of objects where `FLAG_A` OR `FLAG_B` is false.",
        "response": "stilts pixfoot in=flagged_data.fits icmd='select !(FLAG_A || FLAG_B)' out=no_flags_set.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '||' 'FLAG_B)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select !(FLAG_A || FLAG_B)\n\nUsage: select <expr>\n    (Unused arguments: '||' 'FLAG_B)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My radius is given by `R_UAS` in microarcseconds. How do I use that?",
        "response": "stilts pixfoot in=uas_radii.fits radius='R_UAS/3600000000.0' out=uas_radii_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for all sources in `mycat.fits` that are at least 10 arcseconds away from any source in `bright_stars.fits`.",
        "response": "This is a complex filtering operation not suitable for a single `pixfoot` command. It would require a cross-match (`tmatch2`) first to identify and exclude the nearby sources before generating the MOC with `pixfoot`.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Can `pixfoot` produce a MOC in XML format?",
        "response": "No, `pixfoot` does not directly support XML output for MOCs. The available formats are `fits`, `json`, and `ascii`. While VOTable is an XML format, `pixfoot`'s output is a MOC file, not a standard table.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC for objects where the `OBSERVER` name is 'Hubble'.",
        "response": "stilts pixfoot in=obs_log.fits icmd='select OBSERVER==\"Hubble\"' mocfmt=ascii out=hubble_obs.moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for the positions in `my_data.fits`, excluding the first 100 rows.",
        "response": "stilts pixfoot in=my_data.fits icmd='tail ($nrow-100)' out=exclude_first_100.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Row count ($nrow-100) not numeric\n\nCommand was: tail ($nrow-100)\n\nUsage: tail <nrows>\n    (Row count ($nrow-100) not numeric)\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My `csv` file has columns ra_sex and dec_sex. Make me a MOC.",
        "response": "stilts pixfoot in=data.csv ifmt=csv ra='hmsToDegrees(ra_sex)' dec='dmsToDegrees(dec_sex)' out=data_sex.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for circles whose radius is `1/sqrt(FLUX)`.",
        "response": "stilts pixfoot in=fluxes.fits radius='1.0/sqrt(FLUX)' out=flux_inv_sqrt.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the positions in a `tst` file.",
        "response": "stilts pixfoot in=my_data.tst ifmt=tst out=tst_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "What's the command to get a JSON MOC from a simulation of exactly 1 star?",
        "response": "stilts pixfoot in=:skysim:1 ra=ra dec=dec mocfmt=json out=single_star.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC at order 10 covering all sources that are more than 170 degrees away from the galactic center.",
        "response": "stilts pixfoot in=all_sky.fits icmd='addskycoords icrs galactic RA DEC L B' icmd='select skyDistance(L,B,0,0) > 170' out=far_field.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '170'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistance(L,B,0,0) > 170\n\nUsage: select <expr>\n    (Unused arguments: '>' '170'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint for a 30 arcsecond radius around each source in my `sources.ecsv` file.",
        "response": "stilts pixfoot in=sources.ecsv ifmt=ecsv radius=30.0/3600.0 out=thirty_arcsec_regions.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the rows where the error in position (`POS_ERR_DEG`) is less than 0.01 degrees.",
        "response": "stilts pixfoot in=positions.fits icmd='select POS_ERR_DEG < 0.01' out=high_precision_positions.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.01'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select POS_ERR_DEG < 0.01\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.01'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Can you generate a MOC for my data, using FK4 coords `RA_B1950` and `DEC_B1950`?",
        "response": "stilts pixfoot in=my_data.fits icmd='addskycoords fk4 fk5 RA_B1950 DEC_B1950 RA_J2000 DEC_J2000' ra=RA_J2000 dec=DEC_J2000 out=fk4_converted_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC for the footprint of all objects whose name is exactly 'M31'.",
        "response": "stilts pixfoot in=object_list.fits icmd='select NAME==\"M31\"' mocfmt=json out=m31_only.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How can I generate a MOC for circles whose radius is `sin(abs(DEC_DEG)*PI/180)`?",
        "response": "stilts pixfoot in=special_radii.fits radius='sin(abs(DEC_DEG)*PI/180)' out=sin_dec_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from a sample of rows where the row index is a prime number (up to a limit).",
        "response": "stilts pixfoot in=huge_catalog.fits icmd='select isPrime($0)' out=prime_rows.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC at order 9 for all the tables in `multi_survey.fits` combined.",
        "response": "stilts tcat in=multi_survey.fits multi=true | stilts pixfoot in=- order=9 out=multi_survey_combined.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\nError: No file, URL or command \"multi_survey.fits\"\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My DEC column is in radians `DEC_RAD` but RA is in degrees `RA_DEG`. How to make the MOC?",
        "response": "stilts pixfoot in=mixed_units.fits ra=RA_DEG dec='radiansToDegrees(DEC_RAD)' out=mixed_units_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the footprint of objects where `CLASSIFICATION` is either 'GALAXY' or 'QSO'.",
        "response": "stilts pixfoot in=classifications.fits icmd='select CLASS==\"GALAXY\" || CLASS==\"QSO\"' out=galaxy_qso_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '||' 'CLASS==QSO'\n\nCommand was: select CLASS==\"GALAXY\" || CLASS==\"QSO\"\n\nUsage: select <expr>\n    (Unused arguments: '||' 'CLASS==QSO')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "The radius for my MOC circles is stored in the table parameter `DEFAULT_RADIUS_DEG`. How do I use it?",
        "response": "stilts pixfoot in=data_with_param.fits radius='param$DEFAULT_RADIUS_DEG' out=param_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for all sources in `mycat.fits` that are near (within 0.1 deg) the celestial equator.",
        "response": "stilts pixfoot in=mycat.fits icmd='select abs(DEC) < 0.1' out=equator_sources.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(DEC) < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Can `pixfoot` output anything other than a MOC?",
        "response": "No, the primary purpose of `pixfoot` is to generate a Multi-Order Coverage map (MOC). It outputs this MOC in one of three formats: FITS, JSON, or ASCII.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC for objects where the year of observation (`OBS_YEAR`) is 2023.",
        "response": "stilts pixfoot in=obs_log.fits icmd='select OBS_YEAR==2023' mocfmt=ascii out=obs_2023.moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from `data.fits`, but only use rows with an even row index.",
        "response": "stilts pixfoot in=data.fits icmd='select $0 % 2 == 0' out=even_rows.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '%' '2' '==' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select $0 % 2 == 0\n\nUsage: select <expr>\n    (Unused arguments: '%' '2' '==' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My input file is `strange.parquet`. Can you make a JSON MOC from it at order 11?",
        "response": "stilts pixfoot in=strange.parquet order=11 mocfmt=json out=strange_parquet_coverage.moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for circles whose radius is `(ERR_A + ERR_B + ERR_C)/3.0`.",
        "response": "stilts pixfoot in=error_terms.fits radius='(ERR_A+ERR_B+ERR_C)/3.0' out=mean_error_term_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the positions in `my_data.fits`, but give me an error if any of the coordinates are null.",
        "response": "stilts pixfoot in=my_data.fits icmd='assert !NULL_RA && !NULL_DEC' out=asserted_coords.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!NULL_DEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: assert !NULL_RA && !NULL_DEC\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '!NULL_DEC'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Just show me the count of pixels covered if I use an order of 3.",
        "response": "stilts pixfoot in=my_cat.fits order=3 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC at order 11 covering all sources that are more than 10 degrees from the North Ecliptic Pole.",
        "response": "stilts pixfoot in=all_sky.fits icmd='addskycoords icrs ecliptic RA DEC ELON ELAT' icmd='select skyDistance(ELON,ELAT,270,90) > 10' out=far_from_nep.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistance(ELON,ELAT,270,90) > 10\n\nUsage: select <expr>\n    (Unused arguments: '>' '10'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the footprint for a 1 pixel radius from my camera, where the plate scale is 0.5 arcsec/pixel.",
        "response": "stilts pixfoot in=detections.fits radius='1.0 * 0.5 / 3600.0' out=single_pixel_regions.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the rows where the `MAG_ERROR` is at its minimum value for the whole table.",
        "response": "stilts pixfoot in=photometry.fits icmd='select MAG_ERROR==minimum(MAG_ERROR)' out=best_photometry.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Can you generate a MOC for my data, with a radius of 2 arcseconds, and save it as `quasar_distribution.moc.fits`?",
        "response": "stilts pixfoot in=my_data.fits radius=2.0/3600.0 out=quasar_distribution.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC for the footprint of all objects whose ID matches the regex 'SN-....-..'.",
        "response": "stilts pixfoot in=object_list.fits icmd='select matches(ID, \"SN-....-..\")' mocfmt=json out=supernova_candidates.moc.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'SN-....-..' ')'\n\nCommand was: select matches(ID, \"SN-....-..\")\n\nUsage: select <expr>\n    (Unused arguments: 'SN-....-..' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "How can I generate a MOC for circles whose radius is determined by a lookup table based on the `TYPE` column?",
        "response": "stilts pixfoot in=objects.fits radius='(TYPE==1 ? 0.1 : (TYPE==2 ? 0.2 : 0.05))' out=type_dependent_radius.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from a random sample of 250 rows from `large_catalog.fits`.",
        "response": "stilts pixfoot in=large_catalog.fits icmd='random 250' out=large_cat_sample_250.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '250'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 250\n\nUsage: random\n    (Unused arguments: '250'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "My coordinate columns are simply named `c1` and `c2`. How do I generate a MOC?",
        "response": "stilts pixfoot in=generic_coords.fits ra=c1 dec=c2 out=generic_coords_footprint.moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC from the RA and DEC columns in my_catalog.fits, using the default order of 13 and saving the output as a FITS MOC.",
        "response": "stilts pixfoot in=my_catalog.fits ra=RA dec=DEC out=point_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC at HEALPix order 10 for sources in targets.vot.",
        "response": "stilts pixfoot in=targets.vot ra=RA dec=DEC order=10 out=targets_o10.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a high-resolution MOC (order 18) for coordinates X_ICRS and Y_ICRS found in deep_field.fits.",
        "response": "stilts pixfoot in=deep_field.fits ra=X_ICRS dec=Y_ICRS order=18 out=hires_moc_o18.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a coverage map for objects in catalog.csv, assuming RA and DEC are in columns 1 and 2. Save it as a JSON MOC.",
        "response": "stilts pixfoot in=catalog.csv ifmt=csv ra=$1 dec=$2 mocfmt=json out=catalog_moc.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC (order 5) for all positions defined in input_data.vot.",
        "response": "stilts pixfoot in=input_data.vot ra=RA dec=DEC order=5 mocfmt=ascii out=lowres_moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Calculate the MOC for sources within 5 arcseconds of their positions in stars.fits.",
        "response": "stilts pixfoot in=stars.fits ra=RA dec=DEC radius='5.0 / 3600.0' out=stars_5as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for targets with a fixed radius of 0.1 degrees, stored in targets.ecsv.",
        "response": "stilts pixfoot in=targets.ecsv ifmt=ecsv ra=RA dec=DEC radius=0.1 out=targets_0p1deg.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a MOC for sources in my table where the radius is determined by the EXP_RADIUS column (in arcminutes), converted to degrees.",
        "response": "stilts pixfoot in=errors.fits ra=RA dec=DEC radius='EXP_RADIUS / 60.0' out=variable_radius_am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC for the coverage of 30 arcminute diameter circles around sources in photometry.fits (radius is 15 arcminutes).",
        "response": "stilts pixfoot in=photometry.fits ra=RA dec=DEC radius='15.0 / 60.0' out=wide_footprint.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a very coarse MOC (order 0) representing the points in all_sky.fits.",
        "response": "stilts pixfoot in=all_sky.fits ra=RA dec=DEC order=0 out=coarse_o0.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Calculate the MOC for a survey with a very small positional error of 10 milli-arcseconds (mas).",
        "response": "stilts pixfoot in=survey.fits ra=RA dec=DEC radius='10.0 / 3600000.0' out=survey_10mas.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the coverage map for 2 arcminute radii, explicitly calculating the radius as (2/60) degrees.",
        "response": "stilts pixfoot in=catalog.fits ra=RA dec=DEC radius='2.0 / 60.0' out=catalog_2am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 15) for sources where the radius is calculated using the algebraic expression $1/1000$ degrees.",
        "response": "stilts pixfoot in=data.vot ra=RA dec=DEC radius='1.0 / 1000.0' order=15 out=data_millideg.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the MOC for targets within 3 arcseconds, converted from 3000 mas.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='3000.0 / 3600000.0' out=targets_3as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a coverage map for positions with an uncertainty derived from the magnitude error (MAG_ERR) multiplied by a scaling factor 0.001.",
        "response": "stilts pixfoot in=mag_errors.fits ra=RA dec=DEC radius='MAG_ERR * 0.001' out=mag_err_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 8 MOC for objects where the radius is equivalent to 100 arcminutes.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC radius='100.0 / 60.0' order=8 out=hires_100am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have coordinates in radians (RA_RAD, DEC_RAD). Convert them to degrees for a point MOC.",
        "response": "stilts pixfoot in=rad_data.fits ra='radiansToDegrees(RA_RAD)' dec='radiansToDegrees(DEC_RAD)' out=rad_converted.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input catalog to keep only rows where magnitude G_MAG is brighter than 18, then generate the point MOC.",
        "response": "stilts pixfoot in=gaia.fits icmd='select G_MAG < 18' ra=RA dec=DEC out=bright_gaia.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select G_MAG < 18\n\nUsage: select <expr>\n    (Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC, but first remove all rows that have a null value in the FLUX column.",
        "response": "stilts pixfoot in=survey.fits icmd='select !NULL_FLUX' ra=RA dec=DEC out=clean_flux_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a coverage map for objects only in the northern hemisphere (DEC > 0).",
        "response": "stilts pixfoot in=all_sky.fits icmd='select DEC > 0' ra=RA dec=DEC out=northern_hemisphere.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select DEC > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 11) for galaxies (TYPE='GALAXY'), excluding stars.",
        "response": "stilts pixfoot in=classified.fits icmd='select equals(TYPE, \"GALAXY\")' ra=RA dec=DEC order=11 out=galaxies_o11.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GALAXY' ')'\n\nCommand was: select equals(TYPE, \"GALAXY\")\n\nUsage: select <expr>\n    (Unused arguments: 'GALAXY' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for rows 100 to 500 of my catalog.fits.",
        "response": "stilts pixfoot in=catalog.fits icmd='rowrange 100 500' ra=RA dec=DEC out=sample_rows.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a coverage map, but sort the input table by magnitude first (though sorting doesn't affect the MOC output).",
        "response": "stilts pixfoot in=data.fits icmd='sort MAGNITUDE' ra=RA dec=DEC out=sorted_input.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a point MOC after converting input RA/DEC, which are in hours/degrees, to degrees.",
        "response": "stilts pixfoot in=hms_data.fits icmd='addcol RA_DEG hmsToDegrees(RA_H, RA_M, RA_S)' ra=RA_DEG dec=DEC out=hms_conversion_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'RA_M,' 'RA_S)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol RA_DEG hmsToDegrees(RA_H, RA_M, RA_S)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'RA_M,' 'RA_S)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC from a simulated sky catalog of 10,000 stars.",
        "response": "stilts pixfoot in=:skysim:10000 ra=ra dec=dec out=simulated_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for targets around Galactic coordinates L=50, B=0, but the input table coordinates are RA/DEC. Convert the input table positions to Galactic coordinates first.",
        "response": "stilts pixfoot in=galactic_targets.fits icmd='addskycoords icrs galactic RA DEC GLON GLAT' icmd='select abs(GLON-50.0) < 1.0 && abs(GLAT) < 1.0' ra=RA dec=DEC out=galactic_region.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '1.0' '&&' 'abs(GLAT)' '<' '1.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(GLON-50.0) < 1.0 && abs(GLAT) < 1.0\n\nUsage: select <expr>\n    (Unused arguments: '<' '1.0' '&&' 'abs(GLAT)' '<' '1.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to keep only every 100th row before generating the MOC.",
        "response": "stilts pixfoot in=large_cat.fits icmd='every 100' ra=RA dec=DEC out=every_100th.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a high-resolution MOC (order 20) for sources within 0.1 arcseconds.",
        "response": "stilts pixfoot in=precise_cat.fits ra=RA dec=DEC radius='0.1 / 3600.0' order=20 out=hires_0p1as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I want a MOC where the radius is calculated as the parallax error (PLX_ERR) in milli-arcseconds, converted to degrees.",
        "response": "stilts pixfoot in=parallax.fits ra=RA dec=DEC radius='PLX_ERR / 3600000.0' out=parallax_error_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 7) for all sources, but use only the RA and DEC columns, discarding all others in an internal processing step.",
        "response": "stilts pixfoot in=full_table.fits icmd='keepcols RA DEC' ra=RA dec=DEC order=7 out=minimal_columns.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'DEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols RA DEC\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'DEC'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 14) and output a plain text summary of the coverage area, not the MOC file itself.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=14 mocfmt=summary out=-",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"summary\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need to know the total number of HEALPix cells (row count) that would comprise a MOC at order 9.",
        "response": "stilts pixfoot in=sources.fits ra=RA dec=DEC order=9 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 15) and immediately discard the output file, just checking for successful execution.",
        "response": "stilts pixfoot in=test.fits ra=RA dec=DEC order=15 omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC and pipe the output directly into TOPCAT for viewing.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC omode=topcat",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=topcat\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the metadata of the resulting MOC table structure (order 13), without the data itself.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC for 1 arcsecond circles, and output the result as raw binary UNIQ indices.",
        "response": "stilts pixfoot in=hires_points.fits ra=RA dec=DEC radius='1.0 / 3600.0' mocfmt=raw out=raw_moc_1as.bin",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"raw\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Calculate the MOC for sources within 0.005 degrees and save the output as a FITS MOC, ensuring compression.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius=0.005 compress=true out=compressed_moc.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a MOC at order 6, and I want to output the compressed ASCII MOC string to standard output.",
        "response": "stilts pixfoot in=coarse.fits ra=RA dec=DEC order=6 mocfmt=ascii compress=true out=-",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a coverage map, forcing the output format to be VOTable BINARY2 serialization (via the CDS FITS MOC format).",
        "response": "stilts pixfoot in=sources.fits ra=RA dec=DEC mocfmt=cds_fits out=moc_binary2.vot",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"cds_fits\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 12 JSON MOC, but add an output filter to rename the resultant table 'SkyCoverage'.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=12 mocfmt=json ocmd='tablename SkyCoverage' out=renamed_moc.json",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tablename SkyCoverage\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC (order 10) and then calculate a checksum of the output file.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=10 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a MOC for sources found in a FITS table, converting RA to degrees if it was in hours (RA_H).",
        "response": "stilts pixfoot in=hours.fits icmd='replacecol RA degreesToRadians(RA_H / 24.0 * 360.0)' ra=RA dec=DEC out=hours_to_deg.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '/' '24.0' '*' '360.0)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol RA degreesToRadians(RA_H / 24.0 * 360.0)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '/' '24.0' '*' '360.0)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 17 MOC for the top 500 rows of very high-quality sources.",
        "response": "stilts pixfoot in=hq_cat.fits icmd='head 500' ra=RA dec=DEC order=17 out=top_500_o17.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to only include rows where the position angle (PA) is greater than 90 degrees, then generate the MOC.",
        "response": "stilts pixfoot in=rotational.fits icmd='select PA > 90.0' ra=RA dec=DEC out=pa_filtered.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '90.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PA > 90.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '90.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for circles where the radius is given by a distance column (DIST_KPC) scaled by 0.0001 (in degrees).",
        "response": "stilts pixfoot in=dist_cat.fits ra=RA dec=DEC radius='DIST_KPC * 0.0001' out=kpc_scaled_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need to generate a coverage map only for objects observed in 2020 (MJD between 58849 and 59214).",
        "response": "stilts pixfoot in=obs_log.fits icmd='select MJD >= 58849 && MJD <= 59214' ra=RA dec=DEC out=2020_coverage.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '58849' '&&' 'MJD' '<=' '59214'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MJD >= 58849 && MJD <= 59214\n\nUsage: select <expr>\n    (Unused arguments: '>=' '58849' '&&' 'MJD' '<=' '59214'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 13 MOC and ensure the output metadata retains only the PIXEL_INDEX column and its metadata.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=13 ocmd='keepcols PIXEL_INDEX' out=index_only_o13.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 14) for sources within a tiny 1 micro-arcsecond (\u00b5as) radius.",
        "response": "stilts pixfoot in=ultrap.fits ra=RA dec=DEC radius='1.0 / 3600000000.0' order=14 out=uas_radius_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with a magnitude of exactly 17.0.",
        "response": "stilts pixfoot in=catalog.fits icmd='select MAGNITUDE == 17.0' ra=RA dec=DEC out=mag17_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '==' '17.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAGNITUDE == 17.0\n\nUsage: select <expr>\n    (Unused arguments: '==' '17.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 6 MOC and explicitly add a column called 'HEALPIX_LEVEL' with the value 6 to the output table.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=6 ocmd='addcol HEALPIX_LEVEL 6' out=with_level_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol HEALPIX_LEVEL 6\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC from positions in a parquet file, reading the input explicitly as parquet format.",
        "response": "stilts pixfoot in=coords.parquet ifmt=parquet ra=RA dec=DEC out=parquet_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 15 MOC from an ECSV file containing coordinates in columns named 'Alpha' and 'Delta'.",
        "response": "stilts pixfoot in=coords.ecsv ifmt=ecsv ra=Alpha dec=Delta order=15 out=ecsv_o15.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have coordinate string columns RA_STR, DEC_STR. Convert them to degrees before generating a MOC.",
        "response": "stilts pixfoot in=strings.fits icmd='addcol RA parseDouble(RA_STR); addcol DEC parseDouble(DEC_STR)' ra=RA dec=DEC out=parsed_strings.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC at order 10 for all sources, but apply a post-processing step to sort the resulting HEALPix cells by index.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=10 ocmd='sort PIXEL_INDEX' out=sorted_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a coverage map for objects that have non-zero proper motion in RA (PMRA).",
        "response": "stilts pixfoot in=pm_cat.fits icmd='select PMRA != 0.0' ra=RA dec=DEC out=pm_detected.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' '0.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PMRA != 0.0\n\nUsage: select <expr>\n    (Unused arguments: '!=' '0.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for circles where the radius is $0.05 / \text{S/N}$ ratio, assuming S/N is in a column.",
        "response": "stilts pixfoot in=sn_data.fits ra=RA dec=DEC radius='0.05 / SN_RATIO' out=sn_scaled_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 12) from an ASCII file input, using column indices 1 and 2 for coordinates.",
        "response": "stilts pixfoot in=data.txt ifmt=ascii ra=$1 dec=$2 order=12 out=ascii_index_o12.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for 1 arcminute radius circles, forcing the order to be high enough to represent the circle sharply (e.g., order 15).",
        "response": "stilts pixfoot in=circles.fits ra=RA dec=DEC radius='1.0 / 60.0' order=15 out=sharp_circles_o15.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for positions where parallax is greater than 10 mas.",
        "response": "stilts pixfoot in=plx_cat.fits icmd='select PLX > 10.0 / 1000.0' ra=RA dec=DEC out=high_parallax.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '10.0' '/' '1000.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PLX > 10.0 / 1000.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '10.0' '/' '1000.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC, but first rename the coordinate columns in the input table from 'X' and 'Y' to 'RA' and 'DEC'.",
        "response": "stilts pixfoot in=xy_data.fits icmd='colmeta -name RA X; colmeta -name DEC Y' ra=RA dec=DEC out=renamed_xy_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I want the coverage area of all sources where the ID column starts with '2MASS'.",
        "response": "stilts pixfoot in=catalog.fits icmd='select startsWith(ID, \"2MASS\")' ra=RA dec=DEC out=two_mass_only.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '2MASS' ')'\n\nCommand was: select startsWith(ID, \"2MASS\")\n\nUsage: select <expr>\n    (Unused arguments: '2MASS' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC where the radius is fixed at 1 degree divided by 3.",
        "response": "stilts pixfoot in=wide_cat.fits ra=RA dec=DEC radius='1.0 / 3.0' out=third_degree.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC and apply a post-processing filter to keep only HEALPix cells whose index is greater than 1000000.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC ocmd='select PIXEL_INDEX > 1000000' out=high_index_cells.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=select PIXEL_INDEX > 1000000\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a very high-resolution MOC (order 29) for a single point (0, 0) and save it as FITS.",
        "response": "stilts pixfoot in=:loop:1 end=1 ra=0 dec=0 order=29 out=max_order_point.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 13) for objects within 3 arcseconds, and ensure the output is in CDS JSON format.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='3.0 / 3600.0' order=13 mocfmt=cds_json out=targets_cds.json",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"cds_json\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to remove the last 100 rows before generating a MOC.",
        "response": "stilts pixfoot in=data.fits icmd='head -$0-100' ra=RA dec=DEC out=no_tail.fits",
        "chat.jar": "failed",
        "error": "Error: Row count -$0-100 not numeric\n\nCommand was: head -$0-100\n\nUsage: head <nrows>\n    (Row count -$0-100 not numeric)\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 4 MOC, but use a logarithmic scale expression for the radius: log10(DISTANCE) degrees.",
        "response": "stilts pixfoot in=log_dist.fits ra=RA dec=DEC radius='log10(DISTANCE)' order=4 out=log_radius_o4.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC from a large FITS file, specifying streaming input for lower memory usage.",
        "response": "stilts pixfoot in=huge_data.fits istream=true ra=RA dec=DEC out=streamed_moc.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"huge_data.fits\"\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have coordinates in Galactic Longitude (GLON) and Latitude (GLAT). Convert them to ICRS before generating a MOC.",
        "response": "stilts pixfoot in=gal_coords.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC out=gal_to_icrs_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 10 MOC for circles where the radius is calculated as the hypotenuse of X_ERR and Y_ERR in degrees.",
        "response": "stilts pixfoot in=err_data.fits ra=RA dec=DEC radius='hypot(X_ERR, Y_ERR)' order=10 out=hypot_error_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a coverage map only for sources with positive flux.",
        "response": "stilts pixfoot in=flux_cat.fits icmd='select FLUX > 0' ra=RA dec=DEC out=positive_flux_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources within 50 arcseconds, and I want to write the output to standard output in FITS format.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='50.0 / 3600.0' out=- ofmt=fits",
        "chat.jar": "failed",
        "error": "Error: ofmt=fits: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 16) and add a column that shows the row index of the source from the input table.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=16 ocmd='addcol INPUT_INDEX $0' out=indexed_output.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol INPUT_INDEX $0\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a low-resolution MOC (order 3) and output to a simple text format table (omode=out ofmt=text out=-).",
        "response": "stilts pixfoot in=coarse_data.fits ra=RA dec=DEC order=3 ofmt=text out=-",
        "chat.jar": "failed",
        "error": "Error: ofmt=text: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources where the redshift (Z) is less than 0.1.",
        "response": "stilts pixfoot in=redshift.fits icmd='select Z < 0.1' ra=RA dec=DEC out=low_redshift_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Z < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a coverage map for objects around Ecliptic coordinates (ELON=50, ELAT=10). Convert first to ICRS.",
        "response": "stilts pixfoot in=ecliptic.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC out=ecl_to_icrs_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC for 2 arcminute radii, setting the HEALPix order to 11, and sort the final result by radius.",
        "response": "stilts pixfoot in=rad_var.fits ra=RA dec=DEC radius='2.0 / 60.0' order=11 out=sorted_rad.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to remove duplicates based on their primary ID before generating the MOC.",
        "response": "stilts pixfoot in=dirty_ids.fits icmd='uniq ID' ra=RA dec=DEC out=unique_id_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 14) and apply a filter to replace null values in the MAGNITUDE column with 99.0 (though the magnitude itself isn't used for the MOC).",
        "response": "stilts pixfoot in=null_mag.fits icmd='replaceval null 99.0 MAGNITUDE' ra=RA dec=DEC out=cleaned_mag.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the coverage area of all sources that have a quality flag (Q_FLAG) set to 'A'.",
        "response": "stilts pixfoot in=flagged.fits icmd='select equals(Q_FLAG, \"A\")' ra=RA dec=DEC out=q_flag_A_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'A' ')'\n\nCommand was: select equals(Q_FLAG, \"A\")\n\nUsage: select <expr>\n    (Unused arguments: 'A' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 12) for circles where the radius is 100 mas, using an explicit expression for conversion.",
        "response": "stilts pixfoot in=mas_sources.fits ra=RA dec=DEC radius='100.0 * 0.00000027777777777' out=mas_calc_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 8 MOC and apply a post-processing step to remove any columns added during MOC generation, returning only the pixel index column.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=8 ocmd='keepcols PIXEL_INDEX' out=pure_index_o8.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I want a MOC for sources where the distance modulus (DM) is less than 15.",
        "response": "stilts pixfoot in=dm_cat.fits icmd='select DM < 15.0' ra=RA dec=DEC out=low_dm_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '15.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select DM < 15.0\n\nUsage: select <expr>\n    (Unused arguments: '<' '15.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 11) for coordinates in a pipe-fed CSV file (using stdin).",
        "response": "stilts pixfoot in=- ifmt=csv ra=RA dec=DEC order=11 out=piped_csv_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Can't stream CSV format tables\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a coverage map for objects where the error column (ERR_DEG) is greater than $0.001$ degrees.",
        "response": "stilts pixfoot in=errors.fits icmd='select ERR_DEG > 0.001' ra=RA dec=DEC radius=ERR_DEG out=large_error_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.001'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ERR_DEG > 0.001\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.001'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for the coverage of 5 micro-arcsecond (\u00b5as) fixed radii.",
        "response": "stilts pixfoot in=ultrap.fits ra=RA dec=DEC radius='5.0 / (3600.0 * 1000000.0)' out=fixed_5uas.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 19) and calculate the MOC size estimate in square degrees using the summary output.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=19 mocfmt=summary out=-",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"summary\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 13 MOC, and ensure the output is a compressed ASCII MOC string.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=13 mocfmt=ascii compress=true out=compressed_ascii.txt",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a MOC for sources within 1 arcsecond, converting the input coordinates from radians to degrees via an intermediate filter.",
        "response": "stilts pixfoot in=rad_in.fits icmd='addcol RA_DEG radiansToDegrees(RA_RAD); addcol DEC_DEG radiansToDegrees(DEC_RAD)' ra=RA_DEG dec=DEC_DEG radius='1.0 / 3600.0' out=rad_converted_1as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC from positions in a TST table, explicitly setting the input format.",
        "response": "stilts pixfoot in=coords.tst ifmt=tst ra=RA dec=DEC out=tst_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 9 MOC, ensuring only the PIXEL_INDEX column is retained, sorted, and output as a CSV file.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=9 ocmd='keepcols PIXEL_INDEX; sort PIXEL_INDEX' ofmt=csv out=hpx_indices.csv",
        "chat.jar": "failed",
        "error": "Error: ofmt=csv: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a MOC for all sources with a quality flag 'GOOD', using a fixed 0.001 degree radius.",
        "response": "stilts pixfoot in=qa_cat.fits icmd='select equals(FLAG, \"GOOD\")' ra=RA dec=DEC radius=0.001 out=qa_good_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GOOD' ')'\n\nCommand was: select equals(FLAG, \"GOOD\")\n\nUsage: select <expr>\n    (Unused arguments: 'GOOD' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a coverage map at order 16, adding a constant column 'SURVEY'='DEEP' to the output.",
        "response": "stilts pixfoot in=deep_survey.fits ra=RA dec=DEC order=16 ocmd='addcol SURVEY \"DEEP\"' out=deep_survey_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol SURVEY \"DEEP\"\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 11) for objects within a radius equal to the square root of FLUX_ERR.",
        "response": "stilts pixfoot in=flux_err.fits ra=RA dec=DEC radius='sqrt(FLUX_ERR)' out=sqrt_err_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter input data to remove rows outside the magnitude range 10 < G_MAG < 20 before MOC creation.",
        "response": "stilts pixfoot in=mag_range.fits icmd='select G_MAG > 10.0 && G_MAG < 20.0' ra=RA dec=DEC out=filtered_mag_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '10.0' '&&' 'G_MAG' '<' '20.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select G_MAG > 10.0 && G_MAG < 20.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '10.0' '&&' 'G_MAG' '<' '20.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for sources with a fixed 1 arcminute radius, and calculate the row count.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='1.0 / 60.0' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a coverage map at order 14, using coordinates RA and DEC, but apply a post-filter to discard any column except PIXEL_INDEX and its HEALPix level.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=14 ocmd='keepcols PIXEL_INDEX; addcol ORDER 14' out=hpx_minimal_info.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols PIXEL_INDEX; addcol ORDER 14\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need an MOC for objects where the name contains 'QSO', at order 10.",
        "response": "stilts pixfoot in=named_cat.fits icmd='select contains(NAME, \"QSO\")' ra=RA dec=DEC order=10 out=qso_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: select contains(NAME, \"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: 'QSO' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 5) and output the resulting table directly as a FITS file using standard output.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=5 out=- ofmt=fits",
        "chat.jar": "failed",
        "error": "Error: ofmt=fits: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC where the radius is defined by 60 arcseconds divided by 60, resulting in 1 arcsecond.",
        "response": "stilts pixfoot in=sources.fits ra=RA dec=DEC radius='60.0 / 3600.0 / 60.0' out=one_arcsec_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC for the coverage of 0.0000001 degree radius circles around all points.",
        "response": "stilts pixfoot in=tiny_rad.fits ra=RA dec=DEC radius=1.0e-7 out=ultratiny_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to select a random 10% sample before generating an order 12 MOC.",
        "response": "stilts pixfoot in=big_table.fits icmd='random 0.1' ra=RA dec=DEC order=12 out=random_sample_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 0.1\n\nUsage: random\n    (Unused arguments: '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for only the first 1000 sources, at high resolution (order 16).",
        "response": "stilts pixfoot in=massive_cat.fits icmd='head 1000' ra=RA dec=DEC order=16 out=head_1000_o16.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 13) for objects within 10 arcseconds, and output to an IPAC table format (for debugging metadata).",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='10.0 / 3600.0' ofmt=ipac out=ipac_moc.tbl",
        "chat.jar": "failed",
        "error": "Error: ofmt=ipac: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a low-resolution MOC (order 4) and then pipeline the result to calculate column statistics.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=4 omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=stats\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for sources where the proper motion in RA (PMRA) is less than 5 mas/yr.",
        "response": "stilts pixfoot in=pm_cat.fits icmd='select PMRA < 5.0' ra=RA dec=DEC out=low_pmra_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '5.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PMRA < 5.0\n\nUsage: select <expr>\n    (Unused arguments: '<' '5.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with a radius derived from the square of their distance in parsecs (D_PC^2) scaled by 1e-6.",
        "response": "stilts pixfoot in=distance.fits ra=RA dec=DEC radius='square(D_PC) * 1e-6' out=squared_dist_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 7 MOC, converting the input coordinates from Galactic (GLON, GLAT) to ICRS in an initial filter step.",
        "response": "stilts pixfoot in=gal_cat.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC order=7 out=converted_gal_o7.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for 5 arcsecond radius circles, outputting the result in compressed JSON format.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='5.0 / 3600.0' mocfmt=json compress=true out=compressed_5as.json.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 15) and apply a post-filter to shuffle the resultant HEALPix cells randomly.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=15 ocmd='shuffle' out=shuffled_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=shuffle\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the coverage map for all objects where the color (MAG_B - MAG_R) is greater than 1.0.",
        "response": "stilts pixfoot in=colors.fits icmd='select MAG_B - MAG_R > 1.0' ra=RA dec=DEC out=red_objects_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_R' '>' '1.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG_B - MAG_R > 1.0\n\nUsage: select <expr>\n    (Unused arguments: '-' 'MAG_R' '>' '1.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for sources where the radius is fixed at $0.000000001$ degrees (1 nanodegree).",
        "response": "stilts pixfoot in=nano.fits ra=RA dec=DEC radius=1.0e-9 out=nano_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC at order 20 and then discard all columns except the PIXEL_INDEX and the row index.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=20 ocmd='keepcols PIXEL_INDEX $0' out=index_and_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols PIXEL_INDEX $0\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a summary of the sky coverage for 60 arcsecond radii, converted from 1 arcminute.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='60.0 / 3600.0' mocfmt=summary out=-",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"summary\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC (order 11) for points and write the output directly to the GUI viewer.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=11 omode=gui",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=gui\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 13 MOC, filtering the input to include only rows where the 'TYPE' column is 'STAR'.",
        "response": "stilts pixfoot in=types.fits icmd='select equals(TYPE, \"STAR\")' ra=RA dec=DEC order=13 out=stars_only_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'STAR' ')'\n\nCommand was: select equals(TYPE, \"STAR\")\n\nUsage: select <expr>\n    (Unused arguments: 'STAR' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for circles where the radius is determined by $\text{hypot}(\text{ERR}_A, \text{ERR}_B)$ degrees.",
        "response": "stilts pixfoot in=multi_err.fits ra=RA dec=DEC radius='hypot(ERR_A, ERR_B)' out=hypot_radius_moc2.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to only retain objects with positive Declination and zero Right Ascension.",
        "response": "stilts pixfoot in=quadrant.fits icmd='select DEC > 0.0 && RA == 0.0' ra=RA dec=DEC out=zero_ra_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.0' '&&' 'RA' '==' '0.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select DEC > 0.0 && RA == 0.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.0' '&&' 'RA' '==' '0.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 10) and rename the output HEALPix index column from PIXEL_INDEX to HPX_ID.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=10 ocmd='colmeta -name HPX_ID PIXEL_INDEX' out=renamed_hpx_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=colmeta -name HPX_ID PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a coverage map where the radius is the maximum allowed (90 degrees).",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC radius=90.0 out=hemisphere_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources within 0.0001 arcminutes.",
        "response": "stilts pixfoot in=ultrafine.fits ra=RA dec=DEC radius='0.0001 / 60.0' out=ultra_fine_am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 8 MOC and add a column that is the natural logarithm of a column named 'EXPTIME'.",
        "response": "stilts pixfoot in=exposure.fits ra=RA dec=DEC order=8 ocmd='addcol LOG_EXPTIME ln(EXPTIME)' out=with_log_exptime.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol LOG_EXPTIME ln(EXPTIME)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 16) for objects whose proper motion vector length is greater than $100$ mas/yr.",
        "response": "stilts pixfoot in=pm_vectors.fits icmd='select hypot(PMRA, PMDEC) > 100.0' ra=RA dec=DEC order=16 out=high_pm_moc_o16.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PMDEC)' '>' '100.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select hypot(PMRA, PMDEC) > 100.0\n\nUsage: select <expr>\n    (Unused arguments: 'PMDEC)' '>' '100.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input to remove the first 10 rows and then generate a coverage map (order 13).",
        "response": "stilts pixfoot in=cat.fits icmd='rowrange 11 -1' ra=RA dec=DEC out=skip_first_10.fits",
        "chat.jar": "failed",
        "error": "Error: Arg \"iStr\" not <int> or +<int>\n\nCommand was: rowrange 11 -1\n\nUsage: rowrange <first> <last>|+<count>\n    (Arg \"iStr\" not <int> or +<int>)\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for 20 arcsecond circles, converted from $20 / 3600$ degrees.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='20.0 / 3600.0' out=targets_20as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 11 MOC and write the output to standard output as CDS ASCII format.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=11 mocfmt=cds_ascii out=-",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"cds_ascii\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC at order 18, ensuring only rows where 'SNR' is greater than 10 are used.",
        "response": "stilts pixfoot in=snr_cat.fits icmd='select SNR > 10.0' ra=RA dec=DEC order=18 out=high_snr_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '10.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select SNR > 10.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '10.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the count of HEALPix cells (order 14) covered by sources within a radius of $1.5$ arcminutes.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC radius='1.5 / 60.0' order=14 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 6) and add a column showing the angular separation in degrees from a reference point (RA=100, DEC=0).",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=6 ocmd='addcol SEP_DEG skyDistanceDegrees(RA, DEC, 100.0, 0.0)' out=with_sep_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol SEP_DEG skyDistanceDegrees(RA, DEC, 100.0, 0.0)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC where the radius is calculated using $0.05 \times \text{exp}(\text{MAG} / 10)$.",
        "response": "stilts pixfoot in=mag_data.fits ra=RA dec=DEC radius='0.05 * exp(MAG / 10.0)' out=exp_mag_radius.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to only retain rows where the integer column 'FLAG' is an odd number.",
        "response": "stilts pixfoot in=flags.fits icmd='select FLAG % 2 == 1' ra=RA dec=DEC out=odd_flag_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '%' '2' '==' '1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLAG % 2 == 1\n\nUsage: select <expr>\n    (Unused arguments: '%' '2' '==' '1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 17 MOC and output the result using VOTable BINARY serialization (via CDS FITS MOC).",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=17 mocfmt=cds_fits ofmt='votable(format=BINARY)' out=binary_vot_moc.vot",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"cds_fits\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC where the radius is the error in distance, calculated as $\text{DIST} \times \text{PLX_ERR} / \text{PLX}$ (degrees assumed).",
        "response": "stilts pixfoot in=err_prop.fits ra=RA dec=DEC radius='DIST * PLX_ERR / PLX' out=dist_err_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with $1$ degree radius, limiting the input stream to only the first 100 rows.",
        "response": "stilts pixfoot in=data.fits icmd='head 100' ra=RA dec=DEC radius=1.0 out=head_100_1deg.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC (order 14), explicitly setting the output name and ensuring no input format is guessed.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=14 mocfmt=ascii out=manual_moc.txt ifmt='(auto)'",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for sources where the magnitude (G_MAG) is within 0.1 of magnitude 19.5.",
        "response": "stilts pixfoot in=catalog.fits icmd='select abs(G_MAG - 19.5) < 0.1' ra=RA dec=DEC out=narrow_mag_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' '19.5)' '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(G_MAG - 19.5) < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '-' '19.5)' '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the coverage map for 45 arcseconds radius, outputting the numerical PIXEL_INDEX column only, and saving as ECSV.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='45.0 / 3600.0' ocmd='keepcols PIXEL_INDEX' ofmt=ecsv out=hpx_indices.ecsv",
        "chat.jar": "failed",
        "error": "Error: ofmt=ecsv: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC (order 15) and apply a post-processing step to calculate the mean of all numeric columns in the result.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=15 omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=stats\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for circles whose radius is given by the constant $0.0005$ degrees, multiplied by $2$.",
        "response": "stilts pixfoot in=fixed_rad.fits ra=RA dec=DEC radius='0.0005 * 2.0' out=fixed_0p001deg.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an order 13 MOC and remove the PIXEL_INDEX column, leaving only auxiliary metadata (this will result in an empty table).",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=13 ocmd='delcols PIXEL_INDEX' out=empty_moc_info.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=delcols PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the coverage map for all objects with non-null Proper Motion in both RA and DEC.",
        "response": "stilts pixfoot in=pm_cat.fits icmd='select !NULL_PMRA && !NULL_PMDEC' ra=RA dec=DEC out=pm_non_null.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' '!NULL_PMDEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select !NULL_PMRA && !NULL_PMDEC\n\nUsage: select <expr>\n    (Unused arguments: '&&' '!NULL_PMDEC'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 10) and then transpose the resulting single-column table (PIXEL_INDEX) into a single row of many columns (for viewing compact indices).",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=10 ocmd='transpose' out=transposed_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=transpose\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC from positions in a CSV file that uses ';' as a delimiter, explicitly setting the input format.",
        "response": "stilts pixfoot in=data.csv ifmt='csv(delimiter=;)' ra=RA dec=DEC out=semicolon_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources within 2 arcseconds, but ensure the output column names are syntactically safe (fixcolnames).",
        "response": "stilts pixfoot in=weird_names.fits icmd='fixcolnames' ra=RA dec=DEC radius='2.0 / 3600.0' out=clean_names_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 11 MOC for targets that are within 5 arcminutes of the North Pole (DEC=90).",
        "response": "stilts pixfoot in=polar_targets.fits icmd='select abs(DEC - 90.0) < 5.0 / 60.0' ra=RA dec=DEC radius='5.0 / 60.0' order=11 out=north_pole_5am.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' '90.0)' '<' '5.0' '/' '60.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(DEC - 90.0) < 5.0 / 60.0\n\nUsage: select <expr>\n    (Unused arguments: '-' '90.0)' '<' '5.0' '/' '60.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 18) for circles where the radius is $\text{PI} \times 10^{-6}$ degrees.",
        "response": "stilts pixfoot in=pi_data.fits ra=RA dec=DEC radius='PI * 1.0e-6' order=18 out=pi_radius_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input to only retain objects with a numerical ID greater than 100000, then generate the MOC.",
        "response": "stilts pixfoot in=id_cat.fits icmd='select ID > 100000' ra=RA dec=DEC out=high_id_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '100000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ID > 100000\n\nUsage: select <expr>\n    (Unused arguments: '>' '100000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for all sources, then calculate the total number of rows and columns (omode=count).",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a coverage map where the radius is fixed at 1000 micro-arcseconds (\u00b5as).",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='1000.0 / 3600000000.0' out=fixed_1000uas.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 13) for points in catalog.fits within 15 arcseconds of their center.",
        "response": "stilts pixfoot in=catalog.fits ra=RA dec=DEC radius='15.0 / 3600.0' out=cat_15as_o13.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 10) for sources in data.csv with a 2 arcminute search radius.",
        "response": "stilts pixfoot in=data.csv ifmt=csv ra=RA dec=DEC radius='2.0 / 60.0' order=10 out=data_2am_o10.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a high-resolution MOC (order 18) for my_catalog.vot using 5 milli-arcseconds (mas) as the radius.",
        "response": "stilts pixfoot in=my_catalog.vot ra=RA dec=DEC radius='5.0 / 3600000.0' order=18 out=hires_5mas.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 8) for sources around Galactic L=10, B=0, filtering the input table coordinates from Galactic to ICRS first.",
        "response": "stilts pixfoot in=gal_cat.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius=0.01 order=8 out=gal_converted_o8.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to select only rows where magnitude is brighter than 16, and create an order 14 MOC with a 0.05 degree radius.",
        "response": "stilts pixfoot in=bright.fits icmd='select MAG < 16' ra=RA dec=DEC radius=0.05 order=14 out=bright_filtered_o14.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '16'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG < 16\n\nUsage: select <expr>\n    (Unused arguments: '<' '16'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an ASCII MOC (order 7) for all points, where the radius is fixed at 100 micro-arcseconds (\u00b5as).",
        "response": "stilts pixfoot in=precise.fits ra=RA dec=DEC radius='100.0 / 3600000000.0' order=7 mocfmt=ascii out=uas_moc.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have positions in radians (RA_R, DEC_R). Convert them and generate a point MOC (radius 0) at order 13.",
        "response": "stilts pixfoot in=rad_input.fits ra='radiansToDegrees(RA_R)' dec='radiansToDegrees(DEC_R)' radius=0 order=13 out=rad_converted_point.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a summary report of the coverage for sources within a fixed radius of 30 arcseconds.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='30.0 / 3600.0' mocfmt=summary out=-",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"summary\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 9) for sources with a radius calculated as 1 arcminute divided by 4.",
        "response": "stilts pixfoot in=rad_div.fits ra=RA dec=DEC radius='(1.0 / 4.0) / 60.0' order=9 out=quarter_am_o9.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for objects where the radius is given by 0.001 degrees times the SQUARE of the 'ERROR_FACTOR' column.",
        "response": "stilts pixfoot in=error_scaled.fits ra=RA dec=DEC radius='0.001 * square(ERROR_FACTOR)' out=scaled_error_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC for objects around Ecliptic Lon=90, Lat=0, converting coordinates via an input filter, with radius 10 arcminutes.",
        "response": "stilts pixfoot in=ecl_data.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='10.0 / 60.0' out=ecl_10am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a raw binary MOC stream (order 15) for sources with a 50 arcsecond search radius.",
        "response": "stilts pixfoot in=raw_targets.fits ra=RA dec=DEC radius='50.0 / 3600.0' order=15 mocfmt=raw out=raw_50as.bin",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"raw\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the exact count of cells in an order 11 MOC for sources within 0.01 degrees.",
        "response": "stilts pixfoot in=count_test.fits ra=RA dec=DEC radius=0.01 order=11 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to keep only the first 100 rows, then generate an order 17 MOC with a 2 arcsecond radius.",
        "response": "stilts pixfoot in=large_cat.fits icmd='head 100' ra=RA dec=DEC radius='2.0 / 3600.0' order=17 out=head100_2as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 12) where the radius is equivalent to 500 mas, outputting the result in compressed FITS format.",
        "response": "stilts pixfoot in=mas_500.fits ra=RA dec=DEC radius='500.0 / 3600000.0' compress=true out=mas_500_comp.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC (order 16) for sources around Galactic L=180, B=5, converting the coordinate system internally, using 0.0001 degrees.",
        "response": "stilts pixfoot in=gal_cat2.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius=0.0001 order=16 mocfmt=json out=gal_json_o16.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have coordinates in hours and degrees (RA_H, DEC). Convert RA to degrees and search within 15 arcminutes.",
        "response": "stilts pixfoot in=hms_data.fits ra='RA_H * 15.0' dec=DEC radius='15.0 / 60.0' out=hms_15am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 4) and then immediately discard the output, only checking for successful execution.",
        "response": "stilts pixfoot in=discard_test.fits ra=RA dec=DEC omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for all sources with a radius defined by $\text{hypot}(\text{X_ERR}, \text{Y_ERR})$ in degrees.",
        "response": "stilts pixfoot in=err_hypot.fits ra=RA dec=DEC radius='hypot(X_ERR, Y_ERR)' out=hypot_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC for only the points with a Declination greater than 80 degrees, using a 1 degree radius.",
        "response": "stilts pixfoot in=polar_data.fits icmd='select DEC > 80.0' ra=RA dec=DEC radius=1.0 out=polar_cap_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '80.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select DEC > 80.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '80.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 29, maximum standard resolution) for a fixed point at RA 10.0, Dec 10.0, with a $1 \times 10^{-10}$ degree radius.",
        "response": "stilts pixfoot in=:loop:1 end=1 ra=10.0 dec=10.0 radius=1.0e-10 order=29 out=max_res_o29.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with a radius of $0.005$ radians, converted to degrees.",
        "response": "stilts pixfoot in=rad_search.fits ra=RA dec=DEC radius='radiansToDegrees(0.005)' out=rad_5mrad.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to exclude null RA values before creating a MOC for 5 arcminute radii.",
        "response": "stilts pixfoot in=dirty_data.fits icmd='select !NULL_RA' ra=RA dec=DEC radius='5.0 / 60.0' out=clean_5am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a low-resolution MOC (order 4) where the radius is exactly 20 arcseconds.",
        "response": "stilts pixfoot in=coarse.fits ra=RA dec=DEC radius='20.0 / 3600.0' order=4 out=coarse_20as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 15) and apply an output filter to rename the resultant column 'PIXEL_INDEX' to 'HPX_INDEX'.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=15 ocmd='colmeta -name HPX_INDEX PIXEL_INDEX' out=renamed_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=colmeta -name HPX_INDEX PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources around Galactic L=30, B=10, with a radius defined by $\frac{1800 \text{ arcsec}}{3600 \text{ arcsec}/\text{deg}}$ (0.5 deg).",
        "response": "stilts pixfoot in=gal_data3.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius='1800.0 / 3600.0' out=gal_1800as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC (order 12) for points with a fixed radius of 3 arcminutes, writing to standard output.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='3.0 / 60.0' order=12 mocfmt=json out=-",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for objects within 100 mas, ensuring verbose logging (level 3, though pixfoot is not a command where verbosity level is typically set).",
        "response": "stilts pixfoot in=mas_targets.fits ra=RA dec=DEC radius='100.0 / 3600000.0' verb=3 out=verbose_100mas.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 17) for objects where the magnitude is non-null, using a 10 arcsecond radius.",
        "response": "stilts pixfoot in=mag_data.fits icmd='select !NULL_MAG' ra=RA dec=DEC radius='10.0 / 3600.0' order=17 out=non_null_mag_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I have coordinates in degrees, minutes, seconds (DEC_D, DEC_M, DEC_S). Convert them to decimal degrees before creating a point MOC.",
        "response": "stilts pixfoot in=dms_data.fits ra=RA dec='dmsToDegrees(DEC_D, DEC_M, DEC_S)' radius=0 out=dms_converted.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC for circles where the radius is $\frac{1}{60 \times 10}$ degrees (0.1 arcminutes).",
        "response": "stilts pixfoot in=tiny_am.fits ra=RA dec=DEC radius='1.0 / 600.0' out=tiny_am_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the MOC for a $0.0000001$ radian radius (ultra-fine search).",
        "response": "stilts pixfoot in=ultra_rad.fits ra=RA dec=DEC radius='radiansToDegrees(1.0e-7)' out=ultra_rad_search.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 10) and pipe the output table to a checksum calculation.",
        "response": "stilts pixfoot in=checksum_data.fits ra=RA dec=DEC order=10 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC for points with a radius defined by $\text{DIST} \times 0.0001$ degrees, where DIST is a column.",
        "response": "stilts pixfoot in=dist_cat.fits ra=RA dec=DEC radius='DIST * 0.0001' out=dist_scaled_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to only keep rows where the proper motion (PM) is non-zero, then generate a MOC for 1 arcsecond circles.",
        "response": "stilts pixfoot in=pm_data.fits icmd='select PMRA != 0 || PMDEC != 0' ra=RA dec=DEC radius='1.0 / 3600.0' out=pm_filtered_1as.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' '0' '||' 'PMDEC' '!=' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PMRA != 0 || PMDEC != 0\n\nUsage: select <expr>\n    (Unused arguments: '!=' '0' '||' 'PMDEC' '!=' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 14) for 4 arcminute radii, ensuring the output is written in ECSV format.",
        "response": "stilts pixfoot in=ecsv_in.fits ra=RA dec=DEC radius='4.0 / 60.0' order=14 ofmt=ecsv out=ecsv_o14.ecsv",
        "chat.jar": "failed",
        "error": "Error: ofmt=ecsv: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources around Galactic L=359.9, B=0.1, converted from Galactic to ICRS, using 20 arcseconds.",
        "response": "stilts pixfoot in=gal_data4.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius='20.0 / 3600.0' out=gal_20as_edge.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC (order 16) for circles whose radius is given by 1 degree divided by $\text{PI} \times 100$.",
        "response": "stilts pixfoot in=pi_div.fits ra=RA dec=DEC radius='1.0 / (PI * 100.0)' order=16 out=pi_scaled_o16.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC for a $0.001$ mas radius (high precision search).",
        "response": "stilts pixfoot in=sub_mas.fits ra=RA dec=DEC radius='0.001 / 3600000.0' out=sub_mas_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to keep only every 5th row and create an order 11 MOC for $1$ arcminute radius.",
        "response": "stilts pixfoot in=sampled_cat.fits icmd='every 5' ra=RA dec=DEC radius='1.0 / 60.0' order=11 out=sampled_o11.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 13) and apply an output filter to add a column showing the pixel area in square degrees.",
        "response": "stilts pixfoot in=area_calc.fits ra=RA dec=DEC order=13 ocmd='addcol CELL_AREA healpixSqdeg(13)' out=with_area_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol CELL_AREA healpixSqdeg(13)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need a MOC for a fixed radius of 1 arcminute, outputting the result directly to TOPCAT.",
        "response": "stilts pixfoot in=topcat_in.fits ra=RA dec=DEC radius='1.0 / 60.0' omode=topcat",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=topcat\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 19) for sources with a radius calculated as 10 arcseconds plus 5 arcseconds.",
        "response": "stilts pixfoot in=combined_as.fits ra=RA dec=DEC radius='(10.0 + 5.0) / 3600.0' order=19 out=combined_15as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC for objects around Ecliptic Lon 200, Lat -30, converting coordinates internally, using 0.1 arcminutes.",
        "response": "stilts pixfoot in=ecl_data2.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='0.1 / 60.0' out=ecl_0p1am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 6) and filter the input to only include rows with positive magnitude (MAG).",
        "response": "stilts pixfoot in=positive_mag.fits icmd='select MAG > 0' ra=RA dec=DEC order=6 out=pos_mag_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources where the radius is $\text{log}_{10}(\text{FLUX})$ degrees, constrained by minimum flux of 10.",
        "response": "stilts pixfoot in=log_flux.fits icmd='select FLUX >= 10.0' ra=RA dec=DEC radius='log10(FLUX)' out=log_flux_radius.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '10.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX >= 10.0\n\nUsage: select <expr>\n    (Unused arguments: '>=' '10.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a raw binary MOC stream (order 14) for fixed $0.0001$ degree radius circles.",
        "response": "stilts pixfoot in=fixed_rad2.fits ra=RA dec=DEC radius=0.0001 order=14 mocfmt=raw out=raw_0001deg.bin",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"raw\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 17) for targets that are within 5 arcminutes, outputting the column metadata only.",
        "response": "stilts pixfoot in=meta_targets.fits ra=RA dec=DEC radius='5.0 / 60.0' order=17 omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for objects where the radius is $5$ arcseconds squared (not the area, just the value $25/3600$ deg).",
        "response": "stilts pixfoot in=sq_as.fits ra=RA dec=DEC radius='(5.0 * 5.0) / 3600.0' out=sq_as_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources around Galactic L=90, B=0, with radius $1$ arcminute, converting coordinates, and writing the output to an ASCII table to standard output.",
        "response": "stilts pixfoot in=gal_data5.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius='1.0 / 60.0' mocfmt=ascii out=-",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC (order 13) for sources within $0.0005$ degrees, including compression.",
        "response": "stilts pixfoot in=json_comp.fits ra=RA dec=DEC radius=0.0005 order=13 mocfmt=json compress=true out=json_comp_moc.json.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 20) for 1 mas radius circles, filtering the input to remove duplicate rows based on ID.",
        "response": "stilts pixfoot in=unique_ids.fits icmd='uniq ID' ra=RA dec=DEC radius='1.0 / 3600000.0' order=20 out=unique_1mas.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for $1000$ micro-arcseconds radius circles, converted from $1$ mas.",
        "response": "stilts pixfoot in=mas_uas.fits ra=RA dec=DEC radius='1000.0 / 3600000000.0' out=uas_converted.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC (order 14) for sources within $0.002$ degrees, and outputting the result using VOTable BINARY2 format.",
        "response": "stilts pixfoot in=vot_binary.fits ra=RA dec=DEC radius=0.002 order=14 mocfmt=fits ofmt='votable(format=BINARY2)' out=moc_binary2.vot",
        "chat.jar": "failed",
        "error": "Error: ofmt=votable(format=BINARY2): out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC for $1 / 360$ degree radius, ensuring the column names in the output table are clean (fixcolnames applied internally).",
        "response": "stilts pixfoot in=clean_names.fits icmd='fixcolnames' ra=RA dec=DEC radius='1.0 / 360.0' out=clean_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the coverage area of sources with a fixed radius of 10 arcminutes, converted from $600$ arcseconds.",
        "response": "stilts pixfoot in=fixed_am.fits ra=RA dec=DEC radius='600.0 / 3600.0' out=fixed_10am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 12) for points where the error in RA (RA_ERR) is positive, using RA_ERR as the radius.",
        "response": "stilts pixfoot in=err_cat.fits icmd='select RA_ERR > 0' ra=RA dec=DEC radius=RA_ERR out=ra_err_radius.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select RA_ERR > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the MOC for sources around Galactic L=0, B=0, using $0.00005$ degrees, converted from Galactic.",
        "response": "stilts pixfoot in=gal_center.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius=0.00005 out=gal_center_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a low-resolution MOC (order 2) for sources with 1 degree radius.",
        "response": "stilts pixfoot in=coarse_1deg.fits ra=RA dec=DEC radius=1.0 order=2 out=coarse_o2_1deg.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 10) and then apply a post-filter to select only the last 100 resulting HEALPix cells.",
        "response": "stilts pixfoot in=tail_hpx.fits ra=RA dec=DEC order=10 ocmd='tail 100' out=tail_100_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tail 100\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the coverage for objects within $\frac{30 \text{ arcsec}}{2}$ (15 arcsec), saving the row count.",
        "response": "stilts pixfoot in=half_30as.fits ra=RA dec=DEC radius='15.0 / 3600.0' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 11) for sources with a radius given by $\text{hypot}(\text{RA}, \text{DEC}) \times 0.001$ degrees.",
        "response": "stilts pixfoot in=coord_dist.fits ra=RA dec=DEC radius='hypot(RA, DEC) * 0.001' out=coord_dist_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 15) for sources around Ecliptic Lon 10, Lat 10, using 1 arcminute, converting internally.",
        "response": "stilts pixfoot in=ecl_data3.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='1.0 / 60.0' order=15 out=ecl_1am_o15.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to select a random 5% sample before generating an order 9 MOC (radius 0.02 deg).",
        "response": "stilts pixfoot in=random_sample.fits icmd='random 0.05' ra=RA dec=DEC radius=0.02 order=9 out=random_0p05.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0.05'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 0.05\n\nUsage: random\n    (Unused arguments: '0.05'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an ASCII MOC (order 13) for 100 mas radius circles, writing to a compressed file.",
        "response": "stilts pixfoot in=mas_comp.fits ra=RA dec=DEC radius='100.0 / 3600000.0' order=13 mocfmt=ascii compress=true out=mas_100_comp.txt.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the coverage for objects where the radius is $0.0001$ radians, converting from Ecliptic coordinates (Lon/Lat) in the input table.",
        "response": "stilts pixfoot in=ecl_rad.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='radiansToDegrees(0.0001)' out=ecl_rad_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 16) for sources with a magnitude G_MAG greater than 20, using a 3 arcsecond radius.",
        "response": "stilts pixfoot in=faint_cat.fits icmd='select G_MAG > 20' ra=RA dec=DEC radius='3.0 / 3600.0' order=16 out=faint_3as.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select G_MAG > 20\n\nUsage: select <expr>\n    (Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a raw binary MOC stream (order 18) for $1$ arcminute radius, reading the input from a URL (e.g., table.vot).",
        "response": "stilts pixfoot in=http://example.com/table.vot ra=RA dec=DEC radius='1.0 / 60.0' order=18 mocfmt=raw out=remote_raw.bin",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"raw\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the MOC for $1 / 1000000$ degree radius (1 microdegree).",
        "response": "stilts pixfoot in=microdeg.fits ra=RA dec=DEC radius=1.0e-6 out=microdeg_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 12) for sources where the radius is given by the distance modulus (DM) column scaled by $0.00001$.",
        "response": "stilts pixfoot in=dm_cat.fits ra=RA dec=DEC radius='DM * 0.00001' out=dm_scaled_o12.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for a point source at (RA=10, DEC=10), ensuring the output is written in the VOTable FITS format.",
        "response": "stilts pixfoot in=:loop:1 end=1 ra=10.0 dec=10.0 radius=0 mocfmt=fits ofmt=votable out=single_point.vot",
        "chat.jar": "failed",
        "error": "Error: ofmt=votable: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 15) and apply a post-filter to sort the resultant HEALPix cells by index in descending order.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=15 ocmd='sort -down PIXEL_INDEX' out=sorted_desc_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort -down PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to only keep rows where 'EXPTIME' > 1000 seconds, and use a 10 arcsecond radius.",
        "response": "stilts pixfoot in=long_exp.fits icmd='select EXPTIME > 1000' ra=RA dec=DEC radius='10.0 / 3600.0' out=long_exp_10as.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select EXPTIME > 1000\n\nUsage: select <expr>\n    (Unused arguments: '>' '1000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for all objects around Galactic L=30, B=0, with a radius of 150 arcseconds, converted from Galactic.",
        "response": "stilts pixfoot in=gal_data6.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius='150.0 / 3600.0' out=gal_150as.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources within 5 arcseconds, writing the output as a simple ASCII MOC string to standard output.",
        "response": "stilts pixfoot in=targets_5as.fits ra=RA dec=DEC radius='5.0 / 3600.0' mocfmt=ascii out=-",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 19) for sources with a fixed radius defined by 1 arcsecond divided by 100.",
        "response": "stilts pixfoot in=sub_as.fits ra=RA dec=DEC radius='(1.0 / 100.0) / 3600.0' order=19 out=sub_arcsec_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC where the radius is determined by $\text{PLX_ERR} / \text{PLX}$ in degrees, assuming parallax is in arcseconds.",
        "response": "stilts pixfoot in=plx_err_dist.fits ra=RA dec=DEC radius='PLX_ERR / PLX' out=plx_dist_err_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for sources around RA 12h, Dec 30d. Convert RA to degrees and use a 0.01 degree radius.",
        "response": "stilts pixfoot in=hms_cat2.fits ra='12.0 * 15.0' dec=30.0 radius=0.01 out=hms_0p01deg.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 10) for sources with a radius given by $\text{hypot}(\text{PMRA}, \text{PMDEC})$ in mas, converted to degrees.",
        "response": "stilts pixfoot in=pm_mas.fits ra=RA dec=DEC radius='hypot(PMRA, PMDEC) / 3600000.0' out=pm_mas_hypot.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC (order 14) for sources within a $0.5$ arcminute radius, converted from Ecliptic coordinates (Lon/Lat).",
        "response": "stilts pixfoot in=ecl_data4.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='0.5 / 60.0' order=14 mocfmt=json out=ecl_half_am_json.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to only retain rows where the RA coordinate is between 0 and 10 degrees, and use a 3 arcminute radius.",
        "response": "stilts pixfoot in=narrow_ra.fits icmd='select RA >= 0 && RA <= 10.0' ra=RA dec=DEC radius='3.0 / 60.0' out=narrow_ra_3am.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0' '&&' 'RA' '<=' '10.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select RA >= 0 && RA <= 10.0\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0' '&&' 'RA' '<=' '10.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with a fixed radius of $0.0005$ radians, converted to degrees, and outputting the exact count.",
        "response": "stilts pixfoot in=rad_count.fits ra=RA dec=DEC radius='radiansToDegrees(0.0005)' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 17) for $2$ mas radius circles, and then immediately discard the output file.",
        "response": "stilts pixfoot in=tiny_mas.fits ra=RA dec=DEC radius='2.0 / 3600000.0' order=17 omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 8) for sources around Galactic L=45, B=-45, with radius $0.1$ degrees, converted from Galactic.",
        "response": "stilts pixfoot in=gal_data7.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius=0.1 order=8 out=gal_0p1deg_o8.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for sources where the radius is given by $1 / \text{SQUARE}(\text{Z})$ degrees, constrained by minimum $Z=0.1$.",
        "response": "stilts pixfoot in=z_scaled.fits icmd='select Z >= 0.1' ra=RA dec=DEC radius='1.0 / square(Z)' out=z_scaled_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Z >= 0.1\n\nUsage: select <expr>\n    (Unused arguments: '>=' '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 15) and apply a post-filter to rename the table 'FootprintData'.",
        "response": "stilts pixfoot in=rename_table.fits ra=RA dec=DEC order=15 ocmd='tablename FootprintData' out=renamed_output.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tablename FootprintData\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC (order 10) for 1 arcsecond radius circles, outputting to standard output.",
        "response": "stilts pixfoot in=as_1.fits ra=RA dec=DEC radius='1.0 / 3600.0' order=10 mocfmt=ascii out=-",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the coverage for objects within $0.00001$ radians, converting from Ecliptic Lon/Lat, writing the exact row count.",
        "response": "stilts pixfoot in=ecl_count.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='radiansToDegrees(1.0e-5)' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 25) for $0.1$ mas radius circles (extremely high resolution).",
        "response": "stilts pixfoot in=extreme_mas.fits ra=RA dec=DEC radius='0.1 / 3600000.0' order=25 out=extreme_o25.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 13) for sources where the radius is 1 arcminute minus 30 arcseconds.",
        "response": "stilts pixfoot in=am_minus_as.fits ra=RA dec=DEC radius='(60.0 - 30.0) / 3600.0' order=13 out=30as_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to only keep the first 5 columns, then generate a MOC for a 0.1 degree radius.",
        "response": "stilts pixfoot in=col_subset.fits icmd='keepcols \"$1 $2 $3 $4 $5\"' ra=$1 dec=$2 radius=0.1 out=subset_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for a fixed radius of 1 degree divided by 50.",
        "response": "stilts pixfoot in=div_50.fits ra=RA dec=DEC radius='1.0 / 50.0' out=div_50_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 16) for sources around Galactic L=270, B=0, with radius $3$ arcminutes, converted from Galactic, outputting JSON.",
        "response": "stilts pixfoot in=gal_data8.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius='3.0 / 60.0' order=16 mocfmt=json out=gal_3am_json.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a low-resolution MOC (order 0) for points only (radius 0), and output the column metadata.",
        "response": "stilts pixfoot in=meta_o0.fits ra=RA dec=DEC radius=0 order=0 omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for objects within 60 arcminutes, converted from 1 degree.",
        "response": "stilts pixfoot in=one_deg.fits ra=RA dec=DEC radius=1.0 out=one_deg_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 13) where the radius is calculated as the separation distance in degrees between RA, DEC and a fixed point (10, 20).",
        "response": "stilts pixfoot in=sep_dist.fits ra=RA dec=DEC radius='skyDistanceDegrees(RA, DEC, 10.0, 20.0)' out=sep_dist_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC (order 9) for 10 mas radius circles, writing to standard output.",
        "response": "stilts pixfoot in=mas_10.fits ra=RA dec=DEC radius='10.0 / 3600000.0' order=9 mocfmt=ascii out=-",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for $0.000005$ radians radius, converted from Ecliptic Lon/Lat, outputting to a compressed FITS file.",
        "response": "stilts pixfoot in=ecl_comp.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='radiansToDegrees(5.0e-6)' compress=true out=ecl_comp_moc.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 22) for fixed $0.00001$ degree radius circles, ensuring the row count is output.",
        "response": "stilts pixfoot in=count_hires.fits ra=RA dec=DEC radius=1.0e-5 order=22 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 15) for sources where $\text{B_MAG} - \text{R_MAG} > 2.0$, using a 2 arcminute radius.",
        "response": "stilts pixfoot in=red_sources.fits icmd='select B_MAG - R_MAG > 2.0' ra=RA dec=DEC radius='2.0 / 60.0' order=15 out=red_sources_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'R_MAG' '>' '2.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select B_MAG - R_MAG > 2.0\n\nUsage: select <expr>\n    (Unused arguments: '-' 'R_MAG' '>' '2.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for objects where the radius is defined by $\text{PMRA} / 100$ in degrees.",
        "response": "stilts pixfoot in=pmra_scaled.fits ra=RA dec=DEC radius='PMRA / 100.0' out=pmra_scaled_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 10) for sources around Galactic L=20, B=20, with radius 10 arcseconds, converted from Galactic.",
        "response": "stilts pixfoot in=gal_data9.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius='10.0 / 3600.0' order=10 out=gal_10as_o10.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with a fixed radius of 1 arcminute, outputting the result directly to TOPCAT for viewing.",
        "response": "stilts pixfoot in=targets_topcat.fits ra=RA dec=DEC radius='1.0 / 60.0' omode=gui",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=gui\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a JSON MOC (order 18) for $0.5$ arcsecond radius circles, converted from Ecliptic Lon/Lat.",
        "response": "stilts pixfoot in=ecl_data5.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='0.5 / 3600.0' order=18 mocfmt=json out=ecl_0p5as_json.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 14) for sources within a 1 degree radius, filtering the input table to only keep rows with positive Declination.",
        "response": "stilts pixfoot in=pos_dec.fits icmd='select DEC > 0' ra=RA dec=DEC radius=1.0 order=14 out=pos_dec_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select DEC > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for 50 mas radius circles, ensuring the output column is named 'HPX_PIXEL'.",
        "response": "stilts pixfoot in=mas_50.fits ra=RA dec=DEC radius='50.0 / 3600000.0' ocmd='colmeta -name HPX_PIXEL PIXEL_INDEX' out=renamed_hpx_2.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=colmeta -name HPX_PIXEL PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 11) and apply a post-filter to sort the resultant HEALPix cells by index in ascending order.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=11 ocmd='sort PIXEL_INDEX' out=sorted_asc_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for objects within 10 arcseconds, converted from 10000 mas.",
        "response": "stilts pixfoot in=as_mas_conv.fits ra=RA dec=DEC radius='10000.0 / 3600000.0' out=as_mas_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 15) for $0.001$ degrees radius, filtering the input table to keep only every 10th row.",
        "response": "stilts pixfoot in=sampled_cat2.fits icmd='every 10' ra=RA dec=DEC radius=0.001 order=15 out=sampled_o15_001.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with a radius defined by $\frac{20 \text{ arcmin}}{60 \text{ arcmin}/\text{deg}}$ (0.333 deg).",
        "response": "stilts pixfoot in=div_am.fits ra=RA dec=DEC radius='20.0 / 60.0' out=div_am_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a raw binary MOC stream (order 13) for 5 arcminute radius circles.",
        "response": "stilts pixfoot in=raw_am.fits ra=RA dec=DEC radius='5.0 / 60.0' order=13 mocfmt=raw out=raw_5am.bin",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"raw\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a low-resolution MOC (order 5) for sources with a $0.5$ degree radius.",
        "response": "stilts pixfoot in=coarse_0p5.fits ra=RA dec=DEC radius=0.5 order=5 out=coarse_o5_0p5.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for objects where the radius is determined by $\text{DIST} / 1000$ in degrees, where DIST is distance in parsecs.",
        "response": "stilts pixfoot in=dist_pc.fits ra=RA dec=DEC radius='DIST_PC / 206265.0' out=dist_pc_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 16) for sources around Ecliptic Lon 30, Lat 30, using $0.001$ radians, converting internally.",
        "response": "stilts pixfoot in=ecl_rad2.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='radiansToDegrees(0.001)' order=16 out=ecl_mrad_o16.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with a fixed radius of 30 arcseconds, outputting the result in FITS format with compression.",
        "response": "stilts pixfoot in=comp_30as.fits ra=RA dec=DEC radius='30.0 / 3600.0' compress=true out=comp_30as.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 20) for $1$ mas radius circles, explicitly ensuring the output is not compressed.",
        "response": "stilts pixfoot in=mas_20.fits ra=RA dec=DEC radius='1.0 / 3600000.0' order=20 compress=false out=mas_20_uncomp.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=false\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Filter the input table to select rows where the source ID is an even number, then generate a MOC for 1 arcminute radius.",
        "response": "stilts pixfoot in=even_ids.fits icmd='select ID % 2 == 0' ra=RA dec=DEC radius='1.0 / 60.0' out=even_ids_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '%' '2' '==' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ID % 2 == 0\n\nUsage: select <expr>\n    (Unused arguments: '%' '2' '==' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 13) for all unique RA/DEC pairs, using a small point radius of $1 \times 10^{-6}$ degrees.",
        "response": "stilts pixfoot in=unique_coords.fits icmd='uniq RA DEC' ra=RA dec=DEC radius=1.0e-6 order=13 out=unique_coords_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'DEC'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: uniq RA DEC\n\nUsage: uniq [-count] [<colid-list>]\n    (Unused arguments: 'DEC'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with a radius given by $\text{exp}(\text{MAGNITUDE}) \times 10^{-8}$ degrees.",
        "response": "stilts pixfoot in=exp_mag.fits ra=RA dec=DEC radius='exp(MAGNITUDE) * 1.0e-8' out=exp_mag_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 10) for sources around Galactic L=150, B=0, with $0.005$ degrees radius, converted from Galactic.",
        "response": "stilts pixfoot in=gal_data10.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius=0.005 order=10 out=gal_005deg_o10.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for $500$ mas radius circles, and output the total number of columns in the resultant table (omode=count will return rows and columns).",
        "response": "stilts pixfoot in=count_meta.fits ra=RA dec=DEC radius='500.0 / 3600000.0' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an ASCII MOC (order 16) for 10 arcsecond radius circles, writing to a compressed output.",
        "response": "stilts pixfoot in=as_10_comp.fits ra=RA dec=DEC radius='10.0 / 3600.0' order=16 mocfmt=ascii compress=true out=as_10_comp.txt.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 14) for fixed $0.00005$ degrees radius, and outputting JSON format to a compressed file.",
        "response": "stilts pixfoot in=json_comp2.fits ra=RA dec=DEC radius=5.0e-5 order=14 mocfmt=json compress=true out=json_5e5_moc.json.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources where the radius is the $\text{stdev}(\text{FLUX})$ in the column, constrained by minimum FLUX.",
        "response": "stilts pixfoot in=stdev_flux.fits icmd='addcol STDEV_FLUX stdev(FLUX)' ra=RA dec=DEC radius=STDEV_FLUX out=stdev_flux_radius.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 17) for $0.0001$ radians, converted from Ecliptic coordinates, and outputting the column metadata.",
        "response": "stilts pixfoot in=ecl_meta.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='radiansToDegrees(1.0e-4)' omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 6) for 3 arcminutes radius circles, ensuring the result is immediately viewed in the GUI.",
        "response": "stilts pixfoot in=gui_view.fits ra=RA dec=DEC radius='3.0 / 60.0' order=6 omode=gui",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=gui\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the MOC for objects within $0.00000001$ degrees radius (10 nanodegrees).",
        "response": "stilts pixfoot in=nanodeg.fits ra=RA dec=DEC radius=1.0e-8 out=nanodeg_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 15) for sources around Galactic L=300, B=-60, with radius $0.01$ degrees, converted from Galactic.",
        "response": "stilts pixfoot in=gal_data11.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius=0.01 order=15 out=gal_01deg_o15.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for a radius equal to $\text{sqrt}(0.01)$ degrees.",
        "response": "stilts pixfoot in=sqrt_rad.fits ra=RA dec=DEC radius='sqrt(0.01)' out=sqrt_rad_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a low-resolution MOC (order 3) for sources with a 30 arcminute radius.",
        "response": "stilts pixfoot in=coarse_30am.fits ra=RA dec=DEC radius='30.0 / 60.0' order=3 out=coarse_o3_30am.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 18) for sources where the error radius is fixed at 5 mas, outputting JSON.",
        "response": "stilts pixfoot in=mas_5_json.fits ra=RA dec=DEC radius='5.0 / 3600000.0' order=18 mocfmt=json out=mas_5_json.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for all sources, limiting the input stream, and using $0.001$ degrees radius.",
        "response": "stilts pixfoot in=input.fits istream=true ra=RA dec=DEC radius=0.001 out=streamed_001.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"input.fits\"\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 14) and apply an output filter to add a calculated column representing the cosine of RA.",
        "response": "stilts pixfoot in=cos_ra.fits ra=RA dec=DEC order=14 ocmd='addcol COS_RA cosDeg(RA)' out=with_cos_ra.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol COS_RA cosDeg(RA)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC for circles whose radius is given by 1 degree divided by 3600 (1 arcsecond).",
        "response": "stilts pixfoot in=one_as_div.fits ra=RA dec=DEC radius='1.0 / 3600.0' out=one_as_div_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources within $0.0000005$ radians, converted from degrees, outputting ASCII.",
        "response": "stilts pixfoot in=tiny_rad_ascii.fits ra=RA dec=DEC radius='radiansToDegrees(5.0e-7)' mocfmt=ascii out=tiny_rad_ascii.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 19) for $0.1$ arcsecond radius, ensuring the output is compressed FITS.",
        "response": "stilts pixfoot in=hires_0p1as_comp.fits ra=RA dec=DEC radius='0.1 / 3600.0' order=19 compress=true out=hires_0p1as.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for $25$ mas radius circles, and calculate the statistical checksum on the result.",
        "response": "stilts pixfoot in=checksum_mas.fits ra=RA dec=DEC radius='25.0 / 3600000.0' omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 12) for sources with a radius given by $\text{PLX} \times 0.001$ (Plx in arcsec).",
        "response": "stilts pixfoot in=plx_scaled.fits ra=RA dec=DEC radius='PLX * 0.001' out=plx_scaled_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 10) for sources around Ecliptic Lon 180, Lat 0, with radius 5 arcminutes, converted internally.",
        "response": "stilts pixfoot in=ecl_data6.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='5.0 / 60.0' order=10 out=ecl_5am_o10.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the MOC for sources with a fixed radius of 1 arcminute, ensuring the output table is named 'FinalMOC'.",
        "response": "stilts pixfoot in=final_name.fits ra=RA dec=DEC radius='1.0 / 60.0' ocmd='tablename FinalMOC' out=final_moc_file.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tablename FinalMOC\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC at extremely high resolution (order 25) for the exact point positions listed in deep_catalog.fits.",
        "response": "stilts pixfoot in=deep_catalog.fits ra=RA dec=DEC radius=0 order=25 out=deep_cat_o25.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 10) for sources in observations.fits observed after MJD 59000, using the point location.",
        "response": "stilts pixfoot in=observations.fits icmd='select MJD > 59000.0' ra=RA dec=DEC order=10 out=recent_obs_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '59000.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MJD > 59000.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '59000.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage for sources within a 1.5 arcsecond radius, saving the output as a JSON MOC at order 14.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='1.5 / 3600.0' order=14 mocfmt=json out=targets_1p5as.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 17) for objects with a fixed radius of 250 milli-arcseconds (mas), outputting the raw UNIQ indices.",
        "response": "stilts pixfoot in=high_prec.fits ra=RA dec=DEC radius='250.0 / 3600000.0' order=17 mocfmt=raw out=raw_250mas.bin",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"raw\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Calculate the coverage MOC (order 9) for sources using a radius equal to PI divided by 500 degrees, and display only the coverage summary.",
        "response": "stilts pixfoot in=pi_data.fits ra=RA dec=DEC radius='PI / 500.0' order=9 mocfmt=summary out=-",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"summary\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an order 11 MOC for sources located around Galactic coordinates L=10, B=0, using a 0.01 degree radius (requires coordinate conversion).",
        "response": "stilts pixfoot in=gal_cat.fits icmd='addskycoords galactic icrs GLON GLAT RA DEC' ra=RA dec=DEC radius=0.01 order=11 out=gal_converted_0p01deg.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC (order 15) for point sources around Ecliptic coordinates (Lon=120, Lat=30), converting coordinates and returning the cell count.",
        "response": "stilts pixfoot in=ecl_cat.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius=0 order=15 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage MOC (order 13) where the radius is given by 2.0 times the R_ERR column (in degrees), and generate a checksum of the output.",
        "response": "stilts pixfoot in=errors.fits ra=RA dec=DEC radius='R_ERR * 2.0' order=13 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a very low-resolution MOC (order 2) from a simulated set of 1000 points.",
        "response": "stilts pixfoot in=:skysim:1000 ra=ra dec=dec radius=0 order=2 out=sim_low_res_o2.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 10) for objects within 60 arcseconds, writing the output as a CSV file.",
        "response": "stilts pixfoot in=targets_60as.fits ra=RA dec=DEC radius='60.0 / 3600.0' order=10 ofmt=csv out=targets_60as.csv",
        "chat.jar": "failed",
        "error": "Error: ofmt=csv: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 16) for sources with a fixed 1 arcminute radius, filtering the input to select rows where FLUX > 100.",
        "response": "stilts pixfoot in=flux_cat.fits icmd='select FLUX > 100.0' ra=RA dec=DEC radius='1.0 / 60.0' order=16 out=bright_1am.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '100.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX > 100.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '100.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate the MOC at the maximum HEALPix order (29) for point sources, ensuring the output is a standard FITS MOC file.",
        "response": "stilts pixfoot in=max_res_input.fits ra=RA dec=DEC radius=0 order=29 out=point_o29.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage MOC (order 12) for a radius calculated as 5 arcminutes divided by 3.",
        "response": "stilts pixfoot in=div_rad.fits ra=RA dec=DEC radius='(5.0 / 3.0) / 60.0' order=12 mocfmt=ascii out=div_am_o12.txt",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 15) for sources with 10 arcsecond radius. Input coordinates are in radians and must be converted.",
        "response": "stilts pixfoot in=rad_input.fits ra='radiansToDegrees(RA_R)' dec='radiansToDegrees(DEC_R)' radius='10.0 / 3600.0' order=15 mocfmt=json out=rad_10as.json",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 8) for point sources. The input columns X, Y, Z are Cartesian and must be converted to ICRS RA/DEC before processing.",
        "response": "stilts pixfoot in=cartesian.fits icmd='addskycoords icrs icrs xyzToLon(X,Y,Z) xyzToLat(X,Y,Z) RA_ICRS DEC_ICRS' ra=RA_ICRS dec=DEC_ICRS radius=0 order=8 out=cartesian_o8.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a raw binary MOC stream (order 29) for sources with a tiny fixed radius of 0.0001 degrees.",
        "response": "stilts pixfoot in=tiny_deg.fits ra=RA dec=DEC radius=0.0001 order=29 mocfmt=raw out=raw_tiny_deg.bin",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter mocfmt: Unknown value \"raw\" - must be one of fits, json, ascii\nUsage: mocfmt=fits|json|ascii\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "I need the metadata for the MOC created from point sources at order 13.",
        "response": "stilts pixfoot in=metadata_test.fits ra=RA dec=DEC radius=0 order=13 omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a MOC (order 14) for 30 arcsecond radii, adding a column named 'AREA_SQDEG' showing the area of the HEALPix cell.",
        "response": "stilts pixfoot in=addcol_test.fits ra=RA dec=DEC radius='30.0 / 3600.0' order=14 ocmd='addcol AREA_SQDEG healpixSqdeg(14)' out=moc_with_area.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol AREA_SQDEG healpixSqdeg(14)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate an MOC (order 11) for sources where the radius is calculated as the reciprocal of the redshift column Z, assuming the result is in degrees and Z >= 1.",
        "response": "stilts pixfoot in=z_data.fits icmd='select Z >= 1.0' ra=RA dec=DEC radius='1.0 / Z' order=11 out=reciprocal_z.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '1.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Z >= 1.0\n\nUsage: select <expr>\n    (Unused arguments: '>=' '1.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a point MOC (order 12) and output only the first 100 resulting HEALPix cells.",
        "response": "stilts pixfoot in=large_input.fits ra=RA dec=DEC radius=0 order=12 ocmd='head 100' out=head_100_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=head 100\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the MOC (order 16) for circles with a 20 mas radius, ensuring the output is FITS.",
        "response": "stilts pixfoot in=mas_20.fits ra=RA dec=DEC radius='20.0 / 3600000.0' order=16 out=mas_20_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC at the lowest possible HEALPix order (order 1) for a simple list of positions.",
        "response": "stilts pixfoot in=simple_points.fits ra=RA dec=DEC radius=0 order=1 out=coarse_o1.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create an MOC (order 14) for objects within 0.01 arcminutes, saving the result as an ECSV file.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='0.01 / 60.0' order=14 ofmt=ecsv out=targets_tiny_am.ecsv",
        "chat.jar": "failed",
        "error": "Error: ofmt=ecsv: out and ofmt parameters can only be used when omode=out\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 13) for points, filtering the input to keep only rows where the magnitude MAG is non-null.",
        "response": "stilts pixfoot in=mag_data.fits icmd='select !NULL_MAG' ra=RA dec=DEC radius=0 order=13 out=non_null_mag_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage MOC (order 11) where the radius is determined by $log_{10}(text{FLUX})$ (in degrees, assuming flux is large).",
        "response": "stilts pixfoot in=log_flux_data.fits ra=RA dec=DEC radius='log10(FLUX)' order=11 out=log_flux_radius.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a point MOC (order 10) and sort the resultant HEALPix cells by the RA coordinate of the cell center (requires conversion).",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC radius=0 order=10 ocmd='addcol RA_CENTER healpixNestLon(10, PIXEL_INDEX); sort RA_CENTER' out=sorted_by_ra.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol RA_CENTER healpixNestLon(10, PIXEL_INDEX); sort RA_CENTER\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 17) for a radius of 5 micro-arcseconds ($mu$as).",
        "response": "stilts pixfoot in=microas_data.fits ra=RA dec=DEC radius='5.0 / 3600000000.0' order=17 out=five_microas.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a point MOC (order 9) excluding sources within the Galactic plane ($|\text{B}| < 1$ degree).",
        "response": "stilts pixfoot in=gal_survey.fits icmd='addskycoords icrs galactic RA DEC GLON GLAT; select abs(GLAT) > 1.0' ra=RA dec=DEC radius=0 order=9 out=off_plane_o9.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was:  select abs(GLAT) > 1.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '1.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the MOC (order 15) for circles where the radius is the quadrature sum of X_ERR and Y_ERR (in degrees).",
        "response": "stilts pixfoot in=quad_errors.fits ra=RA dec=DEC radius='hypot(X_ERR, Y_ERR)' order=15 out=quadrature_radius.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a point MOC (order 14) where the RA coordinate is shifted by 0.1 degree/year using proper motion PMRA.",
        "response": "stilts pixfoot in=pm_shift.fits ra='RA + PMRA / 3600000.0 / 10.0' dec=DEC radius=0 order=14 out=shifted_ra_moc.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Generate a MOC (order 4) for circles with a radius of 1 degree divided by 1.5.",
        "response": "stilts pixfoot in=wide_rad.fits ra=RA dec=DEC radius='1.0 / 1.5' order=4 out=two_thirds_deg.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Create a point MOC (order 10), filtering the input table to include only rows where the string identifier ID_SOURCE starts with 'NGC'.",
        "response": "stilts pixfoot in=id_filter.fits icmd='select startsWith(ID_SOURCE, \"NGC\")' ra=RA dec=DEC radius=0 order=10 out=ngc_only_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: select startsWith(ID_SOURCE, \"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Find the coverage MOC (order 18) for circles with an extremely small fixed radius of 0.000001 degrees.",
        "response": "stilts pixfoot in=microdeg_fix.fits ra=RA dec=DEC radius=1.0e-6 order=18 out=microdeg_o18.fits",
        "chat.jar": "executed successfully",
        "cmd": "pixfoot"
    },
    {
        "prompt": "Calculate the total number of HEALPix cells (order 13) covered by point sources in the catalog.",
        "response": "stilts pixfoot in=full_count.fits ra=RA dec=DEC radius=0 order=13 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "cmd": "pixfoot"
    }
]