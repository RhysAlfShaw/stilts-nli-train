[
    {
        "prompt": "Crossmatch three FITS files, `cat_A.fits`, `cat_B.fits`, and `cat_C.fits`, on sky position with a 3 arcsecond radius. Find groups of objects that are linked across any of the tables.",
        "response": "stilts tmatchn nin=3 in1=cat_A.fits in2=cat_B.fits in3=cat_C.fits multimode=group matcher=sky params=3 values1='RA DEC' values2='RA DEC' values3='RA DEC' out=tri-survey_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I have a master catalog `master.fits` and two other catalogs, `survey1.vot` and `survey2.csv`. Using `master.fits` as the reference, find all objects in it that have counterparts within 2 arcsec in EITHER `survey1` or `survey2`.",
        "response": "stilts tmatchn nin=3 in1=master.fits ifmt2=votable in2=survey1.vot ifmt3=csv in3=survey2.csv multimode=pairs iref=1 matcher=sky params=2 values1='RA DEC' values2='RA_DEG DEC_DEG' values3='ra dec' join1=match out=master_with_any_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "How can I find objects that are common to all three of my catalogs: `sdss.fits`, `panstarrs.fits`, and `wise.fits`? The match radius is 1.5 arcseconds and `sdss.fits` is the reference.",
        "response": "stilts tmatchn nin=3 in1=sdss.fits in2=panstarrs.fits in3=wise.fits multimode=pairs iref=1 matcher=sky params=1.5 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=match join3=match out=common_sources.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find groups of objects across four tables (`t1.fits`, `t2.fits`, `t3.fits`, `t4.fits`) that match on an exact `SOURCE_ID`.",
        "response": "stilts tmatchn nin=4 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits multimode=group matcher=exact values1=SOURCE_ID values2=SOURCE_ID values3=SOURCE_ID values4=SOURCE_ID out=id_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I'm matching three catalogs. The coordinate columns are `ra1, dec1`, `ra2, dec2`, and `ra3, dec3`. To avoid confusion, can you add suffixes `_c1`, `_c2`, `_c3` to the columns from each table in the output?",
        "response": "stilts tmatchn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits multimode=group matcher=sky params=4 values1='ra1 dec1' values2='ra2 dec2' values3='ra3 dec3' fixcols=all suffix1=_c1 suffix2=_c2 suffix3=_c3 out=suffixed_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Using `t1.fits` as a reference, find all its rows that have NO match in `t2.fits` OR `t3.fits` within 5 arcseconds.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=pairs iref=1 matcher=sky params=5 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=nomatch join3=nomatch out=isolated_t1_sources.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "What's the difference between `multimode=pairs` and `multimode=group` in `tmatchn`?",
        "response": "In `pairs` mode, one table is designated as the reference table, and pair matches are found between it and each of the other tables. In `group` mode, the command identifies groups of objects across all input tables that are mutually linked by pair matches in a 'friends of friends' manner, with no single table being privileged as the reference [1-4].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Count the number of match groups between three large catalogs without creating an output file.",
        "response": "stilts tmatchn nin=3 in1=large1.fits in2=large2.fits in3=large3.fits multimode=group matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I want to match three photometric catalogs (`u_band.fits`, `g_band.fits`, `r_band.fits`) on sky position (2 arcsec) and magnitude (within 0.2 mag).",
        "response": "stilts tmatchn nin=3 in1=u_band.fits in2=g_band.fits in3=r_band.fits multimode=group matcher=sky+1d params='2 0.2' values1='RA DEC UMAG' values2='RA DEC GMAG' values3='RA DEC RMAG' out=multi_color_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match `cat1.fits`, `cat2.fits`, `cat3.fits`. Before matching, filter `cat2` to only include rows where `FLAG==0`. After matching, sort the result by the `RA_1` column.",
        "response": "stilts tmatchn nin=3 in1=cat1.fits in2=cat2.fits in3=cat3.fits icmd2='select FLAG==0' multimode=group matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 ocmd='sort RA_1' out=filtered_sorted_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find groups of objects across three tables (`t1.csv`, `t2.csv`, `t3.csv`) that fall into the same 1D bin of size 0.01 in the `REDSHIFT` column.",
        "response": "stilts tmatchn nin=3 ifmt=csv in1=t1.csv in2=t2.csv in3=t3.csv multimode=group matcher=1d params=0.01 values1=REDSHIFT values2=REDSHIFT values3=REDSHIFT out=redshift_clumps.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Using `ref.fits` as the reference, find all rows that have a match in `comp1.fits` but DO NOT have a match in `comp2.fits`. Radius is 10 arcsec.",
        "response": "stilts tmatchn nin=3 in1=ref.fits in2=comp1.fits in3=comp2.fits multimode=pairs iref=1 matcher=sky params=10 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=match join3=nomatch out=ref_in_comp1_not_comp2.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three catalogs with per-object errors. `c1.fits` has error `err1`, `c2.fits` has `err2`, and `c3.fits` has `err3`. The scale is 5 arcsec.",
        "response": "stilts tmatchn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits multimode=group matcher=skyerr params=5 values1='ra dec err1' values2='ra dec err2' values3='ra dec err3' out=group_error_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I need to match three large tables on a multi-core machine. How can I enable parallel execution?",
        "response": "stilts tmatchn nin=3 in1=huge1.fits in2=huge2.fits in3=huge3.fits multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' runner=parallel out=parallel_3way_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Show me the metadata of the table that would result from a 3-way sky match.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables from different surveys (`s1.vot`, `s2.dat`, `s3.fits`, `s4.csv`) and send the result directly to TOPCAT.",
        "response": "stilts tmatchn nin=4 in1=s1.vot ifmt2=ascii in2=s2.dat in3=s3.fits ifmt4=csv in4=s4.csv multimode=group matcher=sky params=5 values1='RA DEC' values2='ra dec' values3='RA_J2000 DEC_J2000' values4='alpha delta' omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I need to find all objects that appear in a list of `transients.fits` and have counterparts in both `archive1.fits` and `archive2.fits`. A match is 2.5 arcsec.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=1 in1=transients.fits in2=archive1.fits in3=archive2.fits matcher=sky params=2.5 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=match join3=match out=confirmed_transients.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "What does `joinN=always` do in `tmatchn`?",
        "response": "The `joinN=always` parameter forces every row from input table N to be included in the output table. If a row from table N is part of a match group, it will be joined with the other members of that group. If it is not part of any match group, it will appear in an output row by itself, with blank values for the columns from all other tables [2, B.41.1, 1976].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three catalogs. `ref.fits` is the reference. I want an output table that has one row for every row in `ref.fits`, with matched data from `catA.fits` and `catB.fits` included where available.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=1 in1=ref.fits in2=catA.fits in3=catB.fits matcher=sky params=3 values1='ra dec' values2='ra dec' values3='ra dec' join1=always out=ref_with_optional_matches.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find groups of objects across three catalogs that match in a 2D plane on columns `XPOS` and `YPOS` within a 5 pixel radius.",
        "response": "stilts tmatchn nin=3 in1=d1.fits in2=d2.fits in3=d3.fits multimode=group matcher=2d params=5 values1='XPOS YPOS' values2='XPOS YPOS' values3='XPOS YPOS' out=detector_plane_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Please combine the results of matching `main.fits` (as ref) against `extra1.fits` and `extra2.fits`. In the final table, only keep the ID columns from each table.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=1 in1=main.fits in2=extra1.fits in3=extra2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' fixcols=all suffix1=_m suffix2=_e1 suffix3=_e2 ocmd='keepcols \"ID_m ID_e1 ID_e2\"' out=id_triplets.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "For my three catalogs, `c_a.fits`, `c_b.fits`, `c_c.fits`, I need to identify groups where objects are within 1 arcsec AND have a `Z_SPEC` value within 0.005 of each other.",
        "response": "stilts tmatchn nin=3 in1=c_a.fits in2=c_b.fits in3=c_c.fits multimode=group matcher=sky+1d params='1 0.005' values1='RA DEC Z_SPEC' values2='RA DEC Z_SPEC' values3='RA DEC Z_SPEC' out=pos_z_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "How can I match my table `targets.fits` against `surveyA.fits`, `surveyB.fits`, and `surveyC.fits` and get a statistical summary of the results?",
        "response": "stilts tmatchn nin=4 multimode=pairs iref=1 in1=targets.fits in2=surveyA.fits in3=surveyB.fits in4=surveyC.fits matcher=sky params=4 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I want to see all rows from `cat1.fits` that have a match in `cat2.fits`, alongside all rows from `cat3.fits`, using `cat1.fits` as the reference.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=1 in1=cat1.fits in2=cat2.fits in3=cat3.fits matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=match join3=always out=cat1_cat2_pairs_with_cat3.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find groups of objects across four catalogs where the unique string identifier `UID` is identical.",
        "response": "stilts tmatchn nin=4 in1=t1.csv in2=t2.csv in3=t3.csv in4=t4.csv ifmt=csv multimode=group matcher=exact values1=UID values2=UID values3=UID values4=UID out=uid_quartets.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match `ref.fits` (table 2) against `d1.fits` (table 1) and `d2.fits` (table 3). Match radius is 3 arcsec.",
        "response": "stilts tmatchn nin=3 in1=d1.fits in2=ref.fits in3=d2.fits multimode=pairs iref=2 matcher=sky params=3 values1='ra dec' values2='ra dec' values3='ra dec' out=ref2_matches.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Show me the groups of objects that exist in `cat_u.fits` and `cat_g.fits`, but specifically DO NOT have a counterpart in `cat_r.fits`.",
        "response": "stilts tmatchn nin=3 in1=cat_u.fits in2=cat_g.fits in3=cat_r.fits multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=match join3=nomatch out=ug_not_r_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I have 5 tables. `t1` is the reference. I want to see every row from `t1`, joined with the best match from `t2`, `t3`, `t4`, and `t5` if one exists.",
        "response": "stilts tmatchn nin=5 multimode=pairs iref=1 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits in5=t5.fits matcher=sky params=5 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' values5='ra dec' join1=always out=t1_with_all_counterparts.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find groups across `obs1.fits`, `obs2.fits`, and `obs3.fits`. After matching, add a column that is the average of the `FLUX` column from the three tables.",
        "response": "stilts tmatchn nin=3 in1=obs1.fits in2=obs2.fits in3=obs3.fits multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 ocmd='addcol AVG_FLUX (FLUX_1+FLUX_2+FLUX_3)/3.' out=avg_flux_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Can you explain the `iref` parameter in `tmatchn`?",
        "response": "The `iref` parameter is used only when `multimode=pairs`. It specifies the 1-based index of the input table that will be used as the reference table. All matches are then performed by pairing rows from the other tables against the rows of this reference table [2, B.41.1, 1974].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs and calculate a checksum on the output table.",
        "response": "stilts tmatchn nin=4 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I need to match my `target_list.csv` against three large survey FITS files. Can I show progress?",
        "response": "stilts tmatchn nin=4 ifmt1=csv in1=target_list.csv in2=s1.fits in3=s2.fits in4=s3.fits multimode=pairs iref=1 matcher=sky params=3 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' progress=log out=target_matches.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find all objects in `main_cat.fits` that have a counterpart within 2 arcsec in `cat_A.fits` AND `cat_B.fits` AND `cat_C.fits`.",
        "response": "stilts tmatchn nin=4 multimode=pairs iref=1 in1=main_cat.fits in2=cat_A.fits in3=cat_B.fits in4=cat_C.fits matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' join1=match join2=match join3=match join4=match out=fully_matched_main.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three catalogs. `c1.fits` has FK4 coordinates `RA_1950`, `DEC_1950`. The others are J2000. How do I match them?",
        "response": "stilts tmatchn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits icmd1='addskycoords fk4 fk5 RA_1950 DEC_1950 RA_2000 DEC_2000' multimode=group matcher=sky params=2 values1='RA_2000 DEC_2000' values2='ra dec' values3='ra dec' out=fk4_j2000_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I'm looking for high proper motion candidates by comparing three epochs. Find groups of objects within 1 arcsec, then select only groups where the total sky motion between epoch 1 and 3 is large.",
        "response": "stilts tmatchn nin=3 in1=epoch1.fits in2=epoch2.fits in3=epoch3.fits multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 ocmd='select skyDistanceDegrees(ra_1,dec_1,ra_3,dec_3) > 1./3600.' out=high_pm_groups.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1./3600.'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select skyDistanceDegrees(ra_1,dec_1,ra_3,dec_3) > 1./3600.\n\nUsage: select <expr>\n    (Unused arguments: '>' '1./3600.'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables and output the result as a multi-table FITS file, where each output table corresponds to one of the input tables but only contains the matched rows.",
        "response": "This is not a standard output of `tmatchn`. You would run `tmatchn` to get the matched IDs, then use `tpipe` with a `select` filter on each of the original tables to create the four separate output tables, and finally `tmulti` to combine them.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find objects present in `catA.fits` and `catB.fits` and `catC.fits` based on an exact match of string column `OBJ_NAME`.",
        "response": "stilts tmatchn nin=3 in1=catA.fits in2=catB.fits in3=catC.fits multimode=group matcher=exact values1=OBJ_NAME values2=OBJ_NAME values3=OBJ_NAME out=name_matched_triplets.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Using `ref_cat.fits` as the reference, show me all its rows, along with data for any rows in `survey1.fits` that match it, but ONLY if there is no match in `survey2.fits`.",
        "response": "stilts tmatchn nin=3 in1=ref_cat.fits in2=survey1.fits in3=survey2.fits multimode=pairs iref=1 matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' join1=always join2=match join3=nomatch out=ref_survey1_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Generate a list of all objects from `catalog1.fits`, `catalog2.fits`, and `catalog3.fits` that were part of any match group.",
        "response": "This requires multiple steps. First, run `tmatchn` to identify groups. Then, for each catalog, select rows whose IDs appear in the matched output, and finally use `tcat` to combine these lists.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables on a 1D value `FREQUENCY` with a tolerance of 100 Hz.",
        "response": "stilts tmatchn nin=3 in1=obs1.fits in2=obs2.fits in3=obs3.fits multimode=group matcher=1d params=100 values1=FREQUENCY values2=FREQUENCY values3=FREQUENCY out=freq_coincidence.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find groups of objects across three tables, then in the output table, only keep the ID and RA columns from each input table.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 ocmd='keepcols \"ID_1 RA_1 ID_2 RA_2 ID_3 RA_3\"' out=minimal_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "What does `multimode=group` mean for a 3-table match?",
        "response": "`multimode=group` finds groups where each member is linked to at least one other member by a pairwise match. For three tables A, B, and C, a group could be (a1, b1), or (b2, c2), or (a3, b3, c3), or even (a4, b4) and (b4, c4) which would group a4, b4, and c4 together, even if a4 and c4 do not directly match [1, 4].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match `cat1.fits`, `cat2.fits`, and `cat3.fits` using `cat2.fits` as the reference table.",
        "response": "stilts tmatchn nin=3 in1=cat1.fits in2=cat2.fits in3=cat3.fits multimode=pairs iref=2 matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' out=cat2_reference_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I want to match four tables. After finding the groups, I only want to see groups that have exactly four members (one from each table).",
        "response": "stilts tmatchn nin=4 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 suffix4=_4 ocmd='select !NULL_ID_1&&!NULL_ID_2&&!NULL_ID_3&&!NULL_ID_4' out=complete_quartets.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Can `tmatchn` handle a mix of FITS, VOTable, and CSV inputs?",
        "response": "Yes, you can specify the format for each input table individually using the `ifmtN` parameter, for example `ifmt2=csv`. Formats like FITS and VOTable are often auto-detected, so you may not need to specify them [2, B.41.1].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs (`a.fits`, `b.fits`, `c.fits`, `d.fits`) with `a.fits` as reference. Include all rows from `a.fits`, and indicate which of the other catalogs it has a match in.",
        "response": "stilts tmatchn nin=4 multimode=pairs iref=1 in1=a.fits in2=b.fits in3=c.fits in4=d.fits matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' join1=always out=a_with_match_flags.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find all objects from my three catalogs that did NOT participate in any match group.",
        "response": "This is a multi-step process. First, run `tmatchn` to find all the groups and get the unique IDs of matched objects from each catalog. Then, for each input catalog, use `tmatch2` with `join=1not2` to select the rows from the original catalog that are not in the list of matched IDs.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I have three tables with proper motions. Find groups of objects that are within 1 arcsec and have a `PMRA` difference of less than 5 mas/yr.",
        "response": "stilts tmatchn nin=3 in1=pm1.fits in2=pm2.fits in3=pm3.fits multimode=group matcher=sky+1d params='1 5' values1='RA DEC PMRA' values2='RA DEC PMRA' values3='RA DEC PMRA' out=kinematic_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "How do the `joinN` parameters work in `multimode=pairs`?",
        "response": "In `pairs` mode, the `joinN` parameters act as filters on the output rows based on whether a match was found for the reference row in table N. For example, `join1=match join2=match join3=nomatch` would return rows from the reference table (`iref=1`) that have a match in table 2 but do not have a match in table 3 [2, B.41.1, 1976].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "What's the best way to match a small list of targets against 10 large survey catalogs?",
        "response": "stilts tmatchn nin=11 multimode=pairs iref=1 in1=targets.fits in2=s1.fits ... in11=s10.fits matcher=sky params=2 ... join1=always out=targets_vs_10_surveys.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter in3: null value not allowed\nUsage: in3=<table3>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match `cat1.fits` and `cat2.fits` against `ref.fits`. After matching, add a column `IS_PAIRED` that is true if a row from `cat1` was matched, and false otherwise.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=3 in1=cat1.fits in2=cat2.fits in3=ref.fits matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 join3=always ocmd='addcol IS_PAIRED !NULL_ID_1' out=ref_with_pair_flag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Combine `epoch1.fits`, `epoch2.fits`, `epoch3.fits`. Before matching, for each table, select only rows with a `FLUX_ERROR < 0.1`.",
        "response": "stilts tmatchn nin=3 in1=epoch1.fits in2=epoch2.fits in3=epoch3.fits icmd1='select FLUX_ERROR < 0.1' icmd2='select FLUX_ERROR < 0.1' icmd3='select FLUX_ERROR < 0.1' multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' out=clean_epoch_groups.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX_ERROR < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find groups of objects across three catalogs. The output table should only contain the columns from the first table.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 join1=match ocmd='keepcols \"*_1\"' out=t1_only_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three catalogs where position errors are `e_pos1`, `e_pos2`, `e_pos3` and combine them in quadrature.",
        "response": "stilts tmatchn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits multimode=group matcher=skyerr_q params=3 values1='ra dec e_pos1' values2='ra dec e_pos2' values3='ra dec e_pos3' out=quadrature_error_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I have three tables `a.fits`, `b.fits`, `c.fits`. I want to find all rows in `a.fits` that have a match in `b.fits`, irrespective of whether they match `c.fits`.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=1 in1=a.fits in2=b.fits in3=c.fits matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=match out=a_b_matches.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs and output the result to a text file.",
        "response": "stilts tmatchn nin=4 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' ofmt=text out=4way_match.txt",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Can I use different match radii for different pairs in `tmatchn`?",
        "response": "No, `tmatchn` uses a single `matcher` with a single set of `params` that applies to all pairwise comparisons between tables. To use different radii, you would need to perform multiple `tmatch2` commands and then combine the results.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find groups of objects across `spec.fits`, `phot.fits`, and `xray.fits`, and for each group, report the mean redshift from the `spec.fits` table.",
        "response": "This is a two-step process. First, run `tmatchn` to identify the groups and get the IDs. Then, join the `spec.fits` table with the `tmatchn` output on ID and use `tgroup` to calculate the mean redshift per group.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables `t1, t2, t3, t4` using `t4` as the reference.",
        "response": "stilts tmatchn nin=4 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits multimode=pairs iref=4 matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' out=t4_ref_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "What is the role of the `tuning` parameter in `tmatchn`?",
        "response": "The `tuning` parameter provides values to adjust the internal algorithms of the chosen `matcher`. For example, for the `sky` matcher, it controls the HEALPix level used for spatial indexing. Adjusting it does not change the result of the match, but can affect performance in terms of CPU time and memory usage [1, 5].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Join three tables on `OBJECT_ID`. Before joining, for each table, remove rows where `MAG_ERR > 0.2`.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits icmd1='select MAG_ERR <= 0.2' icmd2='select MAG_ERR <= 0.2' icmd3='select MAG_ERR <= 0.2' multimode=group matcher=exact values1=OBJECT_ID values2=OBJECT_ID values3=OBJECT_ID out=clean_id_groups.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<=' '0.2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG_ERR <= 0.2\n\nUsage: select <expr>\n    (Unused arguments: '<=' '0.2'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I want to match three lists of stars, but only keep the groups where at least two of the stars are present.",
        "response": "The default behavior of `multimode=group` is to output groups of size two or more, so no special parameters are needed. A command like `stilts tmatchn nin=3 ... multimode=group` will achieve this.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match my reference list `ref.fits` against two very large catalogs `large1.fits` and `large2.fits`. How can I make this faster?",
        "response": "You can try using the `runner=parallel` parameter to use multiple CPU cores. For sky matches, you can also experiment with the `tuning` parameter to adjust the HEALPix level for potentially better performance [2, B.41.1, 1963].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find groups across three catalogs, then keep only the `ID` columns and send the result to the GUI.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' icmd1='keepcols \"ID ra dec\"' icmd2='keepcols \"ID ra dec\"' icmd3='keepcols \"ID ra dec\"' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 ocmd='keepcols \"ID_1 ID_2 ID_3\"' omode=gui",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match `main.fits` against `catA.fits` and `catB.fits`. I want to see every entry from `catA`, joined with its match in `main` and `catB` if they exist.",
        "response": "stilts tmatchn nin=3 in1=main.fits in2=catA.fits in3=catB.fits multimode=pairs iref=2 matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' join2=always out=catA_centric_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables on their 3D positions `X, Y, Z` with an error of 10 units.",
        "response": "stilts tmatchn nin=3 in1=pos1.fits in2=pos2.fits in3=pos3.fits multimode=group matcher=3d params=10 values1='X Y Z' values2='X Y Z' values3='X Y Z' out=3d_pos_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Using `t1.fits` as the reference, find all rows that have a match in `t2.fits` and also have a match in `t3.fits`.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=pairs iref=1 matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=match join3=match out=t1_in_t2_and_t3.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Can `tmatchn` handle input from a pipe?",
        "response": "Yes, but it's tricky since `tmatchn` requires multiple table inputs. You can pipe one table using `in1=-` and specify the others as files, but you cannot pipe multiple tables into a single `tmatchn` command.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I'm matching three catalogs of galaxies. For each, I want to filter out objects with `CLASS != 'GALAXY'` before matching.",
        "response": "stilts tmatchn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits icmd1='select CLASS==\"GALAXY\"' icmd2='select CLASS==\"GALAXY\"' icmd3='select CLASS==\"GALAXY\"' multimode=group matcher=sky params=10 values1='ra dec' values2='ra dec' values3='ra dec' out=galaxy_only_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find all groups of objects that have an entry in at least one of `cat1.fits`, `cat2.fits`, `cat3.fits`.",
        "response": "This is ambiguous. `tmatchn` finds groups of matching objects. If you want a list of all unique objects across all catalogs, you would need a more complex workflow involving `tcat` and `uniq` filters, likely after a crossmatch to identify duplicates.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "What's the simplest `tmatchn` command?",
        "response": "A simple command would be: `stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=5 values1='ra dec' values2='ra dec' values3='ra dec' out=out.fits`",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "After a 3-way match, I want to see which groups have members from `table1` and `table3` but not `table2`.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 ocmd='select !NULL_ID_1 && NULL_ID_2 && !NULL_ID_3' out=groups_1_and_3_only.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '&&' 'NULL_ID_2' '&&' '!NULL_ID_3'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select !NULL_ID_1 && NULL_ID_2 && !NULL_ID_3\n\nUsage: select <expr>\n    (Unused arguments: '&&' 'NULL_ID_2' '&&' '!NULL_ID_3'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I want to match three tables, and then only keep rows from the second input table that were part of a match.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 join2=match ocmd='keepcols \"*_2\"' out=t2_matched_rows.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs and output the results as a LaTeX table.",
        "response": "stilts tmatchn nin=4 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits multimode=group matcher=sky params=5 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' ofmt=latex out=4way_match.tex",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match `ref.fits` against `catA.fits`, `catB.fits`, `catC.fits`, keeping all rows from `ref.fits` and only matched rows from the others.",
        "response": "stilts tmatchn nin=4 in1=ref.fits in2=catA.fits in3=catB.fits in4=catC.fits multimode=pairs iref=1 matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' join1=always out=ref_left_join_3.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find all groups across my three tables (`t1, t2, t3`) and then, for each group, calculate the mean separation between members and the reference object in `t1`.",
        "response": "This is not a direct output. You would run `tmatchn` with `multimode=group` to get the groups. Then, in a separate step, you would need to join this result with the original tables and use `tpipe` with expressions like `skyDistanceDegrees` to calculate separations.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Can I use different coordinate systems (e.g., galactic for one table, ICRS for others) in `tmatchn`?",
        "response": "Yes, but you must use the `icmdN` filter with the `addskycoords` command to convert all tables to a common coordinate system *before* the matching stage. For example: `icmd2='addskycoords galactic icrs GLON GLAT RA_ICRS DEC_ICRS'`.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three catalogs where the coordinates for table 3 are in columns `pos_ra` and `pos_dec`.",
        "response": "stilts tmatchn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits multimode=group matcher=sky params=3 values1='ra dec' values2='ra dec' values3='pos_ra pos_dec' out=custom_col_names.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I want all rows from `table1`, `table2`, and `table3` in the output, with matched groups joined together and unmatched rows having nulls for the other tables' columns.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' join1=always join2=always join3=always out=full_outer_3way_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I have three observation logs. Find groups of observations that happened within 60 seconds of each other.",
        "response": "stilts tmatchn nin=3 in1=log1.fits in2=log2.fits in3=log3.fits multimode=group matcher=1d params=60 values1=OBS_TIME_UNIX values2=OBS_TIME_UNIX values3=OBS_TIME_UNIX out=time_clustered_obs.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match my `main.fits` against `survey1.fits` and `survey2.fits`, but only for sources in `main.fits` brighter than magnitude 15.",
        "response": "stilts tmatchn nin=3 in1=main.fits in2=survey1.fits in3=survey2.fits multimode=pairs iref=1 icmd1='select MAG < 15' matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' out=bright_source_matches.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG < 15\n\nUsage: select <expr>\n    (Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find all groups across three catalogs, then take a random sample of 100 groups from the result.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' ocmd='random 100' out=random_group_sample.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 100\n\nUsage: random\n    (Unused arguments: '100'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I want to find objects that are in `cat1` and `cat3`, but not `cat2`, using `cat1` as the reference.",
        "response": "stilts tmatchn nin=3 in1=cat1.fits in2=cat2.fits in3=cat3.fits multimode=pairs iref=1 matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' join1=match join2=nomatch join3=match out=in_1_and_3_not_2.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "After a 4-way group match, I want to create a new column that counts how many of the 4 tables contributed to each group.",
        "response": "stilts tmatchn nin=4 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits multimode=group matcher=sky params=1 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 suffix4=_4 ocmd='addcol N_Match countTrue(!NULL_ID_1,!NULL_ID_2,!NULL_ID_3,!NULL_ID_4)' out=groups_with_counts.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Is it possible to do a symmetric best match with `tmatchn` like `find=best` in `tmatch2`?",
        "response": "No, the `find=best` option is specific to `tmatch2` for symmetric pair matching. For more than two tables, the logic becomes more complex. `tmatchn`'s `multimode=group` identifies all linked members, and `multimode=pairs` finds the best match relative to a single reference table [1, 2, 6].",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "How can I find triplets of stars from `cat_R.fits`, `cat_G.fits`, and `cat_B.fits` that are aligned on the sky within a certain tolerance?",
        "response": "This is a complex geometric problem, not a simple proximity match. `tmatchn` can find groups of three nearby stars, but you would need to use `tpipe` on the output to apply an additional geometric filter (e.g., calculating angles between the three points) to test for alignment.",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match `t1.fits`, `t2.fits`, `t3.fits`, `t4.fits`, and `t5.fits` in group mode, and use a HEALPix level of 12 for the internal sky binning.",
        "response": "stilts tmatchn nin=5 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits in5=t5.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' values4='ra dec' values5='ra dec' tuning=12 out=5way_tuned_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Show me all objects from `catalog_A.fits` that appear in a group with at least one object from `catalog_B.fits` OR `catalog_C.fits`.",
        "response": "stilts tmatchn nin=3 in1=catalog_A.fits in2=catalog_B.fits in3=catalog_C.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' fixcols=all suffix1=_A suffix2=_B suffix3=_C join1=match ocmd='keepcols \"*_A\"' out=A_with_B_or_C_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Perform a 3-way match, but for the third table, the RA values are in hours. How do I convert them?",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='hmsToDegrees(RA_HRS) DEC' out=hours_to_deg_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "I want to match three tables and then output the result in ECSV format.",
        "response": "stilts tmatchn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits multimode=group matcher=sky params=2 values1='ra dec' values2='ra dec' values3='ra dec' ofmt=ecsv out=3way_match.ecsv",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs (c1.fits, c2.fits, c3.fits) by sky position within 5 arcseconds (using RA, DEC in all). Output groups only if they contain sources from all three tables.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=c1.fits in2=c2.fits in3=c3.fits join1=match join2=match join3=match out=group_triples.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find all matches between four photometric catalogs (p1.fits, p2.fits, p3.fits, p4.fits) using p1 as the reference table, within 1 arcsec.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' in1=p1.fits in2=p2.fits in3=p3.fits in4=p4.fits out=p1_reference_pairs.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables exactly on 'SOURCE_ID'. Rename columns from the second table with '_B' suffix and third with '_C'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1='SOURCE_ID' values2='SOURCE_ID' values3='SOURCE_ID' in1=A.fits in2=B.fits in3=C.fits fixcols=dups suffix2=_B suffix3=_C out=exact_match_3way.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three observational epochs (e1.fits, e2.fits, e3.fits) by position (3 arcsec) and proper motion (10 mas/yr).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky+2d_anisotropic params='3 10 10' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' values3='RA DEC PMRA PMDEC' in1=e1.fits in2=e2.fits in3=e3.fits out=spacetime_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match a target list (t.fits) against three survey files (s1, s2, s3). The target list is reference. Filter targets to only include 'BRIGHT' sources before matching.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=4 in1=t.fits icmd1='select MAG<15' in2=s1.fits in3=s2.fits in4=s3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=bright_targets_matched.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Combine four CSV files using an exact match on 'OBJECT_NAME'. Display the result statistics.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 ifmt1=csv in1=c1.csv in2=c2.csv in3=c3.csv in4=c4.csv values1='OBJECT_NAME' values2='OBJECT_NAME' values3='OBJECT_NAME' values4='OBJECT_NAME' omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five catalogs (c1-c5.fits) in group mode, forcing parallel execution.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=2 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits in5=c5.fits runner=parallel values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' out=parallel_group_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Perform a pair match with t1 as reference against t2, t3, t4. For t2, only include rows where 'FLAG' is 'GOOD' before matching.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' in1=t1.fits in2=t2.fits icmd2='select FLAG==\"GOOD\"' in3=t3.fits in4=t4.fits out=t2_filtered_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables on a 2D Cartesian plane (X, Y) within a cuboid tolerance of 5 units in X and 2 units in Y.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d_cuboid params='5 2' values1='X Y' values2='X Y' values3='X Y' in1=t1.fits in2=t2.fits in3=t3.fits out=cuboid_2d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find the best match for each row in the reference table t_ref against t2 and t3. Include all rows from the reference table, even unmatched ones.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=t_ref.fits in2=t2.fits in3=t3.fits join1=always find=best1 values1='RA DEC' values2='RA DEC' values3='RA DEC' out=all_ref_best_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five tables, but only return the total count of matched groups.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=3 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits in5=c5.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables using sky error quadrature (skyerr_q). Input parameters include RA, DEC, and POS_ERR.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr_q params=1 values1='RA DEC POS_ERR' values2='RA DEC POS_ERR' values3='RA DEC POS_ERR' in1=e1.fits in2=e2.fits in3=e3.fits out=quadrature_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match survey_A (ref) against survey_B and survey_C (sky 1 arcsec). Rename duplicate columns using full suffix notation ('_A', '_B', '_C').",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=A.fits in2=B.fits in3=C.fits fixcols=all suffix1=_A suffix2=_B suffix3=_C out=fully_suffixed_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables (A, B, C, D) using 'group' mode. Before matching, compute and add a temporary log magnitude column to all inputs.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=A.fits icmd1='addcol LOG_MAG log10(MAG)' in2=B.fits icmd2='addcol LOG_MAG log10(MAG)' in3=C.fits icmd3='addcol LOG_MAG log10(MAG)' in4=D.fits icmd4='addcol LOG_MAG log10(MAG)' values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=log_mag_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch tables T1, T2, T3 using T1 as reference (pairs). After matching, retain only the 'ID' columns from T1, T2, and T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits icmd1='keepcols ID' icmd2='keepcols ID' icmd3='keepcols ID' out=id_only_pair_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match table A against B and C (A is reference). Output should contain A rows matched with B, but exclude rows matched with C.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 in1=A.fits in2=B.fits join2=match in3=C.fits join3=nomatch values1='RA DEC' values2='RA DEC' values3='RA DEC' out=A_match_B_nomatch_C.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables (T1-T4) on a 1D magnitude value (MAG) within a 0.2 tolerance.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=1d params=0.2 values1=MAG values2=MAG values3=MAG values4=MAG in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits out=mag_1d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find all pairs (all mode) between t1, t2, and t3 using t1 as the reference table (sky 1 arcsec).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=t1.fits in2=t2.fits in3=t3.fits find=all out=t1_all_pairs.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five tables. For table 3, rename 'X_IMG' and 'Y_IMG' to 'X' and 'Y' before matching in 2D Cartesian space (5 pixel tolerance).",
        "response": "stilts tmatchn nin=5 multimode=group matcher=2d params=5 in1=t1.fits in2=t2.fits in3=t3.fits icmd3='colmeta -name X X_IMG; colmeta -name Y Y_IMG' in4=t4.fits in5=t5.fits values1='X Y' values2='X Y' values3='X Y' values4='X Y' values5='X Y' out=renamed_2d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, sorting the final output by separation distance (Score) descending.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=A.fits in2=B.fits in3=C.fits scorecol=Separation ocmd='sort -down Separation' out=group_sorted_sep.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Separation\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match three tables (t1 ref). T2's coordinates (RA, DEC) are in radians. Convert them to degrees before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=t1.fits in2=t2.fits icmd2='replacecol RA radiansToDegrees(RA); replacecol DEC radiansToDegrees(DEC)' in3=t3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=rad_converted_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 3D coordinates (X, Y, Z) within 10 units.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=3d params=10 values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' in1=d1.fits in2=d2.fits in3=d3.fits in4=d4.fits out=cartesian_3d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four tables in group mode, excluding rows from the input table T2 that were matched.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits join2=nomatch in3=T3.fits in4=T4.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=T2_unmatched_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find best match (best1) from T2 and T3 for T1. All inputs should use suffix '_I', '_II', '_III'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits find=best1 fixcols=all suffix1=_I suffix2=_II suffix3=_III values1='RA DEC' values2='RA DEC' values3='RA DEC' out=best1_indexed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, adding a column 'MATCHED_GROUP' containing the total number of rows found in that group.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact params=0 values1=ID values2=ID values3=ID in1=L1.fits in2=L2.fits in3=L3.fits ocmd='addcol MATCHED_GROUP GroupSize' out=group_size_added.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3, T4. Use strict spatial and 1D magnitude matching (sky*1d, 1 arcsec, 0.1 mag).",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky*1d params='1 0.1' values1='RA DEC MAG' values2='RA DEC MAG' values3='RA DEC MAG' values4='RA DEC MAG' in1=T_REF.fits in2=T2.fits in3=T3.fits in4=T4.fits out=strict_pos_mag_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five tables using group mode and display the resulting table metadata.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=2 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits in5=c5.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' omode=meta",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (T1 ref). T2 is an ECSV file, T3 is Parquet. Ensure formats are explicitly specified.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.ecsv ifmt2=ecsv in3=T3.parquet ifmt3=parquet values1='RA DEC' values2='RA DEC' values3='RA DEC' out=hetero_format_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three catalogs (C1, C2, C3). C2 has coordinates in Galactic (GLON, GLAT). Convert C2 to ICRS before matching C1 and C3.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=3 in1=C1.fits in2=C2.fits icmd2='addskycoords galactic icrs GLON GLAT RA DEC' in3=C3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=gal_to_icrs_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match two large tables, A and B, plus a small reference list C. Use C as the reference table (index 3).",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=3 matcher=exact params=0 values1=ID values2=ID values3=ID in1=A.fits in2=B.fits in3=C.fits out=C_ref_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (T1-T3). For the output, replace any null values in the T2 'FLUX' column with -99.0.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix2=_2 ocmd='replaceval null -99.0 FLUX_2' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=null_replaced_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables on 3D spatial separation (RA, DEC, DISTANCE_PC) within 1 Mpc.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky3d params=1 values1='RA DEC DISTANCE_PC' values2='RA DEC DISTANCE_PC' values3='RA DEC DISTANCE_PC' in1=d1.fits in2=d2.fits in3=d3.fits out=sky_3d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. For T1, only include rows with 'COLOR > 0.5'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits icmd1='select COLOR > 0.5' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T1_color_filtered.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select COLOR > 0.5\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.5'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find best match (best1) for T1 against T2 and T3. Only keep matched rows, and count them.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits find=best1 join1=match join2=match join3=match omode=count",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables, including a temporary column 'SEPARATION' showing the match score (distance) in the output.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits scorecol=SEPARATION out=sep_group_added.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEPARATION\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Ensure T1 columns retain their original names, but duplicates from T2 and T3 are fully suffixed ('_2', '_3').",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix2=_2 suffix3=_3 out=ref_priority_suffixed.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables on 2D Cartesian coordinates (X, Y) where the match tolerance is 2D error combined in quadrature.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d_err_q params=1 values1='X Y ERR' values2='X Y ERR' values3='X Y ERR' in1=d1.fits in2=d2.fits in3=d3.fits out=cartesian_err_q_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using group mode. After matching, drop the temporary 'Separation' column.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' scorecol=Separation ocmd='delcols Separation' out=sep_dropped_groups.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Separation\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2 and T3. Find all matches and output the result as a VOTable with BINARY2 serialization.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits find=all ofmt='votable(format=BINARY2)' out=all_binary2_match.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs. The first table is an IPAC file, the others are FITS. Specify input formats.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=3 ifmt1=ipac in1=c1.tbl in2=c2.fits in3=c3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=ipac_group_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables T1, T2, T3. T1 is reference. T2 has an extra column 'NOTES' to be discarded before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits icmd2='delcols NOTES' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=notes_discarded_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). Exclude T3 rows that were unmatched, and output the checksum of the result.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=3 in1=T1.fits in2=T2.fits in3=T3.fits join3=match values1='RA DEC' values2='RA DEC' values3='RA DEC' omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Find the symmetric best match (find=best) between four tables in group mode, forcing sequential execution.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits find=best runner=sequential values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=sequential_best_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Output should include all T1 rows, and only T2 rows that were matched, and only T3 rows that were matched.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits join1=always in2=T2.fits join2=match in3=T3.fits join3=match values1='RA DEC' values2='RA DEC' values3='RA DEC' out=selective_outer_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables on sky position and a 2D Cartesian value (sky+2d) using 2 arcsec, and 10 units and 5 units tolerances.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky+2d_anisotropic params='2 10 5' values1='RA DEC X Y' values2='RA DEC X Y' values3='RA DEC X Y' in1=d1.fits in2=d2.fits in3=d3.fits out=sky_2d_anisotropic.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables exactly on a custom column 'UNIQUE_KEY' computed beforehand in all tables.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 in1=t1.fits icmd1='addcol UNIQUE_KEY concat(ID, TYPE)' in2=t2.fits icmd2='addcol UNIQUE_KEY concat(ID, TYPE)' in3=t3.fits icmd3='addcol UNIQUE_KEY concat(ID, TYPE)' in4=t4.fits icmd4='addcol UNIQUE_KEY concat(ID, TYPE)' values1=UNIQUE_KEY values2=UNIQUE_KEY values3=UNIQUE_KEY values4=UNIQUE_KEY out=multi_custom_key_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'TYPE)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol UNIQUE_KEY concat(ID, TYPE)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'TYPE)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables where T2 is large. Use parallel execution and monitor progress.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=t1.fits in2=t2.fits in3=t3.fits runner=parallel progress=log out=parallel_progress.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2 and T3. T2 has coordinates in FK4 B1950. Convert them to ICRS J2000 before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 in1=T1.fits in2=T2.fits icmd2='addskycoords fk4 icrs RA_B1950 DEC_B1950 RA DEC' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=fk4_preprocessed_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five tables using group mode. T3 has its errors in MAS; convert them to ARCSEC (1 mas = 0.001 arcsec) before matching using `skyerr`.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=skyerr params=1 values1='RA DEC ERR' values2='RA DEC ERR' in3=T3.fits icmd3='replacecol ERR ERR/1000' values3='RA DEC ERR' values4='RA DEC ERR' values5='RA DEC ERR' in1=T1.fits in2=T2.fits in4=T4.fits in5=T5.fits out=mas_converted_skyerr.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, sorting the output by the total number of columns in the resulting combined table (which is constant, so this sorts on a fixed value).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact params=0 values1=ID values2=ID values3=ID in1=t1.fits in2=t2.fits in3=t3.fits ocmd='sort $ncol' out=sort_by_ncol.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1 (ref) against T2, T3, T4. Only output the rows from T1 that were *unmatched* by T2, T3, and T4 combined.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits join1=nomatch values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=T1_only_unmatched.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). For the output, keep only the original file location (full path) for T1, T2, T3.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact params=0 in1=path/to/T1.fits in2=path/to/T2.fits in3=path/to/T3.fits values1=ID values2=ID values3=ID loccol=ORIGIN_PATH ocmd='keepcols ORIGIN_PATH' out=loc_only_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0 loccol=ORIGIN_PATH\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2 and T3. After matching, compute and add a column for the magnitude difference: |MAG_1 - MAG_2|.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 suffix2=_2 ocmd='addcol MAG_DIFF_1_2 abs(MAG_1 - MAG_2)' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=mag_diff_added.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_2)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_DIFF_1_2 abs(MAG_1 - MAG_2)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'MAG_2)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. One table is provided via standard input (VOTable format).",
        "response": "cat stream.vot | stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=t1.fits in2=t2.fits in3=- ifmt3=votable values1='RA DEC' values2='RA DEC' values3='RA DEC' out=piped_group_match.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five tables using 1D matching on 'MJD' with 0.1 day tolerance.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=1d params=0.1 values1=MJD values2=MJD values3=MJD values4=MJD values5=MJD in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits in5=t5.fits out=time_1d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1 (ref) against T2 and T3. T3 contains an array column 'POS_ARRAY' that needs to be exploded into scalar RA/DEC columns before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='explodecols POS_ARRAY; colmeta -name RA POS_ARRAY_0; colmeta -name DEC POS_ARRAY_1' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=exploded_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. Output the result directly to TOPCAT for inspection.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=A.fits in2=B.fits in3=C.fits omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 2D error (2d_err). Scale parameter is 1.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d_err params=1 values1='X Y E' values2='X Y E' values3='X Y E' values4='X Y E' in1=d1.fits in2=d2.fits in3=d3.fits in4=d4.fits out=cartesian_2d_err.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3, T4. Only keep the best match from T2, but all matches from T3 and T4.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=3 in1=T1.fits in2=T2.fits find=best2 in3=T3.fits find=all in4=T4.fits find=all values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=mixed_find_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best2 find=all find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables on 'ID'. Output should contain only the distinct groups found.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=L1.fits in2=L2.fits in3=L3.fits out=distinct_groups.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1 (ref) against T2, T3. T2 has an extra column that needs a simple conversion (e.g., multiply by 10) before matching on that value.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 10' values1='RA DEC P1' in2=T2.fits icmd2='replacecol P2 P2*10' values2='RA DEC P2' in3=T3.fits values3='RA DEC P1' out=converted_1d_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter in1: null value not allowed\nUsage: in1=<table1>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). Find the symmetric best match (best) and include all columns from all tables.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits find=best fixcols=all out=symmetric_full_output.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T1 contains magnitude in Janskys; convert to AB magnitude before using it in a combined match (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='2 0.5' in1=T1.fits icmd1='addcol MAG_AB janskyToAb(FLUX_JY)' in2=T2.fits in3=T3.fits values1='RA DEC MAG_AB' values2='RA DEC MAG_AB' values3='RA DEC MAG_AB' out=flux_preconverted_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five tables. Use scorecol to add the match distance and rename it 'SEPARATION_ARCSEC'.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits in5=c5.fits scorecol=SEPARATION_ARCSEC out=sep_5way.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEPARATION_ARCSEC\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables on 3D spatial distance where the tolerance is 10 parsecs.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=3d params=10 values1='X_PC Y_PC Z_PC' values2='X_PC Y_PC Z_PC' values3='X_PC Y_PC Z_PC' in1=p1.fits in2=p2.fits in3=p3.fits out=pc_3d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Output should include all T2 rows, regardless of T1 match, and only T3 rows that matched T1.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=3 in1=T1.fits in2=T2.fits join2=always in3=T3.fits join3=match values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t2_outer_t3_inner.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T2 contains magnitude in Vega, convert to AB magnitude by adding 0.9 before matching in combined space (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky+1d params='3 0.1' in1=T1.fits in2=T2.fits icmd2='replacecol MAG MAG+0.9' in3=T3.fits values1='RA DEC MAG' values2='RA DEC MAG' values3='RA DEC MAG' out=vega_to_ab_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four tables in group mode, filtering the final output to keep only groups where GroupSize is exactly 4.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=1 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits ocmd='select GroupSize==4' values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=group_size_4.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 has an array column 'FLUX_SPECTRUM'. Discard this complex column before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits icmd2='delcols FLUX_SPECTRUM' in3=T3.fits out=array_discard_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables on 2D position, keeping all columns but renaming duplicates with numeric suffixes.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d params=5 values1='X Y' values2='X Y' values3='X Y' in1=d1.fits in2=d2.fits in3=d3.fits fixcols=dups out=numeric_suffixed_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (T1 ref). T2 and T3 are remote URLs. Output the total row count.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=http://remote.org/T2.fits in3=http://remote.org/T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables on 2D elliptical regions on the sky. Approximate scale is 10 arcsec. Parameters include RA, DEC, A, B, PA.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyellipse params=10 values1='RA DEC A B PA' values2='RA DEC A B PA' values3='RA DEC A B PA' in1=e1.fits in2=e2.fits in3=e3.fits out=sky_ellipse_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 has columns 'RA_H', 'DEC_H' in sexagesimal format. Convert T2 coordinates before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 in1=T1.fits in2=T2.fits icmd2='replacecol RA hmsToDegrees(RA_H); replacecol DEC dmsToDegrees(DEC_H)' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=sexagesimal_preprocessed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five tables. Before matching, discard rows from T5 where 'QUALITY' flag is null.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact params=0 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits in5=t5.fits icmd5='select !NULL_QUALITY' values1=ID values2=ID values3=ID values4=ID values5=ID out=t5_clean_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). For the output, rename the magnitude column in T1 to 'MAG_REF'.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits ocmd='colmeta -name MAG_REF MAG_1' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=mag_ref_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1 (ref) against T2, T3. T1 contains parallax (PLX). Calculate distance modulus from parallax and use it in a combined match (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 1' in1=T1.fits icmd1='addcol DM modulusToDistance(1000.0/PLX)' in2=T2.fits in3=T3.fits values1='RA DEC DM' values2='RA DEC DM' values3='RA DEC DM' out=parallax_dm_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, sorting the output by 'ID' ascending and 'GroupSize' descending.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=t1.fits in2=t2.fits in3=t3.fits ocmd='sort ID -down GroupSize' out=multi_sort_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-down' 'GroupSize'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: sort ID -down GroupSize\n\nUsage: sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n    (Unused arguments: '-down' 'GroupSize'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Output only rows that are in T1 or T2, but exclude rows matched with T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits join2=always in3=T3.fits join3=nomatch values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t1_or_t2_not_t3.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five photometric bands (B, V, R, I, Z.fits) on exact celestial coordinates. Output only groups containing contributions from all five bands.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact params=0 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' in1=B.fits in2=V.fits in3=R.fits in4=I.fits in5=Z.fits join1=match join2=match join3=match join4=match join5=match out=five_band_overlap.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 1, got 2\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against three observational epochs (E1, E2, E3). Use a combined matcher: 2 arcsec sky separation AND 0.5 magnitude difference on column 'G_MAG'.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky+1d params='2 0.5' values1='RA DEC G_MAG' values2='RA DEC G_MAG' values3='RA DEC G_MAG' values4='RA DEC G_MAG' in1=T_MAIN.fits in2=E1.fits in3=E2.fits in4=E3.fits out=combined_sky_mag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3, T4 (group mode). For T2, only select rows where Z > 1.0 before matching, and use parallel processing.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=3 in1=T1.fits in2=T2.fits icmd2='select Z > 1.0' in3=T3.fits in4=T4.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' runner=parallel out=high_z_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Z > 1.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '1.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match A (ref) against B, C, D. Include all rows from A, but only matched rows from B, C, and D. Add a column 'SEPARATION_A_B' showing the distance to the match in B.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=A.fits join1=always in2=B.fits join2=match in3=C.fits join3=match in4=D.fits join4=match scorecol=SEPARATION_A_B values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=A_outer_BCD_inner.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEPARATION_A_B\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs using anisotropic 3D Cartesian coordinates (X, Y, Z) with tolerances 10, 5, and 1 units respectively.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=3d_anisotropic params='10 5 1' values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' in1=d1.fits in2=d2.fits in3=d3.fits in4=d4.fits out=aniso_3d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, T1, T2, T3. T1 contains magnitude error in mas, convert it to arcsec (by dividing by 1000) and use it for `skyerr` matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr params=1 in1=T1.fits icmd1='replacecol ERR_ARCSEC ERR_MAS/1000.0' in2=T2.fits in3=T3.fits values1='RA DEC ERR_ARCSEC' values2='RA DEC ERR_ARCSEC' values3='RA DEC ERR_ARCSEC' out=converted_error_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match list_A (ref) against list_B, list_C. B is ASCII format, C is VOTable. Retain all B and C columns, renaming duplicates with _B and _C suffixes.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 in1=list_A.fits in2=list_B.txt ifmt2=ascii in3=list_C.vot fixcols=dups suffix2=_B suffix3=_C values1=ID values2=ID values3=ID out=hetero_suffixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, adding a column 'MATCH_QUALITY' which contains the maximum separation found within the match group.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=4 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=A.fits in2=B.fits in3=C.fits scorecol=MAX_SEP ocmd='colmeta -name MATCH_QUALITY MAX_SEP' out=group_max_sep.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=MAX_SEP\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). For T2, keep only the first 100 rows before attempting the match.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits icmd2='head 100' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t2_head_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables T1-T4 exactly on string column 'OBSERVATION_ID'. Output the row count only.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact params=0 values1='OBSERVATION_ID' values2='OBSERVATION_ID' values3='OBSERVATION_ID' values4='OBSERVATION_ID' in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five galaxy surveys (S1-S5). Filter the output to include only groups where the size is 5 (perfect matches).",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=5 in1=S1.fits in2=S2.fits in3=S3.fits in4=S4.fits in5=S5.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' ocmd='select GroupSize==5' out=perfect_galaxy_matches.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match (ref T1) against T2, T3. T3 contains coordinate RA_RAD/DEC_RAD in radians. Convert them to degrees before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='addcol RA_DEG radiansToDegrees(RA_RAD); addcol DEC_DEG radiansToDegrees(DEC_RAD)' values1='RA DEC' values2='RA DEC' values3='RA_DEG DEC_DEG' out=t3_rad_converted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables T1, T2, T3 using exact match on concatenated string keys (ID + FIELD_NAME).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1='concat(ID, FIELD_NAME)' values2='concat(ID, FIELD_NAME)' values3='concat(ID, FIELD_NAME)' in1=T1.fits in2=T2.fits in3=T3.fits out=composite_key_group.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 1, got 2\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_A, T_B, T_C. Use T_B (index 2) as the reference table in pairs mode. Include all columns from all inputs, renaming duplicates.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=2 matcher=sky params=4 in1=T_A.fits in2=T_B.fits in3=T_C.fits fixcols=dups values1='RA DEC' values2='RA DEC' values3='RA DEC' out=B_ref_full_output.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 2D errors combined in quadrature (2d_err_q) on pixel coordinates (X, Y, ERR).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d_err_q params=1 values1='X Y ERR' values2='X Y ERR' values3='X Y ERR' values4='X Y ERR' in1=p1.fits in2=p2.fits in3=p3.fits in4=p4.fits out=quadrature_pixel_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against T_AUX1, T_AUX2. Only keep rows from T_MAIN where there was NO match found in T_AUX1 or T_AUX2.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T_MAIN.fits in2=T_AUX1.fits in3=T_AUX2.fits join1=nomatch values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T_MAIN_only_singles.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (group mode). Add a sequence column 'InputOrder' to the output indicating the overall input table index (1, 2, or 3).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits seqcol=InputOrder values1='RA DEC' values2='RA DEC' values3='RA DEC' out=sequenced_group_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: seqcol=InputOrder\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables. In T2, calculate a new column 'DIST_PC' from parallax 'PLX' before matching in 3D Cartesian space (sky3d, 10pc tolerance).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky3d params=10 in1=T1.fits in2=T2.fits icmd2='addcol DIST_PC 1000.0/PLX' in3=T3.fits values1='RA DEC DIST_PC' values2='RA DEC DIST_PC' values3='RA DEC DIST_PC' out=parallax_3d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. Find the single **best** match for each row in T_REF, then view the result in TOPCAT.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=UID values2=UID values3=UID in1=T_REF.fits in2=T2.fits in3=T3.fits find=best1 omode=topcat",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs using **skyerr_q** (quadrature) where the error column (E_POS) needs conversion from arcminutes to arcseconds before matching (multiply by 60).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=skyerr_q params=1 in1=C1.fits icmd1='replacecol E_POS E_POS*60' in2=C2.fits icmd2='replacecol E_POS E_POS*60' in3=C3.fits icmd3='replacecol E_POS E_POS*60' in4=C4.fits icmd4='replacecol E_POS E_POS*60' values1='RA DEC E_POS' values2='RA DEC E_POS' values3='RA DEC E_POS' values4='RA DEC E_POS' out=arcmin_error_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (L1, L2, L3) on a 1D magnitude value (MAG) with a 0.1 tolerance. Only keep those groups where all L1, L2, and L3 rows were matched.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.1 values1=MAG values2=MAG values3=MAG in1=L1.fits in2=L2.fits in3=L3.fits join1=match join2=match join3=match out=full_1d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against three TESS observation segments. Only keep T_MAIN rows that fail to find a counterpart in any segment.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=T_MAIN.fits in2=TESS1.fits in3=TESS2.fits in4=TESS3.fits join1=nomatch values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=unobserved_targets.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 2D cuboid coordinates (X, Y) with tolerances 10 units in X and 2 units in Y.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d_cuboid params='10 2' values1='X Y' values2='X Y' values3='X Y' values4='X Y' in1=d1.fits in2=d2.fits in3=d3.fits in4=d4.fits out=cuboid_4d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five catalogs (C1-C5). Output only rows from C3 that were *not* matched in the group process.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact params=0 in1=C1.fits in2=C2.fits in3=C3.fits join3=nomatch in4=C4.fits in5=C5.fits values1=ID values2=ID values3=ID values4=ID values5=ID out=C3_group_singles.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 has an array column 'POS_VEC' (RA, DEC). Explode this column into RA and DEC before matching T_REF.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T_REF.fits in2=T2.fits icmd2='addcol RA POS_VEC; addcol DEC POS_VEC[4]; delcols POS_VEC' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t2_vec_exploded.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables T1, T2, T3 based on elliptical regions (skyellipse, 10 arcsec scale). Parameters RA, DEC, A_MAJ, B_MIN, PA.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=skyellipse params=10 values1='RA DEC A_MAJ B_MIN PA' values2='RA DEC A_MAJ B_MIN PA' values3='RA DEC A_MAJ B_MIN PA' in1=T1.fits in2=T2.fits in3=T3.fits out=elliptical_pair_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1 (ref) against T2, T3. T1 contains Galactic coordinates (GLON, GLAT). Convert T1 to ICRS before matching T2 and T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits icmd1='addskycoords galactic icrs GLON GLAT RA DEC' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T1_gal_to_icrs_ref.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables, T1-T4. T4 is a VOTable which needs to be read in streaming mode due to size, but the rest are FITS.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.vot ifmt4=votable istream4=true out=mixed_stream_group.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"T4.vot\"\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_A, T_B, T_C (T_A ref). Output should be sorted by the calculated match score (Separation) descending.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_A.fits in2=T_B.fits in3=T_C.fits scorecol=Separation ocmd='sort -down Separation' out=sorted_pair_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Separation\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. Apply a filter to T2 to discard rows where magnitude MAG is null, and rename T3's magnitude column to MAG_3 before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits icmd2='select !NULL_MAG' in3=T3.fits icmd3='colmeta -name MAG_3 MAG' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t2_clean_t3_renamed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables on 1D position (X) and 1D velocity (V) separately (1d+1d). Tolerances 5 units for X, 10 units for V.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d+1d params='5 10' values1='X V' values2='X V' values3='X V' in1=T1.fits in2=T2.fits in3=T3.fits out=separate_1d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables (A, B, C, D). Use symmetric best match (find=best) in group mode. Output result as ECSV.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=A.fits in2=B.fits in3=C.fits in4=D.fits find=best values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' ofmt=ecsv out=symmetric_ecsv.ecsv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 contains an epoch column (EPOCH) which needs to be converted from Julian Day (JD) to Modified Julian Date (MJD) before matching on time (1d matcher).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=1d params=0.01 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='replacecol MJD jdToMjd(EPOCH)' values1=MJD values2=MJD values3=MJD out=jd_converted_time_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five tables (D1-D5). Output only the groups where the group ID is less than 100, and show only the ID and GroupSize columns.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID values5=ID in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits in5=D5.fits ocmd='select GroupID < 100; keepcols ID GroupSize' out=small_id_groups.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select GroupID < 100\n\nUsage: select <expr>\n    (Unused arguments: '<' '100'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1 (ref) against T2, T3, T4. For T1, calculate 'COLOR_UV' = 'U_MAG - V_MAG' and match on position + color (sky*1d, 1 arcsec, 0.2 mag).",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky*1d params='1 0.2' in1=T1.fits icmd1='addcol COLOR_UV U_MAG-V_MAG' in2=T2.fits in3=T3.fits in4=T4.fits values1='RA DEC COLOR_UV' values2='RA DEC COLOR_UV' values3='RA DEC COLOR_UV' values4='RA DEC COLOR_UV' out=sky_star_1d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three catalogs (A, B, C). C has errors (ERR_C) that must be calculated in quadrature with a fixed 0.5 arcsec systematic error before skyerr matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr_q params=1 in1=A.fits in2=B.fits in3=C.fits icmd3='addcol TOT_ERR hypot(ERR_C, 0.5)' values1='RA DEC ERR_A' values2='RA DEC ERR_B' values3='RA DEC TOT_ERR' out=systematic_err_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0.5)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol TOT_ERR hypot(ERR_C, 0.5)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '0.5)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 is a remote URL. Use parallel processing.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=http://archive.com/T2.fits in3=T3.fits runner=parallel out=remote_match_parallel.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables T1-T4 exactly on ID. Filter the final output to only show the ID, and the magnitude columns (MAG_1, MAG_2, MAG_3, MAG_4) from all sources.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact params=0 values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 suffix4=_4 ocmd='keepcols ID MAG_*' out=id_mag_only_4way.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'MAG_*'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols ID MAG_*\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'MAG_*'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (P1, P2, P3). In P2, drop array columns before matching on scalar ID.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=P1.fits in2=P2.fits icmd2='delcols *array*' in3=P3.fits out=no_array_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Include all T1 rows (matched or not). T2 and T3 should only contribute matched rows.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits join1=always in2=T2.fits join2=match in3=T3.fits join3=match values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T1_full_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five tables using sky position (3 arcsec). Add a column 'InputID' indicating which group the match belongs to.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=3 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits in5=C5.fits ocmd='addcol InputID GroupID' out=group_id_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against T_SUPP. T_SUPP contains errors in MAS. Convert these to degrees before matching.",
        "response": "stilts tmatchn nin=2 multimode=pairs matcher=skyerr params=1 values1='RA DEC ERR_DEG' in2=T_SUPP.fits icmd2='addcol ERR_DEG ERR_MAS/3600000.0' values2='RA DEC ERR_DEG' in1=T_MAIN.fits out=mas_to_deg_error_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3. T1 is reference. T2 requires calculation of log(FLUX) before matching on the log value (1d matcher, 0.1 tolerance).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=1d params=0.1 values1=LOG_F values2=LOG_F values3=LOG_F in1=T1.fits in2=T2.fits icmd2='addcol LOG_F log10(FLUX)' in3=T3.fits out=log_flux_1d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (A, B, C) where B is provided via standard input (VOTable) and C is an ASCII file.",
        "response": "cat B.vot | stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=A.fits in2=- ifmt2=votable in3=C.txt ifmt3=ascii out=streamed_ascii_group.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T_SUPP1, T_SUPP2. For T_MAIN, discard rows where 'FLAG' is true before it is used as reference.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T_MAIN.fits icmd1='select !FLAG' in2=T_SUPP1.fits in3=T_SUPP2.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=filtered_ref_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (group mode). Filter the output to keep only groups where the size is greater than 2.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits ocmd='select GroupSize > 2' out=size_gt_2_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select GroupSize > 2\n\nUsage: select <expr>\n    (Unused arguments: '>' '2'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables exactly on 'UID'. Ensure columns from T4 are prefixed with '_T4' to resolve duplication.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact params=0 values1=UID values2=UID values3=UID values4=UID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits fixcols=dups suffix4=_T4 out=t4_prefixed_exact.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3, T4. Only find the best match (best1) in T2 and T3, but all matches (all) in T4.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=T_REF.fits in2=T2.fits find=best1 in3=T3.fits find=best1 in4=T4.fits find=all values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=mixed_find_modes.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1 find=best1 find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 using 3D Euclidean distance (3d, 50 unit tolerance). T1 columns X, Y, Z are in an array 'POS_XYZ'. Explode it first.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=3d params=50 in1=T1.fits icmd1='explodecols POS_XYZ' in2=T2.fits in3=T3.fits values1='POS_XYZ_0 POS_XYZ_1 POS_XYZ_2' values2='X Y Z' values3='X Y Z' out=exploded_3d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four files T1-T4 (group mode). Output the total number of columns in the resulting combined table, and the total row count.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T3 contains coordinate RA_H/DEC_D in sexagesimal format. Convert T3 to degrees before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 in1=T_REF.fits in2=T2.fits in3=T3.fits icmd3='addcol RA_DEG hmsToDegrees(RA_H); addcol DEC_DEG dmsToDegrees(DEC_D)' values1='RA_DEG DEC_DEG' values2='RA_DEG DEC_DEG' values3='RA_DEG DEC_DEG' out=sexagesimal_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five files (A, B, C, D, E) using exact match on 'SOURCE_NAME'. Store the output table in VOTable BINARY2 format.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact params=0 values1=SOURCE_NAME values2=SOURCE_NAME values3=SOURCE_NAME values4=SOURCE_NAME values5=SOURCE_NAME in1=A.fits in2=B.fits in3=C.fits in4=D.fits in5=E.fits ofmt='votable(format=BINARY2)' out=five_way_binary2.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T2 has proper motion components (PMRA, PMDEC) in degrees per year. Convert them to mas/yr before using in a combined sky+2d match.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky+2d params='1 5 5' in1=T1.fits in2=T2.fits icmd2='replacecol PMRA PMRA*3600000; replacecol PMDEC PMDEC*3600000' in3=T3.fits values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' values3='RA DEC PMRA PMDEC' out=deg_to_mas_pm_group.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter params: Wrong number of words - wanted 2, got 3\nUsage: params=<match-params>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Include all columns but rename conflicting columns with suffixes '_1', '_2', '_3'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 values1='RA DEC' values2='RA DEC' values3='RA DEC' out=numbered_suffixes_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs (C1, C2, C3). C2 has columns X, Y, Z. C1 and C3 use R, G, B colors. Match on (X, Y) and (R, G) combined (2d+2d_anisotropic, 5, 0.1, 0.2).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d+2d_anisotropic params='5 0.1 0.2' values1='X Y R G' values2='X Y R G' values3='X Y R G' in1=C1.fits in2=C2.fits in3=C3.fits out=mixed_space_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (T1 ref). Use parallel execution and output the result to FITS-plus format.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=3 in1=T1.fits in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' runner=parallel ofmt=fits-plus out=parallel_fits_plus.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables (D1-D4). Output should only contain the ID column and the calculated separation column 'DISTANCE'.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits scorecol=DISTANCE values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' ocmd='keepcols ID DISTANCE' out=minimal_score_output.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'DISTANCE'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols ID DISTANCE\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'DISTANCE'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match A (ref) against B, C. B is a simulated table of 100,000 points (`:skysim:`). Use B's coordinates directly.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='ra dec' values3='RA DEC' in1=A.fits in2=:skysim:100000 in3=C.fits out=sim_crossmatch_ref.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). Filter T3 to keep only rows where the string 'CLASS' equals 'QSO'.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits icmd3='select equals(CLASS, \"QSO\")' out=QSO_filtered_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: select equals(CLASS, \"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: 'QSO' ')')\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3, T4. T4 has elliptical error regions defined by Gaia correlation matrices (skycorr, 5 mas unit).",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=skycorr params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC RA_ERR DEC_ERR RA_DEC_CORR' in1=T_REF.fits in2=T2.fits in3=T3.fits in4=T4_gaia.fits out=gaia_skycorr_match.fits",
        "chat.jar": "failed",
        "error": "WARNING: Class skycorr not found\nError: Unknown matcher element: skycorr\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables (M1-M4) on a combination of 2D position (X, Y, 5 units) and 1D color index (C, 0.1 unit).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d+1d params='5 0.1' values1='X Y C' values2='X Y C' values3='X Y C' values4='X Y C' in1=M1.fits in2=M2.fits in3=M3.fits in4=M4.fits out=cartesian_color_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3. T1 is reference. Output rows from T2 and T3 should always be included, resulting in a full outer join relative to T1.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits join2=always in3=T3.fits join3=always out=T1_multi_outer_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. Calculate the standard deviation of the final combined magnitude column (MAG) over all rows.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits ocmd='addcol SD MAG' omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs (C1, C2, C3) using sky position and R-band magnitude (sky+1d). Tolerances are 2 arcsec and 0.1 mag.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky+1d params='2 0.1' values1='RA DEC R_MAG' values2='RA DEC R_MAG' values3='RA DEC R_MAG' in1=C1.fits in2=C2.fits in3=C3.fits out=sky_mag_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_REF (ref) against T2, T3, T4. Only return rows where T_REF has a match in T2, but not in T3, and always include T4 if matched.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' in1=T_REF.fits in2=T2.fits join2=match in3=T3.fits join3=nomatch in4=T4.fits join4=match out=selective_4way_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five observational epochs (E1-E5.fits) in group mode. Filter the final result to only include groups containing exactly 5 sources.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID values5=ID in1=E1.fits in2=E2.fits in3=E3.fits in4=E4.fits in5=E5.fits ocmd='select GroupSize==5' out=perfect_group_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2 and T3. T2 has proper motions in mas/yr (PMRA, PMDEC). Convert these to km/s using distance (R_PC) before using in a 3D Cartesian match (X, Y, Z).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=3d params=1 values1='X Y Z' in2=T2.fits icmd2='addcol VX rvMasyrToKms(PMRA, 1000./R_PC)' icmd2='addcol VY rvMasyrToKms(PMDEC, 1000./R_PC)' values2='X Y Z' in3=T3.fits values3='X Y Z' out=velocity_converted_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter in1: null value not allowed\nUsage: in1=<table1>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables (A-D) using exact matching on 'SOURCE_ID'. Store the separation distance (which will be zero) in a column named 'ZeroSep' just for metadata purposes.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 values1=SOURCE_ID values2=SOURCE_ID values3=SOURCE_ID values4=SOURCE_ID in1=A.fits in2=B.fits in3=C.fits in4=D.fits scorecol=ZeroSep out=exact_match_score.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0 scorecol=ZeroSep\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four photometric catalogs (P1-P4) using sky position (3 arcsec) and proper motion (5 mas/yr) combined (sky+2d). Use anisotropic PM tolerance (5 mas/yr for both axes).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky+2d_anisotropic params='3 5 5' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' values3='RA DEC PMRA PMDEC' values4='RA DEC PMRA PMDEC' in1=P1.fits in2=P2.fits in3=P3.fits in4=P4.fits out=spacetime_aniso.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against two supplemental tables. Before matching, T_MAIN must be filtered to remove rows where 'BAD_FLAG' is set.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_MAIN.fits icmd1='select !BAD_FLAG' in2=SUPP1.fits in3=SUPP2.fits out=main_filtered_ref.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables T1, T2, T3 (group mode). T3 is an ASCII table. T1 and T2 are remote URLs. Output row count only.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=5 in1=http://r1/t1.fits in2=http://r2/t2.fits in3=T3.txt ifmt3=ascii values1='RA DEC' values2='RA DEC' values3='RA DEC' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 and T3 should only contribute their single best match (find=best1). Include all columns but rename duplicates using numerical suffixes.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T_REF.fits in2=T2.fits in3=T3.fits find=best1 fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 out=best1_suffixed_output.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four tables using 2D elliptical regions (2d_ellipse). Characteristic size is 10 pixels.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d_ellipse params=10 values1='X Y A B PA' values2='X Y A B PA' values3='X Y A B PA' values4='X Y A B PA' in1=R1.fits in2=R2.fits in3=R3.fits in4=R4.fits out=elliptical_2d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (T1-T3). Filter the final output to keep only rows where the combined table size is between 3 and 5, inclusive.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits ocmd='select GroupSize >= 3 && GroupSize <= 5' out=filtered_size_groups.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>=' '3' '&&' 'GroupSize' '<=' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select GroupSize >= 3 && GroupSize <= 5\n\nUsage: select <expr>\n    (Unused arguments: '>=' '3' '&&' 'GroupSize' '<=' '5'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T2, T3. T3 contains an array column 'FLUX_ARRAY'. Replace it with the mean of the array values before matching T_MAIN on position + mean flux (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 0.5' in1=T_MAIN.fits in2=T2.fits in3=T3.fits icmd3='replacecol FLUX_MEAN mean(FLUX_ARRAY)' values1='RA DEC FLUX_MEAN' values2='RA DEC FLUX_MEAN' values3='RA DEC FLUX_MEAN' out=array_mean_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3, T4. Use T3 as the reference table (pairs). T1 and T2 should always be included, T4 should only be included if matched.",
        "response": "stilts tmatchn nin=4 multimode=pairs iref=3 matcher=sky params=2 in1=T1.fits join1=always in2=T2.fits join2=always in3=T3.fits in4=T4.fits join4=match values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=mixed_join_t3_ref.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five deep survey tiles using sky position (4 arcsec). Use parallel execution and log progress.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=4 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits in5=D5.fits runner=parallel progress=log out=deep_field_parallel.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs using a strict sky correlation match (skycorr) where the error unit is milliarcseconds (mas).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=skycorr params=1 values1='RA DEC RA_ERR DEC_ERR RA_DEC_CORR' values2='RA DEC RA_ERR DEC_ERR RA_DEC_CORR' values3='RA DEC RA_ERR DEC_ERR RA_DEC_CORR' values4='RA DEC RA_ERR DEC_ERR RA_DEC_CORR' in1=G1.fits in2=G2.fits in3=G3.fits in4=G4.fits out=gaia_skycorr_match.fits",
        "chat.jar": "failed",
        "error": "WARNING: Class skycorr not found\nError: Unknown matcher element: skycorr\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T1 contains magnitude in Janskys (FLUX_JY); convert it to AB magnitude (MAG_AB) before using it in an exact match on MAG_AB and ID.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1='MAG_AB ID' values2='MAG_AB ID' values3='MAG_AB ID' in1=T1.fits icmd1='addcol MAG_AB janskyToAb(FLUX_JY)' in2=T2.fits in3=T3.fits out=flux_mag_exact_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 1, got 2\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables T1, T2, T3 (group mode). T2 coordinates (GLON, GLAT) are Galactic. Convert T2 to ICRS before group matching on position.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits icmd2='addskycoords galactic icrs GLON GLAT RA DEC' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=gal_to_icrs_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against T_SUPP1, T_SUPP2. T_SUPP1 and T_SUPP2 are CSV files. Output the result metadata only.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=ID values2=ID values3=ID in1=T_MAIN.fits in2=T_SUPP1.csv ifmt2=csv in3=T_SUPP2.csv ifmt3=csv omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using isotropic 3D coordinates (X, Y, Z) within 5 units. Include the separation score in the output.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=3d params=5 values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits scorecol=Distance out=3d_dist_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Distance\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. T1 has a column 'NAME' that needs to be truncated to the first 10 characters before matching on NAME.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=SHORT_NAME values2=NAME values3=NAME in1=T1.fits icmd1='addcol SHORT_NAME substring(NAME, 0, 10)' in2=T2.fits in3=T3.fits out=truncated_name_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0,' '10)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol SHORT_NAME substring(NAME, 0, 10)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '0,' '10)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 rows should always be included, regardless of match status. T2 rows should only be included if unmatched.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits join2=nomatch in3=T3.fits join3=always values1='RA DEC' values2='RA DEC' values3='RA DEC' out=mixed_join_2.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five tables using sky position (2 arcsec). For T5, calculate a new coordinate column 'RA_NEW' = RA + 0.01 deg before matching.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits in5=T5.fits icmd5='addcol RA_NEW RA + 0.01' values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA_NEW DEC' out=T5_shifted_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' '0.01'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol RA_NEW RA + 0.01\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' '0.01'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 is a synthetic star field generated by skysim. T3 is a Parquet file.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='ra dec' values3='RA DEC' in1=T_REF.fits in2=:skysim:10000 in3=T3.parquet ifmt3=parquet out=ref_sim_parquet_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables on 2D coordinates (X, Y) where the match radius is defined by the larger of the two inputs' error columns (2d_err).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d_err params=1 values1='X Y ERR' values2='X Y ERR' values3='X Y ERR' in1=A.fits in2=B.fits in3=C.fits out=max_error_2d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T1 contains proper motions (PMRA, PMDEC) and requires a filter to keep only objects with PM > 5 mas/yr before matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits icmd1='select hypot(PMRA, PMDEC) > 5' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=high_pm_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PMDEC)' '>' '5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select hypot(PMRA, PMDEC) > 5\n\nUsage: select <expr>\n    (Unused arguments: 'PMDEC)' '>' '5'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 coordinates are in degrees, T3 are in radians. Convert T3 to degrees via an inline expression.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='radiansToDegrees(RA_RAD) radiansToDegrees(DEC_RAD)' in1=T1.fits in2=T2.fits in3=T3.fits out=t3_inline_rad_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five FITS files exactly on 'ID'. Sort the final table by 'ID' ascending.",
        "response": "stilts tmatchn nin=5 multimode=pairs matcher=exact values1=ID values2=ID values3=ID values4=ID values5=ID in1=F1.fits in2=F2.fits in3=F3.fits in4=F4.fits in5=F5.fits ocmd='sort ID' out=five_way_exact_sort.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 3D error quadrature (3d_err_q). Scale parameter is 1.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=3d_err_q params=1 values1='X Y Z ERR' values2='X Y Z ERR' values3='X Y Z ERR' values4='X Y Z ERR' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits out=cartesian_3d_err_q.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3, T4. Only keep T1 rows that are unmatched in ALL T2, T3, T4.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=3 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits join1=nomatch out=T1_unmatched_full.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs. T3 contains an epoch column (MJD) that needs an absolute value calculation before matching on time (1d matcher).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.001 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='replacecol MJD abs(MJD)' values1=MJD values2=MJD values3=MJD out=absolute_time_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1 (ref) against T2, T3. T1 contains magnitude 99.0 for nulls. Replace 99.0 with NULL before matching T2 and T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits icmd1='badval 99.0 MAG' in2=T2.fits in3=T3.fits values1='RA DEC MAG' values2='RA DEC MAG' values3='RA DEC MAG' out=badval_preprocessed_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 2, got 3\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four tables using group mode. Ensure the output is written to a VOTable using **BINARY2** serialization.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 values1=ID values2=ID values3=ID values4=ID in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits ofmt='votable(format=BINARY2)' out=group_binary2.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T1 is a simulated attractor (clifford) of 10000 points. Match on X, Y coordinates.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=2d params=1 values1='X Y' values2='X Y' values3='X Y' in1=:attractor:10000,clifford in2=T2.fits in3=T3.fits out=attractor_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables, T1, T2, T3. T2 needs filtering to only keep rows where magnitude MAG > 20 (faint objects).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=5 in1=T1.fits in2=T2.fits icmd2='select MAG > 20' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=faint_group_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG > 20\n\nUsage: select <expr>\n    (Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 has an extra column 'NOTES'. Discard this column before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits icmd2='delcols NOTES' in3=T3.fits out=notes_deleted_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables, including a temporary column 'GroupID' that displays the unique group identifier.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits scorecol=GroupID values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=group_id_output.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=GroupID\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1 (ref) against T2, T3. T2 contains an array column 'RGB' of size 3. Explode it into R, G, B scalar columns before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits icmd2='explodecols RGB; colmeta -name R RGB_0; colmeta -name G RGB_1; colmeta -name B RGB_2' in3=T3.fits out=rgb_exploded_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 needs a conversion of a string coordinate (RA_STR) to numeric degrees (hmsToDegrees).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='addcol RA_DEG hmsToDegrees(RA_STR)' values1='RA DEC' values2='RA DEC' values3='RA_DEG DEC' out=string_coord_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables T1-T4 using anisotropic 2D matching (2d_anisotropic) on (FLUX_X, FLUX_Y) with tolerances 10 and 20 units.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d_anisotropic params='10 20' values1='FLUX_X FLUX_Y' values2='FLUX_X FLUX_Y' values3='FLUX_X FLUX_Y' values4='FLUX_X FLUX_Y' in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits out=anisotropic_flux_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. T1 has a column 'LOG_MASS'; T2 and T3 have 'MASS'. Convert T2 and T3 mass to log10(MASS) before matching on LOG_MASS.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.1 in1=T1.fits in2=T2.fits icmd2='replacecol MASS log10(MASS)' in3=T3.fits icmd3='replacecol MASS log10(MASS)' values1=LOG_MASS values2=MASS values3=MASS out=log_mass_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T1 contains an array column 'ERR_VEC'. Explode this array column into scalar error components (E_RA, E_DEC) to be used in a skyerr match.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=skyerr params=1 values1='RA DEC E_RA' values2='RA DEC E_RA' values3='RA DEC E_RA' in1=T1.fits icmd1='explodecols ERR_VEC; colmeta -name E_RA ERR_VEC_0; colmeta -name E_DEC ERR_VEC_1' in2=T2.fits in3=T3.fits out=exploded_error_skyerr.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3, T4 (group mode). For the output, ensure all columns from T1 are renamed with suffix '_R' (reference, although it's group mode).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits fixcols=all suffix1=_R out=t1_ref_cols_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 is a multi-extension FITS file, use extension #2. T3 is a compressed VOTable.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits#2 in3=T3.vot.gz values1='RA DEC' values2='RA DEC' values3='RA DEC' out=mixed_ext_comp_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables based on magnitude + redshift (1d+1d). Tolerances 0.2 mag and 0.005 redshift.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d+1d params='0.2 0.005' values1='MAG Z' values2='MAG Z' values3='MAG Z' in1=P1.fits in2=P2.fits in3=P3.fits out=mag_z_1d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (T2 ref). Include all T2 rows, but only T1 and T3 rows that matched T2.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=2 matcher=exact params=0 values1=ID values2=ID values3=ID in1=T1.fits join1=match in2=T2.fits join2=always in3=T3.fits join3=match out=t2_ref_outer.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T_SUPP1, T_SUPP2. Calculate the mean of the magnitudes (MAG) from T_MAIN, T_SUPP1, and T_SUPP2 in the output.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T_MAIN.fits in2=T_SUPP1.fits in3=T_SUPP2.fits fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 ocmd='addcol AVG_MAG (MAG_1+MAG_2+MAG_3)/3' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=avg_mag_3way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using sky error quadrature (skyerr_q). Output the result directly to TOPCAT.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=skyerr_q params=1 values1='RA DEC ERR' values2='RA DEC ERR' values3='RA DEC ERR' values4='RA DEC ERR' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (group mode). T3 columns need cleaning: rename 'R_mag' to 'R' and apply fixcolnames filter.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=3 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='colmeta -name R R_mag; fixcolnames' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t3_clean_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1 (ref) against T2, T3. T1 coordinates are in FK4 B1950. Convert T1 coordinates to ICRS J2000 before being used as reference.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits icmd1='addskycoords fk4 icrs RA_B DEC_B RA DEC' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T1_fk4_icrs_ref.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five tables (D1-D5). Output the final table in FITS format using the column-oriented FITS-plus convention.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID values5=ID in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits in5=D5.fits ofmt=colfits-plus out=group_colfits.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 is a remote FITS file, T3 is piped via standard input (CSV format).",
        "response": "cat stream.csv | stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=http://remote.org/T2.fits in3=- ifmt3=csv values1='RA DEC' values2='RA DEC' values3='RA DEC' out=piped_match_3way.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables T1-T4 exactly on ID. Filter the final table to include a column 'GROUP_MEMBER_COUNT' indicating GroupSize.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits ocmd='addcol GROUP_MEMBER_COUNT GroupSize' out=group_count_added.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T_REF uses the symmetric logarithmic scale (symlog) on its MAG column before matching on position+magnitude (sky*1d, 1 arcsec, 1.0 symlog tolerance).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky*1d params='1 1.0' in1=T_REF.fits icmd1='replacecol MAG symlog(10, 1, MAG)' in2=T2.fits in3=T3.fits values1='RA DEC MAG' values2='RA DEC MAG' values3='RA DEC MAG' out=symlog_mag_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '1,' 'MAG)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol MAG symlog(10, 1, MAG)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '1,' 'MAG)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five tables using sky separation (5 arcsec). Output only the separation column and verify the checksum.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits in5=D5.fits scorecol=Sep ocmd='keepcols Sep' omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Sep\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs (C1, C2, C3). C1 has position errors (E1) in degrees; convert to arcsec before skyerr matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr params=1 in1=C1.fits icmd1='replacecol E1 E1*3600' in2=C2.fits in3=C3.fits values1='RA DEC E1' values2='RA DEC E2' values3='RA DEC E3' out=deg_to_arcsec_err.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T1 contains a flag 'IS_VARIABLE'. Only use rows where IS_VARIABLE is TRUE in the match.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits icmd1='select IS_VARIABLE' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=variable_ref_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 using Cartesian 2D coordinates (X, Y) where error is defined by the larger of the two errors squared combined in quadrature (2d_err_q).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d_err_q params=1 values1='X Y ERR' values2='X Y ERR' values3='X Y ERR' in1=D1.fits in2=D2.fits in3=D3.fits out=cartesian_2d_err_q_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (group mode). Filter the entire output to remove duplicate rows based on all column values.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=D1.fits in2=D2.fits in3=D3.fits ocmd='uniq' out=deduped_group_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 contains an array column 'FLUX_ARRAY'. Replace it with the maximum value in the array before matching on position + flux max (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 0.5' in1=T1.fits in2=T2.fits in3=T3.fits icmd3='addcol FLUX_MAX maximum(FLUX_ARRAY)' values1='RA DEC FLUX_MAX' values2='RA DEC FLUX_MAX' values3='RA DEC FLUX_MAX' out=array_max_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs (C1, C2, C3) using sky position (2 arcsec) and R-band magnitude (0.1 mag tolerance). Filter C2 before matching, keeping only rows where 'FLAG_GOOD' is true.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky+1d params='2 0.1' values1='RA DEC R_MAG' values2='RA DEC R_MAG' values3='RA DEC R_MAG' in1=C1.fits in2=C2.fits icmd2='select FLAG_GOOD' in3=C3.fits out=filtered_sky_mag_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF (ref) against T2, T3, T4. Only keep rows where T_REF finds a match in T4, regardless of T2/T3 status. Use 1 arcsec sky tolerance.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' in1=T_REF.fits in2=T2.fits join2=default in3=T3.fits join3=default in4=T4.fits join4=match out=T4_match_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five photometric catalogs (P1-P5.fits) exactly on the 'SOURCE_ID' column. Output the result to standard output and count the rows.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact params=0 values1=SOURCE_ID values2=SOURCE_ID values3=SOURCE_ID values4=SOURCE_ID values5=SOURCE_ID in1=P1.fits in2=P2.fits in3=P3.fits in4=P4.fits in5=P5.fits omode=count out=-",
        "chat.jar": "failed",
        "error": "Error: out=-: out and ofmt parameters can only be used when omode=out\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T2 coordinates (GLON, GLAT) are Galactic. Convert them to ICRS before matching T1 and T3 (5 arcsec tolerance).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=5 in1=T1.fits in2=T2.fits icmd2='addskycoords galactic icrs GLON GLAT RA DEC' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=gal_to_icrs_group_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against T2, T3, T4. T1 columns should keep original names, T2/T3/T4 duplicates suffixed '_A', '_B', '_C'. T1 has flux F_Jansky. Calculate MAG_AB before matching on (position, magnitude) combined.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky+1d params='2 0.2' in1=T_MAIN.fits icmd1='addcol MAG_AB janskyToAb(F_Jansky)' in2=T2.fits in3=T3.fits in4=T4.fits fixcols=dups suffix2=_A suffix3=_B suffix4=_C values1='RA DEC MAG_AB' values2='RA DEC MAG' values3='RA DEC MAG' values4='RA DEC MAG' out=flux_to_mag_crossmatch.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables based on 3D anisotropic Cartesian coordinates (X, Y, Z) with tolerances 10, 5, and 1 units respectively.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=3d_anisotropic params='10 5 1' values1='X Y Z' values2='X Y Z' values3='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits out=anisotropic_3d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF (ref) against T2 and T3. Find all matches (find=all). T2 is an ECSV file, T3 is a remote FITS URL. Output to VOTable BINARY format.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=3 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_REF.fits in2=T2.ecsv ifmt2=ecsv in3=http://remote.org/T3.fits find=all ofmt='votable(format=BINARY)' out=all_matches_binary.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four catalogs (A-D) using exact match on concatenated ID string: 'FIELD_ID' + 'SOURCE_NUM'.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 values1='concat(FIELD_ID, toString(SOURCE_NUM))' values2='concat(FIELD_ID, toString(SOURCE_NUM))' values3='concat(FIELD_ID, toString(SOURCE_NUM))' values4='concat(FIELD_ID, toString(SOURCE_NUM))' in1=A.fits in2=B.fits in3=C.fits in4=D.fits out=composite_id_group.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 1, got 2\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T3 has an array column 'PM_VEC'. Explode this array column into PMRA and PMDEC scalar columns before matching on sky+2d.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky+2d params='1 5 5' in1=T1.fits in2=T2.fits in3=T3.fits icmd3='explodecols PM_VEC; colmeta -name PMRA PM_VEC_0; colmeta -name PMDEC PM_VEC_1' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' values3='RA DEC PMRA PMDEC' out=exploded_pm_group.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter params: Wrong number of words - wanted 2, got 3\nUsage: params=<match-params>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1 (ref) against T2, T3. Include all T1 rows, matched or not. Only include T2 and T3 rows that matched T1.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits join1=always in2=T2.fits join2=match in3=T3.fits join3=match values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T1_left_T2T3_inner.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (E1, E2, E3) using sky error quadrature (skyerr_q). Input parameters RA, DEC, and POS_ERR.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr_q params=1 values1='RA DEC POS_ERR' values2='RA DEC POS_ERR' values3='RA DEC POS_ERR' in1=E1.fits in2=E2.fits in3=E3.fits out=skyerr_quad_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match four tables (C1 ref) using sky position (1 arcsec). T2 contains magnitude in Vega; convert to AB magnitude (MAG_AB = MAG_VEGA + 0.9) before matching.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=C1.fits in2=C2_vega.fits icmd2='replacecol MAG MAG+0.9' in3=C3.fits in4=C4.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=vega_converted_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (group mode). Add a column 'MAX_FLUX_DIFF' in the output showing the maximum absolute difference in FLUX values across all members of the group.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 ocmd='addcol MAX_FLUX_DIFF maximum(abs(FLUX_1-FLUX_2), abs(FLUX_1-FLUX_3), abs(FLUX_2-FLUX_3))' out=max_flux_diff_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'abs(FLUX_1-FLUX_3),' 'abs(FLUX_2-FLUX_3))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAX_FLUX_DIFF maximum(abs(FLUX_1-FLUX_2), abs(FLUX_1-FLUX_3), abs(FLUX_2-FLUX_3))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'abs(FLUX_1-FLUX_3),' 'abs(FLUX_2-FLUX_3))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_MAIN against T2, T3. T2 has coordinates in FK4 B1950. Convert T2 coordinates to ICRS J2000 before matching T_MAIN and T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T_MAIN.fits in2=T2.fits icmd2='addskycoords fk4 icrs RA_B1950 DEC_B1950 RA DEC' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=fk4_converted_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables (S1-S4) on 1D magnitude (MAG) within a 0.5 tolerance. Use TST format for input S1.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=1d params=0.5 values1=MAG values2=MAG values3=MAG values4=MAG in1=S1.tst ifmt1=tst in2=S2.fits in3=S3.fits in4=S4.fits out=mag_tst_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T1 contains proper motion components. Calculate the total proper motion (PM_TOT) in T1 and match on position + PM_TOT (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 5' in1=T1.fits icmd1='addcol PM_TOT hypot(PMRA, PMDEC)' in2=T2.fits in3=T3.fits values1='RA DEC PM_TOT' values2='RA DEC PM_TOT' values3='RA DEC PM_TOT' out=pm_magnitude_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PMDEC)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PM_TOT hypot(PMRA, PMDEC)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PMDEC)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (group mode). T2 is remote FITS URL. Execute in parallel mode.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=http://remote.org/T2.fits in3=T3.fits runner=parallel out=remote_parallel_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T2, T3. T3 is a multi-extension FITS file, match against extension #4. Output rows from T3 should always be included.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_MAIN.fits in2=T2.fits in3=T3.fits#4 join3=always out=ext4_outer_join.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 2D coordinates (X, Y) where tolerance is 10 units. T4 output columns prefixed '_IV'.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d params=10 values1='X Y' values2='X Y' values3='X Y' values4='X Y' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits fixcols=dups suffix4=_IV out=d4_suffixed_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (group mode). For the output, rename the magnitude columns in T1, T2, T3 to MAG_A, MAG_B, MAG_C.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_A suffix2=_B suffix3=_C ocmd='colmeta -name MAG_A MAG_A; colmeta -name MAG_B MAG_B; colmeta -name MAG_C MAG_C' out=renamed_mag_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2 and T3. T2 contains parallax (PLX). Calculate distance modulus DM from parallax and match on position + DM (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='2 1' in1=T1.fits in2=T2.fits icmd2='addcol DM modulusToDistance(1000.0/PLX)' in3=T3.fits values1='RA DEC DM' values2='RA DEC DM' values3='RA DEC DM' out=parallax_dm_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (A, B, C). Filter A to keep only rows where magnitude difference (B-V) > 1.0 before matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=3 in1=A.fits icmd1='select B_MAG - V_MAG > 1.0' in2=B.fits in3=C.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=color_filtered_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'V_MAG' '>' '1.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select B_MAG - V_MAG > 1.0\n\nUsage: select <expr>\n    (Unused arguments: '-' 'V_MAG' '>' '1.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). Find the single best match (best1) for T1 against T2 and T3. Output result to ECSV format.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits find=best1 ofmt=ecsv out=best1_ecsv.ecsv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 3D coordinates (X, Y, Z) within 10 units. Include all columns but rename duplicates using numerical suffixes.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=3d params=10 values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits fixcols=dups out=numbered_3d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T_REF has position in Ecliptic coordinates (ELON, ELAT). Convert to ICRS before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T_REF.fits icmd1='addskycoords ecliptic icrs ELON ELAT RA DEC' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=ecl_converted_ref_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five catalogs (C1-C5). Output the separation score column 'SEP' and sort the final output by 'SEP' descending.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=2 in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits in5=C5.fits scorecol=SEP values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' ocmd='sort -down SEP' out=five_way_group_sorted.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEP\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using only rows from T1 and T2 that did *not* match T3 (nomatch). T1 is the reference table.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits join3=nomatch in2=T2.fits join3=nomatch in3=T3.fits out=T1T2_not_T3.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join3=nomatch\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_A, T_B, T_C. T_C (index 3) is the reference table. Match T_C exactly on 'NAME' against A and B.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=3 matcher=exact params=0 values1=NAME values2=NAME values3=NAME in1=T_A.fits in2=T_B.fits in3=T_C.fits out=C_ref_name_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables on 'MJD' time coordinate within 0.01 day tolerance. T1 uses a string ISO 8601 column ('TIME_STR'); convert to MJD before matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.01 in1=T1.fits icmd1='addcol MJD isoToMjd(TIME_STR)' in2=T2.fits in3=T3.fits values1=MJD values2=MJD values3=MJD out=time_string_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2 and T3. Calculate a final column 'FLUX_AVG' by taking the mean of FLUX columns from all matched sources.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 ocmd='addcol FLUX_AVG mean(FLUX_1, FLUX_2, FLUX_3)' out=mean_flux_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 2D coordinates (X, Y) where the match tolerance is given by an error column 'ERR' combined in quadrature (2d_err_q).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d_err_q params=1 values1='X Y ERR' values2='X Y ERR' values3='X Y ERR' values4='X Y ERR' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits out=cartesian_err_q_4way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 has columns in sexagesimal (RA_HMS, DEC_DMS). Convert T2 to degrees using an inline expression before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 values1='RA DEC' values2='hmsToDegrees(RA_HMS) dmsToDegrees(DEC_DMS)' values3='RA DEC' in1=T_REF.fits in2=T2.fits in3=T3.fits out=inline_sexagesimal_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. T1 has magnitude 99.0 for nulls. Replace 99.0 with NULL in T1 before grouping.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits icmd1='badval 99.0 MAG' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=badval_clean_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). T2 is an IPAC table. T3 columns should be suffixed '_III'. Only output the matched row count.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 in1=T1.fits in2=T2.tbl ifmt2=ipac in3=T3.fits suffix3=_III values1=ID values2=ID values3=ID omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs using isotropic 4D Cartesian coordinates (X, Y, Z, T) within 10 units.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=4d params=10 values1='X Y Z T' values2='X Y Z T' values3='X Y Z T' values4='X Y Z T' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits out=cartesian_4d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Only keep the single best match from T2 (best1) and all matches from T3 (all).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits find=best1 in3=T3.fits find=all values1='RA DEC' values2='RA DEC' values3='RA DEC' out=mixed_find_modes_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1 find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, sorting the output by the total number of columns in the result (constant for all rows) followed by the magnitude descending.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 ocmd='sort $ncol -down MAG_1' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=sort_by_col_and_mag.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-down' 'MAG_1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: sort $ncol -down MAG_1\n\nUsage: sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n    (Unused arguments: '-down' 'MAG_1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five tables using exact match on 'OBJECT_ID'. Force sequential execution.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact values1=OBJECT_ID values2=OBJECT_ID values3=OBJECT_ID values4=OBJECT_ID values5=OBJECT_ID in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits in5=C5.fits runner=sequential out=sequential_exact_5way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3, T4. Use strict positional and 1D magnitude matching (sky*1d, 1 arcsec, 0.05 mag).",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky*1d params='1 0.05' values1='RA DEC MAG' values2='RA DEC MAG' values3='RA DEC MAG' values4='RA DEC MAG' in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits out=strict_combined_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). Filter T1 to only include rows where 'V_MAG' is brighter than 18.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=5 in1=T1.fits icmd1='select V_MAG < 18' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T1_bright_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select V_MAG < 18\n\nUsage: select <expr>\n    (Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four tables using the `skyellipse` matcher (10 arcsec scale). Parameters: RA, DEC, A_MAJ, B_MIN, PA.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=skyellipse params=10 values1='RA DEC A_MAJ B_MIN PA' values2='RA DEC A_MAJ B_MIN PA' values3='RA DEC A_MAJ B_MIN PA' values4='RA DEC A_MAJ B_MIN PA' in1=E1.fits in2=E2.fits in3=E3.fits in4=E4.fits out=elliptical_4way_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T_REF positions are in Galactic (GLON, GLAT). Convert to Equatorial (RA, DEC) using ICRS before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T_REF.fits icmd1='addskycoords galactic icrs GLON GLAT RA DEC' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=galactic_ref_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (P1, P2, P3). P1 has an array column 'FLUX_VEC'. Explode it into scalars before matching on FLUX_0.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.1 in1=P1.fits icmd1='explodecols FLUX_VEC' in2=P2.fits in3=P3.fits values1=FLUX_VEC_0 values2=FLUX_VEC_0 values3=FLUX_VEC_0 out=array_exploded_1d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). Output only the unmatched rows from T1 (join=1not2).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits join=1not2 out=T1_unmatched_pairs.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join=1not2\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3, T4 (group mode). Filter T2 to keep only rows where T2.ERROR is not null.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits icmd2='select !NULL_ERROR' in3=T3.fits in4=T4.fits out=t2_nonnull_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T2, T3. T3 is provided via standard input (CSV). Output the score column 'SCORE' in the result.",
        "response": "cat T3.csv | stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T_MAIN.fits in2=T2.fits in3=- ifmt3=csv scorecol=SCORE values1='RA DEC' values2='RA DEC' values3='RA DEC' out=piped_csv_scored.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (D1, D2, D3) on 2D coordinates (X, Y). Apply geometric rotation (90 degrees clockwise) to D3's coordinates before matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d params=5 in1=D1.fits in2=D2.fits in3=D3.fits icmd3='replacecol X X*cosDeg(-90) - Y*sinDeg(-90); replacecol Y X*sinDeg(-90) + Y*cosDeg(-90)' values1='X Y' values2='X Y' values3='X Y' out=rotated_2d_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'Y*sinDeg(-90)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol X X*cosDeg(-90) - Y*sinDeg(-90)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '-' 'Y*sinDeg(-90)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). T1 columns should keep original names, T2/T3 duplicates suffixed '_II', '_III'. Find the single best match from T2/T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix2=_II suffix3=_III find=best1 out=best1_numbered_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_A, T_B, T_C. Use symmetric best match (find=best) in group mode. Output result to a FITS file using variable-length arrays (fits-var).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 in1=T_A.fits in2=T_B.fits in3=T_C.fits find=best ofmt=fits-var out=best_fits_var_group.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables (S1-S4). Before matching, calculate a redshift estimate 'Z_EST' from comoving distance 'DC_MPC' for all inputs (distToZ(DC_MPC)). Match exactly on Z_EST.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=1d params=0.001 in1=S1.fits icmd1='addcol Z_EST distToZ(DC_MPC)' in2=S2.fits icmd2='addcol Z_EST distToZ(DC_MPC)' in3=S3.fits icmd3='addcol Z_EST distToZ(DC_MPC)' in4=S4.fits icmd4='addcol Z_EST distToZ(DC_MPC)' values1=Z_EST values2=Z_EST values3=Z_EST values4=Z_EST out=redshift_calc_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 contains magnitude error in percent (MAG_ERR_PCT). Convert to linear magnitude error before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='replacecol MAG_ERR MAG_ERR_PCT/100.0' values1='RA DEC MAG_ERR' values2='RA DEC MAG_ERR' values3='RA DEC MAG_ERR' out=percent_error_converted.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 2, got 3\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using Cartesian 2D coordinates (X, Y) within a cuboid tolerance of 2 units in X and 5 units in Y.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d_cuboid params='2 5' values1='X Y' values2='X Y' values3='X Y' in1=D1.fits in2=D2.fits in3=D3.fits out=aniso_cuboid_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T2, T3. T2 has a string column 'DATE_STR' that needs converting to MJD (isoToMjd) for a simultaneous match on position and time (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 0.1' in1=T_MAIN.fits in2=T2.fits icmd2='addcol MJD isoToMjd(DATE_STR)' in3=T3.fits values1='RA DEC MJD' values2='RA DEC MJD' values3='RA DEC MJD' out=datetime_converted_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). Filter the final output to keep only rows where the original input table index (GroupSeq) for T1 is less than 1000.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits seqcol=GroupSeq ocmd='select GroupSeq_1 < 1000' out=first_1k_t1_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '1000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select GroupSeq_1 < 1000\n\nUsage: select <expr>\n    (Unused arguments: '<' '1000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four tables using 1D matching on 'FLUX' within 10 units. Use parallel processing for efficiency.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=1d params=10 values1=FLUX values2=FLUX values3=FLUX values4=FLUX in1=F1.fits in2=F2.fits in3=F3.fits in4=F4.fits runner=parallel out=parallel_1d_flux.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Output should include T1 rows matched with T2 OR T3 (full outer join relative to T1).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits join2=always in3=T3.fits join3=always values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T1_outer_multi.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (A, B, C). Output to standard output and display only the table metadata.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=A.fits in2=B.fits in3=C.fits omode=meta out=-",
        "chat.jar": "failed",
        "error": "Error: out=-: out and ofmt parameters can only be used when omode=out\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T3 contains an epoch column (JD). Convert JD to MJD (jdToMjd) before matching on time.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.001 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='replacecol MJD jdToMjd(JD)' values1=MJD values2=MJD values3=MJD out=jd_to_mjd_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3, T4. Use Cartesian 3D coordinates (X, Y, Z) and match on distance error quadrature (3d_err_q).",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=3d_err_q params=1 values1='X Y Z ERR' values2='X Y Z ERR' values3='X Y Z ERR' values4='X Y Z ERR' in1=T_REF.fits in2=T2.fits in3=T3.fits in4=T4.fits out=err_q_3d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three catalogs. C2 has elliptical error regions defined by major/minor axes (A, B) and position angle (PA). Use skyellipse matcher (1 arcsec scale).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyellipse params=1 values1='RA DEC A B PA' values2='RA DEC A B PA' values3='RA DEC A B PA' in1=C1.fits in2=C2.fits in3=C3.fits out=elliptical_match_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (group mode). Filter the final output to keep only rows where the Separation score is less than 0.1 arcsec.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits scorecol=Separation ocmd='select Separation < 0.1/3600.0' out=low_sep_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1/3600.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Separation < 0.1/3600.0\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1/3600.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 is a synthetic star catalog (:skysim:1000). Use the symmetric best match (find=best).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 values1='RA DEC' values2='ra dec' values3='RA DEC' in1=T1.fits in2=:skysim:1000 in3=T3.fits find=best out=sim_best_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five tables using anisotropic 2D matching (2d_anisotropic) on (FLUX_U, FLUX_G) with tolerances 0.5 and 0.2 units.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=2d_anisotropic params='0.5 0.2' values1='FLUX_U FLUX_G' values2='FLUX_U FLUX_G' values3='FLUX_U FLUX_G' values4='FLUX_U FLUX_G' values5='FLUX_U FLUX_G' in1=F1.fits in2=F2.fits in3=F3.fits in4=F4.fits in5=F5.fits out=aniso_flux_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T2, T3. T_MAIN has magnitude in log scale (LOG_F); convert T2/T3 flux (F) to log10(F) before matching on position + log flux (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 0.1' in1=T_MAIN.fits in2=T2.fits icmd2='replacecol LOG_F log10(F)' in3=T3.fits icmd3='replacecol LOG_F log10(F)' values1='RA DEC LOG_F' values2='RA DEC LOG_F' values3='RA DEC LOG_F' out=log_flux_match_3way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. T1 has errors in arcminutes (ERR_ARCMIN). Convert to arcseconds before matching using `skyerr`.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr params=1 values1='RA DEC ERR_ARCSEC' values2='RA DEC ERR_ARCSEC' values3='RA DEC ERR_ARCSEC' in1=T1.fits icmd1='addcol ERR_ARCSEC ERR_ARCMIN*60' in2=T2.fits in3=T3.fits out=arcmin_error_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 is provided via system command pipe (VOTable). Output the result to a compressed FITS file.",
        "response": "cat T3_stream.vot | stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=- ifmt3=votable values1='RA DEC' values2='RA DEC' values3='RA DEC' out=piped_match_compressed.fits.gz",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3, T4 (group mode). Filter the final output to keep only groups where the calculated standard deviation of the MAG column is less than 0.1.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 suffix4=_4 ocmd='addcol MAG_STDEV stdev(MAG_1, MAG_2, MAG_3, MAG_4)' ocmd='select MAG_STDEV < 0.1' out=low_stdev_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'MAG_2,' 'MAG_3,' 'MAG_4)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_STDEV stdev(MAG_1, MAG_2, MAG_3, MAG_4)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'MAG_2,' 'MAG_3,' 'MAG_4)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables T1, T2, T3 (group mode) using symmetric best match (find=best). Output rows from T3 should always be included, matched or not (join3=always).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits join3=always find=best values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t3_outer_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 has an extra header parameter 'EPOCH' (string). Include this epoch as a scalar column in T2 before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.fits icmd2='addcol EPOCH_STR param$EPOCH' in3=T3.fits out=param_to_col_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables (D1-D4). Output should only contain the columns from D1 and D4 (all D1/D4 columns suffixed '_1' and '_4').",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=1 in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits fixcols=all suffix1=_1 suffix4=_4 ocmd='keepcols \"*_1 *_4\"' values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=D1D4_subset_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using 2D coordinates (X, Y) where match tolerance is anisotropic (10 units X, 1 unit Y). T1 is reference.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=2d_anisotropic params='10 1' values1='X Y' values2='X Y' values3='X Y' in1=T1.fits in2=T2.fits in3=T3.fits out=aniso_2d_pair.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T2, T3. Filter T3 to keep only the first 500 rows before attempting the match.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_MAIN.fits in2=T2.fits in3=T3.fits icmd3='head 500' out=t3_head_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five tables (C1-C5). Output only groups containing contributions from C1 and C5.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=2 in1=C1.fits join1=match in2=C2.fits in3=C3.fits in4=C4.fits in5=C5.fits join5=match values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' out=C1C5_overlap.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T3 contains 'LOG_MAG'. Match on 1D position (X) and 1D log magnitude (1d+1d, 5 units, 0.1 units).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d+1d params='5 0.1' values1='X LOG_MAG' values2='X LOG_MAG' values3='X LOG_MAG' in1=T1.fits in2=T2.fits in3=T3.fits out=1d_log_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 has its errors in degrees. Convert these to arcseconds before matching using `skyerr`.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=skyerr params=1 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='replacecol ERR ERR*3600.0' values1='RA DEC ERR' values2='RA DEC ERR' values3='RA DEC ERR' out=deg_err_to_arcsec_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_A, T_B, T_C. Find all pairs (all) relative to T_B (ref). Output to FITS format.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=2 matcher=exact values1=ID values2=ID values3=ID in1=T_A.fits in2=T_B.fits in3=T_C.fits find=all out=B_ref_all_pairs.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables, including an added column 'SEP_SQ' representing the match score squared.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits scorecol=SEP ocmd='addcol SEP_SQ SEP*SEP' values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=squared_sep_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEP\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 contains proper motions in degrees/year. Convert them to mas/year before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+2d params='1 5 5' in1=T1.fits in2=T2.fits icmd2='replacecol PMRA PMRA*3600000; replacecol PMDEC PMDEC*3600000' in3=T3.fits values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' values3='RA DEC PMRA PMDEC' out=deg_per_year_converted.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter params: Wrong number of words - wanted 2, got 3\nUsage: params=<match-params>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. T2 requires streaming input due to its size.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits istream2=true in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=streamed_input_match.fits",
        "chat.jar": "failed",
        "error": "Error: No file, URL or command \"T2.fits\"\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs (C1, C2, C3). Only output groups that contain sources from C1 or C2, but NOT C3.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=C1.fits in2=C2.fits in3=C3.fits join3=nomatch ocmd='select GroupSize > 0' out=C1_or_C2_not_C3.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select GroupSize > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T1 uses coordinate system Supergalactic. Convert T1 coordinates to ICRS before matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 in1=T1.fits icmd1='addskycoords supergalactic icrs SLON SLAT RA DEC' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=supergal_converted_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 only includes the first 1000 sources (head 1000).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=3 in1=T_REF.fits in2=T2.fits icmd2='head 1000' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t2_top_1k_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four tables using exact string match on 'TARGET_NAME'. T4 names must be trimmed of leading/trailing spaces before matching.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=NAME values2=NAME values3=NAME values4=NAME in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits icmd4='replacecol NAME trim(NAME)' out=name_trimmed_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five tables using 1D matching on 'FLUX' within 5 units. Filter T1 to only include FLUX > 100.",
        "response": "stilts tmatchn nin=5 multimode=pairs matcher=1d params=5 in1=F1.fits icmd1='select FLUX > 100' in2=F2.fits in3=F3.fits in4=F4.fits in5=F5.fits values1=FLUX values2=FLUX values3=FLUX values4=FLUX values5=FLUX out=filtered_1d_5way.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX > 100\n\nUsage: select <expr>\n    (Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Calculate the distance modulus DM from magnitude M and distance R_PC (modulusToDistance(R_PC)) and match on DM only (1d matcher).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=1d params=0.5 in1=T1.fits icmd1='addcol DM modulusToDistance(R_PC)' in2=T2.fits icmd2='addcol DM modulusToDistance(R_PC)' in3=T3.fits icmd3='addcol DM modulusToDistance(R_PC)' values1=DM values2=DM values3=DM out=distance_modulus_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. T2 has columns X, Y. T3 is in IPAC format. Match on (X, Y) 2D coordinates.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d params=10 values1='X Y' values2='X Y' values3='X Y' in1=T1.fits in2=T2.fits in3=T3.tbl ifmt3=ipac out=ipac_2d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. T2 columns need renaming: 'G_MAG' to 'MAG_G', 'R_MAG' to 'MAG_R' before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits icmd2='colmeta -name MAG_G G_MAG; colmeta -name MAG_R R_MAG' in3=T3.fits values1='RA DEC MAG_G' values2='RA DEC MAG_G' values3='RA DEC MAG_G' out=t2_renamed_cols.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 2, got 3\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 has an array column 'FLUX_SPECTRUM'. Discard this column in T2 before matching on scalar ID.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.fits icmd2='delcols FLUX_SPECTRUM' in3=T3.fits out=array_col_discarded.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables (C1-C4) using exact match on 'UID'. Add a column 'IS_COMPLETE' that is true if GroupSize is exactly 4.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=UID values2=UID values3=UID values4=UID in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits ocmd='addcol IS_COMPLETE GroupSize==4' out=complete_group_flag.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). T3 coordinates are in FK4 B1950. Convert to ICRS J2000 at epoch J1950.0 before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='addskycoords -epoch 1950.0 fk4 icrs RA_B1950 DEC_B1950 RA DEC' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=fk4_epoch_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 2D cuboid coordinates (X, Y). T1 and T4 should always be included in the output (join=always).",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=2d_cuboid params='5 5' in1=D1.fits join1=always in2=D2.fits in3=D3.fits in4=D4.fits join4=always values1='X Y' values2='X Y' values3='X Y' values4='X Y' out=D1D4_outer_cuboid.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T2, T3. T3 columns should be suffixed '_III'. Only output the unmatched rows from T_MAIN.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_MAIN.fits in2=T2.fits in3=T3.fits suffix3=_III join1=nomatch out=T_MAIN_only_singles_III.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. T2 and T3 have coordinate system Ecliptic. Convert to ICRS before matching C1 (ICRS).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=4 in1=C1.fits in2=C2.fits icmd2='addskycoords ecliptic icrs ELON ELAT RA DEC' in3=C3.fits icmd3='addskycoords ecliptic icrs ELON ELAT RA DEC' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=ecl_to_icrs_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four tables using position and velocity (sky+2d_anisotropic) where tolerances are 1 arcsec, 10 mas/yr (PMRA), and 5 mas/yr (PMDEC).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky+2d_anisotropic params='1 10 5' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' values3='RA DEC PMRA PMDEC' values4='RA DEC PMRA PMDEC' in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits out=high_fidelity_spacetime.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Find the best match for T1 from T2 (best1) and the best match for T3 from T1 (best2).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits find=best1 in3=T3.fits find=best2 out=best1_best2_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1 find=best2\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five tables (D1-D5). Output the checksum of the resulting table.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID values5=ID in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits in5=D5.fits omode=checksum",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. T2 has a quality flag 'QC_FLAG'. Only include T2 rows where QC_FLAG is 'PASS' before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits icmd2='select equals(QC_FLAG, \"PASS\")' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=QC_passed_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PASS' ')'\n\nCommand was: select equals(QC_FLAG, \"PASS\")\n\nUsage: select <expr>\n    (Unused arguments: 'PASS' ')')\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 2D error (2d_err). T1 has errors in pixels (E_PIX); T2 in arcsec (E_ARCSEC). Convert T2 error to pixel scale (1 arcsec = 10 pixels) before matching.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d_err params=1 in1=T1.fits in2=T2.fits icmd2='replacecol ERR E_ARCSEC*10' in3=T3.fits in4=T4.fits values1='X Y E_PIX' values2='X Y ERR' values3='X Y E_PIX' values4='X Y E_PIX' out=mixed_error_unit_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T3 contains magnitude in symmetric log scale. Match on position + log magnitude (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 1' values1='RA DEC MAG_SL' values2='RA DEC MAG_SL' values3='RA DEC MAG_SL' in1=T_REF.fits in2=T2.fits in3=T3.fits out=symlog_match_3way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, sorting the output by the calculated match separation score ('Distance') ascending.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=3 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=A.fits in2=B.fits in3=C.fits scorecol=Distance ocmd='sort Distance' out=group_by_distance_asc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Distance\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3, T4 (group mode). Filter the final result to keep only groups where T1, T2, T3, AND T4 are all present.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits join1=match in2=T2.fits join2=match in3=T3.fits join3=match in4=T4.fits join4=match out=full_overlap_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 only includes the first 10% of rows (random 0.1) before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits icmd2='random 0.1' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t2_random_sample_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: random 0.1\n\nUsage: random\n    (Unused arguments: '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five tables using 3D matching on (X, Y, Z). Use symmetric best match (find=best).",
        "response": "stilts tmatchn nin=5 multimode=group matcher=3d params=1 values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' values5='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits in5=D5.fits find=best out=symmetric_3d_5way.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T2 is a Parquet file. T3 has coordinates in Supergalactic system. Convert T3 to ICRS before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.parquet ifmt2=parquet in3=T3.fits icmd3='addskycoords supergalactic icrs SLON SLAT RA DEC' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=parquet_supergal_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T3 uses a custom angular error column 'ANG_ERR_MAS'. Match using skyerr (1 mas scale).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=skyerr params=1 values1='RA DEC ANG_ERR_MAS' values2='RA DEC ANG_ERR_MAS' values3='RA DEC ANG_ERR_MAS' in1=T_REF.fits in2=T2.fits in3=T3.fits out=mas_skyerr_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. Output should include all columns, but columns from T2/T3 must be prefixed with '_B' and '_C'.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=A.fits in2=B.fits in3=C.fits fixcols=all suffix2=_B suffix3=_C out=full_suffixed_group_ABC.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. T2 requires calculation of distance modulus (DM) from redshift (Z) using flat cosmology (DM=5*log10(luminosityDistance(...))). Match on position + DM (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 0.5' in1=T1.fits in2=T2.fits icmd2='addcol DM luminosityDistance(Z, 70, 0.3, 0.7)' icmd2='replacecol DM 5*log10(DM)-5' in3=T3.fits values1='RA DEC DM' values2='RA DEC DM' values3='RA DEC DM' out=cosmo_dm_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '70,' '0.3,' '0.7)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol DM luminosityDistance(Z, 70, 0.3, 0.7)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '70,' '0.3,' '0.7)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using 1D position (X) and 2D components (Y, Z) combined (1d+2d, 1 unit X, 5 units YZ).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=1d+2d params='1 5' values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits out=mixed_dimension_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 rows must always be included (join=always), T3 rows must only be included if unmatched (join=nomatch).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.fits join2=always in3=T3.fits join3=nomatch out=T2_outer_T3_anti.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five tables. Filter T4 to keep only rows where the calculated parallax error (1000/ERR_PLX) is less than 0.1.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits icmd4='select 1000/ERR_PLX < 0.1' in5=T5.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' out=low_parallax_err_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select 1000/ERR_PLX < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. After matching, calculate the K-correction (KCF_r, Z, KCC_gr, g-r) and add it as a column.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits ocmd='addcol K_CORR kCorr(KCF_r, Z, KCC_gr, g-r)' out=kcorr_calculated_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T2 contains magnitude in AB units; T3 in Vega units. Convert T3 magnitude (MAG_V) to AB (MAG_V - 0.04) before matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.1 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='replacecol MAG_V MAG_V - 0.04' values1=MAG_AB values2=MAG_AB values3=MAG_V out=ab_vega_aligned_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' '0.04'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol MAG_V MAG_V - 0.04\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '-' '0.04'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 coordinates are in Galactic (GLON, GLAT). Convert them to ICRS using an inline expression before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 values1='RA DEC' values2='icrsToGal(GLON, GLAT) icrsToGal(GLON, GLAT)[4]' values3='RA DEC' in1=T_REF.fits in2=T2.fits in3=T3.fits out=inline_gal_to_icrs_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values2: Wrong number of words - wanted 2, got 4\nUsage: values2=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match six tables (M1-M6) using exact match on 'OBJECT_ID'. Output the result as a multi-extension FITS file (fits-plus).",
        "response": "stilts tmatchn nin=6 multimode=group matcher=exact values1=OBJECT_ID values2=OBJECT_ID values3=OBJECT_ID values4=OBJECT_ID values5=OBJECT_ID values6=OBJECT_ID in1=M1.fits in2=M2.fits in3=M3.fits in4=M4.fits in5=M5.fits in6=M6.fits ofmt=fits-plus out=six_way_fits_plus.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3, T4 (group mode). Add an empty string column 'COMMENT' to the output for annotations.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits ocmd='addcol COMMENT \"\"' out=empty_comment_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 contains proper motion error (PM_ERR). Only include T3 rows where PM_ERR < 0.1 mas/yr.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits icmd3='select PM_ERR < 0.1' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=low_pm_error_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PM_ERR < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T1, T2, T3 all have a string array column 'FLAG_ARRAY'. Calculate the mean size of this array across all tables and add it to the output.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 ocmd='addcol AVG_FLAG_SIZE mean(size(FLAG_ARRAY_1), size(FLAG_ARRAY_2), size(FLAG_ARRAY_3))' out=array_size_stats_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'size(FLAG_ARRAY_2),' 'size(FLAG_ARRAY_3))'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol AVG_FLAG_SIZE mean(size(FLAG_ARRAY_1), size(FLAG_ARRAY_2), size(FLAG_ARRAY_3))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'size(FLAG_ARRAY_2),' 'size(FLAG_ARRAY_3))'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch six tables (S1-S6) using a custom combined matcher: sky separation (1 arcsec) AND Cartesian 1D distance (5 units).",
        "response": "stilts tmatchn nin=6 multimode=group matcher=sky+1d params='1 5' values1='RA DEC X' values2='RA DEC X' values3='RA DEC X' values4='RA DEC X' values5='RA DEC X' values6='RA DEC X' in1=S1.fits in2=S2.fits in3=S3.fits in4=S4.fits in5=S5.fits in6=S6.fits out=six_way_combined_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T3 has coordinate RA/DEC in degrees but units are not specified. Force interpretation as degrees before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T_REF.fits in2=T2.fits in3=T3.fits icmd3='colmeta -units deg RA; colmeta -units deg DEC' values1='RA DEC' values2='RA DEC' values3='RA DEC' out=forced_units_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. Filter the result to retain only rows where 'QUALITY_FLAG' in T1 is true (1).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 ocmd='select QUALITY_FLAG_1' out=T1_quality_filtered_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. T2 has columns 'GLON', 'GLAT'. T3 has columns 'RA', 'DEC'. Convert T2 and T3 coordinates to ICRS and match on ICRS RA/DEC.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits icmd2='addskycoords galactic icrs GLON GLAT RA DEC' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=mixed_coord_prep.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (pairs, T1 ref). Output should include the row index ($0) of T1 as a column named 'T1_INDEX'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits ocmd='addcol T1_INDEX $0' out=T1_index_pair.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four tables (C1-C4) using position error 'ERR' quadrature (skyerr_q). Exclude C4 rows that were matched.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=skyerr_q params=1 in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits join4=nomatch values1='RA DEC ERR' values2='RA DEC ERR' values3='RA DEC ERR' values4='RA DEC ERR' out=C4_unmatched_skyerr_q.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 has a string column 'OBJ_TYPE'. Only include T2 rows where OBJ_TYPE equals 'STAR'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.fits icmd2='select equals(OBJ_TYPE, \"STAR\")' in3=T3.fits out=t2_star_only_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'STAR' ')'\n\nCommand was: select equals(OBJ_TYPE, \"STAR\")\n\nUsage: select <expr>\n    (Unused arguments: 'STAR' ')')\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. Calculate a final column 'PM_VELOCITY' using proper motion components (hypot(PMRA, PMDEC)).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits ocmd='addcol PM_VELOCITY hypot(PMRA_1, PMDEC_1)' out=pm_velocity_output.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T3 columns need renaming: apply the 'fixcolnames' filter to T3 before matching.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits icmd3='fixcolnames' out=fixed_name_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 coordinates are in degrees, T3 are in radians. Convert T3 radians to degrees in an inline expression, matching T_REF (best1).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='radiansToDegrees(RA_RAD) radiansToDegrees(DEC_RAD)' in1=T_REF.fits in2=T2.fits in3=T3.fits find=best1 out=inline_rad_to_deg_best1.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (L1, L2, L3). L2 and L3 only include rows where 'TIME' > 55000 MJD.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.01 in1=L1.fits in2=L2.fits icmd2='select TIME > 55000' in3=L3.fits icmd3='select TIME > 55000' values1=TIME values2=TIME values3=TIME out=time_filtered_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '55000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select TIME > 55000\n\nUsage: select <expr>\n    (Unused arguments: '>' '55000'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3, T4 (pairs, T1 ref). Output should only contain the ID and RA columns from T1, T2, T3, T4.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 suffix4=_4 ocmd='keepcols ID_1 RA_1 ID_2 RA_2 ID_3 RA_3 ID_4 RA_4' out=id_ra_subset_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'RA_1' 'ID_2' 'RA_2' 'ID_3' 'RA_3' 'ID_4' 'RA_4'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols ID_1 RA_1 ID_2 RA_2 ID_3 RA_3 ID_4 RA_4\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'RA_1' 'ID_2' 'RA_2' 'ID_3' 'RA_3' 'ID_4' 'RA_4'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs (C1, C2, C3) using sky position (3 arcsec). Filter C3 before matching, keeping only rows where 'QUALITY_FLAG' > 3.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=3 values1='RA DEC' values2='RA DEC' in3=C3.fits icmd3='select QUALITY_FLAG > 3' values3='RA DEC' out=quality_filtered_group.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter in1: null value not allowed\nUsage: in1=<table1>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match a reference list T_REF against four survey tiles (S1-S4). Match exactly on SOURCE_ID. Only include matched rows from S1 and S2.",
        "response": "stilts tmatchn nin=5 multimode=pairs matcher=exact params=0 values1=SOURCE_ID values2=SOURCE_ID values3=SOURCE_ID values4=SOURCE_ID values5=SOURCE_ID in1=T_REF.fits in2=S1.fits join2=match in3=S2.fits join3=match in4=S3.fits in5=S4.fits out=selective_exact_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables (T1-T3) using anisotropic 2D matching (X, Y) with tolerances 10 units in X and 2 units in Y.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d_anisotropic params='10 2' values1='X Y' values2='X Y' values3='X Y' in1=T1.fits in2=T2.fits in3=T3.fits out=aniso_2d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four observational tables (E1-E4) on sky position (2 arcsec). Include all E1 rows (ref), and the single best match from E2, E3, and E4.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=2 in1=E1.fits join1=always in2=E2.fits in3=E3.fits in4=E4.fits find=best1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=E1_outer_best.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five catalogs (C1-C5). Output only the total count of matched groups found.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=4 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits in5=C5.fits omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T2 contains magnitude 99.0 for nulls. Replace 99.0 with null in T2 before matching T1 and T3 on position.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 in1=T1.fits in2=T2.fits icmd2='badval 99.0 MAG' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T2_nulls_cleaned_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against T_SUPP1 and T_SUPP2. T_SUPP1 has coordinates in radians; convert to degrees before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T_MAIN.fits in2=T_SUPP1.fits icmd2='replacecol RA radiansToDegrees(RA); replacecol DEC radiansToDegrees(DEC)' in3=T_SUPP2.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=rad_converted_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using sky error quadrature (skyerr_q). Input columns RA, DEC, and POS_ERR.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr_q params=1 values1='RA DEC POS_ERR' values2='RA DEC POS_ERR' values3='RA DEC POS_ERR' in1=T1.fits in2=T2.fits in3=T3.fits out=skyerr_q_match_full.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables exactly on 'UID'. Rename columns from T2, T3, T4 with suffixes '_II', '_III', '_IV' respectively.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact params=0 values1=UID values2=UID values3=UID values4=UID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits fixcols=dups suffix2=_II suffix3=_III suffix4=_IV out=four_way_suffixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (D1-D3). Output should be sorted by GroupSize descending, then by RA ascending.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=D1.fits in2=D2.fits in3=D3.fits scorecol=Distance ocmd='sort -down GroupSize RA' out=group_sorted_complex.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'RA'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: sort -down GroupSize RA\n\nUsage: sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n    (Unused arguments: 'RA'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Only keep matched T1 rows, and discard all columns from T2 and T3 except 'ID'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits join1=match in2=T2.fits icmd2='keepcols ID' in3=T3.fits icmd3='keepcols ID' out=T1_inner_ID_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five tables using 1D matching on 'MJD' within 0.001 day tolerance.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=1d params=0.001 values1=MJD values2=MJD values3=MJD values4=MJD values5=MJD in1=L1.fits in2=L2.fits in3=L3.fits in4=L4.fits in5=L5.fits out=high_res_time_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using exact match. T2 is a remote URL.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=NAME values2=NAME values3=NAME in1=T1.fits in2=http://remote.org/T2.fits in3=T3.fits out=remote_exact_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T_REF has position errors in mas (E_MAS). Convert to degrees before matching using skyerr.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=skyerr params=1 in1=T_REF.fits icmd1='addcol E_DEG E_MAS/3600000.0' in2=T2.fits in3=T3.fits values1='RA DEC E_DEG' values2='RA DEC E_DEG' values3='RA DEC E_DEG' out=mas_error_converted_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 3D coordinates (X, Y, Z) within 5 units. Execute in parallel.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=3d params=5 values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits runner=parallel out=parallel_3d_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. Add a column 'Provenance' containing the original filename (full path) of the matching row from T1.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=/archive/T1.fits in2=T2.fits in3=T3.fits loccol=ORIGIN_PATH ocmd='addcol Provenance ORIGIN_PATH_1' out=provenance_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: loccol=ORIGIN_PATH\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 is an IPAC table. T2 has an extra column 'NOTES' to discard.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits icmd2='delcols NOTES' in3=T3.tbl ifmt3=ipac values1='RA DEC' values2='RA DEC' values3='RA DEC' out=ipac_notes_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 using sky position and R-band magnitude (sky*1d). Tolerances 1 arcsec and 0.1 mag.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky*1d params='1 0.1' values1='RA DEC R_MAG' values2='RA DEC R_MAG' values3='RA DEC R_MAG' in1=T1.fits in2=T2.fits in3=T3.fits out=sky_star_1d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3, T4. Only output the rows from T1 that were *unmatched* by the other tables.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits join1=nomatch in2=T2.fits in3=T3.fits in4=T4.fits out=T1_unmatched_only.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (T1 ref). T2 contains magnitude in Vega, T3 in AB. Convert T2 to AB (MAG_AB = MAG_V + 0.03) before matching on position.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits icmd2='replacecol MAG_AB MAG_V + 0.03' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=vega_ab_aligned.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' '0.03'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol MAG_AB MAG_V + 0.03\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '+' '0.03'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, T1-T3. After matching, filter the result to keep only groups where the size is 2 (pairs).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits ocmd='select GroupSize==2' out=only_pairs_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_REF against T2, T3. T2 only includes the first 50 rows. T3 only includes rows where 'TYPE' is 'GALAXY'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.fits icmd2='head 50' in3=T3.fits icmd3='select TYPE==\"GALAXY\"' out=filtered_mixed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using Cartesian 3D error quadrature (3d_err_q). Output column names should be suffixed '_1', '_2', '_3'.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=3d_err_q params=1 values1='X Y Z ERR' values2='X Y Z ERR' values3='X Y Z ERR' in1=D1.fits in2=D2.fits in3=D3.fits fixcols=all out=numbered_3d_err_q.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs using anisotropic sky matching (sky+2d_anisotropic) on position and proper motion. Tolerances 2 arcsec, 10 mas/yr, 5 mas/yr.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky+2d_anisotropic params='2 10 5' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' values3='RA DEC PMRA PMDEC' values4='RA DEC PMRA PMDEC' in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits out=spacetime_anisotropic_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Output should include all T1 rows (join1=always), and the score 'Distance' column.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits join1=always in2=T2.fits in3=T3.fits scorecol=Distance values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T1_outer_scored.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Distance\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (P1-P3) on a 2D position (X, Y). Add a column 'AVG_X' to the output containing the mean X coordinate of all members in the group.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d params=5 values1='X Y' values2='X Y' values3='X Y' in1=P1.fits in2=P2.fits in3=P3.fits ocmd='addcol AVG_X mean(X)' out=mean_x_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four catalogs using anisotropic cuboid matching (3d_cuboid) with unequal tolerances 1, 5, 10 units on X, Y, Z.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=3d_cuboid params='1 5 10' values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits out=aniso_cuboid_3d.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T_REF contains position in Galactic (GLON, GLAT). Convert T_REF to ICRS before matching T2 and T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T_REF.fits icmd1='addskycoords galactic icrs GLON GLAT RA DEC' in2=T2.fits in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=gal_ref_converted.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match six tables (T1-T6) exactly on ID. Filter the final output to only keep groups where the GroupSize is exactly 6.",
        "response": "stilts tmatchn nin=6 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID values5=ID values6=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits in5=T5.fits in6=T6.fits ocmd='select GroupSize==6' out=full_6way_overlap.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. T2 has an array column 'POS_VEC'. Explode T2 column into scalar RA/DEC before matching T1 and T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits icmd2='explodecols POS_VEC; colmeta -name RA POS_VEC_0; colmeta -name DEC POS_VEC_1' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=exploded_coords_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). T3 columns should always be included in the output, even if they aren't part of a group match.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits join3=always out=T3_always_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. Use sky separation (5 arcsec). After matching, add a boolean column 'HIGH_SEP' if the separation is > 3 arcsec.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_REF.fits in2=T2.fits in3=T3.fits scorecol=Separation ocmd='addcol HIGH_SEP Separation > 3/3600.0' out=high_sep_flagged.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '3/3600.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol HIGH_SEP Separation > 3/3600.0\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '>' '3/3600.0'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 2D coordinates (X, Y) where the match radius is given by the combined error in quadrature (2d_err_q).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d_err_q params=1 values1='X Y ERR' values2='X Y ERR' values3='X Y ERR' values4='X Y ERR' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits out=cartesian_2d_err_q_4way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. T1 has 'ERROR_MAS'. Convert this to 'ERROR_DEG' for matching using skyerr.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr params=1 in1=T1.fits icmd1='addcol ERROR_DEG ERROR_MAS/3600000.0' in2=T2.fits in3=T3.fits values1='RA DEC ERROR_DEG' values2='RA DEC ERROR_DEG' values3='RA DEC ERROR_DEG' out=error_unit_unified.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 is a simulated star field (:skysim:). Use symmetric best match (find=best).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 in1=T1.fits in2=T2.fits in3=:skysim:5000 find=best values1='RA DEC' values2='RA DEC' values3='ra dec' out=sim_best_match_3way.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3, T4 exactly on ID. After matching, drop all columns named 'FLUX_ERR*' from the output.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits ocmd='delcols FLUX_ERR*' out=error_cols_dropped_postmatch.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match five tables using 3D spherical polar coordinates (sky3d, 1 Mpc tolerance). Columns: RA, DEC, DISTANCE_MPC.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky3d params=1 values1='RA DEC DISTANCE_MPC' values2='RA DEC DISTANCE_MPC' values3='RA DEC DISTANCE_MPC' values4='RA DEC DISTANCE_MPC' values5='RA DEC DISTANCE_MPC' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits in5=D5.fits out=sky_3d_5way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 is a Parquet file. T3 columns should be suffixed '_III'. Only output the matched row count.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.parquet ifmt2=parquet in3=T3.fits suffix3=_III omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs (C1-C3). In C2, add a custom column 'LOG_MAG' = log10(MAG) before grouping on this column (1D match, 0.05 tolerance).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.05 in1=C1.fits in2=C2.fits icmd2='addcol LOG_MAG log10(MAG)' in3=C3.fits values1=LOG_MAG values2=LOG_MAG values3=LOG_MAG out=log_mag_1d_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. Output rows from T2 and T3 should be included ONLY if they are NOT matched to T1.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits join2=nomatch in3=T3.fits join3=nomatch out=T2_T3_anti_join_ref.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using exact string match on 'NAME'. T3 names should be converted to uppercase before matching.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=NAME values2=NAME values3=UPPER_NAME values4=NAME in1=T1.fits in2=T2.fits in3=T3.fits icmd3='replacecol UPPER_NAME toUpperCase(NAME)' in4=T4.fits out=uppercase_name_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3, T4. Only output columns from the reference table (T1).",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits ocmd='keepcols *' values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=T1_cols_only_pair.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five tables (A-E) using sky position (1 arcsec). Output the result to VOTable using BINARY2 format.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' in1=A.fits in2=B.fits in3=C.fits in4=D.fits in5=E.fits ofmt='votable(format=BINARY2)' out=five_way_binary2.vot",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T1, T2, T3 using Cartesian 2D cuboid coordinates (X, Y) with 1 unit tolerance in X and 10 units in Y.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=2d_cuboid params='1 10' values1='X Y' values2='X Y' values3='X Y' in1=T1.fits in2=T2.fits in3=T3.fits out=cuboid_aniso_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3, T4. T2 has an array column 'FLUX_SPEC' that must be discarded before matching on scalar ID.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits icmd2='delcols FLUX_SPEC' in3=T3.fits in4=T4.fits out=T2_array_discarded.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. Find the best match (find=best) symmetrically and output the result as a FITS file.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_REF.fits in2=T2.fits in3=T3.fits find=best out=symmetric_best_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. After matching, calculate the standard deviation of the 'FLUX' column across the matched members.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 ocmd='addcol FLUX_STDEV stdev(FLUX_1, FLUX_2, FLUX_3)' out=flux_stdev_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'FLUX_2,' 'FLUX_3)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol FLUX_STDEV stdev(FLUX_1, FLUX_2, FLUX_3)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'FLUX_2,' 'FLUX_3)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 2D coordinates (X, Y). T2 coordinates are computed by rotation (90 degrees).",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=2d params=5 in1=T1.fits in2=T2.fits icmd2='addcol X_ROT X*cosDeg(90) - Y*sinDeg(90); addcol Y_ROT X*sinDeg(90) + Y*cosDeg(90)' in3=T3.fits in4=T4.fits values1='X Y' values2='X_ROT Y_ROT' values3='X Y' values4='X Y' out=rotated_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'Y*sinDeg(90)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol X_ROT X*cosDeg(90) - Y*sinDeg(90)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'Y*sinDeg(90)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch six tables (C1-C6) using sky position (1 arcsec). Execute in parallel mode.",
        "response": "stilts tmatchn nin=6 multimode=group matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' values6='RA DEC' in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits in5=C5.fits in6=C6.fits runner=parallel out=six_way_parallel.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T3 is a FITS file from which only the second extension (#2) should be used.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.fits in3=T3.fits#2 out=ext_2_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three catalogs using 'sky+1d' on position (5 arcsec) and velocity (10 km/s).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky+1d params='5 10' values1='RA DEC V_RAD' values2='RA DEC V_RAD' values3='RA DEC V_RAD' in1=A.fits in2=B.fits in3=C.fits out=sky_velocity_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3, T4. Only keep matched T1 rows, and include a score column 'Separation_deg'.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=T1.fits join1=match in2=T2.fits in3=T3.fits in4=T4.fits scorecol=Separation_deg values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=matched_with_sep_deg.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Separation_deg\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five tables. T3 has an error column (ERR) in percent; normalize it to 1 before matching using skyerr.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=skyerr params=1 in3=T3.fits icmd3='replacecol ERR 1.0' values1='RA DEC ERR' values2='RA DEC ERR' values3='RA DEC ERR' values4='RA DEC ERR' values5='RA DEC ERR' in1=T1.fits in2=T2.fits in4=T4.fits in5=T5.fits out=normalized_error_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 exactly on ID. After matching, sort the result by the sum of magnitudes MAG_1 + MAG_2 + MAG_3 descending.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 ocmd='addcol MAG_SUM MAG_1+MAG_2+MAG_3' ocmd='sort -down MAG_SUM' out=sorted_by_mag_sum.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_REF against T2, T3. T2 only includes rows where 'COLOR' > 0.5. T3 columns should always be included.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=3 in1=T_REF.fits in2=T2.fits icmd2='select COLOR > 0.5' in3=T3.fits join3=always values1='RA DEC' values2='RA DEC' values3='RA DEC' out=color_filter_T3_outer.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select COLOR > 0.5\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.5'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables. T1 is ASCII, T2 is IPAC, T3 is VOTable. Specify formats explicitly.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=A.txt ifmt1=ascii in2=B.tbl ifmt2=ipac in3=C.vot ifmt3=votable out=mixed_format_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 contains coordinate RA_HMS/DEC_DMS in sexagesimal strings. Convert T3 coordinates to degrees inline.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='hmsToDegrees(RA_HMS) dmsToDegrees(DEC_DMS)' in1=T1.fits in2=T2.fits in3=T3.fits out=inline_sexagesimal_match_3way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using 'sky' (2 arcsec). After matching, only return the total number of matched rows.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' omode=count",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables, T1-T3. Exclude T1 rows that were matched, and output the result to TOPCAT.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits join1=nomatch in2=T2.fits in3=T3.fits omode=topcat",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 has an array column 'FLUX_VEC'. Replace it with the mean of the array values before matching on position + mean flux (sky+1d).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 0.1' in1=T1.fits in2=T2.fits icmd2='addcol FLUX_MEAN mean(FLUX_VEC)' in3=T3.fits values1='RA DEC FLUX_MEAN' values2='RA DEC FLUX_MEAN' values3='RA DEC FLUX_MEAN' out=array_mean_match_3way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using Cartesian 3D coordinates (X, Y, Z). After matching, calculate the Euclidean distance column 'EDIST' from the coordinates of the first table.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=3d params=10 values1='X Y Z' values2='X Y Z' values3='X Y Z' in1=T1.fits in2=T2.fits in3=T3.fits ocmd='addcol EDIST hypot(X_1, Y_1, Z_1)' out=euclidean_distance_calc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Y_1,' 'Z_1)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol EDIST hypot(X_1, Y_1, Z_1)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'Y_1,' 'Z_1)'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (T1, T2, T3) using 1D matching on 'FLUX' within 10 units. Before matching, T2 must be filtered to keep only rows where 'FLAG' is false.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=10 values1=FLUX values2=FLUX values3=FLUX in1=T1.fits in2=T2.fits icmd2='select !FLAG' in3=T3.fits out=filtered_flux_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against three observational archives. Find the single best match (best1) for each T_MAIN entry, 1 arcsec radius. Include all T_MAIN rows, even unmatched ones.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' in1=T_MAIN.fits join1=always find=best1 in2=A.fits in3=B.fits in4=C.fits out=main_outer_best1.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch five catalogs (C1-C5) using exact match on SOURCE_ID. Output only groups that include entries from C1 and C5.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact values1=SOURCE_ID values2=SOURCE_ID values3=SOURCE_ID values4=SOURCE_ID values5=SOURCE_ID in1=C1.fits join1=match in2=C2.fits in3=C3.fits in4=C4.fits in5=C5.fits join5=match out=C1_C5_overlap_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables using 2D Cartesian error combined in quadrature (2d_err_q) on X, Y pixel coordinates (1 unit scale).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=2d_err_q params=1 values1='X Y E_POS' values2='X Y E_POS' values3='X Y E_POS' in1=I1.fits in2=I2.fits in3=I3.fits out=image_error_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 is a CSV file, T3 is VOTable. Rename T1 columns with suffix '_A', T2 with '_B', T3 with '_C'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=3 in1=T1.fits in2=T2.csv ifmt2=csv in3=T3.vot fixcols=all suffix1=_A suffix2=_B suffix3=_C values1='RA DEC' values2='RA DEC' values3='RA DEC' out=hetero_suffixed_all.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match four time series tables (TS1-TS4) on MJD, 0.01 day tolerance. After matching, drop the GroupID column.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=1d params=0.01 values1=MJD values2=MJD values3=MJD values4=MJD in1=TS1.fits in2=TS2.fits in3=TS3.fits in4=TS4.fits ocmd='delcols GroupID' out=time_group_no_id.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_MAIN against three tables (T2, T3, T4). T2 contains coordinates in Galactic (GLON, GLAT). Convert T2 to ICRS before matching T_MAIN (3 arcsec tolerance).",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=3 in1=T_MAIN.fits in2=T2.fits icmd2='addskycoords galactic icrs GLON GLAT RA DEC' in3=T3.fits in4=T4.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=T2_gal_preproc_match.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3, T4 (pairs, T1 ref). Only output the statistical summary of the resulting table.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits omode=stats",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three tables (A, B, C). A has magnitude MAG_V. Convert A to MAG_AB (MAG_AB = MAG_V + 0.03) and match on MAG_AB (1D, 0.2 tolerance).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=1d params=0.2 in1=A.fits icmd1='addcol MAG_AB MAG_V + 0.03' in2=B.fits in3=C.fits values1=MAG_AB values2=MAG_AB values3=MAG_AB out=mag_converted_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' '0.03'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_AB MAG_V + 0.03\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' '0.03'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T_REF contains position error in mas (E_MAS). Match using skyerr (1 mas scale) and convert T_REF error to arcsec (E_MAS/1000).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=skyerr params=1 values1='RA DEC E_ARCSEC' values2='RA DEC E_ARCSEC' values3='RA DEC E_ARCSEC' in1=T_REF.fits icmd1='addcol E_ARCSEC E_MAS/1000.0' in2=T2.fits in3=T3.fits out=ref_error_converted_skyerr.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch four files T1-T4 using anisotropic 2D matching (2d_anisotropic) on (FLUX_R, FLUX_B) with tolerances 10 and 5 units.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=2d_anisotropic params='10 5' values1='FLUX_R FLUX_B' values2='FLUX_R FLUX_B' values3='FLUX_R FLUX_B' values4='FLUX_R FLUX_B' in1=F1.fits in2=F2.fits in3=F3.fits in4=F4.fits out=aniso_flux_group_4way.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match three tables T1, T2, T3 (pairs, T1 ref). T2 contains array column 'ERRORS'. Explode 'ERRORS' into separate scalar columns E1 and E2 before matching on (X, Y, E1) using 3D isotropic matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=3d params=1 values1='X Y E1' in2=T2.fits icmd2='explodecols ERRORS; colmeta -name E1 ERRORS_0' in3=T3.fits values2='X Y E1' values3='X Y E1' out=T2_exploded_3d.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter in1: null value not allowed\nUsage: in1=<table1>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match three catalogs (C1, C2, C3). Filter C1 to keep only rows where the calculated magnitude MAG_R < 18.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=C1.fits icmd1='select MAG_R < 18' in2=C2.fits in3=C3.fits out=C1_bright_only_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG_R < 18\n\nUsage: select <expr>\n    (Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted))\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T_MAIN against T2, T3, T4. Only output T_MAIN rows that were *unmatched* by T2, T3, and T4 combined. T2 is provided via standard input (ASCII).",
        "response": "cat T2.txt | stilts tmatchn nin=4 multimode=pairs matcher=exact values1=ID values2=ID values3=ID values4=ID in1=T_MAIN.fits in2=- ifmt2=ascii in3=T3.fits in4=T4.fits join1=nomatch out=T_MAIN_only_singles_pipe.fits",
        "chat.jar": "skipped - no 'stilts' prefix",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match four tables using Cartesian 3D coordinates (X, Y, Z) within 20 units. T4 output columns prefixed '_IV'.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=3d params=20 values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits fixcols=dups suffix4=_IV out=d4_3d_suffixed.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using sky position and velocity (sky+2d) with tolerances 1 arcsec, 10 mas/yr, 10 mas/yr.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+2d params='1 10 10' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' values3='RA DEC PMRA PMDEC' in1=T1.fits in2=T2.fits in3=T3.fits out=pos_pm_aniso_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter params: Wrong number of words - wanted 2, got 3\nUsage: params=<match-params>\n\n",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Group match five catalogs (C1-C5). C4 columns must be renamed using numerical suffixes only (suffix4=_4).",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact values1=ID values2=ID values3=ID values4=ID values5=ID in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits fixcols=dups suffix4=_4 in5=C5.fits out=C4_numeric_suffixed_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Match T_REF (ref) against T2, T3. T3 contains magnitude in symmetric log scale. Match on position + magnitude (sky+1d, 1 arcsec, 1.0 symlog tolerance).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky+1d params='1 1.0' values1='RA DEC MAG_SL' values2='RA DEC MAG_SL' values3='RA DEC MAG_SL' in1=T_REF.fits in2=T2.fits in3=T3.fits out=symlog_mag_pair.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Crossmatch three tables T1, T2, T3 (group mode). T2 contains position errors in degrees (E_DEG). Convert E_DEG to arcsec (E_DEG * 3600) for matching using skyerr.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=skyerr params=1 in1=T1.fits in2=T2.fits icmd2='replacecol E_DEG E_DEG*3600' in3=T3.fits values1='RA DEC E_ARCSEC' values2='RA DEC E_DEG' values3='RA DEC E_ARCSEC' out=converted_error_group.fits",
        "chat.jar": "executed successfully",
        "cmd": "tmatchn"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3, T4. Only output columns from T1 (ID, RA, DEC) and the separation score.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits scorecol=SEP ocmd='keepcols ID SEP RA DEC' out=minimal_ref_output.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n",
        "cmd": "tmatchn"
    }
]