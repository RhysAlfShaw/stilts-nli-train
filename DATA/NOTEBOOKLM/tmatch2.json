[
    {
        "prompt": "Crossmatch two FITS files, `survey_A.fits` and `survey_B.fits`, on sky position with a 2 arcsecond radius. The coordinate columns in both are RA and DEC. Save the result to `matched_surveys.fits`.",
        "response": "stilts tmatch2 in1=survey_A.fits in2=survey_B.fits out=matched_surveys.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC'",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have a VOTable `my_targets.vot` and a CSV `reference_catalog.csv`. How do I find all counterparts in the reference catalog within 5 arcseconds of my targets? Coordinates are `RA_DEG`, `DEC_DEG` in the VOTable and `ra`, `dec` in the CSV.",
        "response": "stilts tmatch2 in1=my_targets.vot ifmt2=csv in2=reference_catalog.csv out=target_counterparts.fits matcher=sky params=5 values1='RA_DEG DEC_DEG' values2='ra dec' find=all",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find objects from `catalog1.fits` that are NOT in `catalog2.fits`, based on a 1.5 arcsecond sky match. Coords are RAJ2000 and DEJ2000.",
        "response": "stilts tmatch2 in1=catalog1.fits in2=catalog2.fits matcher=sky params=1.5 values1='RAJ2000 DEJ2000' values2='RAJ2000 DEJ2000' join=1not2 out=unmatched_from_cat1.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to join `table_x.fits` and `table_y.fits`. Before matching, I need to filter table_x to only include sources with `FLUX > 100`. The match should be on sky coordinates `pos_ra`, `pos_dec` with a 3 arcsec tolerance.",
        "response": "stilts tmatch2 in1=table_x.fits icmd1='select FLUX > 100' in2=table_y.fits matcher=sky params=3 values1='pos_ra pos_dec' values2='pos_ra pos_dec' out=filtered_join.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX > 100\n\nUsage: select <expr>\n    (Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match `primary_sources.vot` and `secondary_sources.vot` and then sort the resulting table by the separation distance. Save the output as `sorted_matches.csv`.",
        "response": "stilts tmatch2 in1=primary_sources.vot in2=secondary_sources.vot matcher=sky params=10 values1='RA DEC' values2='RA DEC' ocmd='sort Separation' ofmt=csv out=sorted_matches.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Please match `cat_a.fits` and `cat_b.fits`. I want to keep all rows from `cat_a`, and include matched data from `cat_b` where available. Use a 4 arcsec radius.",
        "response": "stilts tmatch2 in1=cat_a.fits in2=cat_b.fits matcher=sky params=4 values1='RA DEC' values2='RA DEC' join=all1 out=cat_a_with_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How can I count the number of matches between `gala_dr3.fits` and `sdss_dr17.fits` within 2 arcseconds, without creating an output file?",
        "response": "stilts tmatch2 in1=gala_dr3.fits in2=sdss_dr17.fits matcher=sky params=2 values1='ra dec' values2='ra dec' omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to match two tables, `sloan.dat` (ASCII) and `panstarrs.vot`. The coordinates in sloan are in radians (`ra_rad`, `dec_rad`). Can you convert them to degrees for a 5 arcsec sky match against the `RA`, `DEC` columns in panstarrs?",
        "response": "stilts tmatch2 ifmt1=ascii in1=sloan.dat in2=panstarrs.vot matcher=sky params=5 values1='radiansToDegrees(ra_rad) radiansToDegrees(dec_rad)' values2='RA DEC' out=sloan_ps_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join `first_epoch.fits` and `second_epoch.fits` on sky position. The column names are identical, so please add `_E1` and `_E2` suffixes to the columns from each table to avoid confusion.",
        "response": "stilts tmatch2 in1=first_epoch.fits in2=second_epoch.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=all suffix1=_E1 suffix2=_E2 out=epoch_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can you match `sources.fits` against `detections.fits` and send the results directly to TOPCAT for me to inspect? Use a 3 arcsecond radius.",
        "response": "stilts tmatch2 in1=sources.fits in2=detections.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' omode=topcat",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have two tables with per-object errors. Match `cat1.fits` and `cat2.fits` using their individual errors stored in `ERR_ARCSEC_1` and `ERR_ARCSEC_2` respectively. The coordinate columns are `RA_1`, `DEC_1` and `RA_2`, `DEC_2`.",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=skyerr params=5 values1='RA_1 DEC_1 ERR_ARCSEC_1' values2='RA_2 DEC_2 ERR_ARCSEC_2' out=match_with_errors.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I match two catalogs where the match radius is the quadrature sum of their individual errors (`pos_err_1`, `pos_err_2`)?",
        "response": "stilts tmatch2 in1=cat_A.fits in2=cat_B.fits matcher=skyerr_q params=3 values1='RA DEC pos_err_1' values2='RA DEC pos_err_2' out=quadrature_error_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables based on elliptical regions on the sky. Table `galaxies.fits` has columns `ra`, `dec`, `a_world`, `b_world`, `pa_world`. Table `regions.vot` has `cen_ra`, `cen_dec`, `maj_ax`, `min_ax`, `pos_ang`. All angles are degrees and radii are arcseconds. The approximate scale of the radii is 30 arcsec.",
        "response": "stilts tmatch2 in1=galaxies.fits in2=regions.vot matcher=skyellipse params=30 values1='ra dec a_world b_world pa_world' values2='cen_ra cen_dec maj_ax min_ax pos_ang' out=elliptical_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to perform a 3D match between `local_stars.fits` (columns `RA`, `DEC`, `DISTANCE_PC`) and `nearby_galaxies.vot` (columns `RA`, `DEC`, `DIST_MPC`). The maximum separation should be 0.5 Mpc.",
        "response": "stilts tmatch2 in1=local_stars.fits in2=nearby_galaxies.vot matcher=sky3d params=0.5 values1='RA DEC DISTANCE_PC/1e6' values2='RA DEC DIST_MPC' out=3d_spatial_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Please join `table1.csv` and `table2.csv` where the `SOURCE_ID` column is exactly the same in both.",
        "response": "stilts tmatch2 ifmt1=csv in1=table1.csv ifmt2=csv in2=table2.csv matcher=exact values1=SOURCE_ID values2=SOURCE_ID out=exact_id_join.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How to match two tables on a 1-dimensional value, `redshift`, with a tolerance of 0.01?",
        "response": "stilts tmatch2 in1=spec_cat.fits in2=photo_cat.fits matcher=1d params=0.01 values1=redshift values2=z_phot out=redshift_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have detector coordinates (`X_IMAGE`, `Y_IMAGE`) in two files. Find matches within a 5 pixel radius.",
        "response": "stilts tmatch2 in1=chip1.fits in2=chip2.fits matcher=2d params=5 values1='X_IMAGE Y_IMAGE' values2='X_IMAGE Y_IMAGE' out=detector_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Perform a match in a 3D parameter space (`PARAM1`, `PARAM2`, `PARAM3`) with an error of 10 units.",
        "response": "stilts tmatch2 in1=model_a.dat in2=model_b.dat ifmt=ascii matcher=3d params=10 values1='PARAM1 PARAM2 PARAM3' values2='PARAM1 PARAM2 PARAM3' out=param_space_match.dat",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for param_space_match.dat\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "I want to match on magnitude and color, with different tolerances. Match within 0.1 for magnitude (`mag_r`) and 0.2 for color (`g_minus_r`).",
        "response": "stilts tmatch2 in1=phot1.fits in2=phot2.fits matcher=2d_anisotropic params='0.1 0.2' values1='mag_r g_minus_r' values2='mag_r g_minus_r' out=mag_color_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find objects in `obs1.fits` and `obs2.fits` that fall into the same bin, where bins are defined as +/- 2 pixels in X and +/- 3 pixels in Y.",
        "response": "stilts tmatch2 in1=obs1.fits in2=obs2.fits matcher=2d_cuboid params='2 3' values1='X Y' values2='X Y' out=binned_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `data_a.fits` and `data_b.fits` in a 2D space (`VAL1`, `VAL2`), where each point has its own error radius given by the `ERR` column.",
        "response": "stilts tmatch2 in1=data_a.fits in2=data_b.fits matcher=2d_err params=10 values1='VAL1 VAL2 ERR' values2='VAL1 VAL2 ERR' out=cartesian_err_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have two tables with elliptical regions defined in a 2D plane (columns `x`, `y`, `a`, `b`, `theta`). How can I find the overlapping regions? The characteristic size is about 50 units.",
        "response": "stilts tmatch2 in1=regions1.fits in2=regions2.fits matcher=2d_ellipse params=50 values1='x y a b theta' values2='x y a b theta' out=overlapping_regions.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find objects from `cat_X.fits` and `cat_Y.fits` that are within 2 arcsec AND have a magnitude difference (`MAG`) of less than 0.25.",
        "response": "stilts tmatch2 in1=cat_X.fits in2=cat_Y.fits matcher=sky+1d params='2 0.25' values1='RA DEC MAG' values2='RA DEC MAG' out=pos_mag_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to perform a strict match in position and flux. Match if `skyDistanceDegrees(...) < 2` AND `abs(FLUX_1 - FLUX_2) < 10`. Can I do this?",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky+1d params='2 10' values1='RA DEC FLUX_1' values2='RA DEC FLUX_2' out=strict_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My friend wants me to match our star lists. His is `friends_stars.txt`, mine is `my_stars.csv`. We need to find stars closer than 1 arcsec. For each of my stars, just find the single best match from his list.",
        "response": "stilts tmatch2 ifmt1=csv in1=my_stars.csv ifmt2=ascii in2=friends_stars.txt matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best1 out=our_best_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a table of all rows from my primary catalog `main_survey.fits`, indicating the best match from `supplemental.fits` if one exists within 5 arcseconds.",
        "response": "stilts tmatch2 in1=main_survey.fits in2=supplemental.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=best1 join=all1 out=main_with_supplemental.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all possible pairs between `dense_field_A.fits` and `dense_field_B.fits` within 10 arcseconds. I want to see the separation in arcseconds in a column named 'AngSep'.",
        "response": "stilts tmatch2 in1=dense_field_A.fits in2=dense_field_B.fits matcher=sky params=10 values1='RA DEC' values2='RA DEC' find=all scorecol=AngSep out=all_pairs.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "To speed up my sky match of two huge catalogs, can I adjust the HEALPix level? Let's try k=8.",
        "response": "stilts tmatch2 in1=big_cat1.fits in2=big_cat2.fits matcher=sky params=10 values1='RA DEC' values2='RA DEC' tuning=8 out=tuned_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I'm matching two very large tables on a multi-core machine. How do I tell stilts to use parallel processing?",
        "response": "stilts tmatch2 in1=massive_1.colfits in2=massive_2.colfits matcher=sky params=1 values1='RA DEC' values2='RA DEC' runner=parallel out=parallel_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What's the command to get a statistical summary of the matched objects between `table1.fits` and `table2.fits`?",
        "response": "stilts tmatch2 in1=table1.fits in2=table2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' omode=stats",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I'm matching two tables, `A.fits` and `B.fits`, but `B.fits` has its coordinates (`B_RA`, `B_DEC`) in the FK4 system. Can you convert them to FK5 before matching against `A.fits` (`A_RA`, `A_DEC`)?",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits icmd2='addskycoords fk4 fk5 B_RA B_DEC B_RA_FK5 B_DEC_FK5' matcher=sky params=5 values1='A_RA A_DEC' values2='B_RA_FK5 B_DEC_FK5' out=fk4_fk5_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `cat_main.fits` with `cat_alt.fits`. The `cat_alt` table uses galactic coordinates `GLON`, `GLAT`. `cat_main` uses ICRS `RA`, `DEC`. Match them within 0.1 degrees.",
        "response": "stilts tmatch2 in1=cat_main.fits in2=cat_alt.fits icmd2='addskycoords galactic icrs GLON GLAT RA_ICRS DEC_ICRS' matcher=sky params=360 values1='RA DEC' values2='RA_ICRS DEC_ICRS' out=icrs_gal_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to match objects by their unique string identifier, `UID_string`, in `list1.csv` and `list2.csv`.",
        "response": "stilts tmatch2 ifmt=csv in1=list1.csv in2=list2.csv matcher=exact values1='UID_string' values2='UID_string' out=uid_match.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Give me a list of objects that are in either `cat1.fits` or `cat2.fits` but not in both, based on a 2 arcsec sky match.",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=1xor2 out=symmetric_difference.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join `a.fits` and `b.fits` with a sky match. After joining, I only want the ID columns from both (`ID_1`, `ID_2`) and the separation.",
        "response": "stilts tmatch2 in1=a.fits in2=b.fits matcher=sky params=4 values1='RA DEC' values2='RA DEC' ocmd='keepcols \"ID_1 ID_2 Separation\"' out=id_pairs.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I'm matching two photometric catalogs. I want to find pairs within 1 arcsec that also have a G-band magnitude difference of less than 0.1, AND an R-band magnitude difference of less than 0.1.",
        "response": "stilts tmatch2 in1=phot_a.fits in2=phot_b.fits matcher=sky+2d_anisotropic params='1 0.1 0.1' values1='RA DEC MAG_G MAG_R' values2='RA DEC MAG_G MAG_R' out=photometric_pairs.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Show me the metadata of the resulting table if I match `t1.fits` and `t2.fits` on sky position.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Perform a sky match between `c1.fits` and `c2.fits`, but for `c2.fits`, only consider rows where `QUALITY_FLAG` is 'A'.",
        "response": "stilts tmatch2 in1=c1.fits in2=c2.fits icmd2='select QUALITY_FLAG==\"A\"' matcher=sky params=3 values1='RA DEC' values2='RA DEC' out=quality_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "What's the command to find the best match for each row in `table1.fits` from `table2.fits`, and include all rows from `table1` in the output, even if they have no match?",
        "response": "stilts tmatch2 in1=table1.fits in2=table2.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=best1 join=all1 out=complete_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to do a crossmatch, but I want to see the progress because the tables are huge. The match is on `RA`, `DEC` with a 2\" radius.",
        "response": "stilts tmatch2 in1=huge1.fits in2=huge2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' progress=log out=huge_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `tbl_x.fits` and `tbl_y.fits`. In the output, please only keep the identifier columns (`ID_X`, `ID_Y`) and then count how many pairs there are.",
        "response": "stilts tmatch2 in1=tbl_x.fits in2=tbl_y.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' icmd1='keepcols \"ID_X RA DEC\"' icmd2='keepcols \"ID_Y RA DEC\"' ocmd='keepcols \"ID_X ID_Y\"' omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "My tables `cat_left.fits` and `cat_right.fits` have position errors in separate `ra_err` and `dec_err` columns. Can I match them using a 2D error ellipse defined by these errors?",
        "response": "stilts tmatch2 in1=cat_left.fits in2=cat_right.fits matcher=2d_ellipse params=1 values1='RA DEC ra_err dec_err 0' values2='RA DEC ra_err dec_err 0' out=error_ellipse_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join `sources_main.fits` and `sources_extra.fits` by matching their `SOURCE_NAME` string exactly.",
        "response": "stilts tmatch2 in1=sources_main.fits in2=sources_extra.fits matcher=exact values1=SOURCE_NAME values2=SOURCE_NAME out=name_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to match `file1.dat` and `file2.dat`. The coordinates are `RA1`, `DEC1` and `RA2`, `DEC2`. After matching within 2 arcsec, calculate the color `MAG_B - MAG_R` from the joined table and save it.",
        "response": "stilts tmatch2 ifmt=ascii in1=file1.dat in2=file2.dat matcher=sky params=2 values1='RA1 DEC1' values2='RA2 DEC2' ocmd='addcol COLOR MAG_B_1 - MAG_R_2' out=color_match.dat",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_R_2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol COLOR MAG_B_1 - MAG_R_2\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'MAG_R_2'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Please find all objects from `table2.fits` that have no counterpart in `table1.fits` within a 10 arcsecond radius.",
        "response": "stilts tmatch2 in1=table1.fits in2=table2.fits matcher=sky params=10 values1='RA DEC' values2='RA DEC' join=2not1 out=table2_unmatched.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Is it possible to match two tables based on both their sky position (within 3 arcsec) and their proper motion in RA (`PMRA`) within 5 mas/yr?",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky+1d params='3 5' values1='RA DEC PMRA' values2='RA DEC PMRA' out=pos_pm_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the best match between `cat_new.fits` and `cat_old.fits`. `cat_new` has per-object errors in `ERR_ARCSEC`. `cat_old` does not. Match them.",
        "response": "stilts tmatch2 in1=cat_new.fits in2=cat_old.fits matcher=skyerr params=2 values1='RA DEC ERR_ARCSEC' values2='RA DEC 0' find=best out=new_old_best_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I'm matching `a.fits` and `b.fits`. I want an output table that contains every row from both original tables, with matched rows joined and unmatched rows having nulls for the other table's columns.",
        "response": "stilts tmatch2 in1=a.fits in2=b.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=1or2 out=full_outer_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Could you match `table1.fits` with `table2.fits` and show me a statistical summary of the resulting table?",
        "response": "stilts tmatch2 in1=table1.fits in2=table2.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' omode=stats",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I match objects within a box of 0.1 degrees in RA and 0.2 degrees in Dec?",
        "response": "stilts tmatch2 in1=box_cat1.fits in2=box_cat2.fits matcher=sky+2d_cuboid is not suitable. You should use a sky matcher and then filter the result. For example: stilts tmatch2 in1=box_cat1.fits in2=box_cat2.fits matcher=sky params=720 values1='RA DEC' values2='RA DEC' ocmd='select abs(RA_1-RA_2)*cos(DEC_1*PI/180)<0.1 && abs(DEC_1-DEC_2)<0.2' out=box_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter params: Wrong number of words - wanted 3, got 1\nUsage: params=<match-params>\n\n"
    },
    {
        "prompt": "Crossmatch `t1.fits` and `t2.fits` with a 10 arcsec radius. For table 1, use columns `RA_1`, `DEC_1`. For table 2, the coordinates are in a single column `pos_j2000` as a 2-element array. How do I do that?",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=10 values1='RA_1 DEC_1' values2='pos_j2000 pos_j2000[7]' out=array_coord_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `cosmos_data.fits` and `hst_data.fits` and name the separation column `Separation_arcsec`.",
        "response": "stilts tmatch2 in1=cosmos_data.fits in2=hst_data.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' scorecol=Separation_arcsec out=match_with_sep.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to perform a symmetric best-match between `survey_x.fits` and `survey_y.fits` such that each object can only appear in one matched pair.",
        "response": "stilts tmatch2 in1=survey_x.fits in2=survey_y.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' find=best out=symmetric_best_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all pairs within 2 arcsec between `cat1.fits` and `cat2.fits`. In the output, I want a column `SCORE` which is a combination of positional separation and magnitude difference.",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=sky*1d params='2 1.0' values1='RA DEC MAG' values2='RA DEC MAG' find=all out=weighted_score_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Please match `file_A.csv` and `file_B.csv` on their `OBS_ID` integer column.",
        "response": "stilts tmatch2 ifmt=csv in1=file_A.csv in2=file_B.csv matcher=exact values1=OBS_ID values2=OBS_ID out=obs_id_match.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "I have two large FITS files. I want to match them using sequential execution to avoid high memory usage.",
        "response": "stilts tmatch2 in1=large1.fits in2=large2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' runner=sequential out=sequential_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `cosmos.fits` and `goods.fits`. Before matching, for both tables, create a new column `LOG_FLUX` as `log10(FLUX)`.",
        "response": "stilts tmatch2 in1=cosmos.fits in2=goods.fits icmd1='addcol LOG_FLUX log10(FLUX)' icmd2='addcol LOG_FLUX log10(FLUX)' matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=match_with_logflux.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have two tables, `t1.fits` and `t2.fits`. Match them on `RA`, `DEC`. The separation should be named 'dist'. Then, select only matches with `dist < 0.5` arcsec.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' scorecol=dist ocmd='select dist < 0.5/3600.' out=close_matches.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.5/3600.'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select dist < 0.5/3600.\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.5/3600.'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match `cat.fits` against itself to find close pairs. Use a 5 arcsec radius.",
        "response": "stilts tmatch2 in1=cat.fits in2=cat.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=all ocmd='select ID_1 < ID_2' out=internal_pairs.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' 'ID_2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ID_1 < ID_2\n\nUsage: select <expr>\n    (Unused arguments: '<' 'ID_2'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Find objects in `cat_new.fits` which have a counterpart in `cat_ref.fits` within 3 arcsec, but only if the magnitude in `cat_new` is brighter than 18.",
        "response": "stilts tmatch2 in1=cat_new.fits icmd1='select MAG < 18' in2=cat_ref.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' out=bright_matches.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG < 18\n\nUsage: select <expr>\n    (Unused arguments: '<' '18'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "How do I perform a match and see timing and profiling information?",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' progress=profile out=profiled_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `data1.fits` and `data2.fits` using `skyerr_q` and a scale parameter of 2.0.",
        "response": "stilts tmatch2 in1=data1.fits in2=data2.fits matcher=skyerr_q params=2.0 values1='RA DEC ERR' values2='RA DEC ERR' out=skyerrq_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to match two tables (`a.fits`, `b.fits`) and then view the result directly in a GUI window.",
        "response": "stilts tmatch2 in1=a.fits in2=b.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' omode=gui",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `t1.csv` and `t2.csv` on `ID`. After the match, rename columns from `t1` with suffix `_ONE` and from `t2` with suffix `_TWO`.",
        "response": "stilts tmatch2 ifmt=csv in1=t1.csv in2=t2.csv matcher=exact values1=ID values2=ID fixcols=all suffix1=_ONE suffix2=_TWO out=renamed_match.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Perform a sky match between two tables, and in the output only keep rows from the first table that were matched.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' join=1and2 ocmd='keepcols \"*_1\"' out=t1_matched_rows.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can I match two tables on `RA`, `DEC`, and `EPOCH`? Tolerances are 1 arcsec and 0.5 years.",
        "response": "stilts tmatch2 in1=e1.fits in2=e2.fits matcher=sky+1d params='1 0.5' values1='RA DEC EPOCH' values2='RA DEC EPOCH' out=spacetime_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all rows in `catalog_A.fits` that do not have a match in `catalog_B.fits` within 2 arcsec.",
        "response": "stilts tmatch2 in1=catalog_A.fits in2=catalog_B.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=1not2 out=A_not_in_B.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How can I join `cat1.fits` and `cat2.fits` and calculate a checksum of the output table?",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' omode=checksum",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to match two tables and write the output as a LaTeX document.",
        "response": "stilts tmatch2 in1=small_cat1.fits in2=small_cat2.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' ofmt=latex out=match_report.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `table1.fits` and `table2.fits`. The coordinates in `table2` are `RA_RADS` and `DEC_RADS`. Then, add a column `IS_BRIGHT` to the output if `MAG_1` is less than 15.",
        "response": "stilts tmatch2 in1=table1.fits in2=table2.fits matcher=sky params=2 values1='RA DEC' values2='radiansToDegrees(RA_RADS) radiansToDegrees(DEC_RADS)' ocmd='addcol IS_BRIGHT MAG_1 < 15' out=bright_matches_processed.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_BRIGHT MAG_1 < 15\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I need to match `data.fits` with `template.fits`. For `data.fits`, I need to apply a zero-point correction `MAG_CORR = MAG_RAW + 0.05` before matching on magnitude within a tolerance of 0.1.",
        "response": "stilts tmatch2 in1=data.fits in2=template.fits icmd1='addcol MAG_CORR MAG_RAW + 0.05' matcher=1d params=0.1 values1=MAG_CORR values2=MAG_TEMPLATE out=zp_corrected_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' '0.05'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_CORR MAG_RAW + 0.05\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' '0.05'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Find the best match for each object in `cat_main.fits` from `cat_ref.fits` within 10 arcsec, but only for objects with `CLASS` = 'GALAXY' in `cat_main`.",
        "response": "stilts tmatch2 in1=cat_main.fits in2=cat_ref.fits icmd1='select CLASS==\"GALAXY\"' matcher=sky params=10 values1='RA DEC' values2='RA DEC' find=best1 out=galaxy_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can you match `cat1.fits` and `cat2.fits` using `skyerr` and then in the output keep only the ID columns and the separation?",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=skyerr params=5 values1='RA DEC ERR' values2='RA DEC ERR' scorecol=Separation ocmd='keepcols \"ID_1 ID_2 Separation\"' out=id_sep_only.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `a.fits` and `b.fits`. Then select only the rows from the output where the magnitude from `a` is brighter than the magnitude from `b`.",
        "response": "stilts tmatch2 in1=a.fits in2=b.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=all suffix1=_a suffix2=_b ocmd='select MAG_a < MAG_b' out=brighter_matches.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' 'MAG_b'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG_a < MAG_b\n\nUsage: select <expr>\n    (Unused arguments: '<' 'MAG_b'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I want to perform a 2D match on `X` and `Y` columns. But for table 2, the columns are named `XPOS` and `YPOS`.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=2d params=3 values1='X Y' values2='XPOS YPOS' out=xy_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I take two tables, match them, and output the result to standard output as a text file?",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `a.fits` and `b.fits`. If there are multiple matches for a row in `a.fits`, I want all of them. But for `b.fits`, each row should only be matched once (to its best partner in `a.fits`).",
        "response": "This requires two separate matches. First find best matches for b: `stilts tmatch2 in1=a.fits in2=b.fits find=best2 ...`. Then use that result to get all matches for a.",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "I'm trying to find variable stars by matching two observations `obs1.fits` and `obs2.fits`. Find pairs within 1 arcsec and then select pairs where the magnitude difference is greater than 0.5.",
        "response": "stilts tmatch2 in1=obs1.fits in2=obs2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=all suffix1=_1 suffix2=_2 ocmd='select abs(MAG_1 - MAG_2) > 0.5' out=variable_candidates.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_2)' '>' '0.5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select abs(MAG_1 - MAG_2) > 0.5\n\nUsage: select <expr>\n    (Unused arguments: '-' 'MAG_2)' '>' '0.5'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match `c1.fits` and `c2.fits` using `sky+1d` on `RA, DEC, FLUX`. Then calculate statistics on the `Separation` and `Score` columns.",
        "response": "stilts tmatch2 in1=c1.fits in2=c2.fits matcher=sky+1d params='2 100' values1='RA DEC FLUX' values2='RA DEC FLUX' ocmd='keepcols \"Separation Score\"' omode=stats",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to match two tables and only output rows from the second table that were successfully matched.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' join=1and2 ocmd='keepcols \"*_2\"' out=t2_matched_rows.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Can you match `catA.fits` and `catB.fits` and for each row in catA, just tell me the distance to its nearest neighbor in catB, even if it's outside the match radius?",
        "response": "stilts tmatch2 in1=catA.fits in2=catB.fits matcher=sky params=180000 values1='RA DEC' values2='RA DEC' find=best1 join=all1 ocmd='keepcols \"ID_1 Separation\"' out=nearest_neighbor_dist.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `data.fits` to `reference.fits`. For `data.fits`, the positions are in galactic coordinates `GLON`, `GLAT`. Convert them to ICRS before matching `reference.fits`.",
        "response": "stilts tmatch2 in1=data.fits in2=reference.fits icmd1='addskycoords galactic icrs GLON GLAT RA_ICRS DEC_ICRS' matcher=sky params=2 values1='RA_ICRS DEC_ICRS' values2='RA DEC' out=gal_icrs_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Perform a sky match and for the output table, replace any null values in the `FLUX_2` column with -9999.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' join=all1 ocmd='replaceval null -9999 FLUX_2' out=match_with_badvals.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `t1.fits` and `t2.fits`. If a column `ID` exists in both, rename them to `ID_1` and `ID_2` but leave other columns as they are.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=dups suffix1=_1 suffix2=_2 out=dup_id_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have two tables from different instruments. `inst1.fits` has coords `X1`, `Y1`. `inst2.fits` has `X2`, `Y2`. Match them with a 2-pixel tolerance, find all pairs, and output as an ECSV file.",
        "response": "stilts tmatch2 in1=inst1.fits in2=inst2.fits matcher=2d params=2 values1='X1 Y1' values2='X2 Y2' find=all ofmt=ecsv out=instrument_pairs.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match `catalog.fits` with `deep_field.fits` where the match must be within 1 arcsec, and `deep_field` objects must have `FLAG==0`.",
        "response": "stilts tmatch2 in1=catalog.fits in2=deep_field.fits icmd2='select FLAG==0' matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=clean_deep_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "How do I find the single best counterpart in `cat2.fits` for each object in `cat1.fits` within 5 arcsec?",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=best1 out=best_counterparts.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to match two tables and only keep the unmatched rows from the second table.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' join=2not1 out=unmatched_t2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables, then add a new column that is the ratio of their fluxes.",
        "response": "stilts tmatch2 in1=flux_a.fits in2=flux_b.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=dups suffix1=_a suffix2=_b ocmd='addcol FLUX_RATIO FLUX_a/FLUX_b' out=flux_ratio_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Perform a sky match and for the output table, rename the `ID_1` column to `PRIMARY_ID` and `ID_2` to `SECONDARY_ID`.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' ocmd='colmeta -name PRIMARY_ID ID_1; colmeta -name SECONDARY_ID ID_2' out=renamed_id_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to match `catA.fits` and `catB.fits` which have per-object errors `err_a` and `err_b`. After matching with `skyerr`, I want to discard all columns except the IDs and the separation.",
        "response": "stilts tmatch2 in1=catA.fits in2=catB.fits matcher=skyerr params=5 values1='ra dec err_a' values2='ra dec err_b' scorecol=dist ocmd='keepcols \"ID_1 ID_2 dist\"' out=minimal_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the best match for each row in `table_A.fits` from `table_B.fits`. The `table_B.fits` coordinates are in a 2-element array column `pos_vec`. The search radius is 10 arcsec.",
        "response": "stilts tmatch2 in1=table_A.fits in2=table_B.fits matcher=sky params=10 values1='RA DEC' values2='pos_vec pos_vec[7]' find=best1 out=vec_pos_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match table `one.fits` and `two.fits`. The coordinates for `one` are `RA1`, `DEC1` and for `two` are `RA2`, `DEC2`. The output should be a VOTable with BINARY2 serialization.",
        "response": "stilts tmatch2 in1=one.fits in2=two.fits matcher=sky params=1 values1='RA1 DEC1' values2='RA2 DEC2' ofmt='votable(format=BINARY2)' out=match_binary2.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I need to find all pairs between two catalogs, but I also want to run it with low CPU priority. How can I do that?",
        "response": "CPU priority is controlled by your operating system, not STILTS directly. On Linux/macOS you can use `nice`: `nice stilts tmatch2 in1=c1.fits in2=c2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=all out=low_priority_match.fits`.",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Match two tables, `t1.fits` and `t2.fits`. Then, for the matched pairs, calculate the average magnitude, `(MAG_1 + MAG_2) / 2`.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' ocmd='addcol AVG_MAG (MAG_1 + MAG_2) / 2' out=avg_mag_matches.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'MAG_2)' '/' '2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol AVG_MAG (MAG_1 + MAG_2) / 2\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'MAG_2)' '/' '2'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "How to do a sky match where the radius for each object in table 1 is given by `ERR_RADIUS_1` and for table 2 it is a fixed 0.5 arcsec?",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=skyerr params=1 values1='RA DEC ERR_RADIUS_1' values2='RA DEC 0.5' out=mixed_error_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I want to match two tables and only keep the columns `ID`, `RA`, `DEC` from the first table and `ID` from the second table.",
        "response": "stilts tmatch2 in1=t1.fits in2=t2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' icmd1='keepcols \"ID RA DEC\"' icmd2='keepcols \"ID RA DEC\"' ocmd='keepcols \"ID_1 RA_1 DEC_1 ID_2\"' out=subset_cols_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match my `targets.csv` (with columns `ra`, `dec`) against `archive.fits` (with columns `RA_J2000`, `DEC_J2000`) within 2 arcsec. For each target, I only want the best match from the archive.",
        "response": "stilts tmatch2 ifmt1=csv in1=targets.csv in2=archive.fits matcher=sky params=2 values1='ra dec' values2='RA_J2000 DEC_J2000' find=best1 out=target_archive_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "I have two tables of events, `events_a.fits` and `events_b.fits`. Match them if their `TIME` is within 10 seconds and their `ENERGY` is within 50 keV.",
        "response": "stilts tmatch2 in1=events_a.fits in2=events_b.fits matcher=2d_anisotropic params='10 50' values1='TIME ENERGY' values2='TIME ENERGY' out=time_energy_coincidence.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all rows from `table1.fits` that have a match in `table2.fits`, and also all rows from `table2.fits` that have a match in `table1.fits`. A match is within 3 arcsec.",
        "response": "stilts tmatch2 in1=table1.fits in2=table2.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' join=1and2 out=all_matched_rows.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Please match `cat1.fits` against `cat2.fits` using `skyerr`. After matching, add a column `RELIABLE` if the separation is less than half the combined error.",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=skyerr params=5 values1='RA DEC ERR_1' values2='RA DEC ERR_2' scorecol=sep ocmd='addcol RELIABLE sep < (ERR_1+ERR_2)/2' out=reliable_matches.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '(ERR_1+ERR_2)/2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol RELIABLE sep < (ERR_1+ERR_2)/2\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '<' '(ERR_1+ERR_2)/2'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "I want to match two tables and stream the input to reduce memory usage. The tables are `stream1.csv` and `stream2.csv`.",
        "response": "stilts tmatch2 ifmt=csv istream=true in1=stream1.csv in2=stream2.csv matcher=exact values1=ID values2=ID out=streamed_match.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv istream=true\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "How do I find objects in `catalog.fits` that are within 5 arcseconds of any object in `clusters.fits`?",
        "response": "stilts tmatch2 in1=catalog.fits in2=clusters.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=all join=1and2 ocmd='sort ID_1' ocmd='uniq ID_1' out=objects_near_clusters.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch survey_A.fits and survey_B.fits on sky position with a 2 arcsecond radius. The coordinate columns in both are RA and DEC. Save the result to matched_surveys.fits.",
        "response": "stilts tmatch2 in1=survey_A.fits in2=survey_B.fits out=matched_surveys.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC'",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find objects from catalog1.fits that are NOT in catalog2.fits, based on a 1.5 arcsecond sky match. Coords are RAJ2000 and DEJ2000.",
        "response": "stilts tmatch2 in1=catalog1.fits in2=catalog2.fits matcher=sky params=1.5 values1='RAJ2000 DEJ2000' values2='RAJ2000 DEJ2000' join=1not2 out=unmatched_from_cat1.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join table_x.fits and table_y.fits. Before matching, filter table_x to only include sources with FLUX > 100. Match on sky coordinates pos_ra, pos_dec with a 3 arcsec tolerance.",
        "response": "stilts tmatch2 in1=table_x.fits icmd1='select FLUX > 100' in2=table_y.fits matcher=sky params=3 values1='pos_ra pos_dec' values2='pos_ra pos_dec' out=filtered_join.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX > 100\n\nUsage: select <expr>\n    (Unused arguments: '>' '100'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match primary_sources.vot and secondary_sources.vot and sort the resulting table by the separation distance. Save the output as sorted_matches.csv.",
        "response": "stilts tmatch2 in1=primary_sources.vot in2=secondary_sources.vot matcher=sky params=10 values1='RA DEC' values2='RA DEC' ocmd='sort Separation' ofmt=csv out=sorted_matches.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Include all rows from cat_a, and include matched data from cat_b where available. Use a 4 arcsec radius.",
        "response": "stilts tmatch2 in1=cat_a.fits in2=cat_b.fits matcher=sky params=4 values1='RA DEC' values2='RA DEC' join=all1 out=cat_a_with_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Count the number of matches between gala_dr3.fits and sdss_dr17.fits within 2 arcseconds, without creating an output file.",
        "response": "stilts tmatch2 in1=gala_dr3.fits in2=sdss_dr17.fits matcher=sky params=2 values1='ra dec' values2='ra dec' omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match sloan.dat (ASCII) and panstarrs.vot. Sloan coordinates are in radians (ra_rad, dec_rad). Convert them to degrees for a 5 arcsec sky match.",
        "response": "stilts tmatch2 ifmt1=ascii in1=sloan.dat in2=panstarrs.vot matcher=sky params=5 values1='radiansToDegrees(ra_rad) radiansToDegrees(dec_rad)' values2='RA DEC' out=sloan_ps_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join first_epoch.fits and second_epoch.fits on sky position. Add _E1 and _E2 suffixes to the columns from each table to avoid duplication.",
        "response": "stilts tmatch2 in1=first_epoch.fits in2=second_epoch.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=all suffix1=_E1 suffix2=_E2 out=epoch_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match sources.fits against detections.fits and send the results directly to TOPCAT for inspection. Use a 3 arcsecond radius.",
        "response": "stilts tmatch2 in1=sources.fits in2=detections.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' omode=topcat",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match cat1.fits and cat2.fits using their individual errors stored in ERR_ARCSEC_1 and ERR_ARCSEC_2 respectively (skyerr matcher).",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=skyerr params=5 values1='RA_1 DEC_1 ERR_ARCSEC_1' values2='RA_2 DEC_2 ERR_ARCSEC_2' out=match_with_errors.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs where the match radius is the quadrature sum of their individual errors (pos_err_1, pos_err_2) using skyerr_q.",
        "response": "stilts tmatch2 in1=cat_A.fits in2=cat_B.fits matcher=skyerr_q params=3 values1='RA DEC pos_err_1' values2='RA DEC pos_err_2' out=quadrature_error_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Perform a 3D match between local_stars.fits (DISTANCE_PC) and nearby_galaxies.vot (DIST_MPC). Maximum separation 0.5 Mpc.",
        "response": "stilts tmatch2 in1=local_stars.fits in2=nearby_galaxies.vot matcher=sky3d params=0.5 values1='RA DEC DISTANCE_PC/1e6' values2='RA DEC DIST_MPC' out=3d_spatial_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join table1.csv and table2.csv where the SOURCE_ID column is exactly the same in both (exact matcher).",
        "response": "stilts tmatch2 ifmt1=csv in1=table1.csv ifmt2=csv in2=table2.csv matcher=exact values1=SOURCE_ID values2=SOURCE_ID out=exact_id_join.csv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match on a 1-dimensional value, redshift, with a tolerance of 0.01.",
        "response": "stilts tmatch2 in1=spec_cat.fits in2=photo_cat.fits matcher=1d params=0.01 values1=redshift values2=z_phot out=redshift_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find matches within a 5 pixel radius using detector coordinates (X_IMAGE, Y_IMAGE).",
        "response": "stilts tmatch2 in1=chip1.fits in2=chip2.fits matcher=2d params=5 values1='X_IMAGE Y_IMAGE' values2='X_IMAGE Y_IMAGE' out=detector_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match on magnitude and color, with different tolerances: 0.1 for magnitude (mag_r) and 0.2 for color (g_minus_r).",
        "response": "stilts tmatch2 in1=phot1.fits in2=phot2.fits matcher=2d_anisotropic params='0.1 0.2' values1='mag_r g_minus_r' values2='mag_r g_minus_r' out=mag_color_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find objects within 2 arcsec AND have a magnitude difference (MAG) of less than 0.25 (sky+1d matcher).",
        "response": "stilts tmatch2 in1=cat_X.fits in2=cat_Y.fits matcher=sky+1d params='2 0.25' values1='RA DEC MAG' values2='RA DEC MAG' out=pos_mag_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the single best match (best1) from friends_stars.txt for each of my_stars.csv within 1 arcsec. Output formats specified.",
        "response": "stilts tmatch2 ifmt1=csv in1=my_stars.csv ifmt2=ascii in2=friends_stars.txt matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best1 out=our_best_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Generate a table of all rows from main_survey.fits (join=all1), indicating the best match (find=best1) from supplemental.fits if one exists within 5 arcseconds.",
        "response": "stilts tmatch2 in1=main_survey.fits in2=supplemental.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=best1 join=all1 out=main_with_supplemental.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all possible pairs between dense_field_A.fits and dense_field_B.fits within 10 arcseconds, and include the separation in arcseconds in a column named 'AngSep'.",
        "response": "stilts tmatch2 in1=dense_field_A.fits in2=dense_field_B.fits matcher=sky params=10 values1='RA DEC' values2='RA DEC' find=all scorecol=AngSep out=all_pairs.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch catA.fits and catB.fits exactly on the composite key ID + EPOCH. Only output rows found in BOTH tables.",
        "response": "stilts tmatch2 in1=catA.fits in2=catB.fits matcher=exact values1='concat(ID,toString(EPOCH))' values2='concat(ID,toString(EPOCH))' join=1and2 out=exact_composite.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match a target list (targets.vot) against a survey (survey.fits) within 3 arcseconds. Only output rows found in targets.vot that have NO match in survey.fits.",
        "response": "stilts tmatch2 in1=targets.vot in2=survey.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' join=1not2 out=targets_missed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join two event lists (e1.fits, e2.fits) on time (MJD) within 0.0001 days. Use parallel execution for speed.",
        "response": "stilts tmatch2 in1=e1.fits in2=e2.fits matcher=1d params=0.0001 values1=MJD values2=MJD runner=parallel out=time_coincidence_parallel.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match survey_A and survey_B using positions in galactic coordinates (GLON, GLAT) within 10 arcseconds. Survey_A has equatorial RA/DEC; convert A to Galactic first.",
        "response": "stilts tmatch2 in1=survey_A.fits icmd1='addskycoords icrs galactic RA DEC GLON GLAT' in2=survey_B.fits matcher=sky params=10 values1='GLON GLAT' values2='GLON GLAT' out=equatorial_to_galactic_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all matches between cat1.fits and cat2.fits using position AND proper motion (sky+2d) with tolerances 2 arcsec, 5 mas/yr, 5 mas/yr.",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=sky+2d_anisotropic params='2 5 5' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' out=pos_pm_anisotropic.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_A errors (E_A) are in degrees; T_B errors (E_B) are in arcsec. Convert E_A to arcsec before matching using skyerr.",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='addcol E_ARCSEC E_A*3600.0' in2=T_B.fits matcher=skyerr params=1 values1='RA DEC E_ARCSEC' values2='RA DEC E_B' out=mixed_error_unit_skyerr.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2 using a full outer join (1or2). Include the separation column in the output.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=4 values1='RA DEC' values2='RA DEC' join=1or2 scorecol=Separation out=full_outer_join_scored.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables exactly on column 'OBSID'. Before matching, filter T2 to ensure OBSID is not null.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='select !NULL_OBSID' matcher=exact values1=OBSID values2=OBSID out=null_filtered_exact.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match catalogs T_A and T_B on a 3D parameter space (X, Y, Z) within 15 units.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=3d params=15 values1='X Y Z' values2='X Y Z' out=cartesian_3d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 contains parallax (PLX) in mas. Calculate distance modulus (DM) from parallax in T2 and match on position + DM (sky+1d). Tolerance 2 arcsec, 0.5 mag DM.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='addcol DM modulusToDistance(1000.0/PLX)' matcher=sky+1d params='2 0.5' values1='RA DEC DM_1' values2='RA DEC DM' out=dm_combined_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables where the positions are defined by elliptical regions (RA, DEC, A, B, PA). Approximate scale is 30 arcsec.",
        "response": "stilts tmatch2 in1=E1.fits in2=E2.fits matcher=skyellipse params=30 values1='RA DEC A_MAJ B_MIN PA' values2='RA DEC A_MAJ B_MIN PA' out=elliptical_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find best match (best2) from T1 for each row in T2. T1 is an IPAC file, T2 is a VOTable. Output metadata only.",
        "response": "stilts tmatch2 ifmt1=ipac in1=T1.tbl in2=T2.vot matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best2 omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B using symmetric best match (find=best). Ensure T_A columns use suffix '_A' and T_B columns use '_B'.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best fixcols=all suffix1=_A suffix2=_B out=symmetric_suffixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match source_A and source_B on 2D coordinates (X, Y). T_B columns X and Y are array elements  and [1] of column POS_VEC. Use array indexing in values2.",
        "response": "stilts tmatch2 in1=source_A.fits in2=source_B.fits matcher=2d params=5 values1='X Y' values2='POS_VEC POS_VEC[1]' out=array_coord_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T_MAIN that are NOT matched in T_SUPP (2 arcsec sky radius). Output the result in ECSV format.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=1not2 ofmt=ecsv out=unmatched_ecsv.ecsv",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using coordinates RA, DEC, and proper motion error (skyerr_q). Error columns are E_POS and E_PM. Scaling factor 1.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skyerr_q+1d_err_q params='1 1' values1='RA DEC E_POS PMRA E_PM' values2='RA DEC E_POS PMRA E_PM' out=combined_error_q_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B exactly on 'NAME'. After joining, add a column for the length of the NAME string.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=exact values1=NAME values2=NAME ocmd='addcol NAME_LEN length(NAME)' out=name_length_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join table_A (all rows) and table_B (matched rows only). T_A columns suffixed '_A'. T_B columns suffixed '_B'.",
        "response": "stilts tmatch2 in1=table_A.fits in2=table_B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' join=all1 fixcols=all suffix1=_A suffix2=_B out=left_outer_suffixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on 3D Cartesian coordinates (X, Y, Z) with anisotropic errors (10, 5, 2 units).",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=3d_anisotropic params='10 5 2' values1='X Y Z' values2='X Y Z' out=anisotropic_3d_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch FITS table A against simulated star field B (:skysim:10000). Use best match for A (best1). Output to VOTable format.",
        "response": "stilts tmatch2 in1=A.fits in2=:skysim:10000 matcher=sky params=5 values1='RA DEC' values2='ra dec' find=best1 ofmt=votable out=simulated_best_match.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T_MAIN.fits and T_REF.fits using T_MAIN coordinates (RA, DEC) and T_REF coordinates (RArad, DECrad) converted from radians. Use a 1 arcsec radius.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_REF.fits matcher=sky params=1 values1='RA DEC' values2='radiansToDegrees(RArad) radiansToDegrees(DECrad)' out=rad_converted_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all rows in catA.fits that have NO match in catB.fits, based on an exact match on string column 'NAME'.",
        "response": "stilts tmatch2 in1=catA.fits in2=catB.fits matcher=exact values1=NAME values2=NAME join=1not2 out=unmatched_names.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1.fits and T2.fits using a full outer join (include all rows from both). Match on position within 5 arcsec and sort the output by the calculated separation.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' join=1or2 scorecol=Separation ocmd='sort Separation' out=full_outer_sorted.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match survey_X and survey_Y on sky position and filter survey_X beforehand to only include sources with MAG < 16. Use a 2 arcsec tolerance.",
        "response": "stilts tmatch2 in1=survey_X.fits icmd1='select MAG < 16' in2=survey_Y.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' out=bright_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '16'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG < 16\n\nUsage: select <expr>\n    (Unused arguments: '<' '16'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Find all pairs (find=all) between catalog_A.fits and catalog_B.fits using a 10 pixel 2D Cartesian match (X, Y).",
        "response": "stilts tmatch2 in1=catalog_A.fits in2=catalog_B.fits matcher=2d params=10 values1='X Y' values2='X Y' find=all out=all_2d_pairs.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_Main against T_Sup, where T_Main coordinates (GLON, GLAT) are Galactic. Convert T_Main coordinates to ICRS before matching (1 arcsec).",
        "response": "stilts tmatch2 in1=T_Main.fits icmd1='addskycoords galactic icrs GLON GLAT RA DEC' in2=T_Sup.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=galactic_converted_ref.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1.fits and T2.fits on a 1D magnitude (MAG) within a 0.2 tolerance. T1 is remote, T2 is local FITS.",
        "response": "stilts tmatch2 in1=http://remote.org/T1.fits in2=T2.fits matcher=1d params=0.2 values1=MAG values2=MAG out=remote_1d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables using elliptical regions (RA, DEC, A, B, PA) with a characteristic size of 15 arcsec.",
        "response": "stilts tmatch2 in1=E1.fits in2=E2.fits matcher=skyellipse params=15 values1='RA DEC A B PA' values2='RA DEC A B PA' out=sky_ellipse_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the symmetric best match (find=best) between A.fits and B.fits (sky 5 arcsec). Output result to TOPCAT.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=best omode=topcat",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B exactly on 'ID'. T_B is provided via standard input (VOTable format). Output count only.",
        "response": "cat B.vot | stilts tmatch2 in1=T_A.fits in2=- ifmt2=votable matcher=exact values1=ID values2=ID omode=count",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Crossmatch T1 and T2 using position AND proper motion (sky+2d) with tolerances 1 arcsec, 8 mas/yr, 8 mas/yr. T1 proper motions are in degrees/year; convert to mas/yr.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='replacecol PMRA PMRA*3600000; replacecol PMDEC PMDEC*3600000' in2=T2.fits matcher=sky+2d_anisotropic params='1 8 8' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' out=pm_unit_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on 3D Cartesian coordinates (X, Y, Z) within 5 units. Output should be written to a VOTable using BINARY2 serialization.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=3d params=5 values1='X Y Z' values2='X Y Z' ofmt='votable(format=BINARY2)' out=3d_binary2.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find objects in targets.fits that have a counterpart in survey.fits (sky 4 arcsec). Include all target rows (left outer join).",
        "response": "stilts tmatch2 in1=targets.fits in2=survey.fits matcher=sky params=4 values1='RA DEC' values2='RA DEC' join=all1 out=targets_left_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 using position and distance (sky3d). T2 distance is in km; convert to parsec (1 pc = 3.086e13 km) before matching (1 Mpc tolerance).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='addcol DIST_PC DIST_KM / (3.086e19 / 1e6)' matcher=sky3d params=1 values1='RA DEC DIST_PC' values2='RA DEC DIST_PC' out=distance_unit_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '/' '(3.086e19' '/' '1e6)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol DIST_PC DIST_KM / (3.086e19 / 1e6)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '/' '(3.086e19' '/' '1e6)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Join T_A and T_B exactly on 'SOURCE_ID'. T_A is FITS, T_B is Parquet. T_A columns suffixed '_A', T_B columns suffixed '_B'.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.parquet ifmt2=parquet matcher=exact values1=SOURCE_ID values2=SOURCE_ID fixcols=all suffix1=_A suffix2=_B out=parquet_exact_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on magnitude and color, with anisotropic tolerances: 0.05 for MAG_R and 0.15 for B_R.",
        "response": "stilts tmatch2 in1=phot1.fits in2=phot2.fits matcher=2d_anisotropic params='0.05 0.15' values1='MAG_R B_R' values2='MAG_R B_R' out=anisotropic_mag_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits on sky position (1 arcsec). Before matching, filter A to keep only rows with Z > 0.5.",
        "response": "stilts tmatch2 in1=A.fits icmd1='select Z > 0.5' in2=B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=high_z_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.5'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Z > 0.5\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.5'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Find the best match (best1) for T1 from T2. T2 contains an array column 'POS_XYZ' (X, Y, Z). Explode this column to X, Y, Z scalars before matching in 3D.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='explodecols POS_XYZ; colmeta -name X POS_XYZ_0; colmeta -name Y POS_XYZ_1; colmeta -name Z POS_XYZ_2' matcher=3d params=1 values1='X Y Z' values2='X Y Z' find=best1 out=exploded_3d_match_best1.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B using a cuboid match on position (X, Y) with 5 units in X and 1 unit in Y.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=2d_cuboid params='5 1' values1='X Y' values2='X Y' out=cuboid_2d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 rows should be kept only if they are matched. T2 rows should only be kept if they are NOT matched.",
        "response": "stilts tmatch2 in1=T1.fits join1=match in2=T2.fits join2=nomatch matcher=exact values1=ID values2=ID out=inner_anti_join.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match join2=nomatch\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Match two tables using position and error bars (skyerr). T1 has ERR_MAS in milliarcseconds. Convert to arcseconds before matching (0.5 arcsec scale).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='replacecol E_ARCSEC ERR_MAS/1000.0' in2=T2.fits matcher=skyerr params=0.5 values1='RA DEC E_ARCSEC' values2='RA DEC E_ARCSEC' out=mas_error_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join two event lists exactly on 'EVENT_ID'. T1 is ASCII, T2 is FITS. Output result to standard output.",
        "response": "stilts tmatch2 ifmt1=ascii in1=events1.txt in2=events2.fits matcher=exact values1=EVENT_ID values2=EVENT_ID ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_X and T_Y using elliptical sky correlation regions (skycorr). T_Y errors are in microarcseconds (uas). Convert T_Y errors to arcsec.",
        "response": "stilts tmatch2 in1=T_X.fits in2=T_Y.fits icmd2='replacecol E_RA E_RA/1e6; replacecol E_DEC E_DEC/1e6' matcher=skycorr params=1 values1='RA DEC E_RA E_DEC CORR' values2='RA DEC E_RA E_DEC CORR' out=skycorr_uas_match.fits",
        "chat.jar": "failed",
        "error": "WARNING: Class skycorr not found\nError: Unknown matcher element: skycorr\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Find all pairs (find=all) between A.fits and B.fits (sky 5 arcsec). After matching, retain only the 'Separation' column and display statistics.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=all ocmd='keepcols Separation' omode=stats",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables using position AND proper motion (sky*2d), requiring the distance in the scaled 4D space to be less than 1. Tolerances 2 arcsec, 5 mas/yr for PMRA/PMDEC.",
        "response": "stilts tmatch2 in1=C1.fits in2=C2.fits matcher=sky*2d_anisotropic params='2 5 5' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' out=strict_pos_pm_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2, both FITS. T1 only includes the first 1000 rows. T2 only includes rows with FLAG=0. Match on exact ID.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='head 1000' in2=T2.fits icmd2='select FLAG==0' matcher=exact values1=ID values2=ID out=head_select_exact.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits on 2D position (X, Y) where the matching radius is the quadrature sum of their individual errors (E_X, E_Y).",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=2d_err_q params=1 values1='X Y E_X' values2='X Y E_X' out=cartesian_quad_error.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the best match (best2) for T2 from T1. Output columns from T1 suffixed '_T1', T2 columns suffixed '_T2'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best2 fixcols=all suffix1=_T1 suffix2=_T2 out=best2_suffixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 is remote URL. T2 needs conversion of string column 'RA_STR' to degrees before matching.",
        "response": "stilts tmatch2 in1=http://archive.com/T1.fits in2=T2.fits icmd2='replacecol RA hmsToDegrees(RA_STR)' matcher=sky params=2 values1='RA DEC' values2='RA DEC' out=remote_string_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits using Cartesian 2D coordinates (X, Y). Include all rows from B (right outer join), and rename duplicate columns using full suffix notation.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=2d params=5 values1='X Y' values2='X Y' join=all2 fixcols=all suffix1=_A suffix2=_B out=cartesian_right_outer.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two time series tables on MJD time, 0.00001 day tolerance. Use parallel execution and output the result in FITS format using variable-length arrays.",
        "response": "stilts tmatch2 in1=TS1.fits in2=TS2.fits matcher=1d params=1e-5 values1=MJD values2=MJD runner=parallel ofmt=fits-var out=time_parallel_var.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using exact match on 'ID'. After matching, compute and add column 'ID_RATIO' = ID_1/ID_2.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID fixcols=dups suffix1=_1 suffix2=_2 ocmd='addcol ID_RATIO ID_1/ID_2' out=exact_with_ratio.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows present in either catA or catB, but NOT in both (symmetric difference), using sky position (3 arcsec).",
        "response": "stilts tmatch2 in1=catA.fits in2=catB.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' join=1xor2 out=symmetric_diff.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_Main and T_Sup. T_Sup positions are in FK4 B1950 (RA_B, DEC_B). Convert T_Sup to ICRS J2000 before matching.",
        "response": "stilts tmatch2 in1=T_Main.fits in2=T_Sup.fits icmd2='addskycoords fk4 icrs RA_B DEC_B RA DEC' matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=fk4_preprocessed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join table_A (all rows) and table_B (matched rows only). Use exact match on 'KEY'. T_B is IPAC format.",
        "response": "stilts tmatch2 in1=table_A.fits in2=table_B.tbl ifmt2=ipac matcher=exact values1=KEY values2=KEY join=all1 out=ipac_left_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on 2D coordinates (X, Y) with independent anisotropic cuboid tolerances: 10 units in X, 5 units in Y.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=2d_cuboid params='10 5' values1='X Y' values2='X Y' out=anisotropic_cuboid_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using the symmetrical best match (find=best). T2 contains magnitude 99.0 for nulls; replace 99.0 with null before matching.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='badval 99.0 MAG' matcher=sky params=2 values1='RA DEC' values2='RA DEC' find=best out=null_cleaned_best.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits using position AND parallax (sky3d). T_B parallax is in arcsec; convert to mas (1 arcsec = 1000 mas) before using in 3D matching (100 pc tolerance).",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits icmd2='replacecol PLX PLX*1000.0' matcher=sky3d params=100 values1='RA DEC 1000/PLX' values2='RA DEC 1000/PLX' out=parallax_unit_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T_Main that are NOT matched in T_Sup (exact ID match). T_Main only includes sources with 'FLAG' = true.",
        "response": "stilts tmatch2 in1=T_Main.fits icmd1='select FLAG' in2=T_Sup.fits matcher=exact values1=ID values2=ID join=1not2 out=flagged_unmatched.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on MJD time (0.001 day tolerance) and use parallel execution.",
        "response": "stilts tmatch2 in1=TS1.fits in2=TS2.fits matcher=1d params=0.001 values1=MJD values2=MJD runner=parallel out=time_match_parallel.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using position and magnitude (sky+1d), where magnitude tolerance is 0.1, and positional tolerance is 3 arcsec.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky+1d params='3 0.1' values1='RA DEC MAG' values2='RA DEC MAG' out=pos_mag_combined.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_A coordinates are in a 3-element array 'POS_ARRAY' (RA, DEC, ERR). Explode this array to scalars before matching using skyerr.",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='explodecols POS_ARRAY; colmeta -name RA POS_ARRAY_0; colmeta -name DEC POS_ARRAY_1; colmeta -name ERR POS_ARRAY_2' in2=T_B.fits matcher=skyerr params=1 values1='RA DEC ERR' values2='RA DEC ERR' out=exploded_skyerr.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2 using a right outer join (all T2 rows included). Match exactly on 'OBS_ID'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=OBS_ID values2=OBS_ID join=all2 out=obs_id_right_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits exactly on 'NAME'. After joining, drop the original 'NAME' columns from both tables, retaining only 'ID' columns and the match score.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=NAME values2=NAME fixcols=dups suffix1=_A suffix2=_B ocmd='delcols NAME_*' out=name_dropped_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the best match (best1) for each row in cat1.fits from cat2.fits (1 arcsec sky radius). Output to a compressed FITS file.",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best1 out=best1_compressed.fits.gz",
        "chat.jar": "failed",
        "error": "Error: Can't guess output format for best1_compressed.fits.gz\n    (No handler specified for writing table.\nKnown formats: jdbc, fits, colfits, votable, fits-healpix, ECSV, parquet, text, ascii, CSV, IPAC, HTML, LaTeX, TST, feather, mirage)\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Match T_Main and T_Sup on 2D coordinates (X, Y) with cuboid tolerance 2 units in X and Y.",
        "response": "stilts tmatch2 in1=T_Main.fits in2=T_Sup.fits matcher=2d_cuboid params='2 2' values1='X Y' values2='X Y' out=symmetric_cuboid_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 only contains the last 500 rows. Match on exact ID.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='tail 500' in2=T2.fits matcher=exact values1=ID values2=ID out=tail_exact_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables based on Cartesian 2D coordinates (X, Y) where error is based on quadrature summation of ERR_X and ERR_Y.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=2d_err_q params=1 values1='X Y ERR' values2='X Y ERR' out=cartesian_quad_err.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all rows that are in either T_A or T_B, and count them, using exact match on 'KEY'.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=exact values1=KEY values2=KEY join=1or2 omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs using elliptical sky regions. T1 positions are in Ecliptic coordinates (ELON, ELAT). Convert to ICRS before matching.",
        "response": "stilts tmatch2 in1=C1.fits icmd1='addskycoords ecliptic icrs ELON ELAT RA DEC' in2=C2.fits matcher=skyellipse params=1 values1='RA DEC A B PA' values2='RA DEC A B PA' out=ecl_converted_ellipse.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2. T1 rows should always be included. T2 columns should use the suffix '_T2'. Match on exact ID.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID join=all1 fixcols=dups suffix2=_T2 out=left_outer_suffix.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits using position and velocity (sky+2d). A.fits only includes sources with Z > 0.1. Tolerances 2 arcsec, 10 km/s, 10 km/s.",
        "response": "stilts tmatch2 in1=A.fits icmd1='select Z > 0.1' in2=B.fits matcher=sky+2d_anisotropic params='2 10 10' values1='RA DEC VX VY' values2='RA DEC VX VY' out=high_z_velocity_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Z > 0.1\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.1'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T1 and T2. T2 contains parallax (PLX) in mas. Only include T2 rows where PLX is positive before performing any match.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='select PLX > 0' matcher=exact values1=ID values2=ID out=positive_parallax_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PLX > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Find the best match (best) between T_A and T_B. Use a combination of sky match (1 arcsec) and exact match on a 'TYPE' string (sky+exact).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky+exact params=1 values1='RA DEC TYPE' values2='RA DEC TYPE' find=best out=pos_type_best.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 on 3D coordinates (X, Y, Z). After joining, add a column 'DISTANCE' calculated as hypot(X_1, Y_1, Z_1).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=3d params=1 values1='X Y Z' values2='X Y Z' fixcols=dups suffix1=_1 ocmd='addcol DISTANCE hypot(X_1, Y_1, Z_1)' out=3d_distance_calc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Y_1,' 'Z_1)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol DISTANCE hypot(X_1, Y_1, Z_1)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'Y_1,' 'Z_1)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 contains an array column 'FLUXES'. Calculate the mean flux and use it for matching (1d matcher, 0.5 tolerance).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='addcol MEAN_FLUX mean(FLUXES)' in2=T2.fits matcher=1d params=0.5 values1=MEAN_FLUX values2=MEAN_FLUX out=array_mean_1d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits on exact ID. Output columns from A suffixed '_A', but only include columns from B that are *not* duplicates of A.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID fixcols=dups suffix1=_A out=A_suffix_B_clean.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the single best match (best2) for each T2 row from T1 (2 arcsec sky match). Output count only.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' find=best2 omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_Main and T_Sup on 2D position (X, Y). T_Main X, Y coordinates are calculated from a string array 'COORDS'.",
        "response": "stilts tmatch2 in1=T_Main.fits icmd1='addcol X parseDouble(COORDS); addcol Y parseDouble(COORDS[1])' in2=T_Sup.fits matcher=2d params=5 values1='X Y' values2='X Y' out=array_parse_2d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using symmetric best match (find=best). T2 coordinates are in degrees (RA_D, DEC_D), but units are not specified. Match them.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='colmeta -units deg RA_D; colmeta -units deg DEC_D' matcher=sky params=1 values1='RA DEC' values2='RA_D DEC_D' find=best out=best_forced_units.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on position, using quadrature error (skyerr_q). T1 error in arcmin; convert to arcsec (multiply by 60).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='replacecol E_ARCSEC E_ARCMIN*60' in2=T2.fits matcher=skyerr_q params=1 values1='RA DEC E_ARCSEC' values2='RA DEC E_ARCSEC' out=arcmin_to_arcsec_q.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_A and T_B. T_A rows should always be included. T_B rows should only be included if matched. Match on position (2 arcsec).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=all1 out=left_join_explicit.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 on 3D Cartesian coordinates (X, Y, Z) with anisotropic tolerances: 1 unit X, 10 units Y, 5 units Z.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=3d_anisotropic params='1 10 5' values1='X Y Z' values2='X Y Z' out=anisotropic_3d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all matches (find=all) between A.fits and B.fits (exact ID match). Output to an HTML table.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID find=all ofmt=html out=all_exact_html.html",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using sky position (1 arcsec). T1 columns must retain original names, T2 duplicates suffixed '_T2'. Run in parallel mode.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=dups suffix2=_T2 runner=parallel out=t1_priority_parallel.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on 1D position (X) and 1D magnitude (M) (1d+1d) with tolerances 5 units and 0.1 mag.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=1d+1d params='5 0.1' values1='X M' values2='X M' out=mixed_1d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T_A that are NOT matched in T_B (sky 4 arcsec). Output the result metadata only.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky params=4 values1='RA DEC' values2='RA DEC' join=1not2 omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2. T1 is remote FITS. T2 needs conversion of string date 'DATE_STR' to MJD before matching on MJD (0.01 day tolerance).",
        "response": "stilts tmatch2 in1=http://remote.com/T1.fits in2=T2.fits icmd2='replacecol MJD isoToMjd(DATE_STR)' matcher=1d params=0.01 values1=MJD values2=MJD out=remote_date_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T_A and T_B. T_B rows should always be included. T_A rows should only be included if matched. Match exactly on ID.",
        "response": "stilts tmatch2 in1=T_A.fits join1=match in2=T_B.fits join2=always matcher=exact values1=ID values2=ID out=inner_outer_join.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match join2=always\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Match two tables on sky position (1 arcsec) and proper motion (10 mas/yr) combined. PMRA is the proper motion value.",
        "response": "stilts tmatch2 in1=C1.fits in2=C2.fits matcher=sky+1d params='1 10' values1='RA DEC PMRA' values2='RA DEC PMRA' out=pos_pm_1d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2. T1 has magnitude 99.99 for bad values. Replace 99.99 with null before matching on magnitude (1d, 0.1 tolerance).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='badval 99.99 MAG' in2=T2.fits matcher=1d params=0.1 values1=MAG values2=MAG out=badval_1d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all matches (all) between A.fits and B.fits (sky 5 arcsec). After matching, calculate the magnitude difference MAG_DIFF = MAG_A - MAG_B.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=all fixcols=dups suffix1=_A suffix2=_B ocmd='addcol MAG_DIFF MAG_A - MAG_B' out=mag_diff_all_pairs.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_B'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_DIFF MAG_A - MAG_B\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'MAG_B'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match two tables using elliptical 2D error regions (2d_ellipse) where the characteristic size is 20 pixels.",
        "response": "stilts tmatch2 in1=R1.fits in2=R2.fits matcher=2d_ellipse params=20 values1='X Y A B PA' values2='X Y A B PA' out=ellipse_2d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 is a simulated attractor (:attractor:1000,clifford). Match on X, Y coordinates (1 unit 2D match).",
        "response": "stilts tmatch2 in1=:attractor:1000,clifford in2=T2.fits matcher=2d params=1 values1='x y' values2='X Y' out=attractor_2d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the best match (best1) for T1 from T2. T2 coordinates are in FK4 B1950. Convert T2 positions to ICRS J2000 before matching.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='addskycoords fk4 icrs RA_B DEC_B RA DEC' matcher=sky params=3 values1='RA DEC' values2='RA DEC' find=best1 out=fk4_best1.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables exactly on 'UID'. Output to a LaTeX document.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=UID values2=UID ofmt=latex out=exact_match_report.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join A.fits and B.fits. A only keeps columns ID, RA, DEC. B keeps ID, MAG, FLUX. Match on RA, DEC (1 arcsec).",
        "response": "stilts tmatch2 in1=A.fits icmd1='keepcols \"ID RA DEC\"' in2=B.fits icmd2='keepcols \"ID MAG FLUX RA DEC\"' matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=minimal_join_with_filter.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using sky position (5 arcsec). T2 is an IPAC table. Output result to standard output in plain text format.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.tbl ifmt2=ipac matcher=sky params=5 values1='RA DEC' values2='RA DEC' ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B on a 1D color index (C_IDX) with tolerance 0.1. T_A only includes rows where C_IDX > 0.3.",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='select C_IDX > 0.3' in2=T_B.fits matcher=1d params=0.1 values1=C_IDX values2=C_IDX out=color_filtered_1d.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.3'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select C_IDX > 0.3\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.3'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match two catalogs using position and error bars (skyerr_q). T2 errors are given by 'E_SQRT' which needs squaring to get variance.",
        "response": "stilts tmatch2 in1=C1.fits in2=C2.fits icmd2='addcol E_VAR E_SQRT*E_SQRT' matcher=skyerr_q params=1 values1='RA DEC E_VAR' values2='RA DEC E_VAR' out=error_variance_q_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2. T1 is a simulated sky catalog (:skysim:1e5). Use best match for T2 from T1 (best2).",
        "response": "stilts tmatch2 in1=:skysim:1e5 in2=T2.fits matcher=sky params=2 values1='ra dec' values2='RA DEC' find=best2 out=simulated_best2_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all pairs (all) between A.fits and B.fits (exact ID match). After matching, calculate a checksum of the output table.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID find=all omode=checksum",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 on 3D Cartesian coordinates (X, Y, Z). After joining, keep only the unmatched rows from T1 (anti-join).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=3d params=1 values1='X Y Z' values2='X Y Z' join=1not2 out=3d_anti_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables using velocity (3D Cartesian coordinates VX, VY, VZ) within 50 km/s.",
        "response": "stilts tmatch2 in1=V1.fits in2=V2.fits matcher=3d params=50 values1='VX VY VZ' values2='VX VY VZ' out=velocity_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_A and T_B. T_A rows should be kept only if matched. T_B columns should be renamed using full suffix '_B'. Match on exact ID.",
        "response": "stilts tmatch2 in1=T_A.fits join1=match in2=T_B.fits matcher=exact values1=ID values2=ID fixcols=all suffix2=_B out=A_inner_B_suffix.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Match T1 and T2. T2 contains a magnitude error in percent (E_PCT). Convert E_PCT to linear error E_LIN (E_PCT/100) and match on E_LIN (1d_err).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='addcol E_LIN E_PCT/100.0' matcher=1d_err params=1 values1='MAG E_MAG' values2='MAG E_LIN' out=percent_error_1d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 positions are in sexagesimal strings (RA_H:M:S, DEC_D:M:S). Convert T2 coordinates to degrees inline.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='hmsToDegrees(RA_H) dmsToDegrees(DEC_D)' out=inline_sex_convert.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B using a 2D position match (5 pixels) and display the resulting metadata.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=2d params=5 values1='X Y' values2='X Y' omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows present in T1 but NOT T2 (anti-join). T2 columns are suffixed '_T2'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID join=1not2 suffix2=_T2 out=t1_anti_join_suffix.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on position (5 arcsec) and magnitude (0.5 mag) where the combined matcher uses multiplication (sky*1d).",
        "response": "stilts tmatch2 in1=P1.fits in2=P2.fits matcher=sky*1d params='5 0.5' values1='RA DEC MAG' values2='RA DEC MAG' out=multiplied_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join A.fits and B.fits. A is a simulated attractor (henon, 1000 rows). Match on X, Y coordinates (1 unit 2D match).",
        "response": "stilts tmatch2 in1=A.fits in2=:attractor:1000,henon matcher=2d params=1 values1='X Y' values2='x y' out=henon_2d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using elliptical regions (skyellipse). T2 has errors in degrees; convert to arcsec (multiply by 3600) for matching.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='replacecol R_ARCSEC R_DEG*3600' matcher=skyellipse params=1 values1='RA DEC R_ARCSEC B PA' values2='RA DEC R_ARCSEC B PA' out=deg_to_arcsec_ellipse.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the best match (best1) for T1 from T2. T1 only keeps ID and RA/DEC columns before matching.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='keepcols \"ID RA DEC\"' in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best1 out=minimal_columns_best1.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match Catalog A (A.fits) and Catalog B (B.fits) exactly on the composite string 'TYPE' concatenated with the numerical 'ID'.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1='concat(TYPE, toString(ID))' values2='concat(TYPE, toString(ID))' out=composite_key_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 1, got 2\nUsage: values1=<expr-list>\n\n"
    },
    {
        "prompt": "Crossmatch T1 and T2 (2 arcsec radius). Filter T1 first, keeping only objects with flux errors less than 0.1, then filter T2, keeping only rows where Z > 0.05.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='select FLUX_ERR < 0.1' in2=T2.fits icmd2='select Z > 0.05' matcher=sky params=2 values1='RA DEC' values2='RA DEC' out=double_filtered_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select FLUX_ERR < 0.1\n\nUsage: select <expr>\n    (Unused arguments: '<' '0.1'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match Survey X and Survey Y using symmetric best match (find=best) within 5 arcsec. Include the separation score in a column named 'SepArcsec'.",
        "response": "stilts tmatch2 in1=Survey_X.fits in2=Survey_Y.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' find=best scorecol=SepArcsec out=symmetric_best_scored.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all rows in table A that are unmatched in table B based on exact ID. Output columns from A suffixed '_A' and columns from B suffixed '_B'.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID join=1not2 fixcols=all suffix1=_A suffix2=_B out=A_anti_join_suffixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2 using a full outer join (1or2). Match on 3D Cartesian coordinates (X, Y, Z) within 1 unit.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=3d params=1 values1='X Y Z' values2='X Y Z' join=1or2 out=full_outer_3d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match Catalog A and B using sky position and R-band magnitude (sky+1d). Tolerances: 3 arcsec position, 0.1 mag difference. Columns MAG_R in B are actually MAG_VEGA; convert them to AB (add 0.9) before matching.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits icmd2='replacecol MAG_R MAG_R + 0.9' matcher=sky+1d params='3 0.1' values1='RA DEC MAG_R' values2='RA DEC MAG_R' out=vega_corrected_combined.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' '0.9'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol MAG_R MAG_R + 0.9\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '+' '0.9'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Perform a crossmatch between T1 and a simulated star catalog (:skysim:50000). Use best match for T1 (best1). Output to VOTable BINARY2 format.",
        "response": "stilts tmatch2 in1=T1.fits in2=:skysim:50000 matcher=sky params=1 values1='RA DEC' values2='ra dec' find=best1 ofmt='votable(format=BINARY2)' out=sim_best1_binary2.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match Survey A and Survey B. A is a multi-extension FITS file, use extension #3. B is a compressed VOTable file.",
        "response": "stilts tmatch2 in1=Survey_A.fits#3 in2=Survey_B.vot.gz matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=ext3_gzip_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2 on a 2D position (X, Y). T1 position errors (E1) are in the first dimension, and T2 errors (E2) in the second dimension. Use 2d_anisotropic matching.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=2d_anisotropic params='E1 E2' values1='X Y' values2='X Y' out=aniso_error_join.fits",
        "chat.jar": "failed",
        "error": "Error: Value E1 not suitable for Error in X(Number)\n    (For input string: \"E1\")\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Crossmatch T1 (FITS) and T2 (CSV) using an exact match on 'OBJECT_NAME'. T1 rows should always be included in the output (left outer join).",
        "response": "stilts tmatch2 in1=T1.fits ifmt2=csv in2=T2.csv matcher=exact values1=OBJECT_NAME values2=OBJECT_NAME join=all1 out=name_left_outer.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs using position and parallax (sky3d). T1 parallax is in mas, T2 distance is in Mpc. Convert T2 distance to parsec before matching (1 Mpc tolerance).",
        "response": "stilts tmatch2 in1=C1.fits in2=C2.fits icmd2='replacecol DIST_PC DIST_MPC*1e6' matcher=sky3d params=1 values1='RA DEC 1000/PLX' values2='RA DEC DIST_PC' out=parallax_distance_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T_SUPP that are unmatched in T_MAIN (2 arcsec sky match). Use parallel execution.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=2not1 runner=parallel out=parallel_anti_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join A.fits and B.fits exactly on ID. After joining, calculate the difference between magnitude columns (MAG_A - MAG_B) and add it as 'MAG_DIFF'.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID fixcols=dups suffix1=_A suffix2=_B ocmd='addcol MAG_DIFF MAG_A - MAG_B' out=magnitude_difference_exact.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_B'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG_DIFF MAG_A - MAG_B\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'MAG_B'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T1 and T2 using elliptical positional errors (skyellipse). T2 position angle (PA) is in radians; convert to degrees before matching.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='replacecol PA radiansToDegrees(PA)' matcher=skyellipse params=1 values1='RA DEC A B PA' values2='RA DEC A B PA' out=radian_pa_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch two time series T_A and T_B. T_A has time in ISO 8601 string format ('TIME_STR'). Convert T_A time to MJD before matching on 1D time (0.005 day tolerance).",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='addcol MJD isoToMjd(TIME_STR)' in2=T_B.fits matcher=1d params=0.005 values1=MJD values2=MJD out=iso_time_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match Catalog A against a large remote VOTable from a URL. Output metadata only.",
        "response": "stilts tmatch2 in1=CatalogA.fits in2=http://remote.archive/huge.vot matcher=sky params=1 values1='RA DEC' values2='RA DEC' omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2 based on 2D coordinates (X, Y). T2 coordinates are computed by applying a 45-degree rotation to original X_RAW, Y_RAW columns.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='addcol X X_RAW*cosDeg(45) - Y_RAW*sinDeg(45); addcol Y X_RAW*sinDeg(45) + Y_RAW*cosDeg(45)' matcher=2d params=5 values1='X Y' values2='X Y' out=rotated_coord_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'Y_RAW*sinDeg(45)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol X X_RAW*cosDeg(45) - Y_RAW*sinDeg(45)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'Y_RAW*sinDeg(45)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Crossmatch T1 and T2 using errors combined in quadrature (skyerr_q). T1 error values are in milliarcseconds (E_MAS). Convert to arcseconds.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='replacecol E_MAS E_MAS/1000.0' in2=T2.fits matcher=skyerr_q params=1 values1='RA DEC E_MAS' values2='RA DEC E_MAS' out=mas_error_quad_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits exactly on 'ID'. After joining, retain only the 'ID' and 'FLUX' columns from both tables.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID fixcols=all suffix1=_A suffix2=_B ocmd='keepcols ID_A ID_B FLUX_A FLUX_B' out=id_flux_subset.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'ID_B' 'FLUX_A' 'FLUX_B'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols ID_A ID_B FLUX_A FLUX_B\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'ID_B' 'FLUX_A' 'FLUX_B'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Find all matches (find=all) between T1 and T2 within a 1D cuboid separation on magnitude (MAG) of 0.2 units.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=1d_cuboid params=0.2 values1=MAG values2=MAG find=all out=cuboid_1d_all.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_A has coordinates in FK4 B1950. Convert T_A coordinates to ICRS J2000 before matching T_B (2 arcsec tolerance).",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='addskycoords fk4 icrs RA_B1950 DEC_B1950 RA DEC' in2=T_B.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' out=fk4_preprocessed_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 rows should always be included, and T1 rows only if they match T2 (right outer join). Match exactly on 'NAME'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=NAME values2=NAME join=all2 out=name_right_outer.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs using 3D anisotropic Cartesian coordinates (X, Y, Z) with tolerances 10, 10, and 5 units respectively.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=3d_anisotropic params='10 10 5' values1='X Y Z' values2='X Y Z' out=anisotropic_3d_join_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. A is provided via standard input (VOTable), B is a local Parquet file. Match on position (1 arcsec).",
        "response": "cat A.vot | stilts tmatch2 in1=- ifmt1=votable in2=B.parquet ifmt2=parquet matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=piped_parquet_match.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Find objects in T_MAIN that are unmatched in T_SUPP. Add a score column 'UNMATCHED_SEP' to show the minimum separation distance to any object in T_SUPP, even if it exceeds the tolerance.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=sky params=180000 values1='RA DEC' values2='RA DEC' find=best1 join=1not2 scorecol=UNMATCHED_SEP out=unmatched_with_min_sep.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 array column 'POS_ARRAY' (RA, DEC) needs to be exploded and renamed before matching.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='explodecols POS_ARRAY; colmeta -name R POS_ARRAY_0; colmeta -name D POS_ARRAY_1' matcher=sky params=2 values1='RA DEC' values2='R D' out=exploded_array_coord_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs based on symmetric best match (find=best). After matching, normalize a column 'COUNT' by dividing it by the total number of matched pairs.",
        "response": "stilts tmatch2 in1=C1.fits in2=C2.fits matcher=sky params=1 find=best out=normalized.fits ocmd='addcol N_PAIRS $nrow' ocmd='replacecol COUNT COUNT/N_PAIRS'",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: null value not allowed\nUsage: values1=<expr-list>\n\n"
    },
    {
        "prompt": "Join T_A and T_B. T_A coordinate RA is in HMS string format. Convert it to degrees inline for matching T_B coordinates (RA, DEC).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky params=1 values1='hmsToDegrees(RA_HMS) DEC' values2='RA DEC' out=inline_hms_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 using a combined sky and 2D anisotropic criterion (sky+2d_anisotropic). Tolerances: 1 arcsec, 0.1, 0.05 units.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky+2d_anisotropic params='1 0.1 0.05' values1='RA DEC P1 P2' values2='RA DEC P1 P2' out=complex_aniso_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 exactly on ID. Before matching, filter T1 to keep only the first 50 rows.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='head 50' in2=T2.fits matcher=exact values1=ID values2=ID out=T1_head_exact.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables using position. T1 has errors E1, T2 has errors E2. Match radius is proportional to the quadrature sum of errors (skyerr_q) scaled by 1.5.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skyerr_q params=1.5 values1='RA DEC E1' values2='RA DEC E2' out=scaled_quad_error.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T_B that are unmatched in T_A (join=2not1). Filter T_A first to remove null magnitudes.",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='select !NULL_MAG' in2=T_B.fits matcher=exact values1=ID values2=ID join=2not1 out=T_B_unmatched_clean.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2, filtering T2 to only keep columns ID and MAG before matching on exact ID.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='keepcols ID MAG' matcher=exact values1=ID values2=ID out=T2_minimal_cols.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'MAG'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols ID MAG\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'MAG'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits (sky 1 arcsec). Output should be sorted by a calculated color index MAG_G - MAG_R descending.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=dups suffix1=_A suffix2=_B ocmd='sort -down (MAG_G_A - MAG_R_B)' out=sorted_by_color.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_R_B)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: sort -down (MAG_G_A - MAG_R_B)\n\nUsage: sort [-down] [-nullsfirst] [-[no]parallel] <key-list>\n    (Unused arguments: '-' 'MAG_R_B)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Join T1 and T2, displaying the row count only. Use the sky matcher.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_A coordinates are in Ecliptic. Convert T_A to ICRS before matching T_B (5 arcsec).",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='addskycoords ecliptic icrs ELON ELAT RA DEC' in2=T_B.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' out=ecliptic_preprocessed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using the symmetric best match (best) and execute using sequential runner.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 find=best runner=sequential values1='RA DEC' values2='RA DEC' out=sequential_best_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join two catalogs based on matching elliptical regions in Cartesian space (2d_ellipse). Characteristic size is 10 units.",
        "response": "stilts tmatch2 in1=R1.fits in2=R2.fits matcher=2d_ellipse params=10 values1='X Y A B PA' values2='X Y A B PA' out=cartesian_ellipse_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T1 that match T2. Include all columns but rename duplicates using the automatic numeric suffixing convention.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID fixcols=dups out=auto_suffixed_inner.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_B array column 'FLUX_VEC' needs replacement by its maximum value ('FLUX_MAX') before matching on 1D flux (0.1 tolerance).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits icmd2='replacecol FLUX_MAX maximum(FLUX_VEC)' matcher=1d params=0.1 values1=FLUX_MAX values2=FLUX_MAX out=max_flux_1d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2, only keeping rows that appear in one or the other (symmetric difference, 1xor2). Output separation score.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=1xor2 scorecol=Sep out=symmetric_difference_scored.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 on 3D spherical polar coordinates (sky3d). T1 distance is in parsec, T2 is in parsec. Tolerance 50 pc.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky3d params=50 values1='RA DEC DIST_PC' values2='RA DEC DIST_PC' out=sky3d_50pc.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the best match (best1) for T1 from T2. T2 coordinates are in degrees, but units are not specified in the VOTable input; assert units are degrees.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.vot icmd2='colmeta -units deg RA; colmeta -units deg DEC' matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best1 out=forced_unit_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits using position AND parallax, where parallax is inverted distance (sky+1d). Tolerances: 2 arcsec, 0.1 mas tolerance on parallax.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky+1d params='2 0.1' values1='RA DEC PARALLAX' values2='RA DEC PARALLAX' out=pos_parallax_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 is a simulated Henon attractor table (:attractor:1e5,henon). Match on X, Y coordinates (2d, 1 unit tolerance).",
        "response": "stilts tmatch2 in1=:attractor:1e5,henon in2=T2.fits matcher=2d params=1 values1='x y' values2='X Y' out=henon_attractor_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_A and T_B. Output to standard output in plain text format.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=exact values1=ID values2=ID ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 using symmetric best match (best). T1 must be filtered first to remove rows where MAG is null.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='select !NULL_MAG' in2=T2.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' find=best out=null_filtered_best.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 on 2D coordinates (X, Y) with anisotropic cuboid tolerances 5 and 10 units.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=2d_cuboid params='5 10' values1='X Y' values2='X Y' out=aniso_2d_cuboid.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs. T2 is provided via a system command pipe that outputs an ASCII table. Match exactly on 'KEY'.",
        "response": "cat T2.txt | stilts tmatch2 in1=T1.fits in2=- ifmt2=ascii matcher=exact values1=KEY values2=KEY out=piped_ascii_match.fits",
        "chat.jar": "skipped - no 'stilts' prefix"
    },
    {
        "prompt": "Join T_A and T_B. A is provided via HTTP URL. Match on position (1 arcsec).",
        "response": "stilts tmatch2 in1=http://archive.com/A.fits in2=B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=http_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 using isotropic 4D Cartesian coordinates (X, Y, Z, T) within 2 units.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=4d params=2 values1='X Y Z T' values2='X Y Z T' out=cartesian_4d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits (sky 2 arcsec). Output columns from A suffixed '_A'. Output columns from B suffixed '_B'. Discard the intermediate score column.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' fixcols=all suffix1=_A suffix2=_B scorecol=null out=no_score_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs where positions are defined by coordinate errors (skyerr). T1 error is fixed at 1 arcsec, T2 error is from column ERR_T2.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skyerr params=1 values1='RA DEC 1' values2='RA DEC ERR_T2' out=mixed_fixed_var_error.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find objects in T_A that are NOT matched in T_B. T_A coordinates are sexagesimal RA_HMS, DEC_DMS. Convert T_A to degrees for matching.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky params=5 values1='hmsToDegrees(RA_HMS) dmsToDegrees(DEC_DMS)' values2='RA DEC' join=1not2 out=sexagesimal_anti_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2. T1 only includes rows with a positive parallax (PLX > 0) before matching.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='select PLX > 0' in2=T2.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' out=positive_parallax_filter.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select PLX > 0\n\nUsage: select <expr>\n    (Unused arguments: '>' '0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Join T1 (all rows) and T2 (matched rows only). After joining, apply a column meta filter to rename the final separation column to 'DistDeg'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=360 values1='RA DEC' values2='RA DEC' join=all1 scorecol=Separation ocmd='colmeta -name DistDeg Separation' out=left_outer_renamed_sep.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 on 3D Cartesian coordinates (X, Y, Z). After joining, calculate the length of the resulting 3D vector.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=3d params=1 values1='X Y Z' values2='X Y Z' fixcols=dups suffix1=_1 ocmd='addcol LENGTH hypot(X_1, Y_1, Z_1)' out=3d_length_calc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Y_1,' 'Z_1)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol LENGTH hypot(X_1, Y_1, Z_1)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'Y_1,' 'Z_1)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match A.fits and B.fits exactly on 'ID'. Output result to a LaTeX file.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID ofmt=latex out=exact_match_latex.tex",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find best match (best2) for T2 from T1. T1 only includes rows with high magnitude (MAG > 20).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='select MAG > 20' in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best2 out=faint_best2_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG > 20\n\nUsage: select <expr>\n    (Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match two catalogs using position and 1D velocity (sky+1d). Tolerances: 4 arcsec, 5 km/s.",
        "response": "stilts tmatch2 in1=C1.fits in2=C2.fits matcher=sky+1d params='4 5' values1='RA DEC V_RAD' values2='RA DEC V_RAD' out=pos_velocity_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 column RA is in Galactic coordinates (GLON). Convert GLON to ICRS RA inline for matching T2.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='icrsToGal(RA, DEC) DEC' values2='RA DEC' out=inline_galactic_convert.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 2, got 3\nUsage: values1=<expr-list>\n\n"
    },
    {
        "prompt": "Match T_A and T_B. T_B has elliptical error regions defined by Gaia correlation terms (skycorr, 5 mas scale). T_B errors are in mas.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=skycorr params=5 values1='RA DEC 0 0 0' values2='RA DEC RA_ERR DEC_ERR RA_DEC_CORR' out=gaia_skycorr_join.fits",
        "chat.jar": "failed",
        "error": "WARNING: Class skycorr not found\nError: Unknown matcher element: skycorr\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Match T1 and T2 on 2D position (X, Y). T1 position error is column ERR1, T2 error is ERR2. Use quadrature sum of errors (2d_err_q).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=2d_err_q params=1 values1='X Y ERR1' values2='X Y ERR2' out=cartesian_error_q_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T1 that match T2. Include all rows from T1 (join=all1). Then remove duplicate column 'ID_2' added from T2.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID join=all1 fixcols=dups suffix2=_2 ocmd='delcols ID_2' out=T1_left_delete_dup.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using position (1 arcsec) AND proper motion (5 mas/yr) combined using the constraint multiplication (sky*2d).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky*2d params='1 5' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' out=multiplied_pos_pm.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits exactly on ID. T2 has a numerical column that is -999 for nulls. Replace -999 with null in T2 before joining.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits icmd2='replaceval -999 null MAG' matcher=exact values1=ID values2=ID out=null_replacement_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_MAIN and T_SUPP. Find all matches (all). Output the resulting table's metadata and statistics.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=sky params=1 find=all values1='RA DEC' values2='RA DEC' omode=meta omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=stats\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Match T1 and T2 on MJD. T2 time values are in seconds since Unix epoch. Convert T2 to MJD before matching (1d, 1e-6 tolerance).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='replacecol MJD unixSecToMjd(TIME_UNIX)' matcher=1d params=1e-6 values1=MJD values2=MJD out=unix_to_mjd_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits. A has columns in FK4 B1950. Convert A to FK5 J2000 using addskycoords before matching (2 arcsec).",
        "response": "stilts tmatch2 in1=A.fits icmd1='addskycoords fk4 fk5 RA_B1950 DEC_B1950 RA DEC' in2=B.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' out=A_fk4_to_fk5_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the best match (best1) for T1 from T2. T2 coordinates are provided in an array column 'COORDS' of size 2. Explode the array inline in values2.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='COORDS COORDS[4]' find=best1 out=inline_array_index_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2. T1 position errors are in arcminutes. Convert them to arcseconds before skyerr matching (ERR_ARCSEC * 60).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='replacecol E_ARCSEC E_ARCMIN * 60' in2=T2.fits matcher=skyerr params=1 values1='RA DEC E_ARCSEC' values2='RA DEC E_ARCSEC' out=arcmin_converted_error.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '*' '60'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol E_ARCSEC E_ARCMIN * 60\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '*' '60'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Join T_A and T_B. Only rows present in ONE table (symmetric difference, 1xor2) should be included. Match exactly on ID.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=exact values1=ID values2=ID join=1xor2 out=exact_symmetric_diff.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs using position and magnitude difference (sky+1d). T1 magnitude is in log scale, T2 magnitude is linear. Convert T2 to log scale.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='replacecol MAG log10(MAG)' matcher=sky+1d params='3 0.1' values1='RA DEC MAG' values2='RA DEC MAG' out=log_mag_conversion.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 contains a column 'FLAG'. Only consider T2 rows where FLAG is TRUE before matching.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='select FLAG' matcher=exact values1=ID values2=ID out=T2_flagged_filter.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits (sky 1 arcsec). A has an extra column 'NOTES'. Delete 'NOTES' from A before matching.",
        "response": "stilts tmatch2 in1=A.fits icmd1='delcols NOTES' in2=B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=A_notes_deleted.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2 using a right outer join (all T2 rows). T1 columns suffixed '_1', T2 columns suffixed '_2'. Match on position (5 arcsec).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' join=all2 fixcols=all suffix1=_1 suffix2=_2 out=right_outer_suffixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B using position and velocity components (sky+2d). T_A velocity components are in mas/yr; normalize them by parallax in T_A to get km/s (rvMasyrToKms).",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='addcol VX rvMasyrToKms(PMRA, PLX); addcol VY rvMasyrToKms(PMDEC, PLX)' in2=T_B.fits matcher=sky+2d params='2 1 1' values1='RA DEC VX VY' values2='RA DEC VX VY' out=velocity_normalized_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PLX)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol VX rvMasyrToKms(PMRA, PLX)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PLX)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Crossmatch T1 and T2 using the symmetrical best match (best). After matching, drop the Separation column.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best scorecol=Separation ocmd='delcols Separation' out=best_match_no_sep.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on a 1D cuboid separation on 'TIME' of 0.01 units. T1 is a simulated loop table (:loop:1000).",
        "response": "stilts tmatch2 in1=:loop:1000 in2=T2.fits matcher=1d_cuboid params=0.01 values1=i values2=TIME out=loop_time_cuboid_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits using position and error radii (skyerr). T_A error is fixed at 0.5 arcsec. T_B error comes from a calculated expression: sqrt(ERR_X*ERR_X + ERR_Y*ERR_Y).",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=skyerr params=1 values1='RA DEC 0.5' values2='RA DEC hypot(ERR_X, ERR_Y)' out=calculated_error_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values2: Wrong number of words - wanted 3, got 4\nUsage: values2=<expr-list>\n\n"
    },
    {
        "prompt": "Find rows in T2 that match T1. Only keep the best match for T2 (best2). Output count only.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' find=best2 omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2. T1 position needs to be converted from Galactic to ICRS using addskycoords before matching T2.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='addskycoords galactic icrs GLON GLAT RA DEC' in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' out=gal_to_icrs_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits exactly on ID. After matching, apply a row filter to keep only rows where the combined table size is less than 100 rows.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID ocmd='select $nrow < 100' out=size_filtered_output.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '100'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select $nrow < 100\n\nUsage: select <expr>\n    (Unused arguments: '<' '100'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T_A and T_B. T_A X coordinate is derived from log10(FLUX). Match on 1D log flux (0.01 tolerance).",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='replacecol LOG_FLUX log10(FLUX)' in2=T_B.fits matcher=1d params=0.01 values1=LOG_FLUX values2=LOG_FLUX out=log_flux_1d_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2. T2 columns should use the suffix '_T2'. Only output the resulting table metadata.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID fixcols=all suffix2=_T2 omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join two tables using a cuboid match on 3D Cartesian coordinates (X, Y, Z) with tolerances 1, 10, and 1 units.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=3d_cuboid params='1 10 1' values1='X Y Z' values2='X Y Z' out=aniso_3d_cuboid.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using position and magnitude (sky*1d). T2 magnitude is null for values of -99. Convert -99 to null before matching.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='badval -99 MAG' matcher=sky*1d params='1 0.1' values1='RA DEC MAG' values2='RA DEC MAG' out=badval_sky_star_1d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs using elliptical sky correlation (skycorr). T1 correlation is fixed at 0.5. T2 correlation is from column CORR_T2.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skycorr params=1 values1='RA DEC E_RA E_DEC 0.5' values2='RA DEC E_RA E_DEC CORR_T2' out=fixed_variable_skycorr.fits",
        "chat.jar": "failed",
        "error": "WARNING: Class skycorr not found\nError: Unknown matcher element: skycorr\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Find rows in T1 that are NOT matched in T2. T1 coordinates are in degrees, T2 coordinates are in radians. Convert T2 inline.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=5 values1='RA_DEG DEC_DEG' values2='radiansToDegrees(RA_RAD) radiansToDegrees(DEC_RAD)' join=1not2 out=rad_anti_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_MAIN and T_SUPP. T_SUPP rows should always be included (right outer join). Discard the resulting separation column.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=exact values1=ID values2=ID join=all2 scorecol=null out=right_outer_no_score.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 on a 2D Cartesian plane (X, Y). T1 coordinates are calculated from a vector array 'POS_VEC' of size 2.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='explodecols POS_VEC; colmeta -name X POS_VEC_0; colmeta -name Y POS_VEC_1' in2=T2.fits matcher=2d params=5 values1='X Y' values2='X Y' out=T1_exploded_2d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits. A has proper motions PMRA, PMDEC. Match on position AND proper motion total magnitude (sky+1d).",
        "response": "stilts tmatch2 in1=A.fits icmd1='addcol PM_TOT hypot(PMRA, PMDEC)' in2=B.fits matcher=sky+1d params='2 10' values1='RA DEC PM_TOT' values2='RA DEC PM_TOT' out=pos_pm_total_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PMDEC)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PM_TOT hypot(PMRA, PMDEC)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PMDEC)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Join T1 and T2. T1 columns should be retained with their original names. Duplicates from T2 should be suffixed '_dup'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID fixcols=dups suffix2=_dup out=T1_priority_dup_suffix.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs. T1 has fixed error 1 arcsec, T2 has calculated quadratic error sqrt(E_RA^2 + E_DEC^2). Match using skyerr.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skyerr params=1 values1='RA DEC 1' values2='RA DEC hypot(E_RA, E_DEC)' out=mixed_calculated_error.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values2: Wrong number of words - wanted 3, got 4\nUsage: values2=<expr-list>\n\n"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 is an ECSV file, T2 is an IPAC table. Match exactly on NAME.",
        "response": "stilts tmatch2 in1=T1.ecsv ifmt1=ecsv in2=T2.tbl ifmt2=ipac matcher=exact values1=NAME values2=NAME out=ecsv_ipac_exact.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_A is a synthetic table of 1000 Henon attractor points. Match using symmetric best (best) on X, Y coordinates.",
        "response": "stilts tmatch2 in1=:attractor:1000,henon in2=T_B.fits matcher=2d params=1 values1='x y' values2='X Y' find=best out=henon_best_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the best match (best1) for T1 from T2. T1 only keeps rows where a string column 'CLASS' equals 'QSO'.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='select equals(CLASS, \"QSO\")' in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best1 out=QSO_best1_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: select equals(CLASS, \"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: 'QSO' ')')\n"
    },
    {
        "prompt": "Join T1 and T2 on 3D Cartesian coordinates (X, Y, Z). After matching, sort the output by the Z coordinate descending.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=3d params=5 values1='X Y Z' values2='X Y Z' fixcols=dups suffix1=_1 ocmd='sort -down Z_1' out=3d_z_sorted.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 (sky 1 arcsec). Output to VOTable using FITS serialization.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' ofmt='votable(format=FITS)' out=match_fits_votable.vot",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. A has Galactic coordinates. Convert A to ICRS. Match B with 0.1 degree tolerance.",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='addskycoords galactic icrs GLON GLAT RA DEC' in2=T_B.fits matcher=sky params=360 values1='RA DEC' values2='RA DEC' out=gal_icrs_0_1_deg.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all pairs (find=all) between T1 and T2 using position AND 1D magnitude (sky+1d) and output only the Separation and Score columns.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky+1d params='2 0.2' values1='RA DEC MAG' values2='RA DEC MAG' find=all ocmd='keepcols Separation Score' out=min_pair_data.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Score'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols Separation Score\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'Score'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match two tables on a 1D magnitude (MAG) only. T1 magnitude values are derived from a log expression: 25 - 2.5 * log10(FLUX).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='addcol MAG 25 - 2.5 * log10(FLUX)' in2=T2.fits matcher=1d params=0.1 values1=MAG values2=MAG out=calculated_mag_1d.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' '2.5' '*' 'log10(FLUX)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MAG 25 - 2.5 * log10(FLUX)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' '2.5' '*' 'log10(FLUX)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 rows should always be included. T1 columns should only be included if matched.",
        "response": "stilts tmatch2 in1=T1.fits join1=match in2=T2.fits join2=always matcher=exact values1=ID values2=ID out=inner_T1_outer_T2.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match join2=always\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Match A.fits and B.fits using position AND proper motion (sky*2d). T_B proper motion is in km/s (VX, VY). Convert T_B velocity to mas/yr given parallax PLX.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits icmd2='addcol PMRA rvKmsToMasyr(VX, PLX); addcol PMDEC rvKmsToMasyr(VY, PLX)' matcher=sky*2d params='1 5' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' out=kms_to_masyr_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PLX)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PMRA rvKmsToMasyr(VX, PLX)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PLX)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T1 and T2. T2 has a string column 'TIME_STR' in JD format. Convert T2 time to MJD before matching on 1D time.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='replacecol MJD jdToMjd(parseDouble(TIME_STR))' matcher=1d params=0.01 values1=MJD values2=MJD out=jd_string_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 coordinates are sexagesimal strings (RA_H:M:S, DEC_D:M:S). Convert T2 coordinates to degrees in the values parameter.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='hmsToDegrees(RA_H) dmsToDegrees(DEC_D)' out=inline_sexagesimal_degree.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2. T2 is an ECSV file. Match exactly on an integer ID.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.ecsv ifmt2=ecsv matcher=exact values1=ID values2=ID out=fits_ecsv_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B on 3D Cartesian coordinates (X, Y, Z). Only find the best match for A (best1).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=3d params=1 values1='X Y Z' values2='X Y Z' find=best1 out=3d_best1_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch two tables, T1 and T2. T1 columns suffixed '_1', T2 columns suffixed '_2'. Output table sorted by the Separation score.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=all suffix1=_1 suffix2=_2 ocmd='sort Separation' out=all_suffixed_sorted.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T1 that match T2. After matching, add a boolean column 'IS_CLOSE' if Separation < 0.5 arcsec.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' scorecol=Separation ocmd='addcol IS_CLOSE Separation < 0.5/3600.0' out=close_flagged_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '0.5/3600.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol IS_CLOSE Separation < 0.5/3600.0\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '<' '0.5/3600.0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match two catalogs using position and individual error bars (skyerr). T1 error comes from column E_POS1, T2 error from E_POS2.",
        "response": "stilts tmatch2 in1=C1.fits in2=C2.fits matcher=skyerr params=1 values1='RA DEC E_POS1' values2='RA DEC E_POS2' out=per_object_error_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2. T1 is a loop table (:loop:10). T2 has a numerical column 'INDEX'. Match exactly on index.",
        "response": "stilts tmatch2 in1=:loop:10 in2=T2.fits matcher=exact values1=i values2=INDEX out=loop_exact_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 rows must be included (all1). T2 must be filtered first to remove rows where 'BAD_FLAG' is true.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='select !BAD_FLAG' matcher=exact values1=ID values2=ID join=all1 out=T1_left_T2_clean.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits. A has proper motion components. Calculate total PM magnitude and match on 1D total PM (1 mas/yr tolerance).",
        "response": "stilts tmatch2 in1=A.fits icmd1='addcol PM_TOT hypot(PMRA, PMDEC)' in2=B.fits matcher=1d params=1 values1=PM_TOT values2=PM_TOT out=pm_total_1d_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PMDEC)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PM_TOT hypot(PMRA, PMDEC)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PMDEC)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T1 and T2 on 2D Cartesian coordinates (X, Y). T1 position only includes the first 50 rows.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='head 50' in2=T2.fits matcher=2d params=1 values1='X Y' values2='X Y' out=T1_head_2d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using position and magnitude (sky*1d). T1 magnitude is null if its magnitude is 99.99. Replace 99.99 with null in T1 before matching.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='badval 99.99 MAG' in2=T2.fits matcher=sky*1d params='1 0.2' values1='RA DEC MAG' values2='RA DEC MAG' out=T1_badval_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_A and T_B. T_B contains a header parameter 'EPOCH'. Add this parameter as a scalar column to T_B before joining on exact ID.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits icmd2='addcol EPOCH_VAL param$EPOCH' matcher=exact values1=ID values2=ID out=param_to_column_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 using elliptical sky correlation (skycorr). T1 errors are fixed at 1 mas for both axes.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skycorr params=1 values1='RA DEC 1 1 0' values2='RA DEC E_RA E_DEC CORR' out=fixed_error_skycorr.fits",
        "chat.jar": "failed",
        "error": "WARNING: Class skycorr not found\nError: Unknown matcher element: skycorr\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Match two tables exactly on ID. Find the best match (best) symmetrically. Output the total row count.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID find=best omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using 3D Cartesian coordinates (X, Y, Z). After joining, keep only the unmatched rows from T2 (2not1).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=3d params=1 values1='X Y Z' values2='X Y Z' join=2not1 out=T2_anti_join_3d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch Catalog A (A.fits) and Catalog B (B.fits) based on sky position (4 arcsec) and proper motion difference (PMRA, PMDEC) within 10 mas/yr. Use anisotropic tolerance for proper motion.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky+2d_anisotropic params='4 10 10' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' out=pos_pm_aniso_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all objects in targets.fits that are NOT matched in survey.fits, based on an exact match on string column 'SOURCE_NAME'.",
        "response": "stilts tmatch2 in1=targets.fits in2=survey.fits matcher=exact values1=SOURCE_NAME values2=SOURCE_NAME join=1not2 out=unmatched_by_name.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1.fits and T2.fits using a full outer join (1or2). Match on 3D Cartesian coordinates (X, Y, Z) within 5 units and ensure columns use numerical suffixes.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=3d params=5 values1='X Y Z' values2='X Y Z' join=1or2 fixcols=dups out=full_outer_3d_suffixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match Survey X and Survey Y. Survey X contains Galactic coordinates (GLON, GLAT). Convert X to ICRS before performing a 1 arcsec sky match.",
        "response": "stilts tmatch2 in1=Survey_X.fits icmd1='addskycoords galactic icrs GLON GLAT RA DEC' in2=Survey_Y.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=galactic_preproc_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find the single best match (best1) for each row in targets.csv from archives.fits within 0.5 arcsec. The CSV file uses columns ra, dec.",
        "response": "stilts tmatch2 ifmt1=csv in1=targets.csv in2=archives.fits matcher=sky params=0.5 values1='ra dec' values2='RA DEC' find=best1 out=csv_best1_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T_A and T_B using a combination of sky position (2 arcsec) and magnitude (0.1 tolerance) multiplied together (sky*1d).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky*1d params='2 0.1' values1='RA DEC MAG' values2='RA DEC MAG' out=pos_mag_multiplied.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on MJD time within 0.00001 days. Use sequential processing.",
        "response": "stilts tmatch2 in1=TS1.fits in2=TS2.fits matcher=1d params=0.00001 values1=MJD values2=MJD runner=sequential out=sequential_time_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join primary.fits and secondary.fits. Primary coordinates are in radians. Convert them to degrees inline before a 3 arcsec sky match.",
        "response": "stilts tmatch2 in1=primary.fits in2=secondary.fits matcher=sky params=3 values1='radiansToDegrees(RA_RAD) radiansToDegrees(DEC_RAD)' values2='RA DEC' out=inline_rad_to_deg.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B exactly on 'KEY'. T_A columns should be retained with their original names, and T_B columns should be renamed with suffix '_B'.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=exact values1=KEY values2=KEY fixcols=dups suffix2=_B out=T_A_inner_B_suffixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using position AND proper motion error in quadrature (skyerr_q+2d_err_q). Scale factor 1.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skyerr_q+2d_err_q params='1 1' values1='RA DEC POS_ERR PMRA PMDEC PM_ERR' values2='RA DEC POS_ERR PMRA PMDEC PM_ERR' out=combined_quad_error_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on 2D coordinates (X, Y) with anisotropic cuboid tolerances of 8 units in X and 2 units in Y.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=2d_cuboid params='8 2' values1='X Y' values2='X Y' out=aniso_2d_cuboid_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T_MAIN that are NOT matched in T_SUPP (exact ID match). T_MAIN must first be filtered to exclude rows where FLAG=1.",
        "response": "stilts tmatch2 in1=T_MAIN.fits icmd1='select FLAG!=1' in2=T_SUPP.fits matcher=exact values1=ID values2=ID join=1not2 out=filtered_anti_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2. T2 is a multi-extension FITS file, use extension #5. Match on position within 10 arcsec.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits#5 matcher=sky params=10 values1='RA DEC' values2='RA DEC' out=ext5_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two catalogs using elliptical error regions (skyellipse). T1 position angle (PA) is in degrees; T2 PA is in radians. Convert T2 PA to degrees.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='replacecol PA radiansToDegrees(PA)' matcher=skyellipse params=10 values1='RA DEC A B PA' values2='RA DEC A B PA' out=skyellipse_radians_fix.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits. A contains magnitude 99.0 for nulls. Replace 99.0 with NULL in A before matching on a 1D magnitude (0.1 tolerance).",
        "response": "stilts tmatch2 in1=A.fits icmd1='badval 99.0 MAG' in2=B.fits matcher=1d params=0.1 values1=MAG values2=MAG out=mag_badval_clean.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_B has an array column 'FLUX_VEC'. Explode this array column into scalars before matching in 2D space (X, Y, FLUX_VEC_0).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits icmd2='explodecols FLUX_VEC' matcher=3d params=1 values1='X Y FLUX_VEC_0' values2='X Y FLUX_VEC_0' out=exploded_array_3d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join two tables exactly on 'ID'. Output should include all rows from T1 (left outer join). Output statistics only.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID join=all1 omode=stats",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 using 3D spherical polar coordinates (sky3d). T1 radial distance is in light years (LY). Convert LY to Mpc before matching (1 Mpc tolerance).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='replacecol LY LY/3.26156e6' in2=T2.fits matcher=sky3d params=1 values1='RA DEC LY' values2='RA DEC DIST_MPC' out=ly_to_mpc_3d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T_MAIN and T_SUPP. T_MAIN is a remote URL. T_SUPP must be filtered to keep only the first 1000 rows.",
        "response": "stilts tmatch2 in1=http://archive.com/T_MAIN.fits in2=T_SUPP.fits icmd2='head 1000' matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=remote_head_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all possible pairs (find=all) between A.fits and B.fits (exact ID match). After matching, calculate a checksum of the output table.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID find=all omode=checksum",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on X, Y, Z coordinates using per-object errors combined in quadrature (3d_err_q). Scale 1.5.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=3d_err_q params=1.5 values1='X Y Z ERR' values2='X Y Z ERR' out=3d_quadrature_scaled.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_A and T_B. T_A has a coordinate RA_HMS in sexagesimal string format. Convert it to degrees inline before matching T_B's RA.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky params=1 values1='hmsToDegrees(RA_HMS) DEC' values2='RA DEC' out=inline_hms_conversion.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2. T1 rows should be included only if they match T2, and T2 rows should be included only if they match T1 (inner join, 1and2). Output metadata only.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=1and2 omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T_MAIN and T_SUPP. T_SUPP coordinates (GLON, GLAT) are Galactic. Convert them to ICRS inline in values2 before matching T_MAIN.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=sky params=1 values1='RA DEC' values2='galToIcrs(GLON, GLAT) galToIcrs(GLON, GLAT)' out=inline_gal_to_icrs.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values2: Wrong number of words - wanted 2, got 4\nUsage: values2=<expr-list>\n\n"
    },
    {
        "prompt": "Match A.fits and B.fits using position AND parallax (sky+1d). T_B parallax is in arcsec. Match tolerances: 1 arcsec, 0.05 arcsec.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky+1d params='1 0.05' values1='RA DEC PARALLAX' values2='RA DEC PARALLAX' out=pos_parallax_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all matches (all) between T1 and T2 (exact ID match). After joining, keep only the columns that were present in T1.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID find=all icmd2='keepcols ID' out=T1_cols_all_matches.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on 1D position (X) and 1D velocity (V) (1d+1d). T1 only includes rows where X > 1000.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='select X > 1000' in2=T2.fits matcher=1d+1d params='5 10' values1='X V' values2='X V' out=filtered_1d_1d.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1000'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select X > 1000\n\nUsage: select <expr>\n    (Unused arguments: '>' '1000'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Join T_A and T_B. T_A is a simulated Henon attractor table (:attractor:10000,henon). Match on X, Y coordinates (2D, 1 unit tolerance).",
        "response": "stilts tmatch2 in1=:attractor:10000,henon in2=T_B.fits matcher=2d params=1 values1='x y' values2='X Y' out=henon_attractor_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 contains a string column 'FLAG'. Filter T2 to keep only rows where FLAG is 'GOOD'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='select equals(FLAG, \"GOOD\")' matcher=exact values1=ID values2=ID out=flagged_good_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GOOD' ')'\n\nCommand was: select equals(FLAG, \"GOOD\")\n\nUsage: select <expr>\n    (Unused arguments: 'GOOD' ')')\n"
    },
    {
        "prompt": "Match two catalogs. T1 has fixed error 0.1 arcsec. T2 error is in column ERR_T2. Match using skyerr.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skyerr params=1 values1='RA DEC 0.1/3600.0' values2='RA DEC ERR_T2' out=fixed_variable_error_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2. T1 columns should use suffix '_1', T2 columns suffix '_2'. Only output the calculated separation score 'Sep' and the IDs.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=all suffix1=_1 suffix2=_2 scorecol=Sep ocmd='keepcols ID_1 ID_2 Sep' out=minimal_id_sep.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'ID_2' 'Sep'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols ID_1 ID_2 Sep\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'ID_2' 'Sep'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match A.fits and B.fits. A is a simple table (:test:100,is) containing test data. Match exactly on column 's_int'.",
        "response": "stilts tmatch2 in1=:test:100,is in2=B.fits matcher=exact values1=s_int values2=s_int out=test_exact_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 on MJD. T1 uses Decimal Year (DECYEAR). Convert T1 to MJD before matching (0.01 day tolerance).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='replacecol MJD decYearToMjd(DECYEAR)' in2=T2.fits matcher=1d params=0.01 values1=MJD values2=MJD out=decyear_to_mjd_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on position, using quadrature error (skyerr_q). T1 position angles are 0 (circular errors).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=skyerr_q params=1 values1='RA DEC ERR' values2='RA DEC ERR' out=skyerr_q_circular.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T_A that are NOT matched in T_B (sky 1 arcsec). Output the total number of unmatched rows.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' join=1not2 omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2. T2 contains an array column 'X_ARRAY'. Replace it with the sum of its elements before matching on position + sum (sky+1d).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='replacecol X_SUM sum(X_ARRAY)' matcher=sky+1d params='1 5' values1='RA DEC X_SUM' values2='RA DEC X_SUM' out=array_sum_combined.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits using positional errors (skyerr). T_A error is in microarcseconds (uas). Convert A error to degrees.",
        "response": "stilts tmatch2 in1=A.fits icmd1='addcol E_DEG E_UAS/3600000000.0' in2=B.fits matcher=skyerr params=1 values1='RA DEC E_DEG' values2='RA DEC E_DEG' out=uas_to_deg_skyerr.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 rows should always be included (right outer join). Find the single best match for T2 from T1 (best2).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID join=all2 find=best2 out=T2_outer_best2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on X, Y, Z coordinates using isotropic matching. T1 columns are in a single array 'VEC3D'. Explode T1 first.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='explodecols VEC3D' in2=T2.fits matcher=3d params=1 values1='VEC3D_0 VEC3D_1 VEC3D_2' values2='X Y Z' out=exploded_3d_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_A (Parquet) and T_B (VOTable). Match exactly on 'OBS_KEY'. Output to standard output as text.",
        "response": "stilts tmatch2 ifmt1=parquet in1=T_A.parquet in2=T_B.vot matcher=exact values1=OBS_KEY values2=OBS_KEY ofmt=text out=-",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T1 that match T2. After matching, calculate the position angle (posAngDegrees) between the matched coordinates and add it as 'PA_SEP'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=5 values1='RA_1 DEC_1' values2='RA_2 DEC_2' ocmd='addcol PA_SEP posAngDegrees(RA_1, DEC_1, RA_2, DEC_2)' out=match_with_pa.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'DEC_1,' 'RA_2,' 'DEC_2)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PA_SEP posAngDegrees(RA_1, DEC_1, RA_2, DEC_2)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'DEC_1,' 'RA_2,' 'DEC_2)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match two tables on 2D coordinates (X, Y) with elliptical regions. T1 PA is fixed at 45 degrees.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=2d_ellipse params=1 values1='X Y A B 45' values2='X Y A B PA' out=fixed_pa_ellipse_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 columns should be retained, T2 duplicates renamed with numerical suffixes. T1 must be filtered to keep only rows with magnitude brighter than 22.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='select MAG < 22' in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=dups suffix2=_2 out=filtered_T1_inner.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '22'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG < 22\n\nUsage: select <expr>\n    (Unused arguments: '<' '22'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T_MAIN against T_SUPP. T_SUPP coordinates are FK4 B1950. Convert T_SUPP to ICRS J2000 before matching T_MAIN (1 arcsec tolerance).",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits icmd2='addskycoords fk4 icrs RA_B1950 DEC_B1950 RA DEC' matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=T_SUPP_fk4_convert.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join two tables on exact ID. Output columns ID, MAG_1, MAG_2. Filter the output to select MAG_1 > 10.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID fixcols=dups suffix1=_1 suffix2=_2 ocmd='keepcols ID MAG_1 MAG_2; select MAG_1 > 10' out=mag_filtered_subset.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'MAG_1' 'MAG_2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols ID MAG_1 MAG_2\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'MAG_1' 'MAG_2'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match A.fits and B.fits using position AND proper motion total magnitude (sky+1d). A only includes sources with PM > 5 mas/yr.",
        "response": "stilts tmatch2 in1=A.fits icmd1='addcol PM_TOT hypot(PMRA, PMDEC); select PM_TOT > 5' in2=B.fits matcher=sky+1d params='2 10' values1='RA DEC PM_TOT' values2='RA DEC PM_TOT' out=high_pm_combined.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PMDEC)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol PM_TOT hypot(PMRA, PMDEC)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'PMDEC)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Find the best match (best2) for T2 from T1. T1 is a simulated sky catalog (:skysim:10000). Use best match.",
        "response": "stilts tmatch2 in1=:skysim:10000 in2=T2.fits matcher=sky params=5 values1='ra dec' values2='RA DEC' find=best2 out=simulated_best2_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 is remote URL. T2 needs conversion of string column 'DATE' to MJD before matching on MJD (0.001 tolerance).",
        "response": "stilts tmatch2 in1=http://remote.org/T1.fits in2=T2.fits icmd2='replacecol MJD isoToMjd(DATE)' matcher=1d params=0.001 values1=MJD values2=MJD out=remote_time_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on X, Y, Z coordinates (3D) where X, Y, Z are calculated using a rotation function.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd1='replacecol X cosDeg(45)*X - sinDeg(45)*Y' icmd1='replacecol Y sinDeg(45)*X + cosDeg(45)*Y' matcher=3d params=1 values1='X Y Z' values2='X Y Z' out=rotated_3d_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'sinDeg(45)*Y'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: replacecol X cosDeg(45)*X - sinDeg(45)*Y\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '-' 'sinDeg(45)*Y'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Join T_A and T_B. T_A has position in Ecliptic coordinates (ELON, ELAT). Convert T_A to ICRS J2000 before a 1 arcsec sky match.",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='addskycoords ecliptic icrs ELON ELAT RA DEC' in2=T_B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=ecl_to_icrs_join_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables using Cartesian 2D coordinates (X, Y) with per-object errors combined in quadrature (2d_err_q). Scale factor 3.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=2d_err_q params=3 values1='X Y ERR' values2='X Y ERR' out=2d_quadrature_scaled_3.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all pairs (all) between T1 and T2 (sky 1 arcsec). Output the separation in arcseconds in column 'SeparationArcsec'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=all scorecol=SeparationArcsec out=all_pairs_arcsec.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_B has an array column 'FLUX_VEC'. Calculate the median flux and match on that value (1d matcher, 0.05 tolerance).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits icmd2='addcol MEDIAN_FLUX median(FLUX_VEC)' matcher=1d params=0.05 values1=MAG values2=MEDIAN_FLUX out=array_median_1d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1.fits and T2.fits exactly on ID, but only return rows present in T1 that have no match in T2.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID join=1not2 out=T1_unmatched.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match survey_A against survey_B within 5 arcsec. Before matching, convert survey_A coordinates from Galactic (GLON, GLAT) to ICRS.",
        "response": "stilts tmatch2 in1=survey_A.fits icmd1='addskycoords galactic icrs GLON GLAT RA DEC' in2=survey_B.fits matcher=sky params=5 values1='RA DEC' values2='RA DEC' out=gal_to_icrs_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_main (all rows included) and T_aux (matched rows only). Match on sky position (1 arcsec) and find the single best match from T_aux for each T_main row.",
        "response": "stilts tmatch2 in1=T_main.fits in2=T_aux.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best1 join=all1 out=left_outer_best1.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 on a 1D magnitude (MAG) within a 0.05 tolerance. T2 is a Parquet file.",
        "response": "stilts tmatch2 in1=T1.fits ifmt2=parquet in2=T2.parquet matcher=1d params=0.05 values1=MAG values2=MAG out=parquet_1d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find matches between A.fits and B.fits using Cartesian 4D coordinates (X, Y, Z, T) within 10 units.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=4d params=10 values1='X Y Z T' values2='X Y Z T' out=cartesian_4d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T_A and T_B using symmetric best match (find=best). T_B errors are in microarcseconds (uas); convert them to degrees before matching using skyerr.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits icmd2='addcol E_DEG E_UAS/3600000000.0' matcher=skyerr params=1 values1='RA DEC E_DEG' values2='RA DEC E_DEG' find=best out=uas_to_deg_best.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match catalogue A and B. A contains parallax (PLX). Calculate distance modulus DM from PLX in A and match on DM only (1D, 0.5 tolerance).",
        "response": "stilts tmatch2 in1=A.fits icmd1='addcol DM modulusToDistance(1000./PLX)' in2=B.fits matcher=1d params=0.5 values1=DM values2=DM out=dm_only_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2 using a full outer join (1or2). T1 uses columns X1, Y1. T2 uses X2, Y2. Columns should be explicitly suffixed '_1' and '_2'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=2d params=5 values1='X1 Y1' values2='X2 Y2' join=1or2 fixcols=all suffix1=_1 suffix2=_2 out=full_outer_explicit_suffix.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_ref against T_sup. T_sup positions are in FK4 B1950. Convert T_sup positions to ICRS J2000 before matching.",
        "response": "stilts tmatch2 in1=T_ref.fits in2=T_sup.fits icmd2='addskycoords fk4 icrs RA_B1950 DEC_B1950 RA DEC' matcher=sky params=3 values1='RA DEC' values2='RA DEC' out=fk4_preproc_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using position and proper motion (sky+2d_anisotropic). Tolerances: 1 arcsec, 5 mas/yr (PMRA), 15 mas/yr (PMDEC).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky+2d_anisotropic params='1 5 15' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' out=pos_pm_anisotropic_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits exactly on ID. Filter A to only include rows where Z > 1.0. Output to standard output and count the rows.",
        "response": "stilts tmatch2 in1=A.fits icmd1='select Z > 1.0' in2=B.fits matcher=exact values1=ID values2=ID omode=count",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '1.0'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Z > 1.0\n\nUsage: select <expr>\n    (Unused arguments: '>' '1.0'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T1 and T2 using Cartesian 2D coordinates (X, Y) within a cuboid tolerance of 2 units in X and 20 units in Y.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=2d_cuboid params='2 20' values1='X Y' values2='X Y' out=aniso_cuboid_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_A and T_B. T_A coordinates are array values 'POS_VEC'. Explode them to RA, DEC before matching B.",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='explodecols POS_VEC; colmeta -name RA POS_VEC_0; colmeta -name DEC POS_VEC_1' in2=T_B.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' out=exploded_coords_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits using position error quadrature (skyerr_q). A error (E_A) is in arcminutes; convert to arcseconds before matching.",
        "response": "stilts tmatch2 in1=A.fits icmd1='replacecol E_A E_A*60' in2=B.fits matcher=skyerr_q params=1 values1='RA DEC E_A' values2='RA DEC E_B' out=arcmin_error_quad_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all matches (find=all) between T1 and T2 (1 arcsec sky). After matching, calculate the mean of magnitudes (MAG_AVG) and sort the result by separation descending.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=all fixcols=dups suffix1=_1 suffix2=_2 scorecol=Sep ocmd='addcol MAG_AVG (MAG_1+MAG_2)/2; sort -down Sep' out=all_pairs_avg_mag_sorted.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on time (MJD). T1 only includes the first 1000 rows. T2 time values are string ISO dates; convert them to MJD before matching.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='head 1000' in2=T2.fits icmd2='replacecol MJD isoToMjd(TIME_STR)' matcher=1d params=0.01 values1=MJD values2=MJD out=head_string_time_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using spherical polar coordinates (sky3d). T1 radial distance is derived from redshift Z (using zToDist function). Tolerance 5 Mpc.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='addcol DIST_M zToDist(Z)' in2=T2.fits matcher=sky3d params=5 values1='RA DEC DIST_M' values2='RA DEC DIST_M' out=redshift_3d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join A.fits and B.fits. A rows should always be included (left outer join). Rename duplicate columns using full suffix notation: '_A' and '_B'.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID join=all1 fixcols=all suffix1=_A suffix2=_B out=left_outer_full_suffixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_ref against T_sup. T_sup positions are defined by elliptical errors (skyellipse). T_ref is assumed to be a point source (use 0 for radii).",
        "response": "stilts tmatch2 in1=T_ref.fits in2=T_sup.fits matcher=skyellipse params=1 values1='RA DEC 0 0 0' values2='RA DEC A B PA' out=point_vs_ellipse_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in cat2.fits that are NOT matched in cat1.fits (join=2not1). Use a Cartesian 2D match (5 units).",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=2d params=5 values1='X Y' values2='X Y' join=2not1 out=cat2_anti_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 column 'MAG' has -999 for nulls. Replace -999 with null in T1 before matching on magnitude (1d, 0.1 tolerance).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='badval -999 MAG' in2=T2.fits matcher=1d params=0.1 values1=MAG values2=MAG out=badval_match_1d.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits using elliptical error regions defined by Gaia correlation terms (skycorr). Output statistical summary only.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=skycorr params=1 values1='RA DEC RA_ERR DEC_ERR RA_DEC_CORR' values2='RA DEC RA_ERR DEC_ERR RA_DEC_CORR' omode=stats",
        "chat.jar": "failed",
        "error": "WARNING: Class skycorr not found\nError: Unknown matcher element: skycorr\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Join T_main and T_aux exactly on ID. T_aux columns should be prefixed '_AUX' to resolve duplication.",
        "response": "stilts tmatch2 in1=T_main.fits in2=T_aux.fits matcher=exact values1=ID values2=ID fixcols=dups suffix2=_AUX out=exact_match_prefixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on magnitude and redshift (1d+1d). Tolerances: 0.1 mag, 0.005 redshift.",
        "response": "stilts tmatch2 in1=P1.fits in2=P2.fits matcher=1d+1d params='0.1 0.005' values1='MAG Z' values2='MAG Z' out=mag_z_combined.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 contains proper motions in degrees/year. Convert T2 PMRA and PMDEC to mas/yr before matching on space position (sky 1 arcsec).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='replacecol PMRA PMRA*3600000; replacecol PMDEC PMDEC*3600000' matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=pm_converted_simple_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A against itself to find all pairs within 2 arcsec. Exclude matches with identical row indices (i.e., self-matches).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_A.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' find=all ocmd='select ID_1 < ID_2' out=internal_pairs_unique.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' 'ID_2'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select ID_1 < ID_2\n\nUsage: select <expr>\n    (Unused arguments: '<' 'ID_2'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T1 and T2. T1 is a simulated sky catalog (:skysim:1e6). Use best match for T2 from T1 (best2).",
        "response": "stilts tmatch2 in1=:skysim:1e6 in2=T2.fits matcher=sky params=2 values1='ra dec' values2='RA DEC' find=best2 out=simulated_best2_match_3.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits. A is filtered to keep only rows with 'FLAG' = true. Output separation score 'DistDeg' in degrees.",
        "response": "stilts tmatch2 in1=A.fits icmd1='select FLAG' in2=B.fits matcher=sky params=360 values1='RA DEC' values2='RA DEC' scorecol=DistDeg out=filtered_scored_deg.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_A Cartesian errors are in ERR_X, ERR_Y. Match using 2D anisotropic errors, scaling the resulting match distance by 2.0.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=2d_err_anisotropic params='2.0' values1='X Y ERR_X ERR_Y' values2='X Y ERR_X ERR_Y' out=aniso_error_scaled.fits",
        "chat.jar": "failed",
        "error": "WARNING: Class 2d_err_anisotropic not found\nError: Unknown matcher element: 2d_err_anisotropic\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Join T1 and T2. T1 contains magnitude in log scale. T2 contains linear flux (FLUX). Convert T2 to log magnitude before matching on flux (1D, 0.1 tolerance).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='addcol LOG_MAG log10(FLUX)' matcher=1d params=0.1 values1=LOG_MAG values2=LOG_MAG out=log_mag_1d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits. Only include rows present in A or B, but not both (symmetric difference). Match exactly on ID.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID join=1xor2 out=exact_symmetric_difference.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 (2 arcsec sky). After match, include a calculated column 'MJD_DIFF' representing the time difference between the two sources.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' fixcols=dups suffix1=_1 suffix2=_2 ocmd='addcol MJD_DIFF abs(MJD_1 - MJD_2)' out=time_diff_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MJD_2)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol MJD_DIFF abs(MJD_1 - MJD_2)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'MJD_2)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T_ref and T_sup. T_ref coordinates are in sexagesimal strings (RA, DEC). Convert T_ref to degrees before matching T_sup.",
        "response": "stilts tmatch2 in1=T_ref.fits icmd1='addcol RA_DEG hmsToDegrees(RA); addcol DEC_DEG dmsToDegrees(DEC)' in2=T_sup.fits matcher=sky params=1 values1='RA_DEG DEC_DEG' values2='RA DEC' out=sexagesimal_preproc_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join two tables on a combination of 2D Cartesian position (X, Y) and 1D magnitude (MAG). Tolerances 5 units and 0.2 mag.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=2d+1d params='5 0.2' values1='X Y MAG' values2='X Y MAG' out=cartesian_mag_combined.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A and B. A contains an array column 'ERR_VEC'. Explode ERR_VEC to ERR_RA and ERR_DEC, and use skyerr_q matcher.",
        "response": "stilts tmatch2 in1=A.fits icmd1='explodecols ERR_VEC; colmeta -name E_RA ERR_VEC_0; colmeta -name E_DEC ERR_VEC_1' in2=B.fits matcher=skyerr_q params=1 values1='RA DEC E_RA' values2='RA DEC E_B' out=exploded_error_skyerrq.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 should only contribute its single best match (best2). Use parallel execution.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best2 runner=parallel out=best2_parallel_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on Galactic position (GLON, GLAT). T2 coordinates are in radians. Convert T2 inline using the values parameter.",
        "response": "stilts tmatch2 in1=C1.fits in2=C2.fits matcher=sky params=5 values1='GLON GLAT' values2='radiansToDegrees(GLON_RAD) radiansToDegrees(GLAT_RAD)' out=inline_galactic_rad.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_A and T_B. A is VOTable, B is FITS. Find all matches (all). Output total number of columns and rows (count).",
        "response": "stilts tmatch2 in1=T_A.vot in2=T_B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=all omode=count",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 exactly on the composite key of integer ID and string NAME.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1='concat(toString(ID), NAME)' values2='concat(toString(ID), NAME)' out=exact_composite_key_2.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values1: Wrong number of words - wanted 1, got 2\nUsage: values1=<expr-list>\n\n"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits using position. Filter B first to only include sources with quality flag 'Q_FLAG' > 0.9.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits icmd2='select Q_FLAG > 0.9' matcher=sky params=2 values1='RA DEC' values2='RA DEC' out=quality_filter_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0.9'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select Q_FLAG > 0.9\n\nUsage: select <expr>\n    (Unused arguments: '>' '0.9'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T_ref against T_sup. T_ref position errors (E_POS) are given in arcminutes. Convert to degrees inline before skyerr matching.",
        "response": "stilts tmatch2 in1=T_ref.fits in2=T_sup.fits matcher=skyerr params=1 values1='RA DEC E_POS/60' values2='RA DEC E_POS/3600.0' out=inline_arcmin_error.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2. T1 has columns MAG_R, MAG_G. Add column COLOR = MAG_R - MAG_G in T1 before matching T2 on COLOR (1D, 0.1 tolerance).",
        "response": "stilts tmatch2 in1=T1.fits icmd1='addcol COLOR MAG_R - MAG_G' in2=T2.fits matcher=1d params=0.1 values1=COLOR values2=COLOR out=color_calculated_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '-' 'MAG_G'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol COLOR MAG_R - MAG_G\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '-' 'MAG_G'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match two tables using Cartesian 3D anisotropic coordinates (X, Y, Z) with tolerances 1, 10, and 100 units.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=3d_anisotropic params='1 10 100' values1='X Y Z' values2='X Y Z' out=anisotropic_3d_3.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 (1 arcsec sky). T2 has a time column EPOCH in Julian Day (JD). Convert T2 to MJD before using it in a calculated output column.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='addcol MJD jdToMjd(EPOCH)' matcher=sky params=1 values1='RA DEC' values2='RA DEC' fixcols=dups suffix2=_2 ocmd='addcol T2_MJD MJD_2' out=t2_jd_converted_output.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T_B that are NOT matched in T_A (exact ID match). T_A columns should be suffixed '_A', T_B columns suffixed '_B'.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=exact values1=ID values2=ID join=2not1 fixcols=all suffix1=_A suffix2=_B out=T_B_only_suffixed.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables using position and velocity (sky+2d) where velocity is determined by proper motion and parallax (astromUVW function).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky+2d params='1 5 5' values1='RA DEC astromUVW(array(RA, DEC, PLX, PMRA, PMDEC, RV)) astromUVW(array(RA, DEC, PLX, PMRA, PMDEC, RV))[1]' values2='RA DEC astromUVW(array(RA, DEC, PLX, PMRA, PMDEC, RV)) astromUVW(array(RA, DEC, PLX, PMRA, PMDEC, RV))[1]' out=astrom_uvw_match.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter params: Wrong number of words - wanted 2, got 3\nUsage: params=<match-params>\n\n"
    },
    {
        "prompt": "Join A.fits and B.fits with a left outer join (all A rows). T_B has an array column 'FLUX_VEC'. Discard this column before joining.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits icmd2='delcols FLUX_VEC' matcher=exact values1=ID values2=ID join=all1 out=array_discarded_left_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 on MJD. T2 only considers rows from the first half of the table (rowrange 1 +$nrow/2).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='rowrange 1 +$nrow/2' matcher=1d params=0.01 values1=MJD values2=MJD out=T2_half_match.fits",
        "chat.jar": "failed",
        "error": "Error: Arg \"iStr\" not <int> or +<int>\n\nCommand was: rowrange 1 +$nrow/2\n\nUsage: rowrange <first> <last>|+<count>\n    (Arg \"iStr\" not <int> or +<int>)\n"
    },
    {
        "prompt": "Crossmatch A and B using sky position (1 arcsec). Output only the separation score 'SepDeg' (degrees) and the row indices ($0) from both tables.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky params=360 values1='RA DEC' values2='RA DEC' scorecol=SepDeg ocmd='keepcols $0_1 $0_2 SepDeg' out=minimal_index_score.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '$0_2' 'SepDeg'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: keepcols $0_1 $0_2 SepDeg\n\nUsage: keepcols <colid-list>\n    (Unused arguments: '$0_2' 'SepDeg'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T_A and T_B exactly on ID. Filter the resulting matched table to keep only rows where magnitude MAG_A < 15.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=exact values1=ID values2=ID fixcols=dups suffix1=_A ocmd='select MAG_A < 15' out=matched_magnitude_filter.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG_A < 15\n\nUsage: select <expr>\n    (Unused arguments: '<' '15'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match T1 and T2 using the symmetrical best match (find=best). T2 coordinates are in degrees, T1 positions are in Ecliptic. Convert T1 to ICRS first.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='addskycoords ecliptic icrs ELON ELAT RA DEC' in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best out=ecliptic_best_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_main and T_aux. T_aux is a simulated clifford attractor (:attractor:1e4,clifford). Match on X, Y coordinates (2D, 1 unit tolerance).",
        "response": "stilts tmatch2 in1=T_main.fits in2=:attractor:1e4,clifford matcher=2d params=1 values1='X Y' values2='x y' out=attractor_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using position. Output result in IPAC format.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' ofmt=ipac out=ipac_match.tbl",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits. A is large; enable parallel runner. Match on exact ID.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID runner=parallel out=parallel_exact_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T1 that are unmatched in T2 (anti-join). T1 coordinate RA is in hours. Convert RA to degrees inline.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='hoursToDegrees(RA_H) DEC' values2='RA DEC' join=1not2 out=inline_hours_anti_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 (1 arcsec sky). T1 coordinates (RA_B, DEC_B) are in FK4 B1950. Convert T1 to ICRS J2000 coordinates before matching.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='addskycoords fk4 icrs RA_B DEC_B RA DEC' in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=fk4_preproc_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T_A and T_B. T_B positions (ELON, ELAT) are Ecliptic. Convert T_B to Galactic (GLON, GLAT) and match T_A on Galactic coordinates (5 arcsec).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits icmd2='addskycoords ecliptic galactic ELON ELAT GLON GLAT' matcher=sky params=5 values1='GLON GLAT' values2='GLON GLAT' out=ecl_to_gal_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join primary.fits and aux.fits. Primary coordinates are in radians (RA_R, DEC_R). Convert to degrees inline for a symmetric best match (best) within 2 arcsec.",
        "response": "stilts tmatch2 in1=primary.fits in2=aux.fits matcher=sky params=2 values1='radiansToDegrees(RA_R) radiansToDegrees(DEC_R)' values2='RA DEC' find=best out=inline_rad_best_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 (exact ID). T2 contains a column 'NAME' that needs to be truncated to the first 15 characters before matching T1's truncated name.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='addcol SHORT_NAME substring(NAME, 0, 15)' in2=T2.fits icmd2='addcol SHORT_NAME substring(NAME, 0, 15)' matcher=exact values1=SHORT_NAME values2=SHORT_NAME out=truncated_name_match_2.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0,' '15)'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: addcol SHORT_NAME substring(NAME, 0, 15)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '0,' '15)'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Crossmatch A.fits and B.fits (10 arcsec sky). A coordinates are ICRS. B coordinates (GLON, GLAT) are Galactic. Convert B to ICRS using an expression.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=sky params=10 values1='RA DEC' values2='galToIcrs(GLON, GLAT) galToIcrs(GLON, GLAT)' out=inline_gal_match_2.fits",
        "chat.jar": "failed",
        "error": "Error: Bad value for parameter values2: Wrong number of words - wanted 2, got 4\nUsage: values2=<expr-list>\n\n"
    },
    {
        "prompt": "Match T_A and T_B using position error quadrature (skyerr_q). Input columns are RA, DEC, and POS_ERR.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=skyerr_q params=1 values1='RA DEC POS_ERR' values2='RA DEC POS_ERR' out=skyerr_q_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join tables D1 and D2 using 2D Cartesian coordinates (X, Y) where the matching radius is the quadrature sum of their individual ERR columns (2d_err_q).",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=2d_err_q params=1 values1='X Y ERR' values2='X Y ERR' out=cartesian_2d_err_q_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using 3D Cartesian coordinates (X, Y, Z). The match radius is the sum of the distance errors (E_D) of both objects (3d_err).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=3d_err params=1 values1='X Y Z E_D' values2='X Y Z E_D' out=cartesian_3d_err_sum.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match Survey A and Survey B using elliptical positional errors (skyellipse) with 10 arcsec scale. A has major/minor axes A_MAJ, B_MIN and PA.",
        "response": "stilts tmatch2 in1=Survey_A.fits in2=Survey_B.fits matcher=skyellipse params=10 values1='RA DEC A_MAJ B_MIN PA' values2='RA DEC A_MAJ B_MIN PA' out=elliptical_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_REF and T_SUPP using 2D positional errors (2d_err). T_SUPP errors (E_P) are given in arcminutes; convert to degrees before matching.",
        "response": "stilts tmatch2 in1=T_REF.fits in2=T_SUPP.fits icmd2='replacecol E_P E_P/60.0' matcher=2d_err params=1 values1='RA DEC E_D' values2='RA DEC E_P' out=arcmin_2d_err_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 using sky position (1 arcsec) AND proper motion in RA (PMRA) within 2 mas/yr (sky+1d).",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky+1d params='1 2' values1='RA DEC PMRA' values2='RA DEC PMRA' out=pos_pmra_combined.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits on magnitude and color (MAG_R, B_V_COLOR). Tolerances: 0.05 mag and 0.1 color. Use anisotropic matching (2d_anisotropic).",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=2d_anisotropic params='0.05 0.1' values1='MAG_R B_V_COLOR' values2='MAG_R B_V_COLOR' out=aniso_mag_color_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T_A and T_B using two 1D criteria: 'FLUX' within 10 units AND 'TIME' within 0.01 units (1d+1d).",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=1d+1d params='10 0.01' values1='FLUX TIME' values2='FLUX TIME' out=flux_time_combined.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch Survey X and Y using position, PMRA, and PMDEC (sky+2d). Tolerances 3 arcsec, 8 mas/yr (anisotropic).",
        "response": "stilts tmatch2 in1=Survey_X.fits in2=Survey_Y.fits matcher=sky+2d_anisotropic params='3 8 8' values1='RA DEC PMRA PMDEC' values2='RA DEC PMRA PMDEC' out=sky_pm_aniso_match_3.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two tables on X, Y, Z, and Time (4D). Use a strict, multiplicative match (4d*). Tolerance 1.0.",
        "response": "stilts tmatch2 in1=D1.fits in2=D2.fits matcher=4d params=1.0 values1='X Y Z T' values2='X Y Z T' out=strict_4d_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find rows in T_A that are present in T_A OR T_B, but NOT in T_A AND T_B (symmetric difference, 1xor2). Exact match on ID.",
        "response": "stilts tmatch2 in1=T_A.fits in2=T_B.fits matcher=exact values1=ID values2=ID join=1xor2 out=exact_symmetric_difference_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch cat1.fits and cat2.fits (2 arcsec sky). Include all rows from cat2, and only matched rows from cat1 (Inner T1, Outer T2).",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=all2 join1=match out=T1_inner_T2_outer.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Join T_MAIN and T_SUPP (exact ID). T_MAIN columns suffixed '_M'. Only include rows from T_MAIN that are unmatched in T_SUPP (1not2).",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=exact values1=ID values2=ID join=1not2 fixcols=all suffix1=_M out=T_MAIN_anti_join.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.fits and B.fits (exact ID). Include all rows from B (right outer join), and rename duplicate columns using automatic numeric suffixing.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID join=all2 fixcols=dups out=right_outer_numbered.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Find all rows in T1 that are NOT matched in T2 (sky 5 arcsec). T2 must first be filtered to keep only rows where magnitude MAG > 20.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='select MAG > 20' matcher=sky params=5 values1='RA DEC' values2='RA DEC' join=1not2 out=T1_unmatched_faint_T2.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was: select MAG > 20\n\nUsage: select <expr>\n    (Unused arguments: '>' '20'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Crossmatch T1 and T2 (exact ID). T1 contains a column MAG_ERR with nulls marked by 99.0. Replace 99.0 with true nulls in T1 before matching.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='badval 99.0 MAG_ERR' in2=T2.fits matcher=exact values1=ID values2=ID out=null_cleaned_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join A.fits and B.fits. A is a huge catalog; use the rowrange filter on A to process only rows 10,000 to 20,000.",
        "response": "stilts tmatch2 in1=A.fits icmd1='rowrange 10000 20000' in2=B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=subset_rowrange_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_REF and T_SUPP. T_SUPP contains an array column 'FLUX_VEC'. Calculate the standard deviation of this array and use the result (STDEV_F) for a combined match (exact ID + 1D STDEV_F).",
        "response": "stilts tmatch2 in1=T_REF.fits in2=T_SUPP.fits icmd2='addcol STDEV_F stdev(FLUX_VEC)' matcher=exact+1d params='0' values1='ID STDEV_F' values2='ID STDEV_F' out=array_stdev_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2 exactly on ID. After matching, drop all columns whose name contains 'ERROR'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=exact values1=ID values2=ID ocmd='delcols *ERROR*' out=error_cols_dropped.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_A and T_B. T_A should only contain every 5th row before matching (every 5).",
        "response": "stilts tmatch2 in1=T_A.fits icmd1='every 5' in2=T_B.fits matcher=exact values1=ID values2=ID out=every_5th_row_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join T1 and T2 (sky 1 arcsec). Output table should only contain T1's RA, DEC, ID and the separation distance, named 'Sep_arcsec' in arcseconds.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' scorecol=Separation ocmd='replacecol Sep_arcsec Separation*3600; keepcols ID RA DEC Sep_arcsec' out=minimal_scored_arcsec.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'RA' 'DEC' 'Sep_arcsec'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was:  keepcols ID RA DEC Sep_arcsec\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'RA' 'DEC' 'Sep_arcsec'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Match A and B (exact ID). A columns use numerical suffix '_1'. B columns use '_2'. Then, keep only the IDs and a new column 'Sum_A_B' = A.VAL + B.VAL.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID fixcols=all suffix1=_1 suffix2=_2 ocmd='addcol Sum_A_B VAL_1+VAL_2; keepcols ID_1 ID_2 Sum_A_B' out=summed_values_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'ID_2' 'Sum_A_B'\n(Hint: arguments containing spaces must be quoted)\n\nCommand was:  keepcols ID_1 ID_2 Sum_A_B\n\nUsage: keepcols <colid-list>\n    (Unused arguments: 'ID_2' 'Sum_A_B'\n(Hint: arguments containing spaces must be quoted))\n"
    },
    {
        "prompt": "Crossmatch T_MAIN and T_SUPP (sky 3 arcsec). Find the best match for T_SUPP rows (best2). Include a column 'BestSep' containing the separation score.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=sky params=3 values1='RA DEC' values2='RA DEC' find=best2 scorecol=BestSep out=best2_scored_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T1 and T2 (exact ID). T2 only includes the first 100 rows. Output the table metadata only.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='head 100' matcher=exact values1=ID values2=ID omode=meta",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Join tables A and B (exact ID). After joining, add a column 'IS_GALAXY' which is true if the object name contains the string 'NGC'.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID fixcols=dups ocmd='addcol IS_GALAXY contains(NAME_1, \"NGC\")' out=galaxy_flag_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: addcol IS_GALAXY contains(NAME_1, \"NGC\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'NGC' ')')\n"
    },
    {
        "prompt": "Crossmatch T1 (FITS) and T2 (Parquet) exactly on ID.",
        "response": "stilts tmatch2 in1=T1.fits ifmt2=parquet in2=T2.parquet matcher=exact values1=ID values2=ID out=fits_parquet_exact.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match A.csv and B.csv (exact ID). A columns suffixed '_A', B columns '_B'. Output to ECSV format.",
        "response": "stilts tmatch2 ifmt=csv in1=A.csv in2=B.csv matcher=exact values1=ID values2=ID fixcols=all suffix1=_A suffix2=_B ofmt=ecsv out=csv_ecsv_match.ecsv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Join T_REF (FITS) and T_SUPP (IPAC table, T_SUPP.tbl) on sky position (1 arcsec).",
        "response": "stilts tmatch2 in1=T_REF.fits ifmt2=ipac in2=T_SUPP.tbl matcher=sky params=1 values1='RA DEC' values2='RA DEC' out=fits_ipac_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 is TST format, T2 is ASCII format. Match exactly on 'OBS_KEY'.",
        "response": "stilts tmatch2 ifmt1=tst in1=T1.tst ifmt2=ascii in2=T2.txt matcher=exact values1=OBS_KEY values2=OBS_KEY out=tst_ascii_exact.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match targets.fits against ref.fits. Targets coordinates are in sexagesimal RA_HMS, DEC_DMS strings. Match ref (RA, DEC degrees) with 2 arcsec tolerance.",
        "response": "stilts tmatch2 in1=targets.fits in2=ref.fits matcher=sky params=2 values1='hmsToDegrees(RA_HMS) dmsToDegrees(DEC_DMS)' values2='RA DEC' out=sexagesimal_match_3.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match two extremely large tables T_BIG1 and T_BIG2 (sky 1 arcsec). Use parallel execution.",
        "response": "stilts tmatch2 in1=T_BIG1.fits in2=T_BIG2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' runner=parallel out=parallel_sky_match_2.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A and B (exact ID). Tune the match using maxrec=1000 to limit the processing size for safety.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID maxrec=1000 out=tuned_maxrec_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: maxrec=1000\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n"
    },
    {
        "prompt": "Join T1 and T2 using a Cartesian 2D match (X, Y). Use tuning=8 to adjust the bin factor for performance.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits matcher=2d params=10 values1='X Y' values2='X Y' tuning=8 out=tuned_cartesian_match.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Match T_REF against T2. Use a combined match criteria: exact match on string 'FIELD' AND anisotropic match on (X, Y) coordinates (2d_cuboid, 5 units in X, 1 unit in Y).",
        "response": "stilts tmatch2 in1=T_REF.fits in2=T2.fits matcher=exact+2d_cuboid params='5 1' values1='FIELD X Y' values2='FIELD X Y' out=field_cuboid_combined.fits",
        "chat.jar": "executed successfully"
    },
    {
        "prompt": "Crossmatch A and B. A contains velocity components in an array 'VEL_XYZ'. Explode the array and match on VX and VY only (2d anisotropic).",
        "response": "stilts tmatch2 in1=A.fits icmd1='explodecols VEL_XYZ; colmeta -name VX VEL_XYZ_0; colmeta -name VY VEL_XYZ_1' in2=B.fits matcher=2d_anisotropic params='1 1' values1='VX VY' values2='VX VY' out=exploded_velocity_match.fits",
        "chat.jar": "executed successfully"
    }
]