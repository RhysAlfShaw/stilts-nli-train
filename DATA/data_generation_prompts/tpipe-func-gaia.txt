I want you to create 100 example prompt and reponses for finetunning a langauge model to generate stilts commands.

Return the results as a list of json of the following format:
[
    {
    "prompt": "prompt goes in here...",
    "response": "response goes here..."
    },
    ..
]

The command I want you to generate examples for is the tpipe command. The documentation of this is as follows:

tpipe: Performs pipeline processing on a table

tpipe performs all kinds of general purpose manipulations which take one table as input. It is extremely flexible, and can do the following things amongst others:

    calculate statistics
    display metadata
    select rows in various ways, including algebraically
    define new columns as algebraic functions of old ones
    delete or rearrange columns
    sort rows
    convert between table formats

and combine these operations. You can think of it as a supercharged table copying tool.
The basic operation of tpipe is that it reads an input table, performs zero or more processing steps on it, and then does something with the output. There are therefore three classes of things you need to tell it when it runs:

Input table location
    Specified by the in, ifmt and istream parameters.

Processing steps
    Either provide a string giving steps as the value of one or more cmd parameters, or the name of a file containing the steps using the script parameter. The steps that you can perform are described in Section 6.1.

Output table destination
    What happens to the output table is determined by the value of the omode parameter. By default, omode=out, in which case the table is written to a new table file in a format determined by ofmt. However, you can do other things with the result such as calculate the per-column statistics (omode=stats), view only the table and column metadata (omode=meta), display it directly in TOPCAT (omode=topcat) etc.

Examples of it being used.

Here are some examples of tpipe in use with explanations of what's going on. For simplicity these examples assume that you have the stilts script installed and are using a Unix-like shell; see Section 3 for an explanation of how to invoke the command if you just have the Java classes.

stilts tpipe cat.fits
Writes a FITS table to standard output in human-readable form. Since no mode specifier is given, omode=out is assumed, and output is to standard output in text format.

stilts tpipe cmd='head 5' cat.fits.gz
Does the same as the last example, but with one processing step: only the first five rows of the table are output. In this case, the input file is compressed using gzip - this is automatically detected.

stilts tpipe ifmt=csv xxx.csv \
             cmd='keepcols "index ra dec"' \
             omode=out ofmt=fits xxx.fits
Reads from a comma-separated values file, writes to a FITS file, and discards all columns in the input table apart from INDEX, RA and DEC. Note the quoting in the cmd argument: the outer quotes are so that the argument of the cmd parameter itself (keepcols "index ra dec") is not split up by spaces (to protect it from the shell), and the inner quotes are to keep the colid-list argument of the keepcols command together.

stilts tpipe ifmt=votable \
             cmd='addcol IV_SUM "(IMAG+VMAG)"' \
             cmd='addcol IV_DIFF "(IMAG-VMAG)"' \
             cmd='delcols "IMAG VMAG"' \
             omode=out ofmt=votable \
       < tab1.vot \
       > tab2.vot

Replaces two columns by their sum and difference in a VOTable. Since neither the in nor out parameters have been specified, the input and output are actually byte streams on standard input and standard output of the tpipe command in this case. The processing steps first add a column representing the sum, then add a column representing the difference, then delete the original columns.

stilts tpipe cmd='addskycoords -inunit sex fk5 gal \
                               RA2000 DEC2000 GAL_LONG GAL_LAT' \
             6dfgs.fits 6dfgs+gal.fits
Adds columns giving galactic coordinates to a table. Both input and output tables are FITS files. The galactic coordinates, stored in new columns named GAL_LONG and GAL_LAT, are calculated from FK5 J2000.0 coordinates given in the existing columns named RA2000 and DEC2000. The input (FK5) coordinates are represented as sexagesimal strings (hh:mm:ss, dd:mm:ss), and the output ones are numeric degrees.

stilts -disk tpipe 2dfgrs_ngp.fits \
                   cmd='keepcols "SEQNUM AREA ECCENT"' \
                   cmd='sort -down AREA' \
                   cmd='head 20'
Displays selected columns for the 20 rows with largest values in the AREA column of a FITS table. First the columns of interest are selected, then the rows are sorted into descending order by the value of the AREA column, then the first 20 rows of the resulting table are selected, and the result is written to standard output. Since a sort is being performed here, it's not possible to do all the processing a row at a time, since all the AREA values must be available for comparison during the sort. Two things are done here to accommodate this fact: first the column selection is done before the sort, so that it's only a 3-column table which needs to be available for random access, reducing the temporary storage required. Secondly the -disk flag is supplied, which means that temporary disk files rather than memory will be used for caching table data.

stilts tpipe 2dfgrs_ngp.fits \
             cmd='keepcols "SEQNUM AREA ECCENT"' \
             cmd='sorthead -down 20 AREA'
Has exactly the same effect as the previous example. However, the algorithm used by the sorthead filter is in most cases faster and cheaper on memory (only 20 rows ever have to be stored in this case), so this is generally a better approach than combining the sort and head filters.

stilts tpipe omode=meta cmd=@commands.lis http://archive.org/data/survey.vot.Z
Outputs column and table metadata about a table. In this case the table is a compressed VOTable at the end of a URL. Processing is performed according to the commands contained in a file named "commands.lis" in the current directory.

stilts tpipe in=survey.fits 
             cmd='select "skyDistanceDegrees(hmsToDegrees(RA),dmsToDegrees(DEC), \
                                             hmsToDegrees(2,28,11),dmsToDegrees(-6,49,45)) \
                          < 5./60."' \
             omode=count
Counts the number of rows within a given 5 arcmin cone of sky in a FITS table. The skyDistanceDegrees function is an expression which calculates the distance between the position specified in a row (as given by its RA and DEC columns) and a given point on the sky (here, 02:28:11,-06:49:45). Since skyDistanceDegrees's arguments and return value are in decimal degrees, some conversions are required: the RA and DEC columns are sexagesimal strings which are converted using the hmsToDegrees and dmsToDegrees functions respectively. Different versions of these functions (ones which take numeric arguments) are used to convert the coordinates of the fixed point to degrees. The result is compared to a constant expression representing 5 arcminutes in degrees. Any rows of the input table for which this comparison is true are included in the output. An alternative function, skyDistanceRadians which works in radians, is also available. These functions and constants used here are described in detail in Section 10.7.5 and Section 10.7.6.

stilts tpipe ifmt=ascii survey.txt \
             cmd='select "OBJTYPE == 3 && Z > 0.15"' \
             cmd='keepcols "IMAG JMAG KMAG"' \
             omode=stats
Calculate statistics on the I, J and K magnitudes of selected objects from a catalogue. Only those rows with the given OBJTYPE and in the given Z range are included. The minimum, maximum, mean, standard deviation etc of the IMAG, JMAG and KMAG columns will be written to standard output.

stilts -classpath lib/drivers/mysql-connector-java.jar \
       -Djdbc.drivers=com.mysql.jdbc.Driver \
       tpipe in=x.fits cmd="explodeall" omode=tosql \
             protocol=mysql host=localhost db=ASTRO1 dbtable=TABLEX \
             write=dropcreate user=mbt
Writes a FITS table to an SQL table, converting array-valued columns to scalar ones. To make the SQL connection work properly, the classpath is augmented to include the path of the MySQL JDBC driver and the jdbc.drivers system property is set to the JDBC driver class name. The output will be written as a new table named TABLEX in the MySQL database named ASTRO1 on a MySQL server on the local host. The password, if required, will be prompted for, as would any of the other required parameters if they had not been given on the command line. Any existing table in ASTRO1 with the name TABLEX is overwritten. The only processing done here is by the explodeall command, which takes any columns which have fixed-size array values and replaces them in the output with multiple scalar columns.

java -classpath stilts.jar:lib/drivers/mysql-connector-java.jar
     -Djdbc.drivers=com.mysql.jdbc.Driver \
     uk.ac.starlink.ttools.Stilts \
     tpipe in=x.fits \
           cmd=explodeall \
           omode=out \
           out="jdbc:mysql://localhost/ASTRO1?user=mbt#TABLEX"
This does exactly the same as the previous example, but achieves it in a slightly different way. In the first place, java is invoked directly with the necessary flags rather than getting the stilts script to do it. Note that you cannot use java's -jar flag in this case, because doing it like that would not permit access to the additional classes that contain the JDBC driver. In the second place we use omode=out rather than omode=tosql. For this we need to supply an out value which encodes the information about the SQL connection and table in a special URL-like format. As you can see, this is a bit arcane, which is why the omode=tosql mode can be a help.

stilts tpipe USNOB.FITS cmd='every 1000000' omode=stats
Calculates statistics on a selection of the rows in a catalogue, and writes the result to the terminal. In this example, every millionth row is sampled.

Usage
The usage of tpipe is

   stilts <stilts-flags> tpipe ifmt=<in-format> istream=true|false cmd=<cmds>
                               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui
                               out=<out-table> ofmt=<out-format>
                               [in=]<table>

If you don't have the stilts script installed, write "java -jar stilts.jar" instead of "stilts" - see Section 3. The available <stilts-flags> are listed in Section 2.1. For programmatic invocation, the Task class for this command is uk.ac.starlink.ttools.task.TablePipe.
Parameter values are assigned on the command line as explained in Section 2.3. They are as follows:


cmd = <cmds>       (ProcessingStep[])
    Specifies processing to be performed on the input table as specified by parameter in, before any other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
    Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ifmt = <in-format>       (String)
    Specifies the format of the input table as specified by parameter in. The known formats are listed in Section 5.1.1. This flag can be used if you know what format your table is in. If it has the special value (auto) (the default), then an attempt will be made to detect the format of the table automatically. This cannot always be done correctly however, in which case the program will exit with an error explaining which formats were attempted. This parameter is ignored for scheme-specified tables.
    [Default: (auto)]

in = <table>       (StarTable)
    The location of the input table. This may take one of the following forms:
    A filename.
    A URL.
    The special value "-", meaning standard input. In this case the input format must be given explicitly using the ifmt parameter. Note that not all formats can be streamed in this way.
    A scheme specification of the form :<scheme-name>:<scheme-args>.
    A system command line with either a "<" character at the start, or a "|" character at the end ("<syscmd" or "syscmd|"). This executes the given pipeline and reads from its standard output. This will probably only work on unix-like systems.
    In any case, compressed data in one of the supported compression formats (gzip, Unix compress or bzip2) will be decompressed transparently.

istream = true|false       (Boolean)
    If set true, the input table specified by the in parameter will be read as a stream. It is necessary to give the ifmt parameter in this case. Depending on the required operations and processing mode, this may cause the read to fail (sometimes it is necessary to read the table more than once). It is not normally necessary to set this flag; in most cases the data will be streamed automatically if that is the best thing to do. However it can sometimes result in less resource usage when processing large files in certain formats (such as VOTable). This parameter is ignored for scheme-specified tables.
    [Default: false]

ofmt = <out-format>       (String)
    Specifies the format in which the output table will be written (one of the ones in Section 5.1.2 - matching is case-insensitive and you can use just the first few letters). If it has the special value "(auto)" (the default), then the output filename will be examined to try to guess what sort of file is required usually by looking at the extension. If it's not obvious from the filename what output format is intended, an error will result.
    This parameter must only be given if omode has its default value of "out".

    [Default: (auto)]

omode = out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui       (ProcessingMode)
    The mode in which the result table will be output. The default mode is out, which means that the result will be written as a new table to disk or elsewhere, as determined by the out and ofmt parameters. However, there are other possibilities, which correspond to uses to which a table can be put other than outputting it, such as displaying metadata, calculating statistics, or populating a table in an SQL database. For some values of this parameter, additional parameters (<mode-args>) are required to determine the exact behaviour.
    Possible values are

    out
    meta
    stats
    count
    checksum
    cgi
    discard
    topcat
    samp
    plastic
    tosql
    gui
    Use the help=omode flag or see Section 6.4 for more information.
    [Default: out]

out = <out-table>       (TableConsumer)
    The location of the output table. This is usually a filename to write to. If it is equal to the special value "-" (the default) the output table will be written to standard output.
    This parameter must only be given if omode has its default value of "out".

    [Default: -]


The avalible processing filters that can be used by cmd are described in this bit of documentation.
Processing Filters
This section lists the filter commands which can be used for table pipeline processing, in conjunction with cmd- or script-type parameters.

You can string as many of these together as you like. On the command line, you can repeat the cmd (or icmd1, or ocmd...) parameter multiple times, or use one cmd parameter and separate different filter specifiers with semicolons (";"). The effect is the same.

It's important to note that each command in the sequence of processing steps acts on the table at that point in the sequence. Thus either of the two identical invocations:

   stilts tpipe cmd='delcols 1; delcols 1; delcols 1'
   stilts tpipe cmd='delcols 1' cmd='delcols 1' cmd='delcols 1'
has the same effect as
   stilts tpipe cmd='delcols "1 2 3"'
since in the first case the columns are shifted left after each one is deleted, so the table seen by each step has one fewer column than the one before. Note also the use of quotes in the latter of the examples above, which is necessary so that the <colid-list> of the delcols command is interpreted as one argument not three separate words.
The available filters are described in the following subsections.

addcol
addpixsample
addresolve
addskycoords
assert
badval
cache
check
clearparams
collapsecols
colmeta
constcol
delcols
every
explodeall
explodecols
fixcolnames
group
head
healpixmeta
keepcols
meta
progress
random
randomview
repeat
replacecol
replaceval
rowrange
select
seqview
setparam
shuffle
sort
sorthead
stats
tablename
tail
transpose
uniq

Here are some aditional details:

10.5 Operators
The operators are pretty much the same as in the C language. The common ones are:

Arithmetic
+ (add)
- (subtract)
* (multiply)
/ (divide)
% (modulus)
Boolean
! (not)
&& (and)
|| (or)
^ (exclusive-or)
== (numeric identity)
!= (numeric non-identity)
< (less than)
> (greater than)
<= (less than or equal)
>= (greater than or equal)
Bitwise
& (and)
| (or)
^ (exclusive-or)
<< (left shift)
>> (right shift)
>>> (logical right shift)
Numeric Typecasts
(byte) (numeric -> signed byte)
(short) (numeric -> 2-byte integer)
(int) (numeric -> 4-byte integer)
(long) (numeric -> 8-byte integer)
(float) (numeric -> 4-type floating point)
(double) (numeric -> 8-byte floating point)
Note you may find the Maths conversion functions more convenient for numeric conversions than these.
Other
+ (string concatenation)
[] (array dereferencing - first element is zero)
?: (conditional switch)
instanceof (class membership)


10.7.11 Gaia
Functions related to astrometry suitable for use with data from the Gaia astrometry mission.

The methods here are not specific to the Gaia mission, but the parameters of the functions and their units are specified in a form that is convenient for use with Gaia data, in particular the gaia_source catalogue available from http://gea.esac.esa.int/archive/ and copies or mirrors.

There are currently three main sets of functions here:

position and velocity vector calculation and manipulation
distance estimation from parallaxes
astrometry propagation to different epochs
Position and velocity vectors

Functions are provided for converting the astrometric parameters contained in the Gaia catalogue to ICRS Cartesian position (XYZ) and velocity (UVW) vectors. Functions are also provided to convert these vectors between ICRS and Galactic or Ecliptic coordinates. The calculations are fairly straightforward, and follow the equations laid out in section 1.5.6 of The Hipparcos and Tycho Catalogues, ESA SP-1200 (1997) and also section 3.1.7 of the Gaia DR2 documentation (2018).

These functions will often be combined; for instance to calculate the position and velocity in galactic coordinates from Gaia catalogue values, the following expressions may be useful:

    xyz_gal = icrsToGal(astromXYZ(ra,dec,parallax))
    uvw_gal = icrsToGal(astromUVW(array(ra,dec,parallax,pmra,pmdec,radial_velocity)))
 
though note that these particular examples simply invert parallax to provide distance estimates, which is not generally valid. Note also that these functions do not attempt to correct for solar motion. Such adjustments should be carried out by hand on the results of these functions if they are required.
Functions for calculating errors on the Cartesian components based on the error and correlation quantities from the Gaia catalogue are not currently provided. They would require fairly complicated invocations. If there is demand they may be implemented in the future.

Distance estimation

Gaia measures parallaxes, but some scientific use cases require the radial distance instead. While distance in parsec is in principle the reciprocal of parallax in arcsec, in the presence of non-negligable errors on measured parallax, this inversion does not give a good estimate of distance. A thorough discussion of this topic and approaches to estimating distances for Gaia-like data can be found in the papers

C.A.L.Bailer-Jones, "Estimating distances from parallaxes", PASP 127, p994 (2015) 2015PASP..127..994B
T.L.Astraatmadja and C.A.L.Bailer-Jones, "Estimating Distances from Parallaxes. II. Performance of Bayesian Distance Estimators on a Gaia-like Catalogue", ApJ 832, a137 (2016) 2016ApJ...832..137A
X.Luri et al., "Gaia Data Release 2: Using Gaia Parallaxes", A&A in press (2018) arXiv:1804.09376
The functions provided here correspond to calculations from Astraatmadja & Bailer-Jones, "Estimating Distances from Parallaxes. III. Distances of Two Million Stars in the Gaia DR1 Catalogue", ApJ 833, a119 (2016) 2016ApJ...833..119A based on the Exponentially Decreasing Space Density prior defined therein. This implementation was written with reference to the Java implementation by Enrique Utrilla (DPAC).

These functions are parameterised by a length scale L that defines the exponential decay (the mode of the prior PDF is at r=2L). Some value for this length scale, specified in parsec, must be supplied to the functions as the lpc parameter.

Note that the values provided by these functions do not match those from the paper Bailer-Jones et al. "Estimating Distances from Parallaxes IV: Distances to 1.33 Billion stars in Gaia Data Release 2", accepted for AJ (2018) arXiv:1804.10121. The calculations of that paper differ from the ones presented here in several ways: it uses a galactic model for the direction-dependent length scale not currently available here, it pre-applies a parallax correction of -0.029mas, and it uses different uncertainty measures and in some cases (bimodal PDF) a different best distance estimator.

Epoch Propagation

The Gaia source catalogue provides, for at least some sources, the six-parameter astrometric solution (Right Ascension, Declination, Parallax, Proper motion in RA and Dec, and Radial Velocity), along with errors on these values and correlations between these errors. While a crude estimate of the position at an earlier or later epoch than that of the measurement can be made by multiplying the proper motion components by epoch difference and adding to the measured position, a more careful treatment is required for accurate propagation between epochs of the astrometric parameters, and if required their errors and correlations. The expressions for this are set out in section 1.5.5 (Volume 1) of The Hipparcos and Tycho Catalogues, ESA SP-1200 (1997) (but see below), and the code is based on an implementation by Alexey Butkevich and Daniel Michalik (DPAC). A correction is applied to the SP-1200 treatment of radial velocity uncertainty following Michalik et al. 2014 2014A&A...571A..85M because of their better handling of small radial velocities or parallaxes.

The calculations give the same results, though not exactly in the same form, as the epoch propagation functions available in the Gaia archive service.


polarXYZ( phi, theta, r )
Converts from spherical polar to Cartesian coordinates.

Parameters:
phi (floating point): longitude in degrees
theta (floating point): latitude in degrees
r (floating point): radial distance
Return value
(array of floating point): 3-element vector giving Cartesian coordinates
Examples:
polarXYZ(ra, dec, distance_estimate)
polarXYZ(l, b, 3262./parallax) - calculates vector components in units of light year in the galactic system, on the assumption that distance is the inverse of parallax
astromXYZ( ra, dec, parallax )
Calculates Cartesian components of position from RA, Declination and parallax. This is a convenience function, equivalent to:
    polarXYZ(ra, dec, 1000./parallax)
 
Note that this performs distance scaling using a simple inversion of parallax, which is not in general reliable for parallaxes with non-negligable errors. Use at your own risk.


Parameters:
ra (floating point): Right Ascension in degrees
dec (floating point): Declination in degrees
parallax (floating point): parallax in mas
Return value
(array of floating point): 3-element vector giving equatorial space coordinates in parsec
Examples:
astromXYZ(ra, dec, parallax)
icrsToGal(astromXYZ(ra, dec, parallax))
icrsToGal( xyz )
Converts a 3-element vector representing ICRS (equatorial) coordinates to galactic coordinates. This can be used with position or velocity vectors.
The input vector is multiplied by the matrix AG', given in Eq. 3.61 of the Gaia DR2 documentation, following Eq. 1.5.13 of the Hipparcos catalogue.

The output coordinate system is right-handed, with the three components positive in the directions of the Galactic center, Galactic rotation, and the North Galactic Pole respectively.



Parameters:
xyz (array of floating point): 3-element vector giving ICRS Cartesian components
Return value
(array of floating point): 3-element vector giving Galactic Cartesian components
Example:
icrsToGal(polarXYZ(ra, dec, distance))
galToIcrs( xyz )
Converts a 3-element vector representing galactic coordinates to ICRS (equatorial) coordinates. This can be used with position or velocity vectors.
The input vector is multiplied by the matrix AG, given in Eq. 3.61 of the Gaia DR2 documentation, following Eq. 1.5.13 of the Hipparcos catalogue.

The input coordinate system is right-handed, with the three components positive in the directions of the Galactic center, Galactic rotation, and the North Galactic Pole respectively.


Parameters:
xyz (array of floating point): 3-element vector giving Galactic Cartesian components
Return value
(array of floating point): 3-element vector giving ICRS Cartesian components
Example:
galToIcrs(polarXYZ(l, b, distance))
icrsToEcl( xyz )
Converts a 3-element vector representing ICRS (equatorial) coordinates to ecliptic coordinates. This can be used with position or velocity vectors.
The transformation corresponds to that between the coordinates (ra,dec) and (ecl_lon,ecl_lat) in the Gaia source catalogue (DR2).


Parameters:
xyz (array of floating point): 3-element vector giving ICRS Cartesian components
Return value
(array of floating point): 3-element vector giving ecliptic Cartesian components
Example:
icrsToEcl(polarXYZ(ra, dec, distance))
eclToIcrs( xyz )
Converts a 3-element vector representing ecliptic coordinates to ICRS (equatorial) coordinates. This can be used with position or velocity vectors.
The transformation corresponds to that between the coordinates (ecl_lon,ecl_lat) and (ra,dec) in the Gaia source catalogue (DR2).


Parameters:
xyz (array of floating point): 3-element vector giving ecliptic Cartesian coordinates
Return value
(array of floating point): 3-element vector giving ICRS Cartesian coordinates
Example:
eclToIcrs(polarXYZ(ecl_lon, ecl_lat, distance))
astromUVW( astrom6 )
Calculates Cartesian components of velocity from quantities available in the Gaia source catalogue. The output is in the same coordinate system as the inputs, that is ICRS for the correspondingly-named Gaia quantities.
The input astrometry parameters are represented by a 6-element array, with the following elements:

 index  gaia_source name  unit    description
 -----  ----------------  ----    -----------
   0:   ra                deg     right ascension
   1:   dec               deg     declination
   2:   parallax          mas     parallax
   3:   pmra              mas/yr  proper motion in ra * cos(dec)
   4:   pmdec             mas/yr  proper motion in dec
   5:   radial_velocity   km/s    barycentric radial velocity
 
The units used by this function are the units used in the gaia_source table.
This convenience function just invokes the 7-argument astromUVW function using the inverted parallax for the radial distance, and without invoking the Doppler correction. It is exactly equivalent to:

    astromUVW(a[0], a[1], a[3], a[4], a[5], 1000./a[2], false)
 
Note this naive inversion of parallax to estimate distance is not in general reliable for parallaxes with non-negligable errors.

Parameters:
astrom6 (array of floating point): vector of 6 astrometric parameters as provided by the Gaia source catalogue
Return value
(array of floating point): 3-element vector giving equatorial velocity components in km/s
Examples:
astromUVW(array(ra, dec, parallax, pmra, pmdec, radial_velocity))
icrsToGal(astromUVW(array(ra, dec, parallax, pmra, pmdec, radial_velocity)))
astromUVW( ra, dec, pmra, pmdec, radial_velocity, r_parsec, useDoppler )
Calculates Cartesian components of velocity from the observed position and proper motion, radial velocity and radial distance, with optional light-time correction. The output is in the same coordinate system as the inputs, that is ICRS for the correspondingly-named Gaia quantities.
The radial distance must be supplied using the r_parsec parameter. A naive estimate from quantities in the Gaia source catalogue may be made with the expression 1000./parallax, though note that this simple inversion of parallax is not in general reliable for parallaxes with non-negligable errors.

The calculations are fairly straightforward, following Eq. 1.5.74 from the Hipparcos catalogue. A (usually small) Doppler factor accounting for light-time effects can also optionally be applied. The effect of this is to multiply the returned vector by a factor of 1/(1-radial_velocity/c), as discussed in Eq. 1.2.21 of the Hipparcos catalogue.

Note that no attempt is made to adjust for solar motion.


Parameters:
ra (floating point): Right Ascension in degrees
dec (floating point): Declination in degrees
pmra (floating point): proper motion in RA * cos(dec) in mas/yr
pmdec (floating point): proper motion in declination in mas/yr
radial_velocity (floating point): radial velocity in km/s
r_parsec (floating point): radial distance in parsec
useDoppler (boolean): whether to apply the Doppler factor to account for light-time effects
Return value
(array of floating point): 3-element vector giving equatorial velocity components in km/s
Examples:
astromUVW(ra, dec, pmra, pmdec, radial_velocity, dist, true)
icrsToGal(astromUVW(ra, dec, pmra, pmdec, radial_velocity, 1000./parallax, false))
epochProp( tYr, astrom6 )
Propagates the astrometry parameters, supplied as a 6-element array, to a different epoch.
The input and output astrometry parameters are each represented by a 6-element array, with the following elements:

 index  gaia_source name  unit    description
 -----  ----------------  ----    -----------
   0:   ra                deg     right ascension
   1:   dec               deg     declination
   2:   parallax          mas     parallax
   3:   pmra              mas/yr  proper motion in ra * cos(dec)
   4:   pmdec             mas/yr  proper motion in dec
   5:   radial_velocity   km/s    barycentric radial velocity
 
The units used by this function are the units used in the gaia_source table.
Null values for parallax, pmra, pmdec and radial_velocity are treated as if zero for the purposes of propagation. The documentation of the equivalent function in the Gaia archive comments "This is a reasonable choice for most stars because those quantities would be either small (parallax and proper motion) or irrelevant (radial velocity). However, this is not true for stars very close to the Sun, where appropriate values need to be taken from the literature (e.g. average velocity field in the solar neighbourhood)."

The effect is that the output represents the best estimates available for propagated astrometry; proper motions, parallax and RV are applied if present, but if not the output values are calculated or simply copied across as if those quantities were zero.


Parameters:
tYr (floating point): epoch difference in years
astrom6 (array of floating point): astrometry at time t0, represented by a 6-element array as above (a 5-element array is also permitted where radial velocity is zero or unknown)
Return value
(array of floating point): astrometry at time t0+tYr, represented by a 6-element array as above
Example:
epochProp(-15.5, array(ra,dec,parallax,pmra,pmdec,radial_velocity)) - calculates the astrometry at 2000.0 of gaia_source values that were observed at 2015.5
epochPropErr( tYr, astrom22 )
Propagates the astrometry parameters and their associated errors and correlations, supplied as a 22-element array, to a different epoch.
The input and output astrometry parameters with associated error and correlation information are each represented by a 22-element array, with the following elements:

 index  gaia_source name      unit    description
 -----  ----------------      ----    -----------
   0:   ra                    deg     right ascension
   1:   dec                   deg     declination
   2:   parallax              mas     parallax
   3:   pmra                  mas/yr  proper motion in RA * cos(dec)
   4:   pmdec                 mas/yr  proper motion in Declination
   5:   radial_velocity       km/s    barycentric radial velocity
   6:   ra_error              mas     error in right ascension
   7:   dec_error             mas     error in declination
   8:   parallax_error        mas     error in parallax
   9:   pmra_error            mas/yr  error in RA proper motion * cos(dec)
  10:   pmdec_error           mas/yr  error in Declination proper motion
  11:   radial_velocity_error km/s    error in barycentric radial velocity
  12:   ra_dec_corr                   correlation between ra and dec
  13:   ra_parallax_corr              correlation between ra and parallax
  14:   ra_pmra_corr                  correlation between ra and pmra
  15:   ra_pmdec_corr                 correlation between ra and pmdec
  16:   dec_parallax_corr             correlation between dec and parallax
  17:   dec_pmra_corr                 correlation between dec and pmra
  18:   dec_pmdec_corr                correlation between dec and pmdec
  19:   parallax_pmra_corr            correlation between parallax and pmra
  20:   parallax_pmdec_corr           correlation between parallax and pmdec
  21:   pmra_pmdec_corr               correlation between pmra and pmdec
 
Note the correlation coefficients, always in the range -1..1, are dimensionless.
Null values for parallax, pmra, pmdec and radial_velocity are treated as if zero for the purposes of propagation. The documentation of the equivalent function in the Gaia archive comments "This is a reasonable choice for most stars because those quantities would be either small (parallax and proper motion) or irrelevant (radial velocity). However, this is not true for stars very close to the Sun, where appropriate values need to be taken from the literature (e.g. average velocity field in the solar neighbourhood)."

The effect is that the output represents the best estimates available for propagated astrometry; proper motions, parallax and RV are applied if present, but if not the output values are calculated or simply copied across as if those quantities were zero.

This transformation is only applicable for radial velocities determined independently of the astrometry, such as those obtained with a spectrometer. It is not applicable for the back-transformation of data already propagated to another epoch.

This is clearly an unwieldy function to invoke, but if you are using it with the gaia_source catalogue itself, or other similar catalogues with the same column names and units, you can invoke it by just copying and pasting the example shown in this documentation.


Parameters:
tYr (floating point): epoch difference in years
astrom22 (array of floating point): astrometry at time t0, represented by a 22-element array as above
Return value
(array of floating point): astrometry at time t0+tYr, represented by a 22-element array as above
Example:
epochPropErr(-15.5, array( ra,dec,parallax,pmra,pmdec,radial_velocity, ra_error,dec_error,parallax_error,pmra_error,pmdec_error,radial_velocity_error, ra_dec_corr,ra_parallax_corr,ra_pmra_corr,ra_pmdec_corr, dec_parallax_corr,dec_pmra_corr,dec_pmdec_corr, parallax_pmra_corr,parallax_pmdec_corr, pmra_pmdec_corr)) - calculates the astrometry with all errors and correlations at 2000.0 for gaia_source values that were observed at 2015.5.
rvMasyrToKms( rvMasyr, plxMas )
Converts from normalised radial velocity in mas/year to unnormalised radial velocity in km/s.
The output is calculated as AU_YRKMS * rvMasyr / plxMas, where AU_YRKMS=4.740470446 is one Astronomical Unit in km.yr/sec.


Parameters:
rvMasyr (floating point): normalised radial velocity, in mas/year
plxMas (floating point): parallax in mas
Return value
(floating point): radial velocity in km/s
rvKmsToMasyr( rvKms, plxMas )
Converts from unnormalised radial velocity in km/s to normalised radial velocity in mas/year.
The output is calculated as rvKms * plxMas / AU_YRKMS, where AU_YRKMS=4.740470446 is one Astronomical Unit in km.yr/sec.


Parameters:
rvKms (floating point): unnormalised radial velocity, in mas/year
plxMas (floating point): parallax in mas
Return value
(floating point): radial velocity in mas/year
distanceEstimateEdsd( plxMas, plxErrorMas, lPc )
Best estimate of distance using the Exponentially Decreasing Space Density prior. This estimate is provided by the mode of the PDF.

Parameters:
plxMas (floating point): parallax in mas
plxErrorMas (floating point): parallax error in mas
lPc (floating point): length scale in parsec
Return value
(floating point): best distance estimate in parsec
distanceBoundsEdsd( plxMas, plxErrorMas, lPc )
Calculates the 5th and 95th percentile confidence intervals on the distance estimate using the Exponentially Decreasing Space Density prior.
Note this function has to numerically integrate the PDF to determine quantile values, so it is relatively slow.


Parameters:
plxMas (floating point): parallax in mas
plxErrorMas (floating point): parallax error in mas
lPc (floating point): length scale in parsec
Return value
(array of floating point): 2-element array giving the 5th and 95th percentiles in parsec of the EDSD distance PDF
distanceQuantilesEdsd( plxMas, plxErrorMas, lPc, qpoints, ... )
Calculates arbitrary quantiles for the distance estimate using the Exponentially Decreasing Space Density prior.
Note this function has to numerically integrate the PDF to determine quantile values, so it is relatively slow.


Parameters:
plxMas (floating point): parallax in mas
plxErrorMas (floating point): parallax error in mas
lPc (floating point): length scale in parsec
qpoints (floating point, one or more): one or more required quantile cut points, each in the range 0..1
Return value
(array of floating point): array with one element for each of the supplied qpoints giving the corresponding distance in parsec
Examples:
distanceQuantilesEdsd(parallax, parallax_error, 1350, 0.5)[0] calculates the median of the EDSD distance PDF using a length scale of 1.35kpc
distanceQuantilesEdsd(parallax, parallax_error, 3000, 0.01, 0.99) returns a 2-element array giving the 1st and 99th percentile of the distance estimate using a length scale of 3kpc
distanceToModulus( distPc )
Converts a distance in parsec to a distance modulus. The formula is 5*log10(distPc)-5.

Parameters:
distPc (floating point): distance in parsec
Return value
(floating point): distance modulus in magnitudes
modulusToDistance( distmod )
Converts a distance modulus to a distance in parsec. The formula is 10^(1+distmod/5).

Parameters:
distmod (floating point): distance modulus in magnitudes
Return value
(floating point): distance in parsec
AU_YRKMS
This quantity is A_v, the Astronomical Unit expressed in km.yr/sec. See the Hipparcos catalogue (ESA SP-1200) table 1.2.2 and Eq. 1.5.24.

PC_AU
Parsec in Astronomical Units, equal to 648000/PI.

PC_YRKMS
Parsec in units of km.yr/sec.

C_KMS
The speed of light in km/s (exact).