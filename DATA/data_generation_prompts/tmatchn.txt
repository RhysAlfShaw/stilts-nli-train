I want you to create example prompt and reponses for finetunning a langauge model to generate stilts commands.

Return the results as a list of json of the following format:
[
    {
    "prompt": "prompt goes in here...",
    "response": "response goes here..."
    },
    ..
]

tmatchn: Crossmatches multiple tables using flexible criteria
tmatchn performs efficient and flexible crossmatching between multiple tables. It can match rows on the basis of their relative position in the sky, or alternatively using many other criteria such as separation in in some isotropic or anisotropic Cartesian space, identity of a key value, or some combination of these; the full range of match criteria is dicussed in Section 7.1.

Since the match criteria define what counts as a match between two objects, it is not immediately obvious what is meant by a multi-table match. In fact the command can work in one of two distinct modes, controlled by the multimode parameter. In pairs mode, one table (by default the first input table) is designated the reference table, and pair matches between each of the other tables and that one are identified. In group mode groups of objects from all the input tables are identified, as discussed in Section 7.2. Currently, in both cases an output matched row cannot contain more than one object from each input table. Options for output of multiple rows per input table per match may be forthcoming in future releases if there is demand.

tmatchn is intended for use with more than two input tables - see tmatch1 and tmatch2 for 1- and 2-table crossmatching respectively.

Usage:

The usage of tmatchn is

   stilts <stilts-flags> tmatchn nin=<count> ifmtN=<in-format> inN=<tableN>
                                 icmdN=<cmds> ocmd=<cmds>
                                 omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui
                                 out=<out-table> ofmt=<out-format>
                                 multimode=pairs|group iref=<table-index>
                                 matcher=<matcher-name> params=<match-params>
                                 tuning=<tuning-params> valuesN=<expr-list>
                                 joinN=default|match|nomatch|always
                                 fixcols=none|dups|all suffixN=<label>
                                 progress=none|log|time|profile
                                 runner=parallel|parallel<n>|parallel-all|sequential|classic|partest
If you don't have the stilts script installed, write "java -jar stilts.jar" instead of "stilts" - see Section 3. The available <stilts-flags> are listed in Section 2.1. For programmatic invocation, the Task class for this command is uk.ac.starlink.ttools.task.TableMatchN.
Parameter values are assigned on the command line as explained in Section 2.3. They are as follows:


fixcols = none|dups|all       (Fixer)
    Determines how input columns are renamed before use in the output table. The choices are:
    none: columns are not renamed
    dups: columns which would otherwise have duplicate names in the output will be renamed to indicate which table they came from
    all: all columns will be renamed to indicate which table they came from
    If columns are renamed, the new ones are determined by suffix* parameters.
    [Default: dups]

icmdN = <cmds>       (ProcessingStep[])
    Specifies processing to be performed on input table #N as specified by parameter inN, before any other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
    Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ifmtN = <in-format>       (String)
    Specifies the format of input table #N as specified by parameter inN. The known formats are listed in Section 5.1.1. This flag can be used if you know what format your table is in. If it has the special value (auto) (the default), then an attempt will be made to detect the format of the table automatically. This cannot always be done correctly however, in which case the program will exit with an error explaining which formats were attempted. This parameter is ignored for scheme-specified tables.
    [Default: (auto)]

inN = <tableN>       (StarTable)
    The location of input table #N. This may take one of the following forms:
    A filename.
    A URL.
    The special value "-", meaning standard input. In this case the input format must be given explicitly using the ifmtN parameter. Note that not all formats can be streamed in this way.
    A scheme specification of the form :<scheme-name>:<scheme-args>.
    A system command line with either a "<" character at the start, or a "|" character at the end ("<syscmd" or "syscmd|"). This executes the given pipeline and reads from its standard output. This will probably only work on unix-like systems.
    In any case, compressed data in one of the supported compression formats (gzip, Unix compress or bzip2) will be decompressed transparently.
iref = <table-index>       (Integer)
    If multimode=pairs this parameter gives the index of the table in the input table list which is to serve as the reference table (the one which must be matched by other tables). Ignored in other modes.
    Row ordering in the output table is usually tidiest if the default setting of 1 is used (i.e. if the first input table is used as the reference table).

    [Default: 1]

joinN = default|match|nomatch|always       (MultiJoinType)
    Determines which rows from input table N are included in the output table. The matching algorithm determines which of the rows in each of the input tables correspond to which rows in the other input tables, and this parameter determines what to do with that information.
    The default behaviour is that a row will appear in the output table if it represents a match of rows from two or more of the input tables. This can be altered on a per-input-table basis however by choosing one of the non-default options below:

    match: Rows are included only if they contain an entry from input table N.
    nomatch: Rows are included only if they do not contain an entry from input table N.
    always: Rows are included if they contain an entry from input table N (overrides any match and nomatch settings of other tables).
    default: Input table N has no special effect on whether rows are included.
    [Default: default]

matcher = <matcher-name>       (MatchEngine)
    Defines the nature of the matching that will be performed. Depending on the name supplied, this may be positional matching using celestial or Cartesian coordinates, exact matching on the value of a string column, or other things. A list and explanation of the available matching algorithms is given in Section 7.1. The value supplied for this parameter determines the meanings of the values required by the params, values* and tuning parameter(s).
    [Default: sky]

multimode = pairs|group       (String)
    Defines what is meant by a multi-table match. There are two possibilities:
    pairs: Each output row corresponds to a single row of the reference table (see parameter iref) and contains entries from other tables which are pair matches to that. If a reference table row matches multiple rows from one of the other tables, only the best one is included.
    group: Each output row corresponds to a group of entries from the input tables which are mutually linked by pair matches between them. This means that although you can get from any entry to any other entry via one or more pair matches, there is no guarantee that any entry is a pair match with any other entry. No table has privileged status in this case. If there are multiple entries from a given table in the match group, an arbitrary one is chosen for inclusion (there is no unique way to select the best). See Section 7.2 for more discussion.
    Note that which rows actually appear in the output is also influenced by the joinN parameter.
    [Default: pairs]

nin = <count>       (Integer)
    The number of input tables for this task. For each of the input tables N there will be associated parameters ifmtN, inN and icmdN.
    ocmd = <cmds>       (ProcessingStep[])
    Specifies processing to be performed on the output table, after all other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
    Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ofmt = <out-format>       (String)
    Specifies the format in which the output table will be written (one of the ones in Section 5.1.2 - matching is case-insensitive and you can use just the first few letters). If it has the special value "(auto)" (the default), then the output filename will be examined to try to guess what sort of file is required usually by looking at the extension. If it's not obvious from the filename what output format is intended, an error will result.
    This parameter must only be given if omode has its default value of "out".

    [Default: (auto)]

omode = out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui       (ProcessingMode)
    The mode in which the result table will be output. The default mode is out, which means that the result will be written as a new table to disk or elsewhere, as determined by the out and ofmt parameters. However, there are other possibilities, which correspond to uses to which a table can be put other than outputting it, such as displaying metadata, calculating statistics, or populating a table in an SQL database. For some values of this parameter, additional parameters (<mode-args>) are required to determine the exact behaviour.
    Possible values are

        out
        meta
        stats
        count
        checksum
        cgi
        discard
        topcat
        samp
        plastic
        tosql
        gui
    Use the help=omode flag or see Section 6.4 for more information.
    [Default: out]

out = <out-table>       (TableConsumer)
    The location of the output table. This is usually a filename to write to. If it is equal to the special value "-" (the default) the output table will be written to standard output.
    This parameter must only be given if omode has its default value of "out".

    [Default: -]

params = <match-params>       (String[])
    Determines the parameters of this match. This is typically one or more tolerances such as error radii. It may contain zero or more values; the values that are required depend on the match type selected by the matcher parameter. If it contains multiple values, they must be separated by spaces; values which contain a space can be 'quoted' or "quoted".
    progress = none|log|time|profile       (String)
    Determines whether information on progress of the match should be output to the standard error stream as it progresses. For lengthy matches this is a useful reassurance and can give guidance about how much longer it will take. It can also be useful as a performance diagnostic.
    The options are:

        none: no progress is shown
        log: progress information is shown
        time: progress information and some time profiling information is shown
        profile: progress information and limited time/memory profiling information are shown
    [Default: log]

runner = parallel|parallel<n>|parallel-all|sequential|classic|partest       (RowRunner)
    Selects the threading implementation. The options are currently:
    parallel: uses multithreaded implementation for large tables, with default parallelism, which is the smaller of 6 and the number of available processors
    parallel<n>: uses multithreaded implementation for large tables, with parallelism given by the supplied value <n>
    parallel-all: uses multithreaded implementation for large tables, with a parallelism given by the number of available processors
    sequential: uses multithreaded implementation but with only a single thread
    classic: uses legacy sequential implementation
    partest: uses multithreaded implementation even when tables are small
    The parallel* options should normally run faster than sequential or classic (which are provided mainly for testing purposes), at least for large matches and where multiple processing cores are available.
    The default value "parallel" is currently limited to a parallelism of 6 since larger values yield diminishing returns given that some parts of the matching algorithms run sequentially (Amdahl's Law), and using too many threads can sometimes end up doing more work or impacting on other operations on the same machine. But you can experiment with other concurrencies, e.g. "parallel16" to run on 16 cores (if available) or "parallel-all" to run on all available cores.

    The value of this parameter should make no difference to the matching results. If you notice any discrepancies please report them.

    [Default: parallel]

suffixN = <label>       (String)
    If the fixcols parameter is set so that input columns are renamed for insertion into the output table, this parameter determines how the renaming is done. It gives a suffix which is appended to all renamed columns from table N.
    [Default: _N]

tuning = <tuning-params>       (String[])
    Tuning values for the matching process, if appropriate. It may contain zero or more values; the values that are permitted depend on the match type selected by the matcher parameter. If it contains multiple values, they must be separated by spaces; values which contain a space can be 'quoted' or "quoted". If this optional parameter is not supplied, sensible defaults will be chosen.

valuesN = <expr-list>       (String[])
    Defines the values from table N which are used to determine whether a match has occurred. These will typically be coordinate values such as RA and Dec and perhaps some per-row error values as well, though exactly what values are required is determined by the kind of match as determined by matcher. Depending on the kind of match, the number and type of the values required will be different. Multiple values should be separated by whitespace; if whitespace occurs within a single value it must be 'quoted' or "quoted". Elements of the expression list are commonly just column names, but may be algebraic expressions calculated from zero or more columns as explained in Section 10.

Examples
Here are some examples of using tmatchn:

stilts tmatchn multimode=pairs nin=4 matcher=sky params=5 \
       in1=transients.txt ifmt1=ascii values1='alpha delta' \
       in2=2mass_virgo.fits values2='ra2000 dec2000' \
       in3=sdss_virgo.fits values3='ra dec' \
       in4=first_virgo.fits values4='pos_eq_ra pos_eq_dec' \
       out=matches.xml ofmt=votable-binary
Compares a text-format table "transients.txt" against each of three other catalogues covering the same region of sky, and outputs a table which contains a row for each row of "transients.txt" which matches (is within 5 arcsec) of an object in any of the other tables.

stilts tmatchn multimode=pairs nin=4 matcher=sky params=5 \
       in1=transients.txt ifmt1=ascii suffix1='_t' values1='alpha delta' \
       in2=2mass_virgo.fits suffix2='_2mass' values2='ra2000 dec2000' \
       in3=sdss_virgo.fits  suffix3='_sdss'  values3='ra dec' \
       in4=first_virgo.fits suffix4='_first' values4='pos_eq_ra pos_eq_dec' \
       fixcols=all join1=always \
       ocmd='keepcols "*_t designation_2mass SDSSName_sdss id_field_first"' \
       out=matches.xml ofmt=votable-binary
Similar to the previous example but with some doctoring of what the output table will look like. The fixcols=all and suffixN assignments mean that all the columns from the input tables will be renamed for output by adding the given suffixes. The keepcols filter applied to the output table throws out all the columns except the ones from the reference table (*_t) and one column from each of the other table giving object identifiers. This output table will probably be easier to read (though contain less information) than that from the previous example). Additionally, the join1=always assignment means that the output table will have one row for each row of the reference table (transients.txt), even if no matches are found for it.

stilts tmatchn multimode=group nin=3 matcher=skyerr params=8 \
       in1=Hband.fits values1='RA DEC SEEING*2' \
       in2=Jband.fits values2='RA DEC SEEING*2' \
       in3=Kband.fits values3='RA DEC SEEING*2' \
       omode=topcat
Performs a group-mode match. There is no reference table, so that an output row will result for each object which is represented in any two of the input catalogues. The match takes account of per-object errors equivalent to twice the recorded seeing, which is in the region of 8 arcsec. Note that this may not operate as expected if the catalogues contain multiple distinct objects too close (in comparison to the declared separation) to each other. The resulting matched table is sent directly to TOPCAT (if available).


Please use these to create prompt responces the arevaried and test each of the possible configurations.