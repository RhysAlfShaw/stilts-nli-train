I want you to create 100 example prompt and reponses for finetunning a langauge model to generate stilts commands.

Return the results as a list of json of the following format:
[
    {
    "prompt": "prompt goes in here...",
    "response": "response goes here..."
    },
    ..
]

The command I want you to generate examples for is the tpipe command. The documentation of this is as follows:

tpipe: Performs pipeline processing on a table

tpipe performs all kinds of general purpose manipulations which take one table as input. It is extremely flexible, and can do the following things amongst others:

    calculate statistics
    display metadata
    select rows in various ways, including algebraically
    define new columns as algebraic functions of old ones
    delete or rearrange columns
    sort rows
    convert between table formats

and combine these operations. You can think of it as a supercharged table copying tool.
The basic operation of tpipe is that it reads an input table, performs zero or more processing steps on it, and then does something with the output. There are therefore three classes of things you need to tell it when it runs:

Input table location
    Specified by the in, ifmt and istream parameters.

Processing steps
    Either provide a string giving steps as the value of one or more cmd parameters, or the name of a file containing the steps using the script parameter. The steps that you can perform are described in Section 6.1.

Output table destination
    What happens to the output table is determined by the value of the omode parameter. By default, omode=out, in which case the table is written to a new table file in a format determined by ofmt. However, you can do other things with the result such as calculate the per-column statistics (omode=stats), view only the table and column metadata (omode=meta), display it directly in TOPCAT (omode=topcat) etc.

Examples of it being used.

Here are some examples of tpipe in use with explanations of what's going on. For simplicity these examples assume that you have the stilts script installed and are using a Unix-like shell; see Section 3 for an explanation of how to invoke the command if you just have the Java classes.

stilts tpipe cat.fits
Writes a FITS table to standard output in human-readable form. Since no mode specifier is given, omode=out is assumed, and output is to standard output in text format.

stilts tpipe cmd='head 5' cat.fits.gz
Does the same as the last example, but with one processing step: only the first five rows of the table are output. In this case, the input file is compressed using gzip - this is automatically detected.

stilts tpipe ifmt=csv xxx.csv \
             cmd='keepcols "index ra dec"' \
             omode=out ofmt=fits xxx.fits
Reads from a comma-separated values file, writes to a FITS file, and discards all columns in the input table apart from INDEX, RA and DEC. Note the quoting in the cmd argument: the outer quotes are so that the argument of the cmd parameter itself (keepcols "index ra dec") is not split up by spaces (to protect it from the shell), and the inner quotes are to keep the colid-list argument of the keepcols command together.

stilts tpipe ifmt=votable \
             cmd='addcol IV_SUM "(IMAG+VMAG)"' \
             cmd='addcol IV_DIFF "(IMAG-VMAG)"' \
             cmd='delcols "IMAG VMAG"' \
             omode=out ofmt=votable \
       < tab1.vot \
       > tab2.vot

Replaces two columns by their sum and difference in a VOTable. Since neither the in nor out parameters have been specified, the input and output are actually byte streams on standard input and standard output of the tpipe command in this case. The processing steps first add a column representing the sum, then add a column representing the difference, then delete the original columns.

stilts tpipe cmd='addskycoords -inunit sex fk5 gal \
                               RA2000 DEC2000 GAL_LONG GAL_LAT' \
             6dfgs.fits 6dfgs+gal.fits
Adds columns giving galactic coordinates to a table. Both input and output tables are FITS files. The galactic coordinates, stored in new columns named GAL_LONG and GAL_LAT, are calculated from FK5 J2000.0 coordinates given in the existing columns named RA2000 and DEC2000. The input (FK5) coordinates are represented as sexagesimal strings (hh:mm:ss, dd:mm:ss), and the output ones are numeric degrees.

stilts -disk tpipe 2dfgrs_ngp.fits \
                   cmd='keepcols "SEQNUM AREA ECCENT"' \
                   cmd='sort -down AREA' \
                   cmd='head 20'
Displays selected columns for the 20 rows with largest values in the AREA column of a FITS table. First the columns of interest are selected, then the rows are sorted into descending order by the value of the AREA column, then the first 20 rows of the resulting table are selected, and the result is written to standard output. Since a sort is being performed here, it's not possible to do all the processing a row at a time, since all the AREA values must be available for comparison during the sort. Two things are done here to accommodate this fact: first the column selection is done before the sort, so that it's only a 3-column table which needs to be available for random access, reducing the temporary storage required. Secondly the -disk flag is supplied, which means that temporary disk files rather than memory will be used for caching table data.

stilts tpipe 2dfgrs_ngp.fits \
             cmd='keepcols "SEQNUM AREA ECCENT"' \
             cmd='sorthead -down 20 AREA'
Has exactly the same effect as the previous example. However, the algorithm used by the sorthead filter is in most cases faster and cheaper on memory (only 20 rows ever have to be stored in this case), so this is generally a better approach than combining the sort and head filters.

stilts tpipe omode=meta cmd=@commands.lis http://archive.org/data/survey.vot.Z
Outputs column and table metadata about a table. In this case the table is a compressed VOTable at the end of a URL. Processing is performed according to the commands contained in a file named "commands.lis" in the current directory.

stilts tpipe in=survey.fits 
             cmd='select "skyDistanceDegrees(hmsToDegrees(RA),dmsToDegrees(DEC), \
                                             hmsToDegrees(2,28,11),dmsToDegrees(-6,49,45)) \
                          < 5./60."' \
             omode=count
Counts the number of rows within a given 5 arcmin cone of sky in a FITS table. The skyDistanceDegrees function is an expression which calculates the distance between the position specified in a row (as given by its RA and DEC columns) and a given point on the sky (here, 02:28:11,-06:49:45). Since skyDistanceDegrees's arguments and return value are in decimal degrees, some conversions are required: the RA and DEC columns are sexagesimal strings which are converted using the hmsToDegrees and dmsToDegrees functions respectively. Different versions of these functions (ones which take numeric arguments) are used to convert the coordinates of the fixed point to degrees. The result is compared to a constant expression representing 5 arcminutes in degrees. Any rows of the input table for which this comparison is true are included in the output. An alternative function, skyDistanceRadians which works in radians, is also available. These functions and constants used here are described in detail in Section 10.7.5 and Section 10.7.6.

stilts tpipe ifmt=ascii survey.txt \
             cmd='select "OBJTYPE == 3 && Z > 0.15"' \
             cmd='keepcols "IMAG JMAG KMAG"' \
             omode=stats
Calculate statistics on the I, J and K magnitudes of selected objects from a catalogue. Only those rows with the given OBJTYPE and in the given Z range are included. The minimum, maximum, mean, standard deviation etc of the IMAG, JMAG and KMAG columns will be written to standard output.

stilts -classpath lib/drivers/mysql-connector-java.jar \
       -Djdbc.drivers=com.mysql.jdbc.Driver \
       tpipe in=x.fits cmd="explodeall" omode=tosql \
             protocol=mysql host=localhost db=ASTRO1 dbtable=TABLEX \
             write=dropcreate user=mbt
Writes a FITS table to an SQL table, converting array-valued columns to scalar ones. To make the SQL connection work properly, the classpath is augmented to include the path of the MySQL JDBC driver and the jdbc.drivers system property is set to the JDBC driver class name. The output will be written as a new table named TABLEX in the MySQL database named ASTRO1 on a MySQL server on the local host. The password, if required, will be prompted for, as would any of the other required parameters if they had not been given on the command line. Any existing table in ASTRO1 with the name TABLEX is overwritten. The only processing done here is by the explodeall command, which takes any columns which have fixed-size array values and replaces them in the output with multiple scalar columns.

java -classpath stilts.jar:lib/drivers/mysql-connector-java.jar
     -Djdbc.drivers=com.mysql.jdbc.Driver \
     uk.ac.starlink.ttools.Stilts \
     tpipe in=x.fits \
           cmd=explodeall \
           omode=out \
           out="jdbc:mysql://localhost/ASTRO1?user=mbt#TABLEX"
This does exactly the same as the previous example, but achieves it in a slightly different way. In the first place, java is invoked directly with the necessary flags rather than getting the stilts script to do it. Note that you cannot use java's -jar flag in this case, because doing it like that would not permit access to the additional classes that contain the JDBC driver. In the second place we use omode=out rather than omode=tosql. For this we need to supply an out value which encodes the information about the SQL connection and table in a special URL-like format. As you can see, this is a bit arcane, which is why the omode=tosql mode can be a help.

stilts tpipe USNOB.FITS cmd='every 1000000' omode=stats
Calculates statistics on a selection of the rows in a catalogue, and writes the result to the terminal. In this example, every millionth row is sampled.

Usage
The usage of tpipe is

   stilts <stilts-flags> tpipe ifmt=<in-format> istream=true|false cmd=<cmds>
                               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui
                               out=<out-table> ofmt=<out-format>
                               [in=]<table>

If you don't have the stilts script installed, write "java -jar stilts.jar" instead of "stilts" - see Section 3. The available <stilts-flags> are listed in Section 2.1. For programmatic invocation, the Task class for this command is uk.ac.starlink.ttools.task.TablePipe.
Parameter values are assigned on the command line as explained in Section 2.3. They are as follows:


cmd = <cmds>       (ProcessingStep[])
    Specifies processing to be performed on the input table as specified by parameter in, before any other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
    Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ifmt = <in-format>       (String)
    Specifies the format of the input table as specified by parameter in. The known formats are listed in Section 5.1.1. This flag can be used if you know what format your table is in. If it has the special value (auto) (the default), then an attempt will be made to detect the format of the table automatically. This cannot always be done correctly however, in which case the program will exit with an error explaining which formats were attempted. This parameter is ignored for scheme-specified tables.
    [Default: (auto)]

in = <table>       (StarTable)
    The location of the input table. This may take one of the following forms:
    A filename.
    A URL.
    The special value "-", meaning standard input. In this case the input format must be given explicitly using the ifmt parameter. Note that not all formats can be streamed in this way.
    A scheme specification of the form :<scheme-name>:<scheme-args>.
    A system command line with either a "<" character at the start, or a "|" character at the end ("<syscmd" or "syscmd|"). This executes the given pipeline and reads from its standard output. This will probably only work on unix-like systems.
    In any case, compressed data in one of the supported compression formats (gzip, Unix compress or bzip2) will be decompressed transparently.

istream = true|false       (Boolean)
    If set true, the input table specified by the in parameter will be read as a stream. It is necessary to give the ifmt parameter in this case. Depending on the required operations and processing mode, this may cause the read to fail (sometimes it is necessary to read the table more than once). It is not normally necessary to set this flag; in most cases the data will be streamed automatically if that is the best thing to do. However it can sometimes result in less resource usage when processing large files in certain formats (such as VOTable). This parameter is ignored for scheme-specified tables.
    [Default: false]

ofmt = <out-format>       (String)
    Specifies the format in which the output table will be written (one of the ones in Section 5.1.2 - matching is case-insensitive and you can use just the first few letters). If it has the special value "(auto)" (the default), then the output filename will be examined to try to guess what sort of file is required usually by looking at the extension. If it's not obvious from the filename what output format is intended, an error will result.
    This parameter must only be given if omode has its default value of "out".

    [Default: (auto)]

omode = out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui       (ProcessingMode)
    The mode in which the result table will be output. The default mode is out, which means that the result will be written as a new table to disk or elsewhere, as determined by the out and ofmt parameters. However, there are other possibilities, which correspond to uses to which a table can be put other than outputting it, such as displaying metadata, calculating statistics, or populating a table in an SQL database. For some values of this parameter, additional parameters (<mode-args>) are required to determine the exact behaviour.
    Possible values are

    out
    meta
    stats
    count
    checksum
    cgi
    discard
    topcat
    samp
    plastic
    tosql
    gui
    Use the help=omode flag or see Section 6.4 for more information.
    [Default: out]

out = <out-table>       (TableConsumer)
    The location of the output table. This is usually a filename to write to. If it is equal to the special value "-" (the default) the output table will be written to standard output.
    This parameter must only be given if omode has its default value of "out".

    [Default: -]


The avalible processing filters that can be used by cmd are described in this bit of documentation.
Processing Filters
This section lists the filter commands which can be used for table pipeline processing, in conjunction with cmd- or script-type parameters.

You can string as many of these together as you like. On the command line, you can repeat the cmd (or icmd1, or ocmd...) parameter multiple times, or use one cmd parameter and separate different filter specifiers with semicolons (";"). The effect is the same.

It's important to note that each command in the sequence of processing steps acts on the table at that point in the sequence. Thus either of the two identical invocations:

   stilts tpipe cmd='delcols 1; delcols 1; delcols 1'
   stilts tpipe cmd='delcols 1' cmd='delcols 1' cmd='delcols 1'
has the same effect as
   stilts tpipe cmd='delcols "1 2 3"'
since in the first case the columns are shifted left after each one is deleted, so the table seen by each step has one fewer column than the one before. Note also the use of quotes in the latter of the examples above, which is necessary so that the <colid-list> of the delcols command is interpreted as one argument not three separate words.
The available filters are described in the following subsections.

addcol
addpixsample
addresolve
addskycoords
assert
badval
cache
check
clearparams
collapsecols
colmeta
constcol
delcols
every
explodeall
explodecols
fixcolnames
group
head
healpixmeta
keepcols
meta
progress
random
randomview
repeat
replacecol
replaceval
rowrange
select
seqview
setparam
shuffle
sort
sorthead
stats
tablename
tail
transpose
uniq

Here are some aditional details:

10.5 Operators
The operators are pretty much the same as in the C language. The common ones are:

Arithmetic
+ (add)
- (subtract)
* (multiply)
/ (divide)
% (modulus)
Boolean
! (not)
&& (and)
|| (or)
^ (exclusive-or)
== (numeric identity)
!= (numeric non-identity)
< (less than)
> (greater than)
<= (less than or equal)
>= (greater than or equal)
Bitwise
& (and)
| (or)
^ (exclusive-or)
<< (left shift)
>> (right shift)
>>> (logical right shift)
Numeric Typecasts
(byte) (numeric -> signed byte)
(short) (numeric -> 2-byte integer)
(int) (numeric -> 4-byte integer)
(long) (numeric -> 8-byte integer)
(float) (numeric -> 4-type floating point)
(double) (numeric -> 8-byte floating point)
Note you may find the Maths conversion functions more convenient for numeric conversions than these.
Other
+ (string concatenation)
[] (array dereferencing - first element is zero)
?: (conditional switch)
instanceof (class membership)

FUNCTIONS you should use Only make sure there is an example of each function

10.7.7 Coverage
Functions related to coverage and footprints.

One coverage standard is Multi-Order Coverage maps, described at http://www.ivoa.net/Documents/MOC/. MOC positions are always defined in ICRS equatorial coordinates.

MOCs may be specified using a string argument of the functions in one of the following ways:

The filename of a MOC FITS file
The URL of a MOC FITS file
The identifier of a VizieR table, for instance "V/139/sdss9" (SDSS DR9)
An ASCII MOC string, for instance "1/1 2 4 2/12-14 21 23 25 8/"
A list of all the MOCs available from VizieR can currently be found at http://alasky.u-strasbg.fr/footprints/tables/vizier/. You can search for VizieR table identifiers from the VizieR web page (http://vizier.u-strasbg.fr/); note you must use the table identifier (like "V/139/sdss9") and not the catalogue identifier (like "V/139").


inMoc( moc, ra, dec )
Indicates whether a given sky position falls strictly within a given MOC (Multi-Order Coverage map). If the given moc value does not represent a MOC (for instance no file exists or the file/string is not in MOC format) a warning will be issued the first time it's referenced, and the result will be false.

Parameters:
moc (String): a MOC identifier; a filename, a URL, a VizieR table name, or an ASCII MOC string
ra (floating point): ICRS right ascension in degrees
dec (floating point): ICRS declination in degrees
Return value
(boolean): true iff the given position falls within the given MOC
nearMoc( moc, ra, dec, distanceDeg )
Indicates whether a given sky position either falls within, or is within a certain distance of the edge of, a given MOC (Multi-Order Coverage map). If the given moc value does not represent a MOC (for instance no file exists or the file/string is not in MOC format) a warning will be issued the first time it's referenced, and the result will be false.

Parameters:
moc (String): a MOC identifier; a filename, a URL, a VizieR table name, or an ASCII MOC string
ra (floating point): ICRS right ascension in degrees
dec (floating point): ICRS declination in degrees
distanceDeg (floating point): permitted distance from MOC boundary in degrees
Return value
(boolean): true iff the given position is within distance degrees of the given MOC
mocSkyProportion( moc )
Returns the proportion of the sky covered by a given MOC.
If the given moc value does not represent a MOC (for instance no file exists or the file/string is not in MOC format) a warning will be issued the first time it's referenced, and the result will be NaN.


Parameters:
moc (String): a MOC identifier; a filename, a URL, a VizieR table name, or an ASCII MOC string
Return value
(floating point): a fractional value in the range 0..1
mocTileCount( moc )
Returns the number of unique tiles within a given MOC.
If the given moc value does not represent a MOC (for instance no file exists or the file/string is not in MOC format) a warning will be issued the first time it's referenced, and the result will be 0.


Parameters:
moc (String): a MOC identifier; a filename, a URL, a VizieR table name, or an ASCII MOC string
Return value
(long integer): number of tiles in the MOC
mocUniq( order, index )
Converts a HEALPix order and and tile index into a UNIQ-encoded integer as used in MOC encoding. The result is index + 4**(1+order).
If the order or index are out of bounds, behaviour is undefined.


Parameters:
order (integer): HEALPix order, in range 0..29
index (long integer): tile index within the given level
Return value
(long integer): uniq-encoded value
uniqToOrder( uniq )
Extracts the HEALPix order from a UNIQ-encoded integer as used in MOC encoding.
If the supplied value is not a legal UNIQ integer, behaviour is undefined.


Parameters:
uniq (long integer): uniq-encoded value
Return value
(integer): HEALPix order
uniqToIndex( uniq )
Extracts the HEALPix pixel index from a UNIQ-encoded integer as used in MOC encoding.
If the supplied value is not a legal UNIQ integer, behaviour is undefined.


Parameters:
uniq (long integer): uniq-encoded value
Return value
(long integer): pixel index
SPHERE_STERADIAN
The number of steradians on the sphere, 4 PI.

SPHERE_SQDEG
The number of square degrees on the sphere, approx 41253.
