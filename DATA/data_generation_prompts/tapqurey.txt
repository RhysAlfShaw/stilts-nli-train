
I want you to create 100 example prompt and reponses for finetunning a langauge model to generate stilts commands.

Return the results as a list of json of the following format:
[
    {
    "prompt": "prompt goes in here...",
    "response": "response goes here..."
    },
    ..
]

The command I want you to generate examples for is the tpipe command. The documentation of this is as follows:

B.28 tapquery: Queries a Table Access Protocol server
tapquery can query remote databases using the Table Access Protocol (TAP) services by submitting Astronomical Data Query Language (ADQL) queries to them and retrieving the results. TAP and ADQL are Virtual Observatory protocols.

Queries can be submitted in either synchronous or asynchronous mode, as determined by the sync parameter. In asynchronous mode, if the query has not been deleted by the time the command exits (see the delete parameter), the result can be picked up at a later stage using the tapresume command.

Table uploads are supported, so it is possible (if the service supports this functionality), to upload a local table to the remote database, perform a query involving it, such as a join with a remote table of some sort, and receive the result. This powerful facility gives you crossmatches between local and remote tables.

For services that require authentication, you will need to supply your credentials as described in Section 5.4. Otherwise, queries will be submitted anonymously by default, but you can force a login attempt to services with optional authentication by setting auth=true.

This command does not provide any facility for querying the service for either table or capability metadata, so you will need to know about the service capabilities and database structure from some other source (possibly TOPCAT).

B.28.1 Usage
The usage of tapquery is

   stilts <stilts-flags> tapquery nupload=<count> ufmtN=<in-format>
                                  uploadN=<tableN> ucmdN=<cmds> ocmd=<cmds>
                                  omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui
                                  out=<out-table> ofmt=<out-format>
                                  upnameN=<adql-identifier> tapurl=<url-value>
                                  interface=tap1.0|tap1.1|cap auth=true|false
                                  adql=<query-text> parse=true|false
                                  sync=true|false maxrec=<nrow>
                                  destruction=<iso8601>
                                  executionduration=<seconds>
                                  compress=true|false
                                  upvotformat=TABLEDATA|BINARY|BINARY2
                                  language=<lang-name> poll=<millisec>
                                  progress=true|false
                                  delete=finished|never|always|now
If you don't have the stilts script installed, write "java -jar stilts.jar" instead of "stilts" - see Section 3. The available <stilts-flags> are listed in Section 2.1. For programmatic invocation, the Task class for this command is uk.ac.starlink.ttools.task.TapQuerier.
Parameter values are assigned on the command line as explained in Section 2.3. They are as follows:


adql = <query-text>       (String)
Astronomical Data Query Language string specifying the TAP query to execute. ADQL/S resembles SQL, so this string will likely start with "SELECT".
auth = true|false       (Boolean)
If true, then an attempt will be made to authenticate with the TAP service even if anonymous operation is permitted. If the service offers authentication, you will be asked for credentials.
To use this option in non-interactive contexts, you may want to use the auth.username and auth.password system properties.

[Default: false]

compress = true|false       (Boolean)
If true, the service is requested to provide HTTP-level compression for the response stream (Accept-Encoding header is set to "gzip", see RFC 2616). This does not guarantee that compression will happen but if the service honours this request it may result in a smaller amount of network traffic at the expense of more processing on the server and client.
[Default: true]

delete = finished|never|always|now       (DeleteMode)
Determines under what circumstances the UWS job is to be deleted from the server when its data is no longer required. If it is not deleted, then the job is left on the TAP server and it can be accessed via the normal UWS REST endpoints or using tapresume until it is destroyed by the server.
Possible values:

finished: delete only if the job finished, successfully or not
never: do not delete
always: delete on command exit
now: delete and return immediately
[Default: finished]

destruction = <iso8601>       (String)
Posts an updated value of the UWS DESTRUCTION parameter to the query job before it starts. This only makes sense for asynchronous jobs (sync=false).
The supplied value should be an ISO-8601-like string, giving the new requested job destruction time. The service is not obliged to honour this request. See UWS v1.0, sec 2.2.3.3.

executionduration = <seconds>       (Long)
Posts an updated value of the UWS EXECUTIONDURATION parameter to the query job before it starts. This only makes sense for asynchronous jobs (sync=false).
The supplied value is an integer giving the maximum number of wall-clock seconds for which the job is permitted to execute before being forcibly terminated. A value of zero indicates unlimited duration. The service is not obliged to honour this request. See UWS v1.0, sec 2.2.3.4.

interface = tap1.0|tap1.1|cap       (String)
Defines how the service endpoints and the version of the TAP protocol to use for queries is determined. This may take one of the following (case-insensitive) values:
TAP1.0: The standard TAP endpoints are used, without examining the service's capabilities document. The service is queried using version 1.0 of the TAP protocol.
TAP1.1: The standard TAP endpoints are used, without examining the service's capabilities document. The service is queried using version 1.1 of the TAP protocol.
cap: The service's capabilities document is examined, and the endpoints listed there are used.
The capabilities document, if used, is read from tapurl/capabilities unless the capabilitiesurl parameter is defined, in which case that is used.

The baseline value of all the TAP service endpoints (sync, async, tables, capabilities, examples) are determined by this parameter, but each of those endpoint values may be overridden individually by other endpoint-specific parameters (syncurl, asyncurl, tablesurl, capabilitiesurl, availabilityurl, examplesurl)

For default (unauthenticated) access, the default value is usually suitable.

[Default: tap1.0]

language = <lang-name>       (String)
Language to use for the ADQL-like query. This will usually be "ADQL" (the default), but may be set to some other value supported by the service, for instance a variant indicating a different ADQL version. Note that at present, setting it to "PQL" is not sufficient to submit a PQL query.
[Default: ADQL]

maxrec = <nrow>       (Long)
Sets the requested maximum row count for the result of the query. The service is not obliged to respect this, but in the case that it has a default maximum record count, setting this value may raise the limit. If no value is set, the service's default policy will be used.
nupload = <count>       (Integer)
The number of upload tables for this task. For each of the upload tables N there will be associated parameters ufmtN, uploadN and ucmdN.
[Default: 0]

ocmd = <cmds>       (ProcessingStep[])
Specifies processing to be performed on the output table, after all other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ofmt = <out-format>       (String)
Specifies the format in which the output table will be written (one of the ones in Section 5.1.2 - matching is case-insensitive and you can use just the first few letters). If it has the special value "(auto)" (the default), then the output filename will be examined to try to guess what sort of file is required usually by looking at the extension. If it's not obvious from the filename what output format is intended, an error will result.
This parameter must only be given if omode has its default value of "out".

[Default: (auto)]

omode = out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui       (ProcessingMode)
The mode in which the result table will be output. The default mode is out, which means that the result will be written as a new table to disk or elsewhere, as determined by the out and ofmt parameters. However, there are other possibilities, which correspond to uses to which a table can be put other than outputting it, such as displaying metadata, calculating statistics, or populating a table in an SQL database. For some values of this parameter, additional parameters (<mode-args>) are required to determine the exact behaviour.
Possible values are

out
meta
stats
count
checksum
cgi
discard
topcat
samp
plastic
tosql
gui
Use the help=omode flag or see Section 6.4 for more information.
[Default: out]

out = <out-table>       (TableConsumer)
The location of the output table. This is usually a filename to write to. If it is equal to the special value "-" (the default) the output table will be written to standard output.
This parameter must only be given if omode has its default value of "out".

[Default: -]

parse = true|false       (Boolean)
Determines whether an attempt will be made to check the syntax of the ADQL prior to submitting the query. If this is set true, and if a syntax error is found, the task will fail with an error before any attempt is made to submit the query.
[Default: false]

poll = <millisec>       (Integer)
Interval to wait between polling attempts, in milliseconds. Asynchronous TAP queries can only find out when they are complete by repeatedly polling the server to find out the job's status. This parameter allows you to set how often that happens. Attempts to set it too low (<50) will be rejected on the assumption that you're thinking in seconds.
[Default: 5000]

progress = true|false       (Boolean)
If this parameter is set true, updates on the status of the asynchronous UWS job are reported to standard output as they become available. This parameter is ignored in synchronous mode.
[Default: true]

sync = true|false       (Boolean)
Determines whether the TAP query is submitted in synchronous or asynchronous mode. Synchronous (true) means that the result is retrieved over the same HTTP connection that the query is submitted from. This is uncomplicated, but means if the query takes a long time it may time out and the results will be lost. Asynchronous (false) means that the job is queued and results may be retrieved later. Normally this command does the necessary waiting around and recovery of the result, though with appropriate settings you can get tapresume to pick it up for you later instead. In most cases false (the default) is preferred.
[Default: false]

tapurl = <url-value>       (URL)
The base URL of a Table Access Protocol service. This is the bare URL without a trailing "/[a]sync".
In the usual case, the default values of the various endpoints (sync and async query submission, tables metadata, service-provided examples etc) use this URL as a parent and append standard sub-paths.

In some cases however, determination of the endpoints is more complicated, as determined by the interface parameter which may cause endpoints to be read from the capabilities document at tapurl/capabilities, and by other endpoint-specific parameters (syncurl, asyncurl, tablesurl, capabilitiesurl, availabilityurl, examplesurl) for fine tuning.

ucmdN = <cmds>       (ProcessingStep[])
Specifies processing to be performed on upload table #N as specified by parameter uploadN, before any other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ufmtN = <in-format>       (String)
Specifies the format of upload table #N as specified by parameter uploadN. The known formats are listed in Section 5.1.1. This flag can be used if you know what format your table is in. If it has the special value (auto) (the default), then an attempt will be made to detect the format of the table automatically. This cannot always be done correctly however, in which case the program will exit with an error explaining which formats were attempted. This parameter is ignored for scheme-specified tables.
[Default: (auto)]

uploadN = <tableN>       (StarTable)
The location of upload table #N. This may take one of the following forms:
A filename.
A URL.
The special value "-", meaning standard input. In this case the input format must be given explicitly using the ufmtN parameter. Note that not all formats can be streamed in this way.
A scheme specification of the form :<scheme-name>:<scheme-args>.
A system command line with either a "<" character at the start, or a "|" character at the end ("<syscmd" or "syscmd|"). This executes the given pipeline and reads from its standard output. This will probably only work on unix-like systems.
In any case, compressed data in one of the supported compression formats (gzip, Unix compress or bzip2) will be decompressed transparently.
upnameN = <adql-identifier>       (String)
Identifier to use in server-side expressions for uploaded table #N. In ADQL expressions, the table should be referred to as "TAP_UPLOAD.<label>".
The value must syntactically be an ADQL identifier ([A-Za-z][A-Za-z0-9_]*).

[Default: upN]

upvotformat = TABLEDATA|BINARY|BINARY2       (uk.ac.starlink.votable.VOTableWriter)
Determines how any uploaded tables will be serialized for transmission to the TAP server. The supplied string is the name of one of the defined VOTable serialization formats. The choice shouldn't affect any results, though it may affect required bandwidth, and some services may (though should not) have non-standard requirements for serialization format.
[Default: TABLEDATA]

B.28.2 Examples
Here are some examples of tapquery:

stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap
                adql='SELECT TOP 1000 source_id, ra, dec
                      FROM gaiadr3.gaia_source
                      ORDER BY random_index'
                out=g.fits
Executes the given ADQL query on the service referenced by the URL and writes the result to a FITS file.
stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap
                adql='SELECT TOP 1000 source_id, ra, dec
                      FROM gaiadr3.gaia_source
                      ORDER BY random_index'
                sync=true auth=true
                out=g.fits
Same as the previous example, except that sync=true runs the query synchronously instead of asynchronously, and auth=true will attempt to log in to the service (prompting you for username and password) if it offers authentication.
stilts tapquery
       tapurl=http://dc.g-vo.org/tap
       adql='SELECT *
             FROM twomass.data AS t
             JOIN TAP_UPLOAD.up1 AS s
                  ON DISTANCE(t.raj2000,t.dej2000,s.ra2000,s.dec2000)<5./3600'
       nupload=1 upload1=6dfgs_E7.fits ucmd1='select BMAG-RMAG<0'
       maxrec=20000
       ocmd='tablename 2mass_x_6df' omode=topcat
The local table 6dfgs_E7 is filtered to contain only rather blue objects, and the resulting selection is uploaded to the TAP server. A positional crossmatch with 5 arcsec tolerance is then performed on the server between this uploaded table and the twomass.data table held by the service. The adjusted maxrec parameter ensures that the result will not be artificially truncated to shorter than 20000 rows (assuming the service limits permit this). When the result is received, it is loaded directly into TOPCAT with the name "2mass_x_6df".

B.29 tapresume: Resumes a previous query to a Table Access Protocol server
tapresume can resume monitoring and data retrieval from an asynchronous Table Access Protocol query which has already been submitted. TAP is a Virtual Observatory protocol. Such a pre-existing query may have been submitted by the tapquery command or by some completely different mechanism. It essentially does the same job as tapquery but without the job submission stage. It waits until the query has completed, and then retrieves the table result and processes it in accordance with the supplied parameters. The query may or may not be deleted from the server as part of the operation.

B.29.1 Usage
The usage of tapresume is

   stilts <stilts-flags> tapresume joburl=<url-value> compress=true|false
                                   poll=<millisec> progress=true|false
                                   delete=finished|never|always|now
                                   ocmd=<cmds>
                                   omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui
                                   out=<out-table> ofmt=<out-format>
If you don't have the stilts script installed, write "java -jar stilts.jar" instead of "stilts" - see Section 3. The available <stilts-flags> are listed in Section 2.1. For programmatic invocation, the Task class for this command is uk.ac.starlink.ttools.task.TapResume.
Parameter values are assigned on the command line as explained in Section 2.3. They are as follows:


compress = true|false       (Boolean)
If true, the service is requested to provide HTTP-level compression for the response stream (Accept-Encoding header is set to "gzip", see RFC 2616). This does not guarantee that compression will happen but if the service honours this request it may result in a smaller amount of network traffic at the expense of more processing on the server and client.
[Default: true]

delete = finished|never|always|now       (DeleteMode)
Determines under what circumstances the UWS job is to be deleted from the server when its data is no longer required. If it is not deleted, then the job is left on the TAP server and it can be accessed via the normal UWS REST endpoints or using tapresume until it is destroyed by the server.
Possible values:

finished: delete only if the job finished, successfully or not
never: do not delete
always: delete on command exit
now: delete and return immediately
[Default: finished]

joburl = <url-value>       (URL)
The URL of a job created by submission of a TAP query which was created earlier and has not yet been deleted (by the client) or destroyed (by the server). This will usually be of the form <tap-url>/async/<job-id>. You can also find out, and possibly retrieve results from the job by pointing a web browser at this URL.
ocmd = <cmds>       (ProcessingStep[])
Specifies processing to be performed on the output table, after all other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ofmt = <out-format>       (String)
Specifies the format in which the output table will be written (one of the ones in Section 5.1.2 - matching is case-insensitive and you can use just the first few letters). If it has the special value "(auto)" (the default), then the output filename will be examined to try to guess what sort of file is required usually by looking at the extension. If it's not obvious from the filename what output format is intended, an error will result.
This parameter must only be given if omode has its default value of "out".

[Default: (auto)]

omode = out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui       (ProcessingMode)
The mode in which the result table will be output. The default mode is out, which means that the result will be written as a new table to disk or elsewhere, as determined by the out and ofmt parameters. However, there are other possibilities, which correspond to uses to which a table can be put other than outputting it, such as displaying metadata, calculating statistics, or populating a table in an SQL database. For some values of this parameter, additional parameters (<mode-args>) are required to determine the exact behaviour.
Possible values are

out
meta
stats
count
checksum
cgi
discard
topcat
samp
plastic
tosql
gui
Use the help=omode flag or see Section 6.4 for more information.
[Default: out]

out = <out-table>       (TableConsumer)
The location of the output table. This is usually a filename to write to. If it is equal to the special value "-" (the default) the output table will be written to standard output.
This parameter must only be given if omode has its default value of "out".

[Default: -]

poll = <millisec>       (Integer)
Interval to wait between polling attempts, in milliseconds. Asynchronous TAP queries can only find out when they are complete by repeatedly polling the server to find out the job's status. This parameter allows you to set how often that happens. Attempts to set it too low (<50) will be rejected on the assumption that you're thinking in seconds.
[Default: 5000]

progress = true|false       (Boolean)
If this parameter is set true, updates on the status of the asynchronous UWS job are reported to standard output as they become available. This parameter is ignored in synchronous mode.
[Default: true]

B.29.2 Examples
Here are some examples of tapresume:

stilts tapresume joburl='http://dc.zah.uni-heidelberg.de/__system__/tap/run/tap/async/d4ENGR'
                 out=result.csv ofmt=csv
Resumes waiting for the output of a query on a job with ID d4ENGR which was previously started on the GAVO TAP server. When it has completed the output table will be written as a comma-separated value file.

B.30 tapskymatch: Crossmatches table on sky position against TAP table
tapskymatch allows you to perform a positional crossmatch of a local table with one held in a remote TAP service, as long as that TAP supports upload queries. This task does three main jobs. First, it prepares the ADQL queries and TAP negotiations for you so that you don't need to remember the syntax for performing positional crossmatches against a TAP service. Second, it organises data transfer so that only those columns required (basically the positional ones) are transmitted to and from the service, to save on bandwidth. And third it divides the job up into chunks, so that the TAP service only has to perform a manageable-sized query at a time. If the job is large this chunking can be useful to monitor progress of the job, and it also allows you to perform a match which would otherwise hit the upload or output limits imposed by the service.

The positional match may be done in any spherical coordinate system, it's up to the user to ensure that the same coordinates are provided for the local and remote tables.

Note that cdsskymatch provides similar functionality by accessing a different external service, which is usually much faster; if the table you wish to match is part of the VizieR database, you may wish to use that command instead.

B.30.1 Usage
The usage of tapskymatch is

   stilts <stilts-flags> tapskymatch ifmt=<in-format> istream=true|false
                                     icmd=<cmds> ocmd=<cmds>
                                     omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui
                                     out=<out-table> ofmt=<out-format>
                                     inlon=<expr/deg> inlat=<expr/deg>
                                     tapurl=<url-value>
                                     interface=tap1.0|tap1.1|cap
                                     auth=true|false taptable=<name>
                                     taplon=<column> taplat=<column>
                                     tapcols=<colname,...> sr=<expr/deg>
                                     find=all|best|each|each-dist
                                     blocksize=<int-value> maxrec=<int-value>
                                     sync=true|false blockmaxrec=<nrow>
                                     compress=true|false fixcols=none|dups|all
                                     suffixin=<label> suffixremote=<label>
                                     [in=]<table>
If you don't have the stilts script installed, write "java -jar stilts.jar" instead of "stilts" - see Section 3. The available <stilts-flags> are listed in Section 2.1. For programmatic invocation, the Task class for this command is uk.ac.starlink.ttools.task.TapUploadSkyMatch.
Parameter values are assigned on the command line as explained in Section 2.3. They are as follows:


auth = true|false       (Boolean)
If true, then an attempt will be made to authenticate with the TAP service even if anonymous operation is permitted. If the service offers authentication, you will be asked for credentials.
To use this option in non-interactive contexts, you may want to use the auth.username and auth.password system properties.

[Default: false]

blockmaxrec = <nrow>       (Long)
Sets the MAXREC parameter passed to the TAP service for each uploaded block. This allows you to request that the service overrides its default limit for the number of rows output from a single query. The service may still impose some "hard" limit beyond which the output row count cannot be increased.
Note this differs from the maxrec parameter, which gives the maximum total number of rows to be returned from this command.

blocksize = <int-value>       (Integer)
The number of rows uploaded in each TAP query. TAP services may have limits on the number of rows in a table uploaded for matching. This command can therefore break up input tables into blocks and make a number of individual TAP queries to generate the result. This parameter controls the maximum number of rows uploaded in each individual request. For an input table with fewer rows than this value, the whole thing is done as a single query.
[Default: 5000]

compress = true|false       (Boolean)
If true, the service is requested to provide HTTP-level compression for the response stream (Accept-Encoding header is set to "gzip", see RFC 2616). This does not guarantee that compression will happen but if the service honours this request it may result in a smaller amount of network traffic at the expense of more processing on the server and client.
[Default: true]

find = all|best|each|each-dist       (UserFindMode)
Determines which pair matches are included in the result.
all: All matches
best: Matched rows, best remote row for each input row
each: One row per input row, contains best remote match or blank
each-dist: One row per input row, column giving distance only for best match
Note only the all mode is symmetric between the two tables.
[Default: all]

fixcols = none|dups|all       (Fixer)
Determines how input columns are renamed before use in the output table. The choices are:
none: columns are not renamed
dups: columns which would otherwise have duplicate names in the output will be renamed to indicate which table they came from
all: all columns will be renamed to indicate which table they came from
If columns are renamed, the new ones are determined by suffix* parameters.
[Default: dups]

icmd = <cmds>       (ProcessingStep[])
Specifies processing to be performed on the input table as specified by parameter in, before any other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ifmt = <in-format>       (String)
Specifies the format of the input table as specified by parameter in. The known formats are listed in Section 5.1.1. This flag can be used if you know what format your table is in. If it has the special value (auto) (the default), then an attempt will be made to detect the format of the table automatically. This cannot always be done correctly however, in which case the program will exit with an error explaining which formats were attempted. This parameter is ignored for scheme-specified tables.
[Default: (auto)]

in = <table>       (StarTable)
The location of the input table. This may take one of the following forms:
A filename.
A URL.
The special value "-", meaning standard input. In this case the input format must be given explicitly using the ifmt parameter. Note that not all formats can be streamed in this way.
A scheme specification of the form :<scheme-name>:<scheme-args>.
A system command line with either a "<" character at the start, or a "|" character at the end ("<syscmd" or "syscmd|"). This executes the given pipeline and reads from its standard output. This will probably only work on unix-like systems.
In any case, compressed data in one of the supported compression formats (gzip, Unix compress or bzip2) will be decompressed transparently.
inlat = <expr/deg>       (String)
Longitude in degrees for the position of each row in the input table. This may simply be a column name, or it may be an algebraic expression as explained in Section 10. The coordinate system must match that used for the coordinates in the remote table.
inlon = <expr/deg>       (String)
Longitude in degrees for the position of each row in the input table. This may simply be a column name, or it may be an algebraic expression as explained in Section 10. The coordinate system must match that used for the coordinates in the remote table.
interface = tap1.0|tap1.1|cap       (String)
Defines how the service endpoints and the version of the TAP protocol to use for queries is determined. This may take one of the following (case-insensitive) values:
TAP1.0: The standard TAP endpoints are used, without examining the service's capabilities document. The service is queried using version 1.0 of the TAP protocol.
TAP1.1: The standard TAP endpoints are used, without examining the service's capabilities document. The service is queried using version 1.1 of the TAP protocol.
cap: The service's capabilities document is examined, and the endpoints listed there are used.
The capabilities document, if used, is read from tapurl/capabilities unless the capabilitiesurl parameter is defined, in which case that is used.

The baseline value of all the TAP service endpoints (sync, async, tables, capabilities, examples) are determined by this parameter, but each of those endpoint values may be overridden individually by other endpoint-specific parameters (syncurl, asyncurl, tablesurl, capabilitiesurl, availabilityurl, examplesurl)

For default (unauthenticated) access, the default value is usually suitable.

[Default: tap1.0]

istream = true|false       (Boolean)
If set true, the input table specified by the in parameter will be read as a stream. It is necessary to give the ifmt parameter in this case. Depending on the required operations and processing mode, this may cause the read to fail (sometimes it is necessary to read the table more than once). It is not normally necessary to set this flag; in most cases the data will be streamed automatically if that is the best thing to do. However it can sometimes result in less resource usage when processing large files in certain formats (such as VOTable). This parameter is ignored for scheme-specified tables.
[Default: false]

maxrec = <int-value>       (Integer)
Limit to the number of rows resulting from this operation. If the value is negative (the default) no limit is imposed. Note however that there can be truncation of the result if the number of records returned from a single chunk exceeds limits imposed by the service.
[Default: -1]

ocmd = <cmds>       (ProcessingStep[])
Specifies processing to be performed on the output table, after all other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ofmt = <out-format>       (String)
Specifies the format in which the output table will be written (one of the ones in Section 5.1.2 - matching is case-insensitive and you can use just the first few letters). If it has the special value "(auto)" (the default), then the output filename will be examined to try to guess what sort of file is required usually by looking at the extension. If it's not obvious from the filename what output format is intended, an error will result.
This parameter must only be given if omode has its default value of "out".

[Default: (auto)]

omode = out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui       (ProcessingMode)
The mode in which the result table will be output. The default mode is out, which means that the result will be written as a new table to disk or elsewhere, as determined by the out and ofmt parameters. However, there are other possibilities, which correspond to uses to which a table can be put other than outputting it, such as displaying metadata, calculating statistics, or populating a table in an SQL database. For some values of this parameter, additional parameters (<mode-args>) are required to determine the exact behaviour.
Possible values are

out
meta
stats
count
checksum
cgi
discard
topcat
samp
plastic
tosql
gui
Use the help=omode flag or see Section 6.4 for more information.
[Default: out]

out = <out-table>       (TableConsumer)
The location of the output table. This is usually a filename to write to. If it is equal to the special value "-" (the default) the output table will be written to standard output.
This parameter must only be given if omode has its default value of "out".

[Default: -]

sr = <expr/deg>       (String)
Maximum distance in degrees from the local table (lat,lon) position at which counterparts from the remote table will be identified. This is an ADQL expression interpreted within the TAP service, so it may be a constant value or may involve columns in the remote table.
suffixin = <label>       (String)
If the fixcols parameter is set so that input columns are renamed for insertion into the output table, this parameter determines how the renaming is done. It gives a suffix which is appended to all renamed columns from the input table.
[Default: _in]

suffixremote = <label>       (String)
If the fixcols parameter is set so that input columns are renamed for insertion into the output table, this parameter determines how the renaming is done. It gives a suffix which is appended to all renamed columns from the TAP result table.
[Default: _tap]

sync = true|false       (Boolean)
Determines whether the TAP queries are submitted in synchronous or asynchronous mode. Since this command uses chunking to keep requests to a reasonable size, hopefully requests will not take too long to execute, therefore the default is synchronous (true).
[Default: true]

tapcols = <colname,...>       (String[])
Comma-separated list of column names to retrieve from the remote table. If no value is supplied (the default), all columns from the remote table will be returned.
taplat = <column>       (String)
Latitude in degrees for the position of each row in the remote table. This is an ADQL expression interpreted within the TAP service, typically just a column name. The coordinate system must match that used for the input table.
taplon = <column>       (String)
Longitude in degrees for the position of each row in the remote table. This is an ADQL expression interpreted within the TAP service, typically just a column name. The coordinate system must match that used for the input table.
taptable = <name>       (String)
Name of the table in the given TAP service against which the matching will be performed.
tapurl = <url-value>       (URL)
The base URL of a Table Access Protocol service. This is the bare URL without a trailing "/[a]sync".
In the usual case, the default values of the various endpoints (sync and async query submission, tables metadata, service-provided examples etc) use this URL as a parent and append standard sub-paths.

In some cases however, determination of the endpoints is more complicated, as determined by the interface parameter which may cause endpoints to be read from the capabilities document at tapurl/capabilities, and by other endpoint-specific parameters (syncurl, asyncurl, tablesurl, capabilitiesurl, availabilityurl, examplesurl) for fine tuning.

B.30.2 Examples
Here are some examples of tapskymatch:

stilts tapskymatch tapurl=http://dc.g-vo.org/tap
                   taptable=twomass.data taplon=raj2000 taplat=dej2000
                   in=dr5qso.fits inlon=RA inlat=DEC sr=0.00027 find=all
                   out=qso_2mass.fits
Matches a local catalogue dr5qso.fits against the table named twomass.data in the GAVO TAP service. The search radius is 1/3600 degrees (1 arcsecond) and all 2MASS sources within the radius of each input source are returned.
If you run the command with "stilts -verbose ..." the text of the ADQL query submitted to the TAP service will (amongst other things) be logged on the console, and you will also see the number of rows uploaded and matched in each chunk.

stilts tapskymatch tapurl=http://dc.g-vo.org/tap
                   taptable=rave.dr3 taplon=raj2000 taplat=dej2000
                   tapcols=name,raj2000,dej2000,pmra,pmde
                   in=hip_main.fits inlon=RAdeg inlat=DEdeg
                   icmd='keepcols "HIP RAdeg DEdeg pmra pmde"'
                   sr=0.00027
                   icmd='select nearMoc(\"III/265/ravedr3\",RAdeg,DEdeg,.00027)'
                   icmd=cache icmd=progress
                   blocksize=5000
                   fixcols=all suffixin=_hip suffixremote=_rave
                   find=best
                   omode=topcat
This matches a local copy of the Hipparcos survey against a remote copy of the RAVE survey with a 1-arcsecond radius. The output table contains only the identifier, position and proper motion columns from both the input table (by using the keepcols filter) and the remote table (by specifying tapcols); the other columns are discarded. The fixcols and suffix* parameters ensure that a suffix is added to all the output column names, _hip for the input (Hipparcos) columns and _rave for the remote (RAVE) ones.
Before uploading, the input table is preprocessed by selecting only those rows that fall within the actual footprint of the RAVE survey, by filtering with a MOC giving RAVE coverage (the RAVE dr3 MOC is also available at this URL). This step reduces the amount of data that needs to be uploaded, since only those rows in the given coverage region stand a chance of having a match in the remote table. Note use of the nearMoc function with the value of the match radius as the fourth parameter; this includes those objects which may be outside the actual MOC region but close enough that a match could still result.

The blocksize parameter determines the number of rows uploaded at a time. If you receive warnings that the output has been truncated, you should decrease this number.

Progress is displayed as the match continues. The cache filter must be applied upstream of (before) the progress filter itself for this to work, since otherwise the match processing reads all the input rows before the actual work is done, and the progress monitor completes before the match actually starts.

Ensure that examples of each function and using a range of parameters are done.