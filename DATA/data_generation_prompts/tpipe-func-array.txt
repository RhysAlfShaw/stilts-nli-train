I want you to create 100 example prompt and reponses for finetunning a langauge model to generate stilts commands.

Return the results as a list of json of the following format:
[
    {
    "prompt": "prompt goes in here...",
    "response": "response goes here..."
    },
    ..
]

The command I want you to generate examples for is the tpipe command. The documentation of this is as follows:

tpipe: Performs pipeline processing on a table

tpipe performs all kinds of general purpose manipulations which take one table as input. It is extremely flexible, and can do the following things amongst others:

    calculate statistics
    display metadata
    select rows in various ways, including algebraically
    define new columns as algebraic functions of old ones
    delete or rearrange columns
    sort rows
    convert between table formats

and combine these operations. You can think of it as a supercharged table copying tool.
The basic operation of tpipe is that it reads an input table, performs zero or more processing steps on it, and then does something with the output. There are therefore three classes of things you need to tell it when it runs:

Input table location
    Specified by the in, ifmt and istream parameters.

Processing steps
    Either provide a string giving steps as the value of one or more cmd parameters, or the name of a file containing the steps using the script parameter. The steps that you can perform are described in Section 6.1.

Output table destination
    What happens to the output table is determined by the value of the omode parameter. By default, omode=out, in which case the table is written to a new table file in a format determined by ofmt. However, you can do other things with the result such as calculate the per-column statistics (omode=stats), view only the table and column metadata (omode=meta), display it directly in TOPCAT (omode=topcat) etc.

Examples of it being used.

Here are some examples of tpipe in use with explanations of what's going on. For simplicity these examples assume that you have the stilts script installed and are using a Unix-like shell; see Section 3 for an explanation of how to invoke the command if you just have the Java classes.

stilts tpipe cat.fits
Writes a FITS table to standard output in human-readable form. Since no mode specifier is given, omode=out is assumed, and output is to standard output in text format.

stilts tpipe cmd='head 5' cat.fits.gz
Does the same as the last example, but with one processing step: only the first five rows of the table are output. In this case, the input file is compressed using gzip - this is automatically detected.

stilts tpipe ifmt=csv xxx.csv \
             cmd='keepcols "index ra dec"' \
             omode=out ofmt=fits xxx.fits
Reads from a comma-separated values file, writes to a FITS file, and discards all columns in the input table apart from INDEX, RA and DEC. Note the quoting in the cmd argument: the outer quotes are so that the argument of the cmd parameter itself (keepcols "index ra dec") is not split up by spaces (to protect it from the shell), and the inner quotes are to keep the colid-list argument of the keepcols command together.

stilts tpipe ifmt=votable \
             cmd='addcol IV_SUM "(IMAG+VMAG)"' \
             cmd='addcol IV_DIFF "(IMAG-VMAG)"' \
             cmd='delcols "IMAG VMAG"' \
             omode=out ofmt=votable \
       < tab1.vot \
       > tab2.vot

Replaces two columns by their sum and difference in a VOTable. Since neither the in nor out parameters have been specified, the input and output are actually byte streams on standard input and standard output of the tpipe command in this case. The processing steps first add a column representing the sum, then add a column representing the difference, then delete the original columns.

stilts tpipe cmd='addskycoords -inunit sex fk5 gal \
                               RA2000 DEC2000 GAL_LONG GAL_LAT' \
             6dfgs.fits 6dfgs+gal.fits
Adds columns giving galactic coordinates to a table. Both input and output tables are FITS files. The galactic coordinates, stored in new columns named GAL_LONG and GAL_LAT, are calculated from FK5 J2000.0 coordinates given in the existing columns named RA2000 and DEC2000. The input (FK5) coordinates are represented as sexagesimal strings (hh:mm:ss, dd:mm:ss), and the output ones are numeric degrees.

stilts -disk tpipe 2dfgrs_ngp.fits \
                   cmd='keepcols "SEQNUM AREA ECCENT"' \
                   cmd='sort -down AREA' \
                   cmd='head 20'
Displays selected columns for the 20 rows with largest values in the AREA column of a FITS table. First the columns of interest are selected, then the rows are sorted into descending order by the value of the AREA column, then the first 20 rows of the resulting table are selected, and the result is written to standard output. Since a sort is being performed here, it's not possible to do all the processing a row at a time, since all the AREA values must be available for comparison during the sort. Two things are done here to accommodate this fact: first the column selection is done before the sort, so that it's only a 3-column table which needs to be available for random access, reducing the temporary storage required. Secondly the -disk flag is supplied, which means that temporary disk files rather than memory will be used for caching table data.

stilts tpipe 2dfgrs_ngp.fits \
             cmd='keepcols "SEQNUM AREA ECCENT"' \
             cmd='sorthead -down 20 AREA'
Has exactly the same effect as the previous example. However, the algorithm used by the sorthead filter is in most cases faster and cheaper on memory (only 20 rows ever have to be stored in this case), so this is generally a better approach than combining the sort and head filters.

stilts tpipe omode=meta cmd=@commands.lis http://archive.org/data/survey.vot.Z
Outputs column and table metadata about a table. In this case the table is a compressed VOTable at the end of a URL. Processing is performed according to the commands contained in a file named "commands.lis" in the current directory.

stilts tpipe in=survey.fits 
             cmd='select "skyDistanceDegrees(hmsToDegrees(RA),dmsToDegrees(DEC), \
                                             hmsToDegrees(2,28,11),dmsToDegrees(-6,49,45)) \
                          < 5./60."' \
             omode=count
Counts the number of rows within a given 5 arcmin cone of sky in a FITS table. The skyDistanceDegrees function is an expression which calculates the distance between the position specified in a row (as given by its RA and DEC columns) and a given point on the sky (here, 02:28:11,-06:49:45). Since skyDistanceDegrees's arguments and return value are in decimal degrees, some conversions are required: the RA and DEC columns are sexagesimal strings which are converted using the hmsToDegrees and dmsToDegrees functions respectively. Different versions of these functions (ones which take numeric arguments) are used to convert the coordinates of the fixed point to degrees. The result is compared to a constant expression representing 5 arcminutes in degrees. Any rows of the input table for which this comparison is true are included in the output. An alternative function, skyDistanceRadians which works in radians, is also available. These functions and constants used here are described in detail in Section 10.7.5 and Section 10.7.6.

stilts tpipe ifmt=ascii survey.txt \
             cmd='select "OBJTYPE == 3 && Z > 0.15"' \
             cmd='keepcols "IMAG JMAG KMAG"' \
             omode=stats
Calculate statistics on the I, J and K magnitudes of selected objects from a catalogue. Only those rows with the given OBJTYPE and in the given Z range are included. The minimum, maximum, mean, standard deviation etc of the IMAG, JMAG and KMAG columns will be written to standard output.

stilts -classpath lib/drivers/mysql-connector-java.jar \
       -Djdbc.drivers=com.mysql.jdbc.Driver \
       tpipe in=x.fits cmd="explodeall" omode=tosql \
             protocol=mysql host=localhost db=ASTRO1 dbtable=TABLEX \
             write=dropcreate user=mbt
Writes a FITS table to an SQL table, converting array-valued columns to scalar ones. To make the SQL connection work properly, the classpath is augmented to include the path of the MySQL JDBC driver and the jdbc.drivers system property is set to the JDBC driver class name. The output will be written as a new table named TABLEX in the MySQL database named ASTRO1 on a MySQL server on the local host. The password, if required, will be prompted for, as would any of the other required parameters if they had not been given on the command line. Any existing table in ASTRO1 with the name TABLEX is overwritten. The only processing done here is by the explodeall command, which takes any columns which have fixed-size array values and replaces them in the output with multiple scalar columns.

java -classpath stilts.jar:lib/drivers/mysql-connector-java.jar
     -Djdbc.drivers=com.mysql.jdbc.Driver \
     uk.ac.starlink.ttools.Stilts \
     tpipe in=x.fits \
           cmd=explodeall \
           omode=out \
           out="jdbc:mysql://localhost/ASTRO1?user=mbt#TABLEX"
This does exactly the same as the previous example, but achieves it in a slightly different way. In the first place, java is invoked directly with the necessary flags rather than getting the stilts script to do it. Note that you cannot use java's -jar flag in this case, because doing it like that would not permit access to the additional classes that contain the JDBC driver. In the second place we use omode=out rather than omode=tosql. For this we need to supply an out value which encodes the information about the SQL connection and table in a special URL-like format. As you can see, this is a bit arcane, which is why the omode=tosql mode can be a help.

stilts tpipe USNOB.FITS cmd='every 1000000' omode=stats
Calculates statistics on a selection of the rows in a catalogue, and writes the result to the terminal. In this example, every millionth row is sampled.

Usage
The usage of tpipe is

   stilts <stilts-flags> tpipe ifmt=<in-format> istream=true|false cmd=<cmds>
                               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui
                               out=<out-table> ofmt=<out-format>
                               [in=]<table>

If you don't have the stilts script installed, write "java -jar stilts.jar" instead of "stilts" - see Section 3. The available <stilts-flags> are listed in Section 2.1. For programmatic invocation, the Task class for this command is uk.ac.starlink.ttools.task.TablePipe.
Parameter values are assigned on the command line as explained in Section 2.3. They are as follows:


cmd = <cmds>       (ProcessingStep[])
    Specifies processing to be performed on the input table as specified by parameter in, before any other processing has taken place. The value of this parameter is one or more of the filter commands described in Section 6.1. If more than one is given, they must be separated by semicolon characters (";"). This parameter can be repeated multiple times on the same command line to build up a list of processing steps. The sequence of commands given in this way defines the processing pipeline which is performed on the table.
    Commands may alternatively be supplied in an external file, by using the indirection character '@'. Thus a value of "@filename" causes the file filename to be read for a list of filter commands to execute. The commands in the file may be separated by newline characters and/or semicolons, and lines which are blank or which start with a '#' character are ignored. A backslash character '\' at the end of a line joins it with the following line.

ifmt = <in-format>       (String)
    Specifies the format of the input table as specified by parameter in. The known formats are listed in Section 5.1.1. This flag can be used if you know what format your table is in. If it has the special value (auto) (the default), then an attempt will be made to detect the format of the table automatically. This cannot always be done correctly however, in which case the program will exit with an error explaining which formats were attempted. This parameter is ignored for scheme-specified tables.
    [Default: (auto)]

in = <table>       (StarTable)
    The location of the input table. This may take one of the following forms:
    A filename.
    A URL.
    The special value "-", meaning standard input. In this case the input format must be given explicitly using the ifmt parameter. Note that not all formats can be streamed in this way.
    A scheme specification of the form :<scheme-name>:<scheme-args>.
    A system command line with either a "<" character at the start, or a "|" character at the end ("<syscmd" or "syscmd|"). This executes the given pipeline and reads from its standard output. This will probably only work on unix-like systems.
    In any case, compressed data in one of the supported compression formats (gzip, Unix compress or bzip2) will be decompressed transparently.

istream = true|false       (Boolean)
    If set true, the input table specified by the in parameter will be read as a stream. It is necessary to give the ifmt parameter in this case. Depending on the required operations and processing mode, this may cause the read to fail (sometimes it is necessary to read the table more than once). It is not normally necessary to set this flag; in most cases the data will be streamed automatically if that is the best thing to do. However it can sometimes result in less resource usage when processing large files in certain formats (such as VOTable). This parameter is ignored for scheme-specified tables.
    [Default: false]

ofmt = <out-format>       (String)
    Specifies the format in which the output table will be written (one of the ones in Section 5.1.2 - matching is case-insensitive and you can use just the first few letters). If it has the special value "(auto)" (the default), then the output filename will be examined to try to guess what sort of file is required usually by looking at the extension. If it's not obvious from the filename what output format is intended, an error will result.
    This parameter must only be given if omode has its default value of "out".

    [Default: (auto)]

omode = out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui       (ProcessingMode)
    The mode in which the result table will be output. The default mode is out, which means that the result will be written as a new table to disk or elsewhere, as determined by the out and ofmt parameters. However, there are other possibilities, which correspond to uses to which a table can be put other than outputting it, such as displaying metadata, calculating statistics, or populating a table in an SQL database. For some values of this parameter, additional parameters (<mode-args>) are required to determine the exact behaviour.
    Possible values are

    out
    meta
    stats
    count
    checksum
    cgi
    discard
    topcat
    samp
    plastic
    tosql
    gui
    Use the help=omode flag or see Section 6.4 for more information.
    [Default: out]

out = <out-table>       (TableConsumer)
    The location of the output table. This is usually a filename to write to. If it is equal to the special value "-" (the default) the output table will be written to standard output.
    This parameter must only be given if omode has its default value of "out".

    [Default: -]


The avalible processing filters that can be used by cmd are described in this bit of documentation.
Processing Filters
This section lists the filter commands which can be used for table pipeline processing, in conjunction with cmd- or script-type parameters.

You can string as many of these together as you like. On the command line, you can repeat the cmd (or icmd1, or ocmd...) parameter multiple times, or use one cmd parameter and separate different filter specifiers with semicolons (";"). The effect is the same.

It's important to note that each command in the sequence of processing steps acts on the table at that point in the sequence. Thus either of the two identical invocations:

   stilts tpipe cmd='delcols 1; delcols 1; delcols 1'
   stilts tpipe cmd='delcols 1' cmd='delcols 1' cmd='delcols 1'
has the same effect as
   stilts tpipe cmd='delcols "1 2 3"'
since in the first case the columns are shifted left after each one is deleted, so the table seen by each step has one fewer column than the one before. Note also the use of quotes in the latter of the examples above, which is necessary so that the <colid-list> of the delcols command is interpreted as one argument not three separate words.
The available filters are described in the following subsections.

addcol
addpixsample
addresolve
addskycoords
assert
badval
cache
check
clearparams
collapsecols
colmeta
constcol
delcols
every
explodeall
explodecols
fixcolnames
group
head
healpixmeta
keepcols
meta
progress
random
randomview
repeat
replacecol
replaceval
rowrange
select
seqview
setparam
shuffle
sort
sorthead
stats
tablename
tail
transpose
uniq

Here are some aditional details:

10.5 Operators
The operators are pretty much the same as in the C language. The common ones are:

Arithmetic
+ (add)
- (subtract)
* (multiply)
/ (divide)
% (modulus)
Boolean
! (not)
&& (and)
|| (or)
^ (exclusive-or)
== (numeric identity)
!= (numeric non-identity)
< (less than)
> (greater than)
<= (less than or equal)
>= (greater than or equal)
Bitwise
& (and)
| (or)
^ (exclusive-or)
<< (left shift)
>> (right shift)
>>> (logical right shift)
Numeric Typecasts
(byte) (numeric -> signed byte)
(short) (numeric -> 2-byte integer)
(int) (numeric -> 4-byte integer)
(long) (numeric -> 8-byte integer)
(float) (numeric -> 4-type floating point)
(double) (numeric -> 8-byte floating point)
Note you may find the Maths conversion functions more convenient for numeric conversions than these.
Other
+ (string concatenation)
[] (array dereferencing - first element is zero)
?: (conditional switch)
instanceof (class membership)


10.7.2 Arrays
Functions which operate on array-valued cells. The array parameters of these functions can only be used on values which are already arrays (usually, numeric arrays). In most cases that means on values in table columns which are declared as array-valued. FITS and VOTable tables can have columns which contain array values, but other formats such as CSV cannot.

If you want to calculate aggregating functions like sum, min, max etc on multiple values which are not part of an array, it's easier to use the functions from the Lists class.

Note that none of these functions will calculate statistical functions over a whole column of a table.

The functions fall into a number of categories:

Aggregating operations, which map an array value to a scalar, including size, count, countTrue, maximum, minimum, sum, mean, median, quantile, stdev, variance, join.
Operations on one or more arrays which produce array results, including add, subtract, multiply, divide, reciprocal, condition, slice, pick. Mostly these work on any numeric array type and return floating point (double precision) values, but some of them (slice, pick) have variants for different array types.
The function array, which lets you assemble a floating point array value from a list of scalar numbers. There are variants (intArray, stringArray) for some different array types.

sum( array )
Returns the sum of all the non-blank elements in the array. If array is not a numeric array, null is returned.

Parameters:
array (Object): array of numbers
Return value
(floating point): sum of all the numeric values in array
mean( array )
Returns the mean of all the non-blank elements in the array. If array is not a numeric array, null is returned.

Parameters:
array (Object): array of numbers
Return value
(floating point): mean of all the numeric values in array
variance( array )
Returns the population variance of all the non-blank elements in the array. If array is not a numeric array, null is returned.

Parameters:
array (Object): array of numbers
Return value
(floating point): variance of the numeric values in array
stdev( array )
Returns the population standard deviation of all the non-blank elements in the array. If array is not a numeric array, null is returned.

Parameters:
array (Object): array of numbers
Return value
(floating point): standard deviation of the numeric values in array
minimum( array )
Returns the smallest of the non-blank elements in the array. If array is not a numeric array, null is returned.

Parameters:
array (Object): array of numbers
Return value
(floating point): minimum of the numeric values in array
maximum( array )
Returns the largest of the non-blank elements in the array. If array is not a numeric array, null is returned.

Parameters:
array (Object): array of numbers
Return value
(floating point): maximum of the numeric values in array
median( array )
Returns the median of the non-blank elements in the array. If array is not a numeric array, null is returned.

Parameters:
array (Object): array of numbers
Return value
(floating point): median of the numeric values in array
quantile( array, quant )
Returns a quantile value of the non-blank elements in the array. Which quantile is determined by the quant value; values of 0, 0.5 and 1 give the minimum, median and maximum respectively. A value of 0.99 would give the 99th percentile.

Parameters:
array (Object): array of numbers
quant (floating point): number in the range 0-1 deterining which quantile to calculate
Return value
(floating point): quantile corresponding to quant
size( array )
Returns the number of elements in the array. If array is not an array, zero is returned.

Parameters:
array (Object): array
Return value
(integer): size of array
count( array )
Returns the number of non-blank elements in the array. If array is not an array, zero is returned.

Parameters:
array (Object): array (may or may not be numeric)
Return value
(integer): number of non-blank elements in array
countTrue( array )
Returns the number of true elements in an array of boolean values.

Parameters:
array (array of boolean): array of true/false values
Return value
(integer): number of true values in array
join( array, joiner )
Returns a string composed of concatenating all the elements of an array, separated by a joiner string. If array is not an array, null is returned.

Parameters:
array (Object): array of numbers or strings
joiner (String): text string to interpose between adjacent elements
Return value
(String): string composed of array elements separated by joiner strings
Example:
join(array(1.5,2.1,-3.9), "; ") = "1.5; 2.1; -3.9"
dotProduct( array1, array2 )
Returns the dot (scalar) product of two numeric arrays. If either argument is not an array, or if the arrays are not of the same length, a blank value is returned.

Parameters:
array1 (Object): first array
array2 (Object): second array
Return value
(floating point): sum of element-wise products of input arrays
Example:
dotProduct(array(3,4,5), array(1,2,3)) = 26
add( arrayOrScalar1, arrayOrScalar2 )
Returns the element-by-element result of adding either two numeric arrays of the same length, or an array and a scalar considered as if an array of the right length.
If the arguments are not as expected (e.g. arrays of different lengths, both scalars, not numeric) then null is returned.


Parameters:
arrayOrScalar1 (Object): first numeric array/scalar
arrayOrScalar2 (Object): second numeric array/scalar
Return value
(array of floating point): element-by-element result of arrayOrScalar1 + arrayOrScalar2, the same length as the input array(s)
Examples:
add(array(1,2,3), array(0.1,0.2,0.3)) = [1.1, 2.2, 3.3]
add(array(1,2,3), 10) = [11,12,13]
subtract( arrayOrScalar1, arrayOrScalar2 )
Returns the element-by-element result of subtracting either two numeric arrays of the same length, or an array and a scalar considered as if an array of the right length.
If the arguments are not as expected (e.g. arrays of different lengths, both scalars, not numeric) then null is returned.


Parameters:
arrayOrScalar1 (Object): first numeric array/scalar
arrayOrScalar2 (Object): second numeric array/scalar
Return value
(array of floating point): element-by-element result of arrayOrScalar1 - arrayOrScalar2, the same length as the input array(s)
Examples:
subtract(array(1,2,3), array(0.1,0.2,0.3)) = [0.9, 1.8, 2.7]
subtract(array(1,2,3), 1.0) = [0, 1, 2]
multiply( arrayOrScalar1, arrayOrScalar2 )
Returns the element-by-element result of multiplying either two numeric arrays of the same length, or an array and a scalar considered as if an array of the right length.
If the arguments are not as expected (e.g. arrays of different lengths, both scalars, not numeric) then null is returned.


Parameters:
arrayOrScalar1 (Object): first numeric array/scalar
arrayOrScalar2 (Object): second numeric array/scalar
Return value
(array of floating point): element-by-element result of arrayOrScalar1 * arrayOrScalar2, the same length as the input array(s)
Examples:
multiply(array(1,2,3), array(2,4,6)) = [2, 8, 18]
multiply(2, array(1,2,3)) = [2, 4, 6]
divide( arrayOrScalar1, arrayOrScalar2 )
Returns the element-by-element result of dividing either two numeric arrays of the same length, or an array and a scalar considered as if an array of the right length.
If the arguments are not as expected (e.g. arrays of different lengths, both scalars, not numeric) then null is returned.


Parameters:
arrayOrScalar1 (Object): first numeric array/scalar
arrayOrScalar2 (Object): second numeric array/scalar
Return value
(array of floating point): element-by-element result of arrayOrScalar1 / arrayOrScalar2, the same length as the input array(s)
Examples:
divide(array(0,9,4), array(1,3,8)) = [0, 3, 0.5]
divide(array(50,60,70), 10) = [5, 6, 7]
reciprocal( array )
Returns the result of taking the reciprocal of every element of a numeric array. If the supplied array argument is not a numeric array, null is returned.

Parameters:
array (Object): array input
Return value
(array of floating point): array output, the same length as the array parameter
Example:
reciprocal(array(1,2,0.25) = [1, 0.5, 4]
condition( flagArray, trueValue, falseValue )
Maps a boolean array to a numeric array by using supplied numeric values to represent true and false values from the input array.
This has the same effect as applying the expression outArray[i] = flagArray[i] ? trueValue : falseValue.


Parameters:
flagArray (array of boolean): array of boolean values
trueValue (floating point): output value corresponding to an input true value
falseValue (floating point): output value corresponding to an input false value
Return value
(array of floating point): output numeric array, same length as flagArray
Example:
condition([true, false, true], 1, 0) = [1, 0, 1]
constant( n, value )
Returns a fixed-size array filled with a given constant value.
Note: This documents the double-precision version of the routine. Corresponding routines exist for other data types (float, long, int, short, byte).


Parameters:
n (integer): size of output array
value (floating point): value of every element in the output array
Return value
(array of floating point): n-element array with every element set to value
Example:
constant(5, 23.5) = [23.5, 23.5, 23.5, 23.5, 23.5]
slice( array, i0, i1 )
Returns a sub-sequence of values from a given array.
The semantics are like python array slicing, though both limits have to be specified: the output array contains the sequence of elements in the input array from i0 (inclusive) to i1 (exclusive). If a negative value is given in either case, it is added to the length of the input array, so that -1 indicates the last element of the input array. The indices are capped at 0 and the input array length respectively, so a large positive value may be used to indicate the end of the array. If the end index is less than or equal to the start index, a zero-length array is returned.

Note: This documents the double-precision version of the routine. Corresponding routines exist for other data types (float, long, int, short, byte, String, Object).


Parameters:
array (array of floating point): input array
i0 (integer): index of first element, inclusive (may be negative to count back from the end)
i1 (integer): index of the last element, exclusive (may be negative to count back from the end)
Return value
(array of floating point): array giving the sequence of elements specified by i0 and i1
Examples:
slice(array(10,11,12,13), 0, 3) = [10, 11, 12]
slice(array(10,11,12,13), -2, 999) = [12, 13]
pick( array, indices, ... )
Returns a selection of elements from a given array.
The output array consists of one element selected from the input array for each of the supplied index values. If a negative value is supplied for an index value, it is added to the input array length, so that -1 indicates the last element of the input array. If the input array is null, null is returned. If any of the index values is out of the range of the extent of the input array, an error results.

Note: This documents the double-precision version of the routine. Corresponding routines exist for other data types (float, long, int, short, byte, String, Object).


Parameters:
array (array of floating point): input array
indices (integer, one or more): one or more index into the input array (may be negative to count back from the end)
Return value
(array of floating point): array giving the elements specified by indices
Examples:
pick(array(10,11,12,13), 0, 3) = [10, 13]
pick(array(10,11,12,13), -1, -2, -3) = [13, 12, 11]
arrayFunc( expr, inArray )
Returns a floating-point array resulting from applying a given function expression element-by-element to an input array. The output array is the same length as the input array.
The supplied expression can use the variable "x" to refer to the corresponding element of the input array, and "i" to refer to its (zero-based) index. The various functions and operators from the expression language can all be used, but it is currently not possible to reference other table column values.

If there is an error in the expression, a blank value (not an array) will be returned.


Parameters:
expr (String): expression mapping input to output array values
inArray (Object): input array
Return value
(array of floating point): floating point array with the same number of elements as inArray, or null for a bad expr
Examples:
arrayFunc("3*x",array(0,1,2,3,NaN)) = [0, 3, 6, 9, NaN]
arrayFunc("pow(2,i)+x", array(0.5,0.5,0.5,0.5)) = [1.5, 2.5, 4.5, 8.5]
intArrayFunc( expr, inArray )
Returns an integer array resulting from applying a given function expression element-by-element to an input array. The output array is the same length as the input array.
The supplied expression can use the variable "x" to refer to the corresponding element of the input array, and "i" to refer to its (zero-based) index. The various functions and operators from the expression language can all be used, but it is currently not possible to reference other table column values.

If there is an error in the expression, a blank value (not an array) will be returned.


Parameters:
expr (String): expression mapping input to output array values
inArray (Object): input array
Return value
(array of integer): floating point array with the same number of elements as inArray, or null for a bad expr
Example:
intArrayFunc("-x",sequence(5)) = [0, -1, -2, -3, -4]
indexOf( array, item )
Returns the position in a supplied array at which a given item appears. The result is zero-based, so if the supplied item is the first entry in the array, the return value will be zero.
If the item does not appear in the array, -1 is returned. If it appears multiple times, the index of its first appearance is returned.

If indexOf(array, item)==n, then array[n] is equal to item.

Note: This documents the Object version of the routine. Corresponding routines exist for other data types (double, float, long, int, short).


Parameters:
array (array of Object): array which may contain the supplied item
item (Object): entry to look for in the array
Return value
(integer): the index of item in array, or -1
Examples:
indexOf(stringArray("QSO", "BCG", "SNR"), "BCG") = 1
indexOf(stringArray("QSO", "BCG", "SNR"), "TLA") = -1
sequence( n )
Returns an integer array of a given length with the values 0, 1, 2, ....
See also the loop functions, which provide similar functionality.


Parameters:
n (integer): length of array
Return value
(array of integer): n-element array, (0, 1, 2, ... n-1)
Example:
sequence(4) = (0, 1, 2, 3)
sequence( n, start, step )
Returns a floating point array of a given length with values starting at a given value and increasing with a given increment.
See also the loop functions, which provide similar functionality.


Parameters:
n (integer): length of array
start (floating point): value of first element
step (floating point): increment to apply to each element
Return value
(array of floating point): n-element array, (start, start+step, start+2*step, ... start+(n-1)*step)
Example:
sequence(4, 100, 0.1) = (100.0, 100.1, 100.2, 100.3)
loop( start, end )
Returns an integer array like the values taken in a for-loop with given start and end elements and a step of 1. The notional loop corresponds to:
    for (int x = start; x < end; x++)
 
If you want a floating point array, or one with a non-unit step, you can use the three-parameter version of the loop function. See also the sequence functions.


Parameters:
start (integer): value for first element of output array
end (integer): value one greater than last element of output array
Return value
(array of integer): array with end-start (or 0) elements (start, start+1, start+2, ..., end-1)
Examples:
loop(0, 5) = (0, 1, 2, 3, 4)
loop(5, 0) = ()
loop( start, end, step )
Returns a floating point array like the values taken in a for-loop with given start, end, and step arguments. For a positive step, the notional loop corresponds to:
    for (double x = start; x < end; x += step)
 
Note that numerical precision issues may result in the output array differing from its expected length by 1 (it is generally risky to rely on exact comparison of floating point values). If you want to be sure of the number of elements you can use the sequence function instead.


Parameters:
start (floating point): value for first element of output array
end (floating point): first value beyond last element of output array
step (floating point): increment between output array values; may not be zero
Return value
(array of floating point): array with approximately (end-start)/step (or 0) elements
Examples:
loop(10, 12, 0.5) = (10.0, 10.5, 11.0, 11.5)
loop(0, 10, 3) = (0., 3., 6., 9.)
loop(5, 0, -1) = (5., 4., 3., 2., 1.)
array( values, ... )
Returns a floating point numeric array built from the given arguments.

Parameters:
values (floating point, one or more): one or more array elements
Return value
(array of floating point): array
intArray( values, ... )
Returns an integer numeric array built from the given arguments.

Parameters:
values (integer, one or more): one or more array elements
Return value
(array of integer): array
stringArray( values, ... )
Returns a String array built from the given arguments.

Parameters:
values (String, one or more): one or more array elements
Return value
(array of String): array

Use these functions only to include in your expressions. Also produce descriptions of these in the training data. Produce 100 examples.
