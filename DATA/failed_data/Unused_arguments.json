[
    {
        "prompt": "I have a file `targets.csv`. Upload it and find all Gaia DR3 sources within 1.5 arcsec of my targets. The uploaded table should be named `tlist`.",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap nupload=1 upload1=targets.csv ifmt1=csv upname1=tlist adql='SELECT s.source_id, t.target_name, DISTANCE(POINT(\"ICRS\",s.ra,s.dec),POINT(\"ICRS\",t.ra,t.dec))*3600. AS sep_arcsec FROM gaiadr3.gaia_source AS s JOIN TAP_UPLOAD.tlist AS t ON 1=CONTAINS(POINT(\"ICRS\", s.ra, s.dec), CIRCLE(\"ICRS\", t.ra, t.dec, 1.5/3600.0))' out=gaia_matches_for_targets.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt1=csv\n\nUsage: tapquery nupload=<count> ufmtN=<in-format> uploadN=<tableN>\n                ucmdN=<cmds> ocmd=<cmds>\n                omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n                out=<out-table> ofmt=<out-format> upnameN=<adql-identifier>\n                tapurl=<url-value> interface=tap1.0|tap1.1|cap auth=true|false\n                adql=<query-text> parse=true|false sync=true|false\n                maxrec=<nrow> destruction=<iso8601>\n                executionduration=<seconds> compress=true|false\n                upvotformat=TABLEDATA|BINARY|BINARY2 language=<lang-name>\n                poll=<millisec> progress=true|false\n                delete=finished|never|always|now\n\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Upload my target list `targets.csv`, call it `mylist`, and find all 2MASS counterparts within 3 arcseconds.",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap nupload=1 upload1=targets.csv ifmt1=csv upname1=mylist adql='SELECT t.*, s.* FROM twomass.data AS t JOIN TAP_UPLOAD.mylist AS s ON 1=CONTAINS(POINT(\"J2000\",t.raj2000,t.dej2000),CIRCLE(\"J2000\",s.ra,s.dec,3.0/3600.))' out=2mass_counterparts.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt1=csv\n\nUsage: tapquery nupload=<count> ufmtN=<in-format> uploadN=<tableN>\n                ucmdN=<cmds> ocmd=<cmds>\n                omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n                out=<out-table> ofmt=<out-format> upnameN=<adql-identifier>\n                tapurl=<url-value> interface=tap1.0|tap1.1|cap auth=true|false\n                adql=<query-text> parse=true|false sync=true|false\n                maxrec=<nrow> destruction=<iso8601>\n                executionduration=<seconds> compress=true|false\n                upvotformat=TABLEDATA|BINARY|BINARY2 language=<lang-name>\n                poll=<millisec> progress=true|false\n                delete=finished|never|always|now\n\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Can you get me all the data from the GAVO obscore table and then filter it locally to only keep rows where `target_name` is 'M31'?",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT * FROM ivoa.obscore' ocmd='select equalsIgnoreCase(target_name, \"M31\")'",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'M31' ')'\n\nCommand was: select equalsIgnoreCase(target_name, \"M31\")\n\nUsage: select <expr>\n    (Unused arguments: 'M31' ')')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Upload my list of objects, `object_list.csv`, and join it with a TAP table on the `object_id` column.",
        "response": "stilts tapquery tapurl=http://my.service/tap nupload=1 upload1=object_list.csv ifmt1=csv upname1=myobs adql='SELECT r.*, u.* FROM remote_table AS r JOIN TAP_UPLOAD.myobs AS u ON r.object_id = u.object_id' out=id_join.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt1=csv\n\nUsage: tapquery nupload=<count> ufmtN=<in-format> uploadN=<tableN>\n                ucmdN=<cmds> ocmd=<cmds>\n                omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n                out=<out-table> ofmt=<out-format> upnameN=<adql-identifier>\n                tapurl=<url-value> interface=tap1.0|tap1.1|cap auth=true|false\n                adql=<query-text> parse=true|false sync=true|false\n                maxrec=<nrow> destruction=<iso8601>\n                executionduration=<seconds> compress=true|false\n                upvotformat=TABLEDATA|BINARY|BINARY2 language=<lang-name>\n                poll=<millisec> progress=true|false\n                delete=finished|never|always|now\n\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query the ASI SSDC TAP Service for 10 ObsCore records related to the facility 'Fermi' and apply an external column filter to select only rows where data_type is 'photon'.",
        "response": "stilts tapquery tapurl=https://tools.ssdc.asi.it/TAPSSDC/tap adql='SELECT TOP 10 * FROM ivoa.ObsCore WHERE facility_name = ''Fermi''' ocmd='select data_type == \"photon\"' out=fermi_photons.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '==' 'photon'\n\nCommand was: select data_type == \"photon\"\n\nUsage: select <expr>\n    (Unused arguments: '==' 'photon')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Use the CDS SIMBAD TAP to retrieve basic data, and filter the output locally to remove rows where the object type is 'Star' using ocmd.",
        "response": "stilts tapquery tapurl=http://simbad.cds.unistra.fr/simbad/sim-tap adql='SELECT main_id, otype, ra, dec FROM basic' ocmd='select otype != \"Star\"' out=simbad_nonstar.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'Star'\n\nCommand was: select otype != \"Star\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'Star')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query the ARVO Byurakan TAP service for metadata, ensuring the query uses minimal verbosity (VERB=1) and is executed synchronously.",
        "response": "stilts tapquery tapurl=http://arvo-registry.sci.am/tap adql='SELECT table_name, description FROM TAP_SCHEMA.tables' sync=true verb=1 out=arvo_meta_low_verb.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: tapquery nupload=<count> ufmtN=<in-format> uploadN=<tableN>\n                ucmdN=<cmds> ocmd=<cmds>\n                omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n                out=<out-table> ofmt=<out-format> upnameN=<adql-identifier>\n                tapurl=<url-value> interface=tap1.0|tap1.1|cap auth=true|false\n                adql=<query-text> parse=true|false sync=true|false\n                maxrec=<nrow> destruction=<iso8601>\n                executionduration=<seconds> compress=true|false\n                upvotformat=TABLEDATA|BINARY|BINARY2 language=<lang-name>\n                poll=<millisec> progress=true|false\n                delete=finished|never|always|now\n\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query ESO TAP_OBS for VIRCAM raw data, then filter the resulting table locally to keep only observations taken with the Ks filter.",
        "response": "stilts tapquery tapurl=https://archive.eso.org/tap_obs adql='SELECT * FROM raw.vircam' ocmd='select filter_id == \"Ks\"' out=vircam_ks_local.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '==' 'Ks'\n\nCommand was: select filter_id == \"Ks\"\n\nUsage: select <expr>\n    (Unused arguments: '==' 'Ks')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query the MAST SkyMapper DR4 catalog and locally assert that all retrieved RA values are between 0 and 360 degrees.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/skymapperdr4/ adql='SELECT ra, dec FROM smssdr4.master' ocmd='assert ra>=0 && ra<360, \"RA is out of range!\"' out=skymapper_assert.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'ra<360,' 'RA is out of range!'\n\nCommand was: assert ra>=0 && ra<360, \"RA is out of range!\"\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: 'ra<360,' 'RA is out of range!')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query SIMBAD for a sample of sources and filter locally to remove any row where the object type is 'Star'.",
        "response": "stilts tapquery tapurl=http://simbad.cds.unistra.fr/simbad/sim-tap adql='SELECT main_id, otype FROM basic' maxrec=100 ocmd='select otype != \"Star\"' out=simbad_non_stars.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'Star'\n\nCommand was: select otype != \"Star\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'Star')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query the ESO TAP_CAT for table parameters and filter the results locally to keep only rows where the parameter name starts with 'V'.",
        "response": "stilts tapquery tapurl=http://archive.eso.org/tap_cat adql='SELECT * FROM TAP_SCHEMA.parameters' ocmd='select startsWith(parameter_name, \"V\")' out=eso_cat_v_params.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'V' ')'\n\nCommand was: select startsWith(parameter_name, \"V\")\n\nUsage: select <expr>\n    (Unused arguments: 'V' ')')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Retrieve data from the MAST STScI 3D-HST HLSP and include a local filter to retain only sources where the ID starts with '1'.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/3dhst/ adql='SELECT * FROM 3dhst.photometry' maxrec=100 ocmd='select startsWith(id, \"1\")' out=3dhst_id_1.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '1' ')'\n\nCommand was: select startsWith(id, \"1\")\n\nUsage: select <expr>\n    (Unused arguments: '1' ')')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Upload a table containing source IDs and R-band magnitudes to MAST Gaia DR3 and perform an exact string match join on `source_id`.",
        "response": "stilts tapquery tapurl=https://mast.stsci.edu/vo-tap/api/v0.1/gaiadr3/ adql='SELECT g.*, u.Rmag FROM gaiadr3.gaia_source AS g JOIN TAP_UPLOAD.my_targets AS u ON g.source_id = u.source_id' nupload=1 upload1=target_mags.fits upname1=my_targets matcher=exact out=mast_gaia_id_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: matcher=exact\n\nUsage: tapquery nupload=<count> ufmtN=<in-format> uploadN=<tableN>\n                ucmdN=<cmds> ocmd=<cmds>\n                omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n                out=<out-table> ofmt=<out-format> upnameN=<adql-identifier>\n                tapurl=<url-value> interface=tap1.0|tap1.1|cap auth=true|false\n                adql=<query-text> parse=true|false sync=true|false\n                maxrec=<nrow> destruction=<iso8601>\n                executionduration=<seconds> compress=true|false\n                upvotformat=TABLEDATA|BINARY|BINARY2 language=<lang-name>\n                poll=<millisec> progress=true|false\n                delete=finished|never|always|now\n\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Retrieve 10 rows from the Pithia VO datacenter table schemas, format the output as an HTML table, and explicitly declare the input format as VOTable.",
        "response": "stilts tapquery tapurl=http://pithia.cbk.waw.pl/tap adql='SELECT TOP 10 * FROM TAP_SCHEMA.tables' ofmt=html out=pithia_schema.html ifmt=votable",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=votable\n\nUsage: tapquery nupload=<count> ufmtN=<in-format> uploadN=<tableN>\n                ucmdN=<cmds> ocmd=<cmds>\n                omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n                out=<out-table> ofmt=<out-format> upnameN=<adql-identifier>\n                tapurl=<url-value> interface=tap1.0|tap1.1|cap auth=true|false\n                adql=<query-text> parse=true|false sync=true|false\n                maxrec=<nrow> destruction=<iso8601>\n                executionduration=<seconds> compress=true|false\n                upvotformat=TABLEDATA|BINARY|BINARY2 language=<lang-name>\n                poll=<millisec> progress=true|false\n                delete=finished|never|always|now\n\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query the JVO ALMA service for 20 ObsCore entries and filter them locally to keep only rows where the observation ID starts with '2016'.",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/alma adql='SELECT TOP 20 * FROM alma.obscore' ocmd='select startsWith(obs_id, \"2016\")' out=alma_filtered_year.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '2016' ')'\n\nCommand was: select startsWith(obs_id, \"2016\")\n\nUsage: select <expr>\n    (Unused arguments: '2016' ')')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query the ESO TAP_CAT service for table metadata and use a post-processing filter to keep only rows whose name starts with 'vhs_'.",
        "response": "stilts tapquery tapurl=http://archive.eso.org/tap_cat adql='SELECT * FROM TAP_SCHEMA.tables' ocmd='select startsWith(table_name, \"vhs_\")' out=eso_vhs_metadata.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'vhs_' ')'\n\nCommand was: select startsWith(table_name, \"vhs_\")\n\nUsage: select <expr>\n    (Unused arguments: 'vhs_' ')')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query the ESO TAP_CAT for table schemas and filter the results locally to exclude any table named 'TAP_SCHEMA.columns'.",
        "response": "stilts tapquery tapurl=http://archive.eso.org/tap_cat adql='SELECT table_name FROM TAP_SCHEMA.tables' ocmd='select table_name != \"TAP_SCHEMA.columns\"' out=eso_schema_filtered.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'TAP_SCHEMA.columns'\n\nCommand was: select table_name != \"TAP_SCHEMA.columns\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'TAP_SCHEMA.columns')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Retrieve all galaxy names from the Subaru KUG2000 catalogue and filter them locally to keep only names containing 'KUG' followed by '3'.",
        "response": "stilts tapquery tapurl=http://jvo.nao.ac.jp/skynode/do/tap/kug2000 adql='SELECT KUG FROM kug2000.table_main' ocmd='select matches(KUG, \"KUG.*3\")' out=kug_filtered.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'KUG.*3' ')'\n\nCommand was: select matches(KUG, \"KUG.*3\")\n\nUsage: select <expr>\n    (Unused arguments: 'KUG.*3' ')')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Retrieve column metadata from the European HST Archive TAP service and filter the result locally to only show columns related to 'exposure'.",
        "response": "stilts tapquery tapurl=https://hst.esac.esa.int/tap-server/tap adql='SELECT * FROM TAP_SCHEMA.columns' ocmd='select contains(column_name, \"exp\")' out=hst_exp_meta.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'exp' ')'\n\nCommand was: select contains(column_name, \"exp\")\n\nUsage: select <expr>\n    (Unused arguments: 'exp' ')')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Query the GAVO Data Center for table names and locally add a column `ACCESS_SERVICE` with a constant URL string (using concatenation).",
        "response": "stilts tapquery tapurl=http://dc.g-vo.org/tap adql='SELECT TOP 5 table_name FROM TAP_SCHEMA.tables' ocmd='addcol ACCESS_SERVICE concat(\"http://dc.g-vo.org/tap\", \"/query\")' out=gavo_url_col.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' '/query' ')'\n\nCommand was: addcol ACCESS_SERVICE concat(\"http://dc.g-vo.org/tap\", \"/query\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ',' '/query' ')')\n",
        "source_cmd_file": "tapquery.json"
    },
    {
        "prompt": "Select rows from `catalog_with_ids.fits` where the `ID` string starts with 'NGC'.",
        "response": "stilts tpipe in=catalog_with_ids.fits cmd='select startsWith(ID,\"NGC\")' out=ngc_objects.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ')'\n\nCommand was: select startsWith(ID,\"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Create a new column `IS_EXTENDED` which is true if the `CLASS` column contains the word 'GALAXY'.",
        "response": "stilts tpipe in=morphology.fits cmd='addcol IS_EXTENDED contains(CLASS,\"GALAXY\")' out=extended_sources.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ')'\n\nCommand was: addcol IS_EXTENDED contains(CLASS,\"GALAXY\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "I have an array column `SPECTRUM`. I need to replace it with a smoothed version, let's say by averaging every 3 elements.",
        "response": "stilts tpipe in=spectra.fits cmd='replacecol SPECTRUM arrayFunc(\"mean(inArray[i-1:i+2])\",SPECTRUM)' out=spectra_smoothed.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',SPECTRUM)'\n\nCommand was: replacecol SPECTRUM arrayFunc(\"mean(inArray[i-1:i+2])\",SPECTRUM)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: ',SPECTRUM)')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column `FULL_ID` by concatenating `SURVEY` name, a colon, and the `SOURCE_ID`.",
        "response": "stilts tpipe in=catalog.fits cmd='addcol FULL_ID concat(SURVEY,\":\",SOURCE_ID)' out=full_ids.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',SOURCE_ID)'\n\nCommand was: addcol FULL_ID concat(SURVEY,\":\",SOURCE_ID)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ',SOURCE_ID)')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "I have an array column `PIXEL_VALUES`. I want to replace any negative values in it with zero.",
        "response": "stilts tpipe in=image_data.fits cmd='replacecol PIXEL_VALUES arrayFunc(\"max(x,0)\",PIXEL_VALUES)' out=image_data_nonneg.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',PIXEL_VALUES)'\n\nCommand was: replacecol PIXEL_VALUES arrayFunc(\"max(x,0)\",PIXEL_VALUES)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: ',PIXEL_VALUES)')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Ensure that the coordinate column 'RA' contains no negative values; if it does, terminate immediately with an error message.",
        "response": "stilts tpipe in=data.fits cmd='assert RA >= 0.0 \"RA value is negative\"' out=ra_asserted.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '0.0' 'RA value is negative'\n\nCommand was: assert RA >= 0.0 \"RA value is negative\"\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '0.0' 'RA value is negative')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Convert the array column 'SPECTRUM' values to floating point using an element-wise function: multiply each element by 1000.",
        "response": "stilts tpipe in=spectra.fits cmd='replacecol SPECTRUM arrayFunc(\"x * 1000.0\", SPECTRUM)' out=spectra_scaled.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'SPECTRUM)'\n\nCommand was: replacecol SPECTRUM arrayFunc(\"x * 1000.0\", SPECTRUM)\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: ',' 'SPECTRUM)')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter the table to keep rows where the string column 'SPECIES' contains the substring 'ant' (case insensitive).",
        "response": "stilts tpipe in=animals.fits cmd='select contains(toLowerCase(SPECIES), \"ant\")' out=ants.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'ant' ')'\n\nCommand was: select contains(toLowerCase(SPECIES), \"ant\")\n\nUsage: select <expr>\n    (Unused arguments: 'ant' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Check if a given string column 'NOTES' contains the exact phrase 'Failed Observation'.",
        "response": "stilts tpipe in=logs.fits cmd='select equals(NOTES, \"Failed Observation\")' out=failed_logs.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Failed Observation' ')'\n\nCommand was: select equals(NOTES, \"Failed Observation\")\n\nUsage: select <expr>\n    (Unused arguments: 'Failed Observation' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a boolean column that is true only if the string column 'DESIG' starts with 'NGC'.",
        "response": "stilts tpipe in=objects.fits cmd='addcol IS_NGC startsWith(DESIG, \"NGC\")' out=ngc_flags.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: addcol IS_NGC startsWith(DESIG, \"NGC\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Test for rows where the string 'OBS_ID' starts with 'XMM' or 'Chandra'.",
        "response": "stilts tpipe in=obs.fits cmd='select startsWith(OBS_ID, \"XMM\") || startsWith(OBS_ID, \"Chandra\")' out=xmm_chandra.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'XMM' ')' '||' 'startsWith(OBS_ID,' 'Chandra' ')'\n\nCommand was: select startsWith(OBS_ID, \"XMM\") || startsWith(OBS_ID, \"Chandra\")\n\nUsage: select <expr>\n    (Unused arguments: 'XMM' ')' '||' 'startsWith(OBS_ID,' 'Chandra' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter the catalogue to keep only objects whose name ends with 'Nebula' (case sensitive).",
        "response": "stilts tpipe in=objects.fits cmd='select endsWith(NAME, \"Nebula\")' out=nebulae.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Nebula' ')'\n\nCommand was: select endsWith(NAME, \"Nebula\")\n\nUsage: select <expr>\n    (Unused arguments: 'Nebula' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Check if a string column 'FLAG_TEXT' has null values and replace them with 'UNKNOWN'.",
        "response": "stilts tpipe in=data.fits cmd='replacecol FLAG_TEXT NULL_FLAG_TEXT ? \"UNKNOWN\" : FLAG_TEXT' out=flag_text_fixed.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '?' 'UNKNOWN' ':' 'FLAG_TEXT'\n\nCommand was: replacecol FLAG_TEXT NULL_FLAG_TEXT ? \"UNKNOWN\" : FLAG_TEXT\n\nUsage: replacecol [-name <name>] [-units <units>] [-ucd <ucd>]\n                  [-utype <utype>] [-xtype <xtype>] [-desc <descrip>]\n                  <col-id> <expr>\n    (Unused arguments: '?' 'UNKNOWN' ':' 'FLAG_TEXT')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'ERROR_Q_ERR' containing the quadrature sum of the array columns 'ERR_X' and 'ERR_Y', element-wise.",
        "response": "stilts tpipe in=arrays.fits cmd='addcol ERROR_Q_ERR arrayFunc(\"sqrt(x)\", add(square(ERR_X), square(ERR_Y)))' out=array_quad_sum.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'add(square(ERR_X),' 'square(ERR_Y)))'\n\nCommand was: addcol ERROR_Q_ERR arrayFunc(\"sqrt(x)\", add(square(ERR_X), square(ERR_Y)))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ',' 'add(square(ERR_X),' 'square(ERR_Y)))')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'FLAG_TEXT' which is 'A' if FLAG > 0, and 'B' otherwise.",
        "response": "stilts tpipe in=data.fits cmd='addcol FLAG_TEXT FLAG > 0 ? \"A\" : \"B\"' out=conditional_flag.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0' '?' 'A' ':' 'B'\n\nCommand was: addcol FLAG_TEXT FLAG > 0 ? \"A\" : \"B\"\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '>' '0' '?' 'A' ':' 'B')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Check if column 'Z' exists and assert that it is type Double.",
        "response": "stilts tpipe in=data.fits cmd='meta Name Class' cmd='select equals(Name, \"Z\")' cmd='assert equals(Class, \"Double\")' omode=discard",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Z' ')'\n\nCommand was: select equals(Name, \"Z\")\n\nUsage: select <expr>\n    (Unused arguments: 'Z' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a string column that is the concatenation of 'FIRST_NAME', a space, and 'LAST_NAME'.",
        "response": "stilts tpipe in=names.fits cmd='addcol FULL_NAME concat(FIRST_NAME, \" \", LAST_NAME)' out=full_names.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ' ' ',' 'LAST_NAME)'\n\nCommand was: addcol FULL_NAME concat(FIRST_NAME, \" \", LAST_NAME)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ' ' ',' 'LAST_NAME)')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Check if column 'ID' is a long integer type and assert it is true.",
        "response": "stilts tpipe in=data.fits cmd='meta Name Class' cmd='select equals(Name, \"ID\")' cmd='assert equals(Class, \"Long\")' omode=discard",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'ID' ')'\n\nCommand was: select equals(Name, \"ID\")\n\nUsage: select <expr>\n    (Unused arguments: 'ID' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter the table to keep rows where the string column 'SPECIES' matches the regular expression '.*(Ant|Bee).*'.",
        "response": "stilts tpipe in=animals.fits cmd='select matches(SPECIES, \".*(Ant|Bee).*\")' out=insects.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '.*(Ant|Bee).*' ')'\n\nCommand was: select matches(SPECIES, \".*(Ant|Bee).*\")\n\nUsage: select <expr>\n    (Unused arguments: '.*(Ant|Bee).*' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Calculate statistics on the derived column 'MAG_ABS' for the subset where 'TYPE' is 'GALAXY'.",
        "response": "stilts tpipe in=data.fits cmd='select equals(TYPE, \"GALAXY\")' cmd='addcol MAG_ABS MAG - distanceToModulus(DISTANCE)' cmd='stats MAG_ABS' omode=stats",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GALAXY' ')'\n\nCommand was: select equals(TYPE, \"GALAXY\")\n\nUsage: select <expr>\n    (Unused arguments: 'GALAXY' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a boolean array column 'BRIGHT_PIXELS' that is true where 'FLUX_ARRAY' elements are greater than the array mean.",
        "response": "stilts tpipe in=spectra.fits cmd='addcol BRIGHT_PIXELS arrayFunc(\"x > mean(FLUX_ARRAY)\", FLUX_ARRAY)' out=bright_pixels.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'FLUX_ARRAY)'\n\nCommand was: addcol BRIGHT_PIXELS arrayFunc(\"x > mean(FLUX_ARRAY)\", FLUX_ARRAY)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ',' 'FLUX_ARRAY)')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter rows to keep those where the string 'OBS_ID' ends with '001' or '002'.",
        "response": "stilts tpipe in=obs.fits cmd='select endsWith(OBS_ID, \"001\") || endsWith(OBS_ID, \"002\")' out=final_obs.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '001' ')' '||' 'endsWith(OBS_ID,' '002' ')'\n\nCommand was: select endsWith(OBS_ID, \"001\") || endsWith(OBS_ID, \"002\")\n\nUsage: select <expr>\n    (Unused arguments: '001' ')' '||' 'endsWith(OBS_ID,' '002' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Create 50 rows starting at index 10 and stepping by 2, but force the column type to double precision.",
        "response": "stilts tpipe in=:loop:10,110,2 forcefloat=true out=double_loop_sample.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: forcefloat=true\n\nUsage: tpipe ifmt=<in-format> istream=true|false cmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format>\n             [in=]<table>\n\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter the table to keep only rows where the object type (TYPE) is not 'Star'.",
        "response": "stilts tpipe in=cat.fits cmd='select !equals(TYPE, \"Star\")' out=non_stars.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Star' ')'\n\nCommand was: select !equals(TYPE, \"Star\")\n\nUsage: select <expr>\n    (Unused arguments: 'Star' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'MAG_U_AB_NEW' using Johnson U mag converted to AB, and explicitly setting its UCD.",
        "response": "stilts tpipe in=phot.fits cmd='addcol -ucd \"phot.mag;em.opt.U\" MAG_U_AB_NEW MAG_U + JOHNSON_AB_U' out=u_ab_new_meta.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'JOHNSON_AB_U'\n\nCommand was: addcol -ucd \"phot.mag;em.opt.U\" MAG_U_AB_NEW MAG_U + JOHNSON_AB_U\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'JOHNSON_AB_U')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'MAG_R_AB_NEW' converting Johnson R mag to AB, explicitly setting its UCD.",
        "response": "stilts tpipe in=phot.fits cmd='addcol -ucd \"phot.mag;em.opt.R\" MAG_R_AB_NEW MAG_R + JOHNSON_AB_R' out=r_ab_new_meta.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'JOHNSON_AB_R'\n\nCommand was: addcol -ucd \"phot.mag;em.opt.R\" MAG_R_AB_NEW MAG_R + JOHNSON_AB_R\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'JOHNSON_AB_R')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter the table to keep rows where the string 'FLAG' is exactly 'GOOD' (case sensitive).",
        "response": "stilts tpipe in=data.fits cmd='select equals(FLAG, \"GOOD\")' out=good_flag_filter.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GOOD' ')'\n\nCommand was: select equals(FLAG, \"GOOD\")\n\nUsage: select <expr>\n    (Unused arguments: 'GOOD' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'MAG_H_AB_NEW' converting 2MASS H mag to AB, explicitly setting its UCD.",
        "response": "stilts tpipe in=phot.fits cmd='addcol -ucd \"phot.mag;em.IR.H\" MAG_H_AB_NEW MAG_H + VEGA_AB_H' out=h_ab_new_meta.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'VEGA_AB_H'\n\nCommand was: addcol -ucd \"phot.mag;em.IR.H\" MAG_H_AB_NEW MAG_H + VEGA_AB_H\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'VEGA_AB_H')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'ERROR_Q_SUM' containing the element-wise quadrature sum of three array columns, 'ERR1', 'ERR2', and 'ERR3'.",
        "response": "stilts tpipe in=arrays.fits cmd='addcol ERROR_Q_SUM arrayFunc(\"sqrt(x)\", add(square(ERR1), add(square(ERR2), square(ERR3))))' out=array_quad_sum_3d.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'add(square(ERR1),' 'add(square(ERR2),' 'square(ERR3))))'\n\nCommand was: addcol ERROR_Q_SUM arrayFunc(\"sqrt(x)\", add(square(ERR1), add(square(ERR2), square(ERR3))))\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ',' 'add(square(ERR1),' 'add(square(ERR2),' 'square(ERR3))))')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter to keep only rows where the 'FLAG' string is exactly 'GOOD' (case insensitive).",
        "response": "stilts tpipe in=data.fits cmd='select equalsIgnoreCase(FLAG, \"GOOD\")' out=good_flag_case_insensitive.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GOOD' ')'\n\nCommand was: select equalsIgnoreCase(FLAG, \"GOOD\")\n\nUsage: select <expr>\n    (Unused arguments: 'GOOD' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'IS_GALAXY' using string equality check for 'TYPE' column, and rename 'TYPE' to 'OBJECT_TYPE'.",
        "response": "stilts tpipe in=cat.fits cmd='addcol IS_GALAXY equals(TYPE, \"GALAXY\")' cmd='colmeta -name OBJECT_TYPE TYPE' out=galaxy_flagged.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GALAXY' ')'\n\nCommand was: addcol IS_GALAXY equals(TYPE, \"GALAXY\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'GALAXY' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'MAG_I_AB_NEW' converting Johnson I mag to AB, explicitly setting its UCD.",
        "response": "stilts tpipe in=phot.fits cmd='addcol -ucd \"phot.mag;em.opt.I\" MAG_I_AB_NEW MAG_I + JOHNSON_AB_I' out=i_ab_new_meta.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'JOHNSON_AB_I'\n\nCommand was: addcol -ucd \"phot.mag;em.opt.I\" MAG_I_AB_NEW MAG_I + JOHNSON_AB_I\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'JOHNSON_AB_I')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a boolean column 'IS_VALID_NAME' that is true if the string column 'NAME' contains only alphanumeric characters.",
        "response": "stilts tpipe in=data.fits cmd='addcol IS_VALID_NAME matches(NAME, \"^[A-Za-z0-9_]+$\")' out=valid_names.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '^[A-Za-z0-9_]+$' ')'\n\nCommand was: addcol IS_VALID_NAME matches(NAME, \"^[A-Za-z0-9_]+$\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '^[A-Za-z0-9_]+$' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter the table to keep rows where the string column 'SECTOR_ID' matches the pattern 'TESS_{3}'.",
        "response": "stilts tpipe in=data.fits cmd='select matches(SECTOR_ID, \"TESS_[1, 2, 21-27]{3}\")' out=tess_sectors.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'TESS_[1, 2, 21-27]{3}' ')'\n\nCommand was: select matches(SECTOR_ID, \"TESS_[1, 2, 21-27]{3}\")\n\nUsage: select <expr>\n    (Unused arguments: 'TESS_[1, 2, 21-27]{3}' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a parameter 'DATA_SOURCE' by reading the unique path component of the input file name (e.g., 'catalog.fits').",
        "response": "stilts tpipe in=path/to/catalog.fits cmd='setparam DATA_SOURCE replaceAll(param$in, \".*/|\\.fits$\", \"\")' out=path_param.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '.*/|.fits$' ',' '' ')'\n\nCommand was: setparam DATA_SOURCE replaceAll(param$in, \".*/|\\.fits$\", \"\")\n\nUsage: setparam [-type byte|short|int|long|float|double|boolean|string]\n                [-desc <descrip>] [-unit <units>] [-ucd <ucd>]\n                [-utype <utype>] [-xtype <xtype>]\n                <pname> <pexpr>\n    (Unused arguments: '.*/|.fits$' ',' '' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'MAG_K_AB_NEW' converting 2MASS K mag to AB, explicitly setting its UCD.",
        "response": "stilts tpipe in=phot.fits cmd='addcol -ucd \"phot.mag;em.IR.K\" MAG_K_AB_NEW MAG_K + VEGA_AB_K' out=k_ab_new_meta.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'VEGA_AB_K'\n\nCommand was: addcol -ucd \"phot.mag;em.IR.K\" MAG_K_AB_NEW MAG_K + VEGA_AB_K\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'VEGA_AB_K')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Select rows where the string column 'CLASS' does not contain 'AGN'.",
        "response": "stilts tpipe in=cat.fits cmd='select !contains(CLASS, \"AGN\")' out=no_agn.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'AGN' ')'\n\nCommand was: select !contains(CLASS, \"AGN\")\n\nUsage: select <expr>\n    (Unused arguments: 'AGN' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Use the 'meta' filter to verify that column 2 has the UCD 'phot.mag'.",
        "response": "stilts tpipe in=data.fits cmd='meta Name UCD' cmd='select equals(Name, \"$2\")' cmd='assert equals(UCD, \"phot.mag\")' omode=discard",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '$2' ')'\n\nCommand was: select equals(Name, \"$2\")\n\nUsage: select <expr>\n    (Unused arguments: '$2' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter out rows where the string column 'NAME' contains any non-alphanumeric character (e.g., spaces or punctuation).",
        "response": "stilts tpipe in=data.fits cmd='select matches(NAME, \"^[A-Za-z0-9_]+$\")' out=alphanumeric_names.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '^[A-Za-z0-9_]+$' ')'\n\nCommand was: select matches(NAME, \"^[A-Za-z0-9_]+$\")\n\nUsage: select <expr>\n    (Unused arguments: '^[A-Za-z0-9_]+$' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Use the 'meta' filter to retrieve information only about the columns containing a UCD related to 'pos.eq'.",
        "response": "stilts tpipe in=data.fits cmd='meta Name UCD' cmd='select contains(UCD, \"pos.eq\")' omode=out ofmt=text out=-",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'pos.eq' ')'\n\nCommand was: select contains(UCD, \"pos.eq\")\n\nUsage: select <expr>\n    (Unused arguments: 'pos.eq' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter out rows where the string column 'COMMENT' is exactly 'NULL' (case insensitive).",
        "response": "stilts tpipe in=data.fits cmd='select !equalsIgnoreCase(COMMENT, \"NULL\")' out=non_null_comments.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NULL' ')'\n\nCommand was: select !equalsIgnoreCase(COMMENT, \"NULL\")\n\nUsage: select <expr>\n    (Unused arguments: 'NULL' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter the table to keep rows where the string column 'NAME' ends with 'Star' (case insensitive).",
        "response": "stilts tpipe in=objects.fits cmd='select endsWith(toLowerCase(NAME), \"star\")' out=stars_only.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'star' ')'\n\nCommand was: select endsWith(toLowerCase(NAME), \"star\")\n\nUsage: select <expr>\n    (Unused arguments: 'star' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'TIME_STRING_3DP' converting MJD time 'TIME_MJD' to ISO-8601 string format with 3 decimal places for seconds.",
        "response": "stilts tpipe in=time.fits cmd='addcol TIME_STRING_3DP formatMjd(TIME_MJD, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")' out=iso_time_3dp.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'yyyy-MM-ddTHH:mm:ss.SSS' ')'\n\nCommand was: addcol TIME_STRING_3DP formatMjd(TIME_MJD, \"yyyy-MM-ddTHH:mm:ss.SSS\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'yyyy-MM-ddTHH:mm:ss.SSS' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a boolean array column 'NULL_FLUX_MASK' which is true where the 'FLUX_ARRAY' element is null.",
        "response": "stilts tpipe in=spectra.fits cmd='addcol NULL_FLUX_MASK arrayFunc(\"NULL_x\", FLUX_ARRAY)' out=null_mask.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'FLUX_ARRAY)'\n\nCommand was: addcol NULL_FLUX_MASK arrayFunc(\"NULL_x\", FLUX_ARRAY)\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ',' 'FLUX_ARRAY)')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'MAG_U_AB_NEW_2' converting Johnson U mag to AB, explicitly setting its UCD and unit.",
        "response": "stilts tpipe in=phot.fits cmd='addcol -ucd \"phot.mag;em.opt.U\" -units mag MAG_U_AB_NEW_2 MAG_U + JOHNSON_AB_U' out=u_ab_new_meta_2.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'JOHNSON_AB_U'\n\nCommand was: addcol -ucd \"phot.mag;em.opt.U\" -units mag MAG_U_AB_NEW_2 MAG_U + JOHNSON_AB_U\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'JOHNSON_AB_U')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'TIME_STRING_4DP' converting MJD time 'TIME_MJD' to ISO-8601 string format with 4 decimal places for seconds.",
        "response": "stilts tpipe in=time.fits cmd='addcol TIME_STRING_4DP formatMjd(TIME_MJD, \"yyyy-MM-dd'T'HH:mm:ss.SSSS\")' out=iso_time_4dp.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'yyyy-MM-ddTHH:mm:ss.SSSS' ')'\n\nCommand was: addcol TIME_STRING_4DP formatMjd(TIME_MJD, \"yyyy-MM-ddTHH:mm:ss.SSSS\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'yyyy-MM-ddTHH:mm:ss.SSSS' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'MAG_U_AB_NEW_3' converting Johnson U mag to AB, explicitly setting its UCD and unit.",
        "response": "stilts tpipe in=phot.fits cmd='addcol -ucd \"phot.mag;em.opt.U\" -units mag MAG_U_AB_NEW_3 MAG_U + JOHNSON_AB_U' out=u_ab_new_meta_3.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '+' 'JOHNSON_AB_U'\n\nCommand was: addcol -ucd \"phot.mag;em.opt.U\" -units mag MAG_U_AB_NEW_3 MAG_U + JOHNSON_AB_U\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '+' 'JOHNSON_AB_U')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'TIME_STRING_5DP' converting MJD time 'TIME_MJD' to ISO-8601 string format with 5 decimal places for seconds.",
        "response": "stilts tpipe in=time.fits cmd='addcol TIME_STRING_5DP formatMjd(TIME_MJD, \"yyyy-MM-dd'T'HH:mm:ss.SSSSS\")' out=iso_time_5dp.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'yyyy-MM-ddTHH:mm:ss.SSSSS' ')'\n\nCommand was: addcol TIME_STRING_5DP formatMjd(TIME_MJD, \"yyyy-MM-ddTHH:mm:ss.SSSSS\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'yyyy-MM-ddTHH:mm:ss.SSSSS' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Add a column 'TIME_STRING_6DP' converting MJD time 'TIME_MJD' to ISO-8601 string format with 6 decimal places for seconds.",
        "response": "stilts tpipe in=time.fits cmd='addcol TIME_STRING_6DP formatMjd(TIME_MJD, \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS\")' out=iso_time_6dp.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'yyyy-MM-ddTHH:mm:ss.SSSSSS' ')'\n\nCommand was: addcol TIME_STRING_6DP formatMjd(TIME_MJD, \"yyyy-MM-ddTHH:mm:ss.SSSSSS\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'yyyy-MM-ddTHH:mm:ss.SSSSSS' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter rows to keep those whose 'ID_STR' column starts with 'SDSS', then output the table structure, excluding the data.",
        "response": "stilts tpipe in=ids.fits cmd='select startsWith(ID_STR, \"SDSS\")' omode=meta",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'SDSS' ')'\n\nCommand was: select startsWith(ID_STR, \"SDSS\")\n\nUsage: select <expr>\n    (Unused arguments: 'SDSS' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter rows to keep those where the JSON string column 'INFO_JSON' contains a value for the key 'status' equal to 'COMPLETE'.",
        "response": "stilts tpipe in=json_logs.fits cmd='select equals(jsonObject(INFO_JSON).getString(\"status\"), \"COMPLETE\")' out=completed_jobs.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '),' 'COMPLETE' ')'\n\nCommand was: select equals(jsonObject(INFO_JSON).getString(\"status\"), \"COMPLETE\")\n\nUsage: select <expr>\n    (Unused arguments: '),' 'COMPLETE' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter rows to include only those where the character string 'NAME' starts with 'NGC' or 'IC'.",
        "response": "stilts tpipe in=objects.fits cmd='select startsWith(NAME, \"NGC\") || startsWith(NAME, \"IC\")' out=ngc_ic_objects.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')' '||' 'startsWith(NAME,' 'IC' ')'\n\nCommand was: select startsWith(NAME, \"NGC\") || startsWith(NAME, \"IC\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC' ')' '||' 'startsWith(NAME,' 'IC' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Read a JSON string column 'GEO_INFO', extract the double value associated with the key 'latitude', and add it as a new column 'LAT_DEG'.",
        "response": "stilts tpipe in=log.fits cmd='addcol LAT_DEG jsonObject(GEO_INFO).getDouble(\"latitude\")' out=with_lat.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ')'\n\nCommand was: addcol LAT_DEG jsonObject(GEO_INFO).getDouble(\"latitude\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter out rows where the string column 'ERROR_MESSAGE' matches the regular expression '.*(timeout|fail).*'.",
        "response": "stilts tpipe in=log.txt cmd='select !matches(ERROR_MESSAGE, \".*(timeout|fail).*\" )' out=successful_log.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '.*(timeout|fail).*' ')'\n\nCommand was: select !matches(ERROR_MESSAGE, \".*(timeout|fail).*\" )\n\nUsage: select <expr>\n    (Unused arguments: '.*(timeout|fail).*' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Use the conditional operator to set 'IS_QSO' to true if 'TYPE' equals 'QSO', and false otherwise.",
        "response": "stilts tpipe in=data.fits cmd='addcol IS_QSO equals(TYPE, \"QSO\")' out=qso_flagged.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: addcol IS_QSO equals(TYPE, \"QSO\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'QSO' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Split a string column 'PAIRS' based on a semicolon delimiter, and store the resulting array.",
        "response": "stilts tpipe in=list.fits cmd='addcol PAIR_ARRAY split(PAIRS, \";\")' out=array_from_split.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ';' ')'\n\nCommand was: addcol PAIR_ARRAY split(PAIRS, \";\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: ';' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Generate a table where the single column is the square root of the row index (starting from 1) for 100 rows, forcing float type.",
        "response": "stilts tpipe in=:loop:1,101,1 forcefloat=true cmd='replacecol i sqrt(i)' out=sqrt_index.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: forcefloat=true\n\nUsage: tpipe ifmt=<in-format> istream=true|false cmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format>\n             [in=]<table>\n\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Use the expression language to test if the string column 'STATUS' contains either 'Error' or 'Failure' (case-insensitive) using regular expressions.",
        "response": "stilts tpipe in=log.fits cmd='select matches(STATUS, \".*(error|failure).*\", \"i\" )' out=status_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '.*(error|failure).*' ',' 'i' ')'\n\nCommand was: select matches(STATUS, \".*(error|failure).*\", \"i\" )\n\nUsage: select <expr>\n    (Unused arguments: '.*(error|failure).*' ',' 'i' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Remove rows that fall outside the MOC footprint defined by the file 'footprint.fits'.",
        "response": "stilts tpipe in=data.fits cmd='select inMoc(\"footprint.fits\", RA, DEC)' out=data_in_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select inMoc(\"footprint.fits\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Read a FITS file, find rows where the 'DATE_OBS' column contains the string '2025', and display the count of matching rows.",
        "response": "stilts tpipe in=obs_log.fits cmd='select contains(DATE_OBS, \"2025\")' omode=count",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '2025' ')'\n\nCommand was: select contains(DATE_OBS, \"2025\")\n\nUsage: select <expr>\n    (Unused arguments: '2025' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Read an external file and apply an assertion that the 'SNR' column is greater than 10 for all rows, using a custom error message that includes the row index.",
        "response": "stilts tpipe in=signals.fits cmd='assert SNR > 10 \"Low SNR at row \" + $0' omode=discard",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '10' 'Low SNR at row ' '+' '$0'\n\nCommand was: assert SNR > 10 \"Low SNR at row \" + $0\n\nUsage: assert <test-expr> [<msg-expr>]\n    (Unused arguments: '10' 'Low SNR at row ' '+' '$0')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Filter a catalog to keep rows where the string column 'SPECTRUM_ID' contains a numerical index greater than 50, using regex matching.",
        "response": "stilts tpipe in=spectra.fits cmd='select matches(SPECTRUM_ID, \".*5[4-12]\\|.*[9-12][4-12]\\|.*[4-12][4-12]{2,}.*\")' out=high_index_spectra.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '.*5[4-12]|.*[9-12][4-12]|.*[4-12][4-12]{2,}.*' ')'\n\nCommand was: select matches(SPECTRUM_ID, \".*5[4-12]\\|.*[9-12][4-12]\\|.*[4-12][4-12]{2,}.*\")\n\nUsage: select <expr>\n    (Unused arguments: '.*5[4-12]|.*[9-12][4-12]|.*[4-12][4-12]{2,}.*' ')')\n",
        "source_cmd_file": "tpipe.json"
    },
    {
        "prompt": "Join `a.csv`, `b.csv`, and `c.csv`, but only keep rows where the `ID` starts with 'NGC'. Then, count the total rows.",
        "response": "stilts tcat ifmt=csv in=\"a.csv b.csv c.csv\" icmd='select startsWith(ID, \"NGC\")' omode=count",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: select startsWith(ID, \"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate records from input.fits with a randomly generated catalog of 5000 stars, then shuffle the combined result.",
        "response": "stilts tcat in=input.fits in2=:skysim:5000 ocmd=shuffle out=random_shuffled.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=:skysim:5000\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Merge data from a local FITS file with data piped from a remote compressed URL using 'curl'.",
        "response": "stilts tcat in=local.fits in2='curl -s https://remote.com/data.fits.gz|' out=remote_local_merge.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=curl -s https://remote.com/data.fits.gz|\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "I have two tables, one containing the logarithm of flux. Convert the other table's linear flux column to logarithm before concatenation.",
        "response": "stilts tcat in=logflux.fits in2=linearflux.fits icmd='addcol LOG_FLUX log10(FLUX)' ocmd='keepcols \"LOG_FLUX ID\"' out=all_log_flux.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=linearflux.fits\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Merge files, applying a filter to each input that selects rows where the observation date (ISO string) is after 2020-01-01.",
        "response": "stilts tcat in='obs*.fits' icmd='select isoToMjd(DATE) > isoToMjd(\"2020-01-01\")' out=post_2020.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' 'isoToMjd(2020-01-01' ')'\n\nCommand was: select isoToMjd(DATE) > isoToMjd(\"2020-01-01\")\n\nUsage: select <expr>\n    (Unused arguments: '>' 'isoToMjd(2020-01-01' ')')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate a table with a single column generated by tloop, running from 1 to 10.",
        "response": "stilts tcat in=real_data.fits in2=':loop:1,11' out=data_with_index.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=:loop:1,11\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Merge tables, calculate the total number of rows, and immediately discard the resulting table.",
        "response": "stilts tcat in='d1.fits d2.fits' omode=count omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Combine a table with itself, then filter the resulting double-length table to keep only every 50th row.",
        "response": "stilts tcat in=t.fits in2=t.fits ocmd='every 50' out=sparse_double.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=t.fits\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate a table with a simulated attractor dataset of 10,000 points.",
        "response": "stilts tcat in=real_data.fits in2=':attractor:10000,clifford' out=real_plus_attractor.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=:attractor:10000,clifford\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Merge two tables and calculate the checksum of the resulting data, discarding the table content.",
        "response": "stilts tcat in=d1.fits in=d2.fits omode=checksum omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate all tables from a VOTable that references multiple resources, but ensure only rows where 'CLASS' is 'QSO' are kept.",
        "response": "stilts tcat in=multi_resource.vot multi=true icmd='select equals(CLASS, \"QSO\")' out=qso_resources.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: select equals(CLASS, \"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: 'QSO' ')')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Combine tables and add a column 'Source_Id_Check' that is 'VALID' if ID > 0 and 'INVALID' otherwise.",
        "response": "stilts tcat in='i1.fits i2.fits' ocmd='addcol Source_Id_Check ID > 0 ? \"VALID\" : \"INVALID\"' out=id_checked.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '0' '?' 'VALID' ':' 'INVALID'\n\nCommand was: addcol Source_Id_Check ID > 0 ? \"VALID\" : \"INVALID\"\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: '>' '0' '?' 'VALID' ':' 'INVALID')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Combine a standard table (real.fits) with a generated sequence of 500 rows, adding a column 'INDEX' calculated from the loop variable.",
        "response": "stilts tcat in=real.fits in2=:loop:500 ocmd='addcol INDEX $0' out=indexed_real_sim.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=:loop:500\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate two tables and send the result directly to the Swing GUI for interactive inspection.",
        "response": "stilts tcat in=t1.fits in2=t2.fits omode=gui",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=t2.fits\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate a table with a synthetically generated set of 50,000 test data rows, keeping only the first 10 columns of the combined result.",
        "response": "stilts tcat in=real.fits in2=:test:50000 ocmd='keepcols $1-$10' out=test_and_real.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=:test:50000\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Merge ASCII files, ensuring that only rows where the column 'TYPE' is exactly 'QSO' are kept in the intermediate processing step.",
        "response": "stilts tcat ifmt=ascii in='d1.txt d2.txt' icmd='select equals(TYPE, \"QSO\")' out=qso_only.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: select equals(TYPE, \"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: 'QSO' ')')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Merge tables, and then add a column 'IS_GALAXY' that is true if 'CLASS' equals 'GALAXY'.",
        "response": "stilts tcat in='c1.fits c2.fits' ocmd='addcol IS_GALAXY equals(CLASS, \"GALAXY\")' out=galaxy_flag_b.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GALAXY' ')'\n\nCommand was: addcol IS_GALAXY equals(CLASS, \"GALAXY\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'GALAXY' ')')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Combine tables, and then calculate the total checksum of the result before discarding it.",
        "response": "stilts tcat in='ch1.fits ch2.fits' omode=checksum omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Combine two ASCII tables, filtering each input to only select rows where the 'DATE' string starts with '2023'.",
        "response": "stilts tcat ifmt=ascii in='log_a.txt log_b.txt' icmd='select startsWith(DATE, \"2023\")' out=2023_logs.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '2023' ')'\n\nCommand was: select startsWith(DATE, \"2023\")\n\nUsage: select <expr>\n    (Unused arguments: '2023' ')')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Combine tables where one is a FITS file and the other is a VOTable, ensuring the output is written using the VOTable FITS serialization.",
        "response": "stilts tcat in=f.fits in2=v.vot ofmt='votable(format=FITS)' out=combined_fits_votable.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=v.vot\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate tables, filtering inputs to keep only rows where the 'DATE' column string contains 'T20:00'.",
        "response": "stilts tcat in='log1.fits log2.fits' icmd='select contains(DATE, \"T20:00\")' out=evening_obs.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'T20:00' ')'\n\nCommand was: select contains(DATE, \"T20:00\")\n\nUsage: select <expr>\n    (Unused arguments: 'T20:00' ')')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Combine two tables, then calculate the total number of rows and immediately discard the result.",
        "response": "stilts tcat in='d1.fits d2.fits' omode=count omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate all tables from a VOTable that references multiple resources, but ensure only rows where 'CLASS' is 'GALAXY' are kept.",
        "response": "stilts tcat in=multi_resource.vot multi=true icmd='select equals(CLASS, \"GALAXY\")' out=galaxy_resources.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GALAXY' ')'\n\nCommand was: select equals(CLASS, \"GALAXY\")\n\nUsage: select <expr>\n    (Unused arguments: 'GALAXY' ')')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate four Parquet files, filtering each input to exclude rows where 'Flag' is 'BAD' before merging.",
        "response": "stilts tcat in='p1.parquet p2.parquet p3.parquet p4.parquet' icmd='select Flag != \"BAD\"' out=filtered_parquet_merge.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'BAD'\n\nCommand was: select Flag != \"BAD\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'BAD')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate two tables, then calculate the total number of rows and immediately discard the resulting data.",
        "response": "stilts tcat in=t_input.fits in2=t_more.fits omode=count omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=t_more.fits omode=discard\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate tables, filtering each input to only include rows where the quality flag 'Q_FLAG' is equal to 'A'.",
        "response": "stilts tcat in='q1.fits q2.fits' icmd='select equals(Q_FLAG, \"A\")' out=quality_a_only.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'A' ')'\n\nCommand was: select equals(Q_FLAG, \"A\")\n\nUsage: select <expr>\n    (Unused arguments: 'A' ')')\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Merge tables and then calculate the final table's Adler32 checksum, discarding the output table content.",
        "response": "stilts tcat in='d1.fits d2.fits' omode=checksum omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate a table with a synthetic simulation of 1000 stars, using the 'skysim' scheme.",
        "response": "stilts tcat in=real_obs.fits in2=:skysim:1000 out=real_plus_sim_b.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=:skysim:1000\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Combine two tables and immediately send the output table to a running instance of TOPCAT.",
        "response": "stilts tcat in=target_list.fits in2=ref_data.fits omode=topcat",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=ref_data.fits\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate two tables, viewing the final combined table in a temporary GUI window.",
        "response": "stilts tcat in=d1.fits in2=d2.fits omode=gui",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=d2.fits\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate tables, ensuring they are read in parallel for faster processing of large inputs (if multiple cores are available).",
        "response": "stilts tcat in='p1.fits p2.fits p3.fits' runner=parallel out=parallel_tcat.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Combine tables, and then output only the checksum of the final data without writing the table itself.",
        "response": "stilts tcat in='c1.fits c2.fits' omode=checksum omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Concatenate data from a local FITS file with 10,000 simulated sky sources.",
        "response": "stilts tcat in=local.fits in2=:skysim:10000 out=local_plus_sim_b.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in2=:skysim:10000\n\nUsage: tcat in=<table> [<table> ...] ifmt=<in-format> multi=true|false\n            istream=true|false icmd=<cmds> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format> seqcol=<colname>\n            loccol=<colname> uloccol=<colname> lazy=true|false\n            countrows=true|false\n\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Find groups of objects across three tables (`t1.csv`, `t2.csv`, `t3.csv`) that fall into the same 1D bin of size 0.01 in the `REDSHIFT` column.",
        "response": "stilts tmatchn nin=3 ifmt=csv in1=t1.csv in2=t2.csv in3=t3.csv multimode=group matcher=1d params=0.01 values1=REDSHIFT values2=REDSHIFT values3=REDSHIFT out=redshift_clumps.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Find groups of objects across four catalogs where the unique string identifier `UID` is identical.",
        "response": "stilts tmatchn nin=4 in1=t1.csv in2=t2.csv in3=t3.csv in4=t4.csv ifmt=csv multimode=group matcher=exact values1=UID values2=UID values3=UID values4=UID out=uid_quartets.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match three tables exactly on 'SOURCE_ID'. Rename columns from the second table with '_B' suffix and third with '_C'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1='SOURCE_ID' values2='SOURCE_ID' values3='SOURCE_ID' in1=A.fits in2=B.fits in3=C.fits fixcols=dups suffix2=_B suffix3=_C out=exact_match_3way.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Combine four CSV files using an exact match on 'OBJECT_NAME'. Display the result statistics.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 ifmt1=csv in1=c1.csv in2=c2.csv in3=c3.csv in4=c4.csv values1='OBJECT_NAME' values2='OBJECT_NAME' values3='OBJECT_NAME' values4='OBJECT_NAME' omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Find the best match for each row in the reference table t_ref against t2 and t3. Include all rows from the reference table, even unmatched ones.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=t_ref.fits in2=t2.fits in3=t3.fits join1=always find=best1 values1='RA DEC' values2='RA DEC' values3='RA DEC' out=all_ref_best_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch tables T1, T2, T3 using T1 as reference (pairs). After matching, retain only the 'ID' columns from T1, T2, and T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits icmd1='keepcols ID' icmd2='keepcols ID' icmd3='keepcols ID' out=id_only_pair_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Find all pairs (all mode) between t1, t2, and t3 using t1 as the reference table (sky 1 arcsec).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=t1.fits in2=t2.fits in3=t3.fits find=all out=t1_all_pairs.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match three tables, sorting the final output by separation distance (Score) descending.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=A.fits in2=B.fits in3=C.fits scorecol=Separation ocmd='sort -down Separation' out=group_sorted_sep.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Separation\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Find best match (best1) from T2 and T3 for T1. All inputs should use suffix '_I', '_II', '_III'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits find=best1 fixcols=all suffix1=_I suffix2=_II suffix3=_III values1='RA DEC' values2='RA DEC' values3='RA DEC' out=best1_indexed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match three tables, adding a column 'MATCHED_GROUP' containing the total number of rows found in that group.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact params=0 values1=ID values2=ID values3=ID in1=L1.fits in2=L2.fits in3=L3.fits ocmd='addcol MATCHED_GROUP GroupSize' out=group_size_added.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match two large tables, A and B, plus a small reference list C. Use C as the reference table (index 3).",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=3 matcher=exact params=0 values1=ID values2=ID values3=ID in1=A.fits in2=B.fits in3=C.fits out=C_ref_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match four tables, including a temporary column 'SEPARATION' showing the match score (distance) in the output.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits scorecol=SEPARATION out=sep_group_added.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEPARATION\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match four tables using group mode. After matching, drop the temporary 'Separation' column.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' scorecol=Separation ocmd='delcols Separation' out=sep_dropped_groups.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Separation\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T1 (ref) against T2 and T3. Find all matches and output the result as a VOTable with BINARY2 serialization.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits find=all ofmt='votable(format=BINARY2)' out=all_binary2_match.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Find the symmetric best match (find=best) between four tables in group mode, forcing sequential execution.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits find=best runner=sequential values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=sequential_best_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match three tables, sorting the output by the total number of columns in the resulting combined table (which is constant, so this sorts on a fixed value).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact params=0 values1=ID values2=ID values3=ID in1=t1.fits in2=t2.fits in3=t3.fits ocmd='sort $ncol' out=sort_by_ncol.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). For the output, keep only the original file location (full path) for T1, T2, T3.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact params=0 in1=path/to/T1.fits in2=path/to/T2.fits in3=path/to/T3.fits values1=ID values2=ID values3=ID loccol=ORIGIN_PATH ocmd='keepcols ORIGIN_PATH' out=loc_only_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0 loccol=ORIGIN_PATH\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3, T4. Only keep the best match from T2, but all matches from T3 and T4.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=3 in1=T1.fits in2=T2.fits find=best2 in3=T3.fits find=all in4=T4.fits find=all values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=mixed_find_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best2 find=all find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match five tables. Use scorecol to add the match distance and rename it 'SEPARATION_ARCSEC'.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits in5=c5.fits scorecol=SEPARATION_ARCSEC out=sep_5way.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEPARATION_ARCSEC\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 has an array column 'FLUX_SPECTRUM'. Discard this complex column before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits icmd2='delcols FLUX_SPECTRUM' in3=T3.fits out=array_discard_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match five tables. Before matching, discard rows from T5 where 'QUALITY' flag is null.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact params=0 in1=t1.fits in2=t2.fits in3=t3.fits in4=t4.fits in5=t5.fits icmd5='select !NULL_QUALITY' values1=ID values2=ID values3=ID values4=ID values5=ID out=t5_clean_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match A (ref) against B, C, D. Include all rows from A, but only matched rows from B, C, and D. Add a column 'SEPARATION_A_B' showing the distance to the match in B.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=A.fits join1=always in2=B.fits join2=match in3=C.fits join3=match in4=D.fits join4=match scorecol=SEPARATION_A_B values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=A_outer_BCD_inner.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEPARATION_A_B\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match list_A (ref) against list_B, list_C. B is ASCII format, C is VOTable. Retain all B and C columns, renaming duplicates with _B and _C suffixes.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 in1=list_A.fits in2=list_B.txt ifmt2=ascii in3=list_C.vot fixcols=dups suffix2=_B suffix3=_C values1=ID values2=ID values3=ID out=hetero_suffixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match three tables, adding a column 'MATCH_QUALITY' which contains the maximum separation found within the match group.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=4 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=A.fits in2=B.fits in3=C.fits scorecol=MAX_SEP ocmd='colmeta -name MATCH_QUALITY MAX_SEP' out=group_max_sep.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=MAX_SEP\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match four tables T1-T4 exactly on string column 'OBSERVATION_ID'. Output the row count only.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact params=0 values1='OBSERVATION_ID' values2='OBSERVATION_ID' values3='OBSERVATION_ID' values4='OBSERVATION_ID' in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (group mode). Add a sequence column 'InputOrder' to the output indicating the overall input table index (1, 2, or 3).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits seqcol=InputOrder values1='RA DEC' values2='RA DEC' values3='RA DEC' out=sequenced_group_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: seqcol=InputOrder\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. Find the single **best** match for each row in T_REF, then view the result in TOPCAT.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=UID values2=UID values3=UID in1=T_REF.fits in2=T2.fits in3=T3.fits find=best1 omode=topcat",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match five catalogs (C1-C5). Output only rows from C3 that were *not* matched in the group process.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact params=0 in1=C1.fits in2=C2.fits in3=C3.fits join3=nomatch in4=C4.fits in5=C5.fits values1=ID values2=ID values3=ID values4=ID values5=ID out=C3_group_singles.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match T_A, T_B, T_C (T_A ref). Output should be sorted by the calculated match score (Separation) descending.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_A.fits in2=T_B.fits in3=T_C.fits scorecol=Separation ocmd='sort -down Separation' out=sorted_pair_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Separation\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match four tables (A, B, C, D). Use symmetric best match (find=best) in group mode. Output result as ECSV.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=A.fits in2=B.fits in3=C.fits in4=D.fits find=best values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' ofmt=ecsv out=symmetric_ecsv.ecsv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match four tables exactly on 'UID'. Ensure columns from T4 are prefixed with '_T4' to resolve duplication.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact params=0 values1=UID values2=UID values3=UID values4=UID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits fixcols=dups suffix4=_T4 out=t4_prefixed_exact.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T_REF against T2, T3, T4. Only find the best match (best1) in T2 and T3, but all matches (all) in T4.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=T_REF.fits in2=T2.fits find=best1 in3=T3.fits find=best1 in4=T4.fits find=all values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=mixed_find_modes.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1 find=best1 find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match five files (A, B, C, D, E) using exact match on 'SOURCE_NAME'. Store the output table in VOTable BINARY2 format.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=exact params=0 values1=SOURCE_NAME values2=SOURCE_NAME values3=SOURCE_NAME values4=SOURCE_NAME values5=SOURCE_NAME in1=A.fits in2=B.fits in3=C.fits in4=D.fits in5=E.fits ofmt='votable(format=BINARY2)' out=five_way_binary2.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match T1, T2, T3 (group mode). Filter T3 to keep only rows where the string 'CLASS' equals 'QSO'.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=T1.fits in2=T2.fits in3=T3.fits icmd3='select equals(CLASS, \"QSO\")' out=QSO_filtered_group.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: select equals(CLASS, \"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: 'QSO' ')')\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match four tables (A-D) using exact matching on 'SOURCE_ID'. Store the separation distance (which will be zero) in a column named 'ZeroSep' just for metadata purposes.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 values1=SOURCE_ID values2=SOURCE_ID values3=SOURCE_ID values4=SOURCE_ID in1=A.fits in2=B.fits in3=C.fits in4=D.fits scorecol=ZeroSep out=exact_match_score.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0 scorecol=ZeroSep\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against T_SUPP1, T_SUPP2. T_SUPP1 and T_SUPP2 are CSV files. Output the result metadata only.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=ID values2=ID values3=ID in1=T_MAIN.fits in2=T_SUPP1.csv ifmt2=csv in3=T_SUPP2.csv ifmt3=csv omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match four tables using isotropic 3D coordinates (X, Y, Z) within 5 units. Include the separation score in the output.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=3d params=5 values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits scorecol=Distance out=3d_dist_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Distance\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch four tables using group mode. Ensure the output is written to a VOTable using **BINARY2** serialization.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 values1=ID values2=ID values3=ID values4=ID in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits ofmt='votable(format=BINARY2)' out=group_binary2.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match four tables, including a temporary column 'GroupID' that displays the unique group identifier.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=c1.fits in2=c2.fits in3=c3.fits in4=c4.fits scorecol=GroupID values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=group_id_output.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=GroupID\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match T1, T2, T3, T4 (group mode). For the output, ensure all columns from T1 are renamed with suffix '_R' (reference, although it's group mode).",
        "response": "stilts tmatchn nin=4 multimode=group matcher=exact params=0 values1=ID values2=ID values3=ID values4=ID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits fixcols=all suffix1=_R out=t1_ref_cols_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match T1, T2, T3 (T2 ref). Include all T2 rows, but only T1 and T3 rows that matched T2.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=2 matcher=exact params=0 values1=ID values2=ID values3=ID in1=T1.fits join1=match in2=T2.fits join2=always in3=T3.fits join3=match out=t2_ref_outer.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match five tables using sky separation (5 arcsec). Output only the separation column and verify the checksum.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits in5=D5.fits scorecol=Sep ocmd='keepcols Sep' omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Sep\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T_REF (ref) against T2 and T3. Find all matches (find=all). T2 is an ECSV file, T3 is a remote FITS URL. Output to VOTable BINARY format.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=3 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_REF.fits in2=T2.ecsv ifmt2=ecsv in3=http://remote.org/T3.fits find=all ofmt='votable(format=BINARY)' out=all_matches_binary.vot",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). Find the single best match (best1) for T1 against T2 and T3. Output result to ECSV format.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits find=best1 ofmt=ecsv out=best1_ecsv.ecsv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match five catalogs (C1-C5). Output the separation score column 'SEP' and sort the final output by 'SEP' descending.",
        "response": "stilts tmatchn nin=5 multimode=group matcher=sky params=2 in1=C1.fits in2=C2.fits in3=C3.fits in4=C4.fits in5=C5.fits scorecol=SEP values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' values5='RA DEC' ocmd='sort -down SEP' out=five_way_group_sorted.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEP\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using only rows from T1 and T2 that did *not* match T3 (nomatch). T1 is the reference table.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T1.fits join3=nomatch in2=T2.fits join3=nomatch in3=T3.fits out=T1T2_not_T3.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join3=nomatch\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match T_A, T_B, T_C. T_C (index 3) is the reference table. Match T_C exactly on 'NAME' against A and B.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=3 matcher=exact params=0 values1=NAME values2=NAME values3=NAME in1=T_A.fits in2=T_B.fits in3=T_C.fits out=C_ref_name_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). T2 is an IPAC table. T3 columns should be suffixed '_III'. Only output the matched row count.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 in1=T1.fits in2=T2.tbl ifmt2=ipac in3=T3.fits suffix3=_III values1=ID values2=ID values3=ID omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Only keep the single best match from T2 (best1) and all matches from T3 (all).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits in2=T2.fits find=best1 in3=T3.fits find=all values1='RA DEC' values2='RA DEC' values3='RA DEC' out=mixed_find_modes_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1 find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). Output only the unmatched rows from T1 (join=1not2).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits join=1not2 out=T1_unmatched_pairs.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join=1not2\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 (pairs, T1 ref). T1 columns should keep original names, T2/T3 duplicates suffixed '_II', '_III'. Find the single best match from T2/T3.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix2=_II suffix3=_III find=best1 out=best1_numbered_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T2 is a synthetic star catalog (:skysim:1000). Use the symmetric best match (find=best).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 values1='RA DEC' values2='ra dec' values3='RA DEC' in1=T1.fits in2=:skysim:1000 in3=T3.fits find=best out=sim_best_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match three tables T1, T2, T3 (group mode) using symmetric best match (find=best). Output rows from T3 should always be included, matched or not (join3=always).",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=1 in1=T1.fits in2=T2.fits in3=T3.fits join3=always find=best values1='RA DEC' values2='RA DEC' values3='RA DEC' out=t3_outer_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match T_A, T_B, T_C. Find all pairs (all) relative to T_B (ref). Output to FITS format.",
        "response": "stilts tmatchn nin=3 multimode=pairs iref=2 matcher=exact values1=ID values2=ID values3=ID in1=T_A.fits in2=T_B.fits in3=T_C.fits find=all out=B_ref_all_pairs.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=all\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match four tables, including an added column 'SEP_SQ' representing the match score squared.",
        "response": "stilts tmatchn nin=4 multimode=group matcher=sky params=2 in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits scorecol=SEP ocmd='addcol SEP_SQ SEP*SEP' values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=squared_sep_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=SEP\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Find the best match for T1 from T2 (best1) and the best match for T3 from T1 (best2).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T1.fits in2=T2.fits find=best1 in3=T3.fits find=best2 out=best1_best2_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1 find=best2\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch T1, T2, T3. T1 is reference. T2 has a quality flag 'QC_FLAG'. Only include T2 rows where QC_FLAG is 'PASS' before matching.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 in1=T1.fits in2=T2.fits icmd2='select equals(QC_FLAG, \"PASS\")' in3=T3.fits values1='RA DEC' values2='RA DEC' values3='RA DEC' out=QC_passed_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'PASS' ')'\n\nCommand was: select equals(QC_FLAG, \"PASS\")\n\nUsage: select <expr>\n    (Unused arguments: 'PASS' ')')\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match three tables, sorting the output by the calculated match separation score ('Distance') ascending.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=sky params=3 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=A.fits in2=B.fits in3=C.fits scorecol=Distance ocmd='sort Distance' out=group_by_distance_asc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Distance\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match five tables using 3D matching on (X, Y, Z). Use symmetric best match (find=best).",
        "response": "stilts tmatchn nin=5 multimode=group matcher=3d params=1 values1='X Y Z' values2='X Y Z' values3='X Y Z' values4='X Y Z' values5='X Y Z' in1=D1.fits in2=D2.fits in3=D3.fits in4=D4.fits in5=D5.fits find=best out=symmetric_3d_5way.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 has a string column 'OBJ_TYPE'. Only include T2 rows where OBJ_TYPE equals 'STAR'.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.fits icmd2='select equals(OBJ_TYPE, \"STAR\")' in3=T3.fits out=t2_star_only_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'STAR' ')'\n\nCommand was: select equals(OBJ_TYPE, \"STAR\")\n\nUsage: select <expr>\n    (Unused arguments: 'STAR' ')')\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 coordinates are in degrees, T3 are in radians. Convert T3 radians to degrees in an inline expression, matching T_REF (best1).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='radiansToDegrees(RA_RAD) radiansToDegrees(DEC_RAD)' in1=T_REF.fits in2=T2.fits in3=T3.fits find=best1 out=inline_rad_to_deg_best1.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match a reference list T_REF against four survey tiles (S1-S4). Match exactly on SOURCE_ID. Only include matched rows from S1 and S2.",
        "response": "stilts tmatchn nin=5 multimode=pairs matcher=exact params=0 values1=SOURCE_ID values2=SOURCE_ID values3=SOURCE_ID values4=SOURCE_ID values5=SOURCE_ID in1=T_REF.fits in2=S1.fits join2=match in3=S2.fits join3=match in4=S3.fits in5=S4.fits out=selective_exact_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match four observational tables (E1-E4) on sky position (2 arcsec). Include all E1 rows (ref), and the single best match from E2, E3, and E4.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=2 in1=E1.fits join1=always in2=E2.fits in3=E3.fits in4=E4.fits find=best1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=E1_outer_best.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Match four tables exactly on 'UID'. Rename columns from T2, T3, T4 with suffixes '_II', '_III', '_IV' respectively.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=exact params=0 values1=UID values2=UID values3=UID values4=UID in1=T1.fits in2=T2.fits in3=T3.fits in4=T4.fits fixcols=dups suffix2=_II suffix3=_III suffix4=_IV out=four_way_suffixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Crossmatch T1, T2, T3 using exact match. T2 is a remote URL.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=NAME values2=NAME values3=NAME in1=T1.fits in2=http://remote.org/T2.fits in3=T3.fits out=remote_exact_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Group match three tables. Add a column 'Provenance' containing the original filename (full path) of the matching row from T1.",
        "response": "stilts tmatchn nin=3 multimode=group matcher=exact values1=ID values2=ID values3=ID in1=/archive/T1.fits in2=T2.fits in3=T3.fits loccol=ORIGIN_PATH ocmd='addcol Provenance ORIGIN_PATH_1' out=provenance_group.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: loccol=ORIGIN_PATH\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. Output should include all T1 rows (join1=always), and the score 'Distance' column.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=1 in1=T1.fits join1=always in2=T2.fits in3=T3.fits scorecol=Distance values1='RA DEC' values2='RA DEC' values3='RA DEC' out=T1_outer_scored.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Distance\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3. T3 is a simulated star field (:skysim:). Use symmetric best match (find=best).",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=5 in1=T1.fits in2=T2.fits in3=:skysim:5000 find=best values1='RA DEC' values2='RA DEC' values3='ra dec' out=sim_best_match_3way.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. T2 is a Parquet file. T3 columns should be suffixed '_III'. Only output the matched row count.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=exact params=0 values1=ID values2=ID values3=ID in1=T_REF.fits in2=T2.parquet ifmt2=parquet in3=T3.fits suffix3=_III omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: params=0\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T_REF against T2, T3. Find the best match (find=best) symmetrically and output the result as a FITS file.",
        "response": "stilts tmatchn nin=3 multimode=pairs matcher=sky params=2 values1='RA DEC' values2='RA DEC' values3='RA DEC' in1=T_REF.fits in2=T2.fits in3=T3.fits find=best out=symmetric_best_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T1 (ref) against T2, T3, T4. Only keep matched T1 rows, and include a score column 'Separation_deg'.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 in1=T1.fits join1=match in2=T2.fits in3=T3.fits in4=T4.fits scorecol=Separation_deg values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' out=matched_with_sep_deg.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: scorecol=Separation_deg\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "Pair match T_MAIN (ref) against three observational archives. Find the single best match (best1) for each T_MAIN entry, 1 arcsec radius. Include all T_MAIN rows, even unmatched ones.",
        "response": "stilts tmatchn nin=4 multimode=pairs matcher=sky params=1 values1='RA DEC' values2='RA DEC' values3='RA DEC' values4='RA DEC' in1=T_MAIN.fits join1=always find=best1 in2=A.fits in3=B.fits in4=C.fits out=main_outer_best1.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: find=best1\n\nUsage: tmatchn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> multimode=pairs|group\n               iref=<table-index> matcher=<matcher-name> params=<match-params>\n               tuning=<tuning-params> valuesN=<expr-list>\n               joinN=default|match|nomatch|always fixcols=none|dups|all\n               suffixN=<label> progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n\n",
        "source_cmd_file": "tmatchn.json"
    },
    {
        "prompt": "I need to match objects by their unique string identifier, `UID_string`, in `list1.csv` and `list2.csv`.",
        "response": "stilts tmatch2 ifmt=csv in1=list1.csv in2=list2.csv matcher=exact values1='UID_string' values2='UID_string' out=uid_match.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Please match `file_A.csv` and `file_B.csv` on their `OBS_ID` integer column.",
        "response": "stilts tmatch2 ifmt=csv in1=file_A.csv in2=file_B.csv matcher=exact values1=OBS_ID values2=OBS_ID out=obs_id_match.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Match `t1.csv` and `t2.csv` on `ID`. After the match, rename columns from `t1` with suffix `_ONE` and from `t2` with suffix `_TWO`.",
        "response": "stilts tmatch2 ifmt=csv in1=t1.csv in2=t2.csv matcher=exact values1=ID values2=ID fixcols=all suffix1=_ONE suffix2=_TWO out=renamed_match.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "I want to match two tables and stream the input to reduce memory usage. The tables are `stream1.csv` and `stream2.csv`.",
        "response": "stilts tmatch2 ifmt=csv istream=true in1=stream1.csv in2=stream2.csv matcher=exact values1=ID values2=ID out=streamed_match.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv istream=true\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Crossmatch T1 and T2. T1 rows should be kept only if they are matched. T2 rows should only be kept if they are NOT matched.",
        "response": "stilts tmatch2 in1=T1.fits join1=match in2=T2.fits join2=nomatch matcher=exact values1=ID values2=ID out=inner_anti_join.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match join2=nomatch\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Crossmatch T_A and T_B. T_B rows should always be included. T_A rows should only be included if matched. Match exactly on ID.",
        "response": "stilts tmatch2 in1=T_A.fits join1=match in2=T_B.fits join2=always matcher=exact values1=ID values2=ID out=inner_outer_join.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match join2=always\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Join T_A and T_B. T_A rows should be kept only if matched. T_B columns should be renamed using full suffix '_B'. Match on exact ID.",
        "response": "stilts tmatch2 in1=T_A.fits join1=match in2=T_B.fits matcher=exact values1=ID values2=ID fixcols=all suffix2=_B out=A_inner_B_suffix.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Join T_MAIN and T_SUPP. Find all matches (all). Output the resulting table's metadata and statistics.",
        "response": "stilts tmatch2 in1=T_MAIN.fits in2=T_SUPP.fits matcher=sky params=1 find=all values1='RA DEC' values2='RA DEC' omode=meta omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=stats\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Find the best match (best1) for T1 from T2. T1 only keeps rows where a string column 'CLASS' equals 'QSO'.",
        "response": "stilts tmatch2 in1=T1.fits icmd1='select equals(CLASS, \"QSO\")' in2=T2.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' find=best1 out=QSO_best1_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: select equals(CLASS, \"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: 'QSO' ')')\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 rows should always be included. T1 columns should only be included if matched.",
        "response": "stilts tmatch2 in1=T1.fits join1=match in2=T2.fits join2=always matcher=exact values1=ID values2=ID out=inner_T1_outer_T2.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match join2=always\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Crossmatch T1 and T2. T2 contains a string column 'FLAG'. Filter T2 to keep only rows where FLAG is 'GOOD'.",
        "response": "stilts tmatch2 in1=T1.fits in2=T2.fits icmd2='select equals(FLAG, \"GOOD\")' matcher=exact values1=ID values2=ID out=flagged_good_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GOOD' ')'\n\nCommand was: select equals(FLAG, \"GOOD\")\n\nUsage: select <expr>\n    (Unused arguments: 'GOOD' ')')\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Crossmatch cat1.fits and cat2.fits (2 arcsec sky). Include all rows from cat2, and only matched rows from cat1 (Inner T1, Outer T2).",
        "response": "stilts tmatch2 in1=cat1.fits in2=cat2.fits matcher=sky params=2 values1='RA DEC' values2='RA DEC' join=all2 join1=match out=T1_inner_T2_outer.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: join1=match\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Join tables A and B (exact ID). After joining, add a column 'IS_GALAXY' which is true if the object name contains the string 'NGC'.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID fixcols=dups ocmd='addcol IS_GALAXY contains(NAME_1, \"NGC\")' out=galaxy_flag_match.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: addcol IS_GALAXY contains(NAME_1, \"NGC\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Match A.csv and B.csv (exact ID). A columns suffixed '_A', B columns '_B'. Output to ECSV format.",
        "response": "stilts tmatch2 ifmt=csv in1=A.csv in2=B.csv matcher=exact values1=ID values2=ID fixcols=all suffix1=_A suffix2=_B ofmt=ecsv out=csv_ecsv_match.ecsv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ifmt=csv\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "Crossmatch A and B (exact ID). Tune the match using maxrec=1000 to limit the processing size for safety.",
        "response": "stilts tmatch2 in1=A.fits in2=B.fits matcher=exact values1=ID values2=ID maxrec=1000 out=tuned_maxrec_match.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: maxrec=1000\n\nUsage: tmatch2 ifmt1=<in-format> ifmt2=<in-format> icmd1=<cmds> icmd2=<cmds>\n               ocmd=<cmds>\n               omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n               out=<out-table> ofmt=<out-format> matcher=<matcher-name>\n               values1=<expr-list> values2=<expr-list> params=<match-params>\n               tuning=<tuning-params>\n               join=1and2|1or2|all1|all2|1not2|2not1|1xor2\n               find=all|best|best1|best2 fixcols=none|dups|all suffix1=<label>\n               suffix2=<label> scorecol=<col-name>\n               progress=none|log|time|profile\n               runner=parallel|parallel<n>|parallel-all|sequential|classic|partest\n               [in1=]<table1> [in2=]<table2>\n\n",
        "source_cmd_file": "tmatch2.json"
    },
    {
        "prompt": "How do I check the structure of a remote FITS file quickly?",
        "response": "stilts tcopy in=http://example.com/data.fits ofmt=text out=- icmd='head 5'",
        "chat.jar": "failed",
        "error": "\nUnused arguments: icmd=head 5\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n",
        "source_cmd_file": "tcopy.json"
    },
    {
        "prompt": "What's the simplest command to verify if a file is a readable table?",
        "response": "stilts tcopy in=my_file.dat omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n",
        "source_cmd_file": "tcopy.json"
    },
    {
        "prompt": "Read a VOTable but disable the automatic caching mechanism that guarantees random access.",
        "response": "stilts tcopy in=huge.vot random=false out=sequential_read.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: random=false\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n",
        "source_cmd_file": "tcopy.json"
    },
    {
        "prompt": "Read a huge VOTable, forcing non-random access (streaming mode) to conserve memory, and saving the output as FITS.",
        "response": "stilts tcopy in=huge.vot random=false out=sequential.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: random=false\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n",
        "source_cmd_file": "tcopy.json"
    },
    {
        "prompt": "Read a table using the loop scheme from 10 to 100 with step 10, and output the row count.",
        "response": "stilts tcopy in=':loop:10,101,10' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: tcopy ifmt=<in-format> ofmt=<out-format>\n             [in=]<table> [out=]<out-table>\n\n",
        "source_cmd_file": "tcopy.json"
    },
    {
        "prompt": "Create a MOC for all objects in my table that are inside the 2MASS footprint.",
        "response": "stilts mocshape in=my_objects.fits icmd='select inMoc(\"II/246/out\", RA, DEC)' shape=point coords='array(RA, DEC)' out=in_2mass_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select inMoc(\"II/246/out\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate the MOC for all sources where the `QUALITY` flag is not 'bad'.",
        "response": "stilts mocshape in=data.fits icmd='select QUALITY != \"bad\"' shape=point coords='array(RA,DEC)' out=good_quality.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'bad'\n\nCommand was: select QUALITY != \"bad\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'bad')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate the MOC of all pointings from a log file that happened in 2023.",
        "response": "stilts mocshape in=log.fits icmd='select startsWith(OBS_DATE, \"2023\")' shape=circle coords='array(RA,DEC,FOV_RADIUS)' out=log_2023.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '2023' ')'\n\nCommand was: select startsWith(OBS_DATE, \"2023\")\n\nUsage: select <expr>\n    (Unused arguments: '2023' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate the MOC of all stars of spectral type 'M'.",
        "response": "stilts mocshape in=spectral_types.fits icmd='select startsWith(SP_TYPE, \"M\")' shape=point coords='array(RA,DEC)' out=m_stars.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'M' ')'\n\nCommand was: select startsWith(SP_TYPE, \"M\")\n\nUsage: select <expr>\n    (Unused arguments: 'M' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC from all sources that are NOT within the SDSS footprint.",
        "response": "stilts mocshape in=my_sources.fits icmd='select !inMoc(\"V/139/sdss9\", RA, DEC)' shape=point coords='array(RA,DEC)' out=not_in_sdss.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select !inMoc(\"V/139/sdss9\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC from `data.fits`, but only for rows where `ID` matches a regex `^GAL-`.",
        "response": "stilts mocshape in=data.fits icmd='select matches(ID, \"^GAL-\")' shape=point coords='array(RA,DEC)' out=gal_ids.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '^GAL-' ')'\n\nCommand was: select matches(ID, \"^GAL-\")\n\nUsage: select <expr>\n    (Unused arguments: '^GAL-' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from `data.fits`, but only keep sources that are in the VizieR 2MASS footprint.",
        "response": "stilts mocshape in=my_sources.fits icmd='select inMoc(\"II/246/out\", RA, DEC)' shape=point coords='array(RA,DEC)' out=in_2mass.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select inMoc(\"II/246/out\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC from `data.fits`, but only for rows where `ID` matches a regex `^GAL-`.",
        "response": "stilts mocshape in=data.fits icmd='select matches(ID, \"^GAL-\")' shape=point coords='array(RA,DEC)' out=gal_ids.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '^GAL-' ')'\n\nCommand was: select matches(ID, \"^GAL-\")\n\nUsage: select <expr>\n    (Unused arguments: '^GAL-' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate the MOC of all stars of spectral type 'G' from my catalog.",
        "response": "stilts mocshape in=spectral_types.fits icmd='select startsWith(SP_TYPE, \"G\")' shape=point coords='array(RA,DEC)' out=g_stars.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'G' ')'\n\nCommand was: select startsWith(SP_TYPE, \"G\")\n\nUsage: select <expr>\n    (Unused arguments: 'G' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate the footprint for all sources except those where `QUALITY` is 'bad'.",
        "response": "stilts mocshape in=quality.fits icmd='select QUALITY != \"bad\"' shape=point coords='array(RA,DEC)' out=good_quality.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'bad'\n\nCommand was: select QUALITY != \"bad\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'bad')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate the MOC for all sources where the `QUALITY` flag is not 'bad'.",
        "response": "stilts mocshape in=data.fits icmd='select QUALITY != \"bad\"' shape=point coords='array(RA,DEC)' out=good_quality.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '!=' 'bad'\n\nCommand was: select QUALITY != \"bad\"\n\nUsage: select <expr>\n    (Unused arguments: '!=' 'bad')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate the MOC of all pointings from a log file that happened in 2023.",
        "response": "stilts mocshape in=log.fits icmd='select startsWith(OBS_DATE, \"2023\")' shape=circle coords='array(RA,DEC,FOV_RADIUS)' out=log_2023.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '2023' ')'\n\nCommand was: select startsWith(OBS_DATE, \"2023\")\n\nUsage: select <expr>\n    (Unused arguments: '2023' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC from all sources that are NOT within the SDSS footprint.",
        "response": "stilts mocshape in=my_sources.fits icmd='select !inMoc(\"V/139/sdss9\", RA, DEC)' shape=point coords='array(RA,DEC)' out=not_in_sdss.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select !inMoc(\"V/139/sdss9\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC from `data.fits`, but only for rows where `ID` matches a regex `^GAL-`.",
        "response": "stilts mocshape in=data.fits icmd='select matches(ID, \"^GAL-\")' shape=point coords='array(RA,DEC)' out=gal_ids.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '^GAL-' ')'\n\nCommand was: select matches(ID, \"^GAL-\")\n\nUsage: select <expr>\n    (Unused arguments: '^GAL-' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from `data.fits`, but only keep sources that are in the VizieR 2MASS footprint.",
        "response": "stilts mocshape in=my_sources.fits icmd='select inMoc(\"II/246/out\", RA, DEC)' shape=point coords='array(RA,DEC)' out=in_2mass.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select inMoc(\"II/246/out\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a high-resolution JSON MOC (order 16) for rows where the object type is 'QSO'.",
        "response": "stilts mocshape in=class_cat.fits icmd='select equals(OBJ_TYPE, \"QSO\")' shape=point coords='array(RA, DEC)' order=16 mocfmt=json out=qso_o16.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: select equals(OBJ_TYPE, \"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: 'QSO' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from only the first 100 rows of an extremely large catalogue, checking memory usage during generation.",
        "response": "stilts mocshape -memory in=massive.fits icmd='head 100' shape=point coords='array(RA, DEC)' out=head_100_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in=massive.fits\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a raw binary MOC stream for the footprint defined by a 1 degree radius circle centered at RA 180, DEC 0.",
        "response": "stilts mocshape in=:loop:1 end=1 shape=circle coords='array(180, 0, 1.0)' mocfmt=raw out=one_deg_raw.bin",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a JSON MOC showing the coverage of 5 arcsecond circles around all objects with NAME starting with 'NGC'.",
        "response": "stilts mocshape in=galaxy_cat.vot icmd='select startsWith(NAME, \"NGC\")' shape=circle coords='array(RA, DEC, 5.0 / 3600.0)' mocfmt=json out=ngc_circles.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: select startsWith(NAME, \"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a point MOC, discarding the output file but reporting the final row count (i.e., the number of HEALPix cells).",
        "response": "stilts mocshape in=data.fits shape=point coords='array(RA, DEC)' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC at the maximum standard resolution (order 29) for a single point source.",
        "response": "stilts mocshape in=:loop:1 end=1 shape=point coords='array(0, 0)' order=29 out=max_res_point.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an order 12 MOC from polygons, ensuring the file is compressed and saved as FITS.",
        "response": "stilts mocshape in=poly_data.vot shape=polygon coords=VERTICES compress=true order=12 out=compressed_poly.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC (order 13) for points, then output the column metadata only (omode=meta).",
        "response": "stilts mocshape in=meta_test.fits shape=point coords='array(RA, DEC)' order=13 omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC (order 14) and pipe the result to a checksum calculation.",
        "response": "stilts mocshape in=checksum_test.fits shape=point coords='array(RA, DEC)' order=14 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a point MOC and sort the resulting HEALPix cells by the numerical index before final output.",
        "response": "stilts mocshape in=sort_test.fits shape=point coords='array(RA, DEC)' ocmd='sort PIXEL_INDEX' out=sorted_hpx_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort PIXEL_INDEX\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a polygon MOC and instruct STILTS to use disk storage instead of memory during processing (mocimpl=auto).",
        "response": "stilts mocshape -disk in=huge_polys.fits shape=polygon coords=VERTICES out=disk_poly_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in=huge_polys.fits\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an order 13 MOC for a list of targets and display the result directly in TOPCAT.",
        "response": "stilts mocshape in=targets.fits shape=point coords='array(RA, DEC)' order=13 omode=topcat",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=topcat\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC (order 10) from UNIQ IDs, and then apply a post-filter to discard any columns beyond the second one (if present).",
        "response": "stilts mocshape in=hpx.fits shape=uniq coords=HPX_ID order=10 ocmd='keepcols $1 $2' out=minimal_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols $1 $2\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a point MOC and apply verbose logging during processing.",
        "response": "stilts mocshape -verbose in=log_test.fits shape=point coords='array(RA, DEC)' out=verbose_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in=log_test.fits\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from a table created by a simple loop, positioning a 0.5 degree circle at (0, 0).",
        "response": "stilts mocshape in=:loop:1 end=1 shape=circle coords='array(0, 0, 0.5)' out=origin_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC and discard the output completely, checking only for run success.",
        "response": "stilts mocshape in=test.fits shape=point coords='array(RA, DEC)' omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a JSON MOC for polygon data and compress the output file.",
        "response": "stilts mocshape in=polygons.fits shape=polygon coords=VERTICES compress=true mocfmt=json out=compressed_poly.json.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "I need a simple MOC (order 5) and want to inspect its final structure metadata (omode=meta).",
        "response": "stilts mocshape in=simple_cat.fits shape=point coords='array(RA, DEC)' order=5 omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate an order 12 MOC, then add a final column 'PIXEL_SIZE' calculated using $\text{healpixSqdeg}(\text{order})$ in the output table metadata.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' order=12 ocmd='addcol PIXEL_SIZE healpixSqdeg(12)' out=with_pixel_size.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol PIXEL_SIZE healpixSqdeg(12)\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from a VOTable that references multiple HEALPix UNIQ tables externally.",
        "response": "stilts mocshape in=multi_hpx.vot multi=true shape=uniq coords=HPX_ID out=multi_hpx_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: multi=true\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a polygon MOC and subsequently apply an unrelated output filter to add a constant column 'SOURCE'='Survey A'.",
        "response": "stilts mocshape in=poly.fits shape=polygon coords=VERTICES ocmd='addcol SOURCE \"Survey A\"' out=poly_with_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol SOURCE \"Survey A\"\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Filter the input to only retain objects of class 'Star' and then create an order 15 point MOC.",
        "response": "stilts mocshape in=classified.fits icmd='select equals(CLASS, \"Star\")' shape=point coords='array(RA, DEC)' order=15 out=star_moc_o15.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'Star' ')'\n\nCommand was: select equals(CLASS, \"Star\")\n\nUsage: select <expr>\n    (Unused arguments: 'Star' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an order 10 MOC for sources within 5 arcseconds and include a checksum of the output file in the log.",
        "response": "stilts mocshape in=targets.fits shape=circle coords='array(RA, DEC, 5.0 / 3600.0)' order=10 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "I need a point MOC, but I want to use the high-parallelism 'parallel' runner during the internal processing steps (where applicable).",
        "response": "stilts mocshape -verbose in=parallel_test.fits runner=parallel shape=point coords='array(RA, DEC)' out=parallel_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in=parallel_test.fits runner=parallel\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC (order 15) and apply a filter to keep only rows with pixel index greater than $5 \times 10^{10}$ (requires post-processing).",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' order=15 ocmd='select PIXEL_INDEX > 50000000000L' out=high_idx_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=select PIXEL_INDEX > 50000000000L\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a polygon MOC and force the processing to sequential execution, ignoring parallelization options.",
        "response": "stilts mocshape runner=sequential in=polys.fits shape=polygon coords=VERTICES out=sequential_poly_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=sequential\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "I need a MOC at order 16 for objects where the identifier column 'ID' is exactly 'M101'.",
        "response": "stilts mocshape in=targets.fits icmd='select equals(ID, \"M101\")' shape=point coords='array(RA, DEC)' order=16 out=m101_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'M101' ')'\n\nCommand was: select equals(ID, \"M101\")\n\nUsage: select <expr>\n    (Unused arguments: 'M101' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an order 17 MOC from UNIQ IDs, and then apply a filter to remove any rows where the coverage is less than $10^{-6}$ square degrees (requires calculating area).",
        "response": "stilts mocshape in=hpx_data.fits shape=uniq coords=HPX_ID order=17 ocmd='select healpixSqdeg(mocUniqToOrder(HPX_ID)) > 1e-6' out=filtered_area_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=select healpixSqdeg(mocUniqToOrder(HPX_ID)) > 1e-6\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a point MOC and sort the result by declination (DEC) coordinate before outputting.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' ocmd='sort DEC' out=dec_sorted_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort DEC\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Map coverage from STC-S strings and output the column metadata only (omode=meta).",
        "response": "stilts mocshape in=stc_in.fits shape=stc-s coords=REGION omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from UNIQ IDs, and then apply a filter to calculate the longitude and latitude of the cell center for each row.",
        "response": "stilts mocshape in=hpx_in.fits shape=uniq coords=HPX_ID ocmd='addcol LON healpixNestLon(mocUniqToOrder(HPX_ID), mocUniqToIndex(HPX_ID)); addcol LAT healpixNestLat(mocUniqToOrder(HPX_ID), mocUniqToIndex(HPX_ID))' out=hpx_centers.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol LON healpixNestLon(mocUniqToOrder(HPX_ID), mocUniqToIndex(HPX_ID)); addcol LAT healpixNestLat(mocUniqToOrder(HPX_ID), mocUniqToIndex(HPX_ID))\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a point MOC and calculate a checksum, using the classic sequential runner.",
        "response": "stilts mocshape runner=classic in=test.fits shape=point coords='array(RA, DEC)' omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=classic omode=checksum\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC and add a new column to the resulting table indicating the HEALPix order used.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' order=10 ocmd='addcol HPX_ORDER 10' out=with_order_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol HPX_ORDER 10\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate an order 17 MOC from all rows, ensuring the map builder uses temporary disk storage.",
        "response": "stilts mocshape -disk in=large_cat.fits shape=point coords='array(RA, DEC)' order=17 out=disk_cache_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in=large_cat.fits\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC and apply a post-filter to only keep the final 100 generated HEALPix cells in the output table.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' ocmd='tail 100' out=tail_100_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tail 100\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC (order 13) for points, then output statistics of the resulting PIXEL_INDEX column.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' order=13 omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=stats\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "I need a polygon MOC (order 10) where polygon vertices are determined by reading in a CSV table containing coordinates for each corner.",
        "response": "stilts tpipe in=vertices.csv ifmt=csv ocmd='addcol VRTX array(X1, Y1, X2, Y2, X3, Y3)' | stilts mocshape in=- shape=polygon coords=VRTX order=10 out=csv_poly_moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nUnused arguments: ocmd=addcol VRTX array(X1, Y1, X2, Y2, X3, Y3)\n\nUsage: tpipe ifmt=<in-format> istream=true|false cmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format>\n             [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a point MOC, then add a final column 'SOURCE_TYPE' = 'POS' before saving.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' ocmd='addcol SOURCE_TYPE \"POS\"' out=with_source_type.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol SOURCE_TYPE \"POS\"\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from UNIQ IDs and then compute the total row count (tile count) using the parallel runner.",
        "response": "stilts mocshape runner=parallel in=hpx_ids.fits shape=uniq coords=HPX_ID omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel omode=count\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC for sources where the J-band magnitude is not null, outputting the exact count of resulting HEALPix cells.",
        "response": "stilts mocshape in=phot_cat.fits icmd='select !NULL_J_MAG' shape=point coords='array(RA, DEC)' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC for sources within a search radius of 50 arcseconds, outputting only the metadata structure.",
        "response": "stilts mocshape in=targets.fits shape=circle coords='array(RA, DEC, 50.0 / 3600.0)' omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a polygon MOC (order 6) where vertices are given by an array expression, and then discard the output table.",
        "response": "stilts mocshape in=poly_def.fits shape=polygon coords='array(V1_X, V1_Y, V2_X, V2_Y, V3_X, V3_Y)' order=6 omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a JSON MOC (order 14) for 2 arcminute radius circles, forcing the output to a compressed format.",
        "response": "stilts mocshape in=targets.vot shape=circle coords='array(RA, DEC, 2.0 / 60.0)' order=14 mocfmt=json compress=true out=compressed_circles.json.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC (order 16) and then perform a checksum on the result without saving the MOC data.",
        "response": "stilts mocshape in=hires_cat.fits shape=point coords='array(RA, DEC)' order=16 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Filter input data to only keep rows where the object ID string contains 'SDSS', before generating a point MOC.",
        "response": "stilts mocshape in=id_cat.fits icmd='select contains(ID_STRING, \"SDSS\")' shape=point coords='array(RA, DEC)' out=sdss_filtered_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'SDSS' ')'\n\nCommand was: select contains(ID_STRING, \"SDSS\")\n\nUsage: select <expr>\n    (Unused arguments: 'SDSS' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a point MOC (order 17) and apply an output command to rename the resulting column 'PIXEL_INDEX' to 'HPX_ID'.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' order=17 ocmd='colmeta -name HPX_ID PIXEL_INDEX' out=renamed_hpx_id.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=colmeta -name HPX_ID PIXEL_INDEX\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate an order 8 MOC and then view the result directly in a GUI window.",
        "response": "stilts mocshape in=view_test.fits shape=point coords='array(RA, DEC)' order=8 omode=gui",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=gui\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC for all sources and rename the output table 'MOC_RESULTS'.",
        "response": "stilts mocshape in=data.fits shape=point coords='array(RA, DEC)' ocmd='tablename MOC_RESULTS' out=named_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tablename MOC_RESULTS\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from UNIQ IDs, and then sort the resulting output table by the PIXEL_INDEX column before saving.",
        "response": "stilts mocshape in=hpx_in.fits shape=uniq coords=UNIQ_ID ocmd='sort PIXEL_INDEX' out=sorted_uniq_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort PIXEL_INDEX\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC for all points and use an output filter to add a calculated column representing the area of a HEALPix cell at that MOC's order.",
        "response": "stilts mocshape in=input_data.fits shape=point coords='array(RA, DEC)' order=10 ocmd='addcol CELL_AREA healpixSqdeg(10)' out=moc_with_area.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol CELL_AREA healpixSqdeg(10)\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an order 2 MOC and use the minimal metadata output mode (`omode=meta`).",
        "response": "stilts mocshape in=coarse.fits shape=point coords='array(RA, DEC)' order=2 omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC for 1 arcminute circles and save the output as a compressed FITS file named `footprint.fits.gz`.",
        "response": "stilts mocshape in=input.fits shape=circle coords='array(RA, DEC, 1.0 / 60.0)' compress=true out=footprint.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an order 14 MOC and filter the output to discard all rows where the pixel index is even.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' order=14 ocmd='select PIXEL_INDEX % 2 != 0' out=odd_pixels.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=select PIXEL_INDEX % 2 != 0\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an MOC for objects within a fixed radius of 100 arcseconds, and view the output immediately in TOPCAT.",
        "response": "stilts mocshape in=data.fits shape=circle coords='array(RA, DEC, 100.0 / 3600.0)' omode=topcat",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=topcat\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an order 28 MOC for ultra-fine mapping around a single simulated point (0, 0).",
        "response": "stilts mocshape in=:loop:1 end=1 shape=point coords='array(0, 0)' order=28 out=ultra_fine_o28.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Filter input table to keep only sources where the primary ID string starts with 'GDR', then generate a point MOC.",
        "response": "stilts mocshape in=gdr_sources.fits icmd='select startsWith(ID, \"GDR\")' shape=point coords='array(RA, DEC)' out=gdr_filtered_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GDR' ')'\n\nCommand was: select startsWith(ID, \"GDR\")\n\nUsage: select <expr>\n    (Unused arguments: 'GDR' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a polygon MOC (order 13) and check the row count.",
        "response": "stilts mocshape in=poly_in.fits shape=polygon coords=VERTICES order=13 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC and apply an output filter to add a constant string column 'SURVEY' with value 'DEEP'.",
        "response": "stilts mocshape in=survey.fits shape=point coords='array(RA, DEC)' ocmd='addcol SURVEY \"DEEP\"' out=survey_with_tag.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol SURVEY \"DEEP\"\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an order 20 MOC for all sources and force parallel execution for faster processing.",
        "response": "stilts mocshape in=big_data.fits shape=point coords='array(RA, DEC)' order=20 runner=parallel out=parallel_o20.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from polygons and use a post-filter to discard any column except the PIXEL_INDEX.",
        "response": "stilts mocshape in=poly_data.fits shape=polygon coords=VERTICES ocmd='keepcols PIXEL_INDEX' out=index_only_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols PIXEL_INDEX\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create an MOC that covers a region defined by a combination of two smaller circular MOC strings (MOC-ASCII).",
        "response": "stilts tpipe in=:loop:1 end=1 ocmd='addcol MOC_STR \"4/10-15 5/100-110\"' | stilts mocshape in=- shape=moc-ascii coords=MOC_STR out=combined_ascii_moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n\nUnused arguments: end=1 ocmd=addcol MOC_STR \"4/10-15 5/100-110\"\n\nUsage: tpipe ifmt=<in-format> istream=true|false cmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format>\n             [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Filter the input table to select only sources where the identifier string is exactly 'NGC104', then create an MOC (order 16).",
        "response": "stilts mocshape in=names.fits icmd='select equals(NAME, \"NGC104\")' shape=point coords='array(RA, DEC)' order=16 out=ngc104_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC104' ')'\n\nCommand was: select equals(NAME, \"NGC104\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC104' ')')\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC and apply an output filter to convert the PIXEL_INDEX column to its corresponding HEALPix order and index columns.",
        "response": "stilts mocshape in=data.fits shape=point coords='array(RA, DEC)' order=10 ocmd='addcol HPX_ORDER uniqToOrder(PIXEL_INDEX); addcol HPX_INDEX uniqToIndex(PIXEL_INDEX)' out=hpx_with_details.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol HPX_ORDER uniqToOrder(PIXEL_INDEX); addcol HPX_INDEX uniqToIndex(PIXEL_INDEX)\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a dense MOC (order 20) and apply caching to disk for large memory operations.",
        "response": "stilts mocshape -disk in=dense_cat.fits shape=point coords='array(RA, DEC)' order=20 out=disk_cached_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: in=dense_cat.fits\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC (order 12) and add a column to the output indicating the input row index ($0).",
        "response": "stilts mocshape in=data.fits shape=point coords='array(RA, DEC)' order=12 ocmd='addcol INPUT_ROW $0' out=indexed_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol INPUT_ROW $0\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC and sort the final output HEALPix cells by the numerical index in descending order.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' ocmd='sort -down PIXEL_INDEX' out=sorted_desc_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort -down PIXEL_INDEX\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate an order 15 MOC from an ECSV file and pipe the output directly to a final checksum.",
        "response": "stilts mocshape in=input.ecsv ifmt=ecsv shape=point coords='array(RA, DEC)' order=15 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate an order 15 MOC and subsequently apply an unrelated output filter to add a constant column 'TYPE'='POS'.",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' order=15 ocmd='addcol TYPE \"POS\"' out=moc_with_type.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol TYPE \"POS\"\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from UNIQ IDs and then apply a filter to keep only rows with PIXEL_INDEX less than 1000.",
        "response": "stilts mocshape in=hpx_list.fits shape=uniq coords=HPX_ID ocmd='select PIXEL_INDEX < 1000' out=low_index_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=select PIXEL_INDEX < 1000\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC for the coverage defined by the constant 1 degree radius circle centered at the Galactic Center (L=0, B=0).",
        "response": "stilts mocshape in=:loop:1 end=1 shape=circle coords='array(0, 0, 1.0)' out=galactic_center_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate an order 10 MOC and apply an output command to calculate the median magnitude (MAG) of the entire table (requires pre-caching).",
        "response": "stilts mocshape in=input.fits shape=point coords='array(RA, DEC)' order=10 ocmd='keepcols MAG' omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols MAG omode=stats\n\nUsage: mocshape ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n                coords=<expr> shape=point|circle|polygon|moc-ascii|uniq|stc-s\n                mocfmt=ascii|fits|json|raw|summary|cds_ascii|cds_json|cds_fits\n                mocimpl=auto|cds|bits|lists out=<out-file>\n                [in=]<table>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate the footprint for all objects whose name starts with 'NGC'.",
        "response": "stilts pixfoot in=object_names.fits icmd='select startsWith(NAME, \"NGC\")' out=ngc_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: select startsWith(NAME, \"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "What's the simplest `pixfoot` command to check if my table `test.fits` has readable coordinates?",
        "response": "stilts pixfoot in=test.fits omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a footprint for sources where the `ID` string contains 'XMM'.",
        "response": "stilts pixfoot in=ids.fits icmd='select contains(ID, \"XMM\")' out=xmm_sources.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'XMM' ')'\n\nCommand was: select contains(ID, \"XMM\")\n\nUsage: select <expr>\n    (Unused arguments: 'XMM' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate the footprint for all sources in `survey.fits` that fall within the VizieR 2MASS footprint.",
        "response": "stilts pixfoot in=survey.fits icmd='select inMoc(\"II/246/out\", RA, DEC)' out=in_2mass.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select inMoc(\"II/246/out\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Just count how many pixels at order 8 would be covered by my `survey.fits` catalog.",
        "response": "stilts pixfoot in=survey.fits order=8 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a JSON MOC for the footprint of all objects whose name does not contain the word 'STAR'.",
        "response": "stilts pixfoot in=object_list.fits icmd='select !contains(NAME, \"STAR\")' mocfmt=json out=non_stellar_objects.moc.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'STAR' ')'\n\nCommand was: select !contains(NAME, \"STAR\")\n\nUsage: select <expr>\n    (Unused arguments: 'STAR' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC for all sources in `mycat.fits` that are NOT within the SDSS footprint.",
        "response": "stilts pixfoot in=mycat.fits icmd='select !inMoc(\"V/139/sdss9\", RA, DEC)' out=not_in_sdss.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ',' 'RA,' 'DEC)'\n\nCommand was: select !inMoc(\"V/139/sdss9\", RA, DEC)\n\nUsage: select <expr>\n    (Unused arguments: ',' 'RA,' 'DEC)')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Just tell me how many pixels at order 12 would be covered by a 1 degree radius circle around each point in `centers.fits`.",
        "response": "stilts pixfoot in=centers.fits radius=1.0 order=12 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate the footprint of objects where `CLASSIFICATION` is either 'GALAXY' or 'QSO'.",
        "response": "stilts pixfoot in=classifications.fits icmd='select CLASS==\"GALAXY\" || CLASS==\"QSO\"' out=galaxy_qso_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '||' 'CLASS==QSO'\n\nCommand was: select CLASS==\"GALAXY\" || CLASS==\"QSO\"\n\nUsage: select <expr>\n    (Unused arguments: '||' 'CLASS==QSO')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Just show me the count of pixels covered if I use an order of 3.",
        "response": "stilts pixfoot in=my_cat.fits order=3 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a JSON MOC for the footprint of all objects whose ID matches the regex 'SN-....-..'.",
        "response": "stilts pixfoot in=object_list.fits icmd='select matches(ID, \"SN-....-..\")' mocfmt=json out=supernova_candidates.moc.json",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'SN-....-..' ')'\n\nCommand was: select matches(ID, \"SN-....-..\")\n\nUsage: select <expr>\n    (Unused arguments: 'SN-....-..' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC (order 11) for galaxies (TYPE='GALAXY'), excluding stars.",
        "response": "stilts pixfoot in=classified.fits icmd='select equals(TYPE, \"GALAXY\")' ra=RA dec=DEC order=11 out=galaxies_o11.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GALAXY' ')'\n\nCommand was: select equals(TYPE, \"GALAXY\")\n\nUsage: select <expr>\n    (Unused arguments: 'GALAXY' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need to know the total number of HEALPix cells (row count) that would comprise a MOC at order 9.",
        "response": "stilts pixfoot in=sources.fits ra=RA dec=DEC order=9 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC (order 15) and immediately discard the output file, just checking for successful execution.",
        "response": "stilts pixfoot in=test.fits ra=RA dec=DEC order=15 omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC and pipe the output directly into TOPCAT for viewing.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC omode=topcat",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=topcat\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the metadata of the resulting MOC table structure (order 13), without the data itself.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Calculate the MOC for sources within 0.005 degrees and save the output as a FITS MOC, ensuring compression.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius=0.005 compress=true out=compressed_moc.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need a MOC at order 6, and I want to output the compressed ASCII MOC string to standard output.",
        "response": "stilts pixfoot in=coarse.fits ra=RA dec=DEC order=6 mocfmt=ascii compress=true out=-",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an order 12 JSON MOC, but add an output filter to rename the resultant table 'SkyCoverage'.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=12 mocfmt=json ocmd='tablename SkyCoverage' out=renamed_moc.json",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tablename SkyCoverage\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate an MOC (order 10) and then calculate a checksum of the output file.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=10 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an order 13 MOC and ensure the output metadata retains only the PIXEL_INDEX column and its metadata.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=13 ocmd='keepcols PIXEL_INDEX' out=index_only_o13.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an order 6 MOC and explicitly add a column called 'HEALPIX_LEVEL' with the value 6 to the output table.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=6 ocmd='addcol HEALPIX_LEVEL 6' out=with_level_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol HEALPIX_LEVEL 6\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC at order 10 for all sources, but apply a post-processing step to sort the resulting HEALPix cells by index.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=10 ocmd='sort PIXEL_INDEX' out=sorted_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I want the coverage area of all sources where the ID column starts with '2MASS'.",
        "response": "stilts pixfoot in=catalog.fits icmd='select startsWith(ID, \"2MASS\")' ra=RA dec=DEC out=two_mass_only.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '2MASS' ')'\n\nCommand was: select startsWith(ID, \"2MASS\")\n\nUsage: select <expr>\n    (Unused arguments: '2MASS' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC and apply a post-processing filter to keep only HEALPix cells whose index is greater than 1000000.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC ocmd='select PIXEL_INDEX > 1000000' out=high_index_cells.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=select PIXEL_INDEX > 1000000\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need a very high-resolution MOC (order 29) for a single point (0, 0) and save it as FITS.",
        "response": "stilts pixfoot in=:loop:1 end=1 ra=0 dec=0 order=29 out=max_order_point.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an MOC (order 16) and add a column that shows the row index of the source from the input table.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=16 ocmd='addcol INPUT_INDEX $0' out=indexed_output.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol INPUT_INDEX $0\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the coverage area of all sources that have a quality flag (Q_FLAG) set to 'A'.",
        "response": "stilts pixfoot in=flagged.fits icmd='select equals(Q_FLAG, \"A\")' ra=RA dec=DEC out=q_flag_A_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'A' ')'\n\nCommand was: select equals(Q_FLAG, \"A\")\n\nUsage: select <expr>\n    (Unused arguments: 'A' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an order 8 MOC and apply a post-processing step to remove any columns added during MOC generation, returning only the pixel index column.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=8 ocmd='keepcols PIXEL_INDEX' out=pure_index_o8.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an order 13 MOC, and ensure the output is a compressed ASCII MOC string.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=13 mocfmt=ascii compress=true out=compressed_ascii.txt",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need a MOC for all sources with a quality flag 'GOOD', using a fixed 0.001 degree radius.",
        "response": "stilts pixfoot in=qa_cat.fits icmd='select equals(FLAG, \"GOOD\")' ra=RA dec=DEC radius=0.001 out=qa_good_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GOOD' ')'\n\nCommand was: select equals(FLAG, \"GOOD\")\n\nUsage: select <expr>\n    (Unused arguments: 'GOOD' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a coverage map at order 16, adding a constant column 'SURVEY'='DEEP' to the output.",
        "response": "stilts pixfoot in=deep_survey.fits ra=RA dec=DEC order=16 ocmd='addcol SURVEY \"DEEP\"' out=deep_survey_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol SURVEY \"DEEP\"\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC for sources with a fixed 1 arcminute radius, and calculate the row count.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='1.0 / 60.0' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a coverage map at order 14, using coordinates RA and DEC, but apply a post-filter to discard any column except PIXEL_INDEX and its HEALPix level.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=14 ocmd='keepcols PIXEL_INDEX; addcol ORDER 14' out=hpx_minimal_info.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols PIXEL_INDEX; addcol ORDER 14\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need an MOC for objects where the name contains 'QSO', at order 10.",
        "response": "stilts pixfoot in=named_cat.fits icmd='select contains(NAME, \"QSO\")' ra=RA dec=DEC order=10 out=qso_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'QSO' ')'\n\nCommand was: select contains(NAME, \"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: 'QSO' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a low-resolution MOC (order 4) and then pipeline the result to calculate column statistics.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=4 omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=stats\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC for 5 arcsecond radius circles, outputting the result in compressed JSON format.",
        "response": "stilts pixfoot in=targets.fits ra=RA dec=DEC radius='5.0 / 3600.0' mocfmt=json compress=true out=compressed_5as.json.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 15) and apply a post-filter to shuffle the resultant HEALPix cells randomly.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=15 ocmd='shuffle' out=shuffled_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=shuffle\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC at order 20 and then discard all columns except the PIXEL_INDEX and the row index.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=20 ocmd='keepcols PIXEL_INDEX $0' out=index_and_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=keepcols PIXEL_INDEX $0\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate an MOC (order 11) for points and write the output directly to the GUI viewer.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=11 omode=gui",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=gui\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an order 13 MOC, filtering the input to include only rows where the 'TYPE' column is 'STAR'.",
        "response": "stilts pixfoot in=types.fits icmd='select equals(TYPE, \"STAR\")' ra=RA dec=DEC order=13 out=stars_only_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'STAR' ')'\n\nCommand was: select equals(TYPE, \"STAR\")\n\nUsage: select <expr>\n    (Unused arguments: 'STAR' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 10) and rename the output HEALPix index column from PIXEL_INDEX to HPX_ID.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=10 ocmd='colmeta -name HPX_ID PIXEL_INDEX' out=renamed_hpx_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=colmeta -name HPX_ID PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an order 8 MOC and add a column that is the natural logarithm of a column named 'EXPTIME'.",
        "response": "stilts pixfoot in=exposure.fits ra=RA dec=DEC order=8 ocmd='addcol LOG_EXPTIME ln(EXPTIME)' out=with_log_exptime.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol LOG_EXPTIME ln(EXPTIME)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the count of HEALPix cells (order 14) covered by sources within a radius of $1.5$ arcminutes.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC radius='1.5 / 60.0' order=14 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 6) and add a column showing the angular separation in degrees from a reference point (RA=100, DEC=0).",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=6 ocmd='addcol SEP_DEG skyDistanceDegrees(RA, DEC, 100.0, 0.0)' out=with_sep_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol SEP_DEG skyDistanceDegrees(RA, DEC, 100.0, 0.0)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate an MOC (order 15) and apply a post-processing step to calculate the mean of all numeric columns in the result.",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=15 omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=stats\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate an order 13 MOC and remove the PIXEL_INDEX column, leaving only auxiliary metadata (this will result in an empty table).",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=13 ocmd='delcols PIXEL_INDEX' out=empty_moc_info.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=delcols PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 10) and then transpose the resulting single-column table (PIXEL_INDEX) into a single row of many columns (for viewing compact indices).",
        "response": "stilts pixfoot in=data.fits ra=RA dec=DEC order=10 ocmd='transpose' out=transposed_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=transpose\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC for all sources, then calculate the total number of rows and columns (omode=count).",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the exact count of cells in an order 11 MOC for sources within 0.01 degrees.",
        "response": "stilts pixfoot in=count_test.fits ra=RA dec=DEC radius=0.01 order=11 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an MOC (order 12) where the radius is equivalent to 500 mas, outputting the result in compressed FITS format.",
        "response": "stilts pixfoot in=mas_500.fits ra=RA dec=DEC radius='500.0 / 3600000.0' compress=true out=mas_500_comp.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 4) and then immediately discard the output, only checking for successful execution.",
        "response": "stilts pixfoot in=discard_test.fits ra=RA dec=DEC omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 29, maximum standard resolution) for a fixed point at RA 10.0, Dec 10.0, with a $1 \times 10^{-10}$ degree radius.",
        "response": "stilts pixfoot in=:loop:1 end=1 ra=10.0 dec=10.0 radius=1.0e-10 order=29 out=max_res_o29.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 15) and apply an output filter to rename the resultant column 'PIXEL_INDEX' to 'HPX_INDEX'.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=15 ocmd='colmeta -name HPX_INDEX PIXEL_INDEX' out=renamed_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=colmeta -name HPX_INDEX PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Find the coverage for objects within 100 mas, ensuring verbose logging (level 3, though pixfoot is not a command where verbosity level is typically set).",
        "response": "stilts pixfoot in=mas_targets.fits ra=RA dec=DEC radius='100.0 / 3600000.0' verb=3 out=verbose_100mas.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 10) and pipe the output table to a checksum calculation.",
        "response": "stilts pixfoot in=checksum_data.fits ra=RA dec=DEC order=10 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC (order 13) and apply an output filter to add a column showing the pixel area in square degrees.",
        "response": "stilts pixfoot in=area_calc.fits ra=RA dec=DEC order=13 ocmd='addcol CELL_AREA healpixSqdeg(13)' out=with_area_col.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol CELL_AREA healpixSqdeg(13)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need a MOC for a fixed radius of 1 arcminute, outputting the result directly to TOPCAT.",
        "response": "stilts pixfoot in=topcat_in.fits ra=RA dec=DEC radius='1.0 / 60.0' omode=topcat",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=topcat\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 17) for targets that are within 5 arcminutes, outputting the column metadata only.",
        "response": "stilts pixfoot in=meta_targets.fits ra=RA dec=DEC radius='5.0 / 60.0' order=17 omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a JSON MOC (order 13) for sources within $0.0005$ degrees, including compression.",
        "response": "stilts pixfoot in=json_comp.fits ra=RA dec=DEC radius=0.0005 order=13 mocfmt=json compress=true out=json_comp_moc.json.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC (order 10) and then apply a post-filter to select only the last 100 resulting HEALPix cells.",
        "response": "stilts pixfoot in=tail_hpx.fits ra=RA dec=DEC order=10 ocmd='tail 100' out=tail_100_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tail 100\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the coverage for objects within $\frac{30 \text{ arcsec}}{2}$ (15 arcsec), saving the row count.",
        "response": "stilts pixfoot in=half_30as.fits ra=RA dec=DEC radius='15.0 / 3600.0' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an ASCII MOC (order 13) for 100 mas radius circles, writing to a compressed file.",
        "response": "stilts pixfoot in=mas_comp.fits ra=RA dec=DEC radius='100.0 / 3600000.0' order=13 mocfmt=ascii compress=true out=mas_100_comp.txt.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an MOC (order 15) and apply a post-filter to sort the resultant HEALPix cells by index in descending order.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=15 ocmd='sort -down PIXEL_INDEX' out=sorted_desc_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort -down PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the MOC for sources with a fixed radius of $0.0005$ radians, converted to degrees, and outputting the exact count.",
        "response": "stilts pixfoot in=rad_count.fits ra=RA dec=DEC radius='radiansToDegrees(0.0005)' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 17) for $2$ mas radius circles, and then immediately discard the output file.",
        "response": "stilts pixfoot in=tiny_mas.fits ra=RA dec=DEC radius='2.0 / 3600000.0' order=17 omode=discard",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=discard\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an MOC (order 15) and apply a post-filter to rename the table 'FootprintData'.",
        "response": "stilts pixfoot in=rename_table.fits ra=RA dec=DEC order=15 ocmd='tablename FootprintData' out=renamed_output.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tablename FootprintData\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the coverage for objects within $0.00001$ radians, converting from Ecliptic Lon/Lat, writing the exact row count.",
        "response": "stilts pixfoot in=ecl_count.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='radiansToDegrees(1.0e-5)' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a low-resolution MOC (order 0) for points only (radius 0), and output the column metadata.",
        "response": "stilts pixfoot in=meta_o0.fits ra=RA dec=DEC radius=0 order=0 omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the MOC for $0.000005$ radians radius, converted from Ecliptic Lon/Lat, outputting to a compressed FITS file.",
        "response": "stilts pixfoot in=ecl_comp.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='radiansToDegrees(5.0e-6)' compress=true out=ecl_comp_moc.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an MOC (order 22) for fixed $0.00001$ degree radius circles, ensuring the row count is output.",
        "response": "stilts pixfoot in=count_hires.fits ra=RA dec=DEC radius=1.0e-5 order=22 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the MOC for sources with a fixed radius of 1 arcminute, outputting the result directly to TOPCAT for viewing.",
        "response": "stilts pixfoot in=targets_topcat.fits ra=RA dec=DEC radius='1.0 / 60.0' omode=gui",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=gui\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the MOC for 50 mas radius circles, ensuring the output column is named 'HPX_PIXEL'.",
        "response": "stilts pixfoot in=mas_50.fits ra=RA dec=DEC radius='50.0 / 3600000.0' ocmd='colmeta -name HPX_PIXEL PIXEL_INDEX' out=renamed_hpx_2.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=colmeta -name HPX_PIXEL PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC (order 11) and apply a post-filter to sort the resultant HEALPix cells by index in ascending order.",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC order=11 ocmd='sort PIXEL_INDEX' out=sorted_asc_hpx.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=sort PIXEL_INDEX\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the MOC for sources with a fixed radius of 30 arcseconds, outputting the result in FITS format with compression.",
        "response": "stilts pixfoot in=comp_30as.fits ra=RA dec=DEC radius='30.0 / 3600.0' compress=true out=comp_30as.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an MOC (order 20) for $1$ mas radius circles, explicitly ensuring the output is not compressed.",
        "response": "stilts pixfoot in=mas_20.fits ra=RA dec=DEC radius='1.0 / 3600000.0' order=20 compress=false out=mas_20_uncomp.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=false\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Find the coverage for $500$ mas radius circles, and output the total number of columns in the resultant table (omode=count will return rows and columns).",
        "response": "stilts pixfoot in=count_meta.fits ra=RA dec=DEC radius='500.0 / 3600000.0' omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate an ASCII MOC (order 16) for 10 arcsecond radius circles, writing to a compressed output.",
        "response": "stilts pixfoot in=as_10_comp.fits ra=RA dec=DEC radius='10.0 / 3600.0' order=16 mocfmt=ascii compress=true out=as_10_comp.txt.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 14) for fixed $0.00005$ degrees radius, and outputting JSON format to a compressed file.",
        "response": "stilts pixfoot in=json_comp2.fits ra=RA dec=DEC radius=5.0e-5 order=14 mocfmt=json compress=true out=json_5e5_moc.json.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC (order 17) for $0.0001$ radians, converted from Ecliptic coordinates, and outputting the column metadata.",
        "response": "stilts pixfoot in=ecl_meta.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius='radiansToDegrees(1.0e-4)' omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an MOC (order 6) for 3 arcminutes radius circles, ensuring the result is immediately viewed in the GUI.",
        "response": "stilts pixfoot in=gui_view.fits ra=RA dec=DEC radius='3.0 / 60.0' order=6 omode=gui",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=gui\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create an MOC (order 14) and apply an output filter to add a calculated column representing the cosine of RA.",
        "response": "stilts pixfoot in=cos_ra.fits ra=RA dec=DEC order=14 ocmd='addcol COS_RA cosDeg(RA)' out=with_cos_ra.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol COS_RA cosDeg(RA)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 19) for $0.1$ arcsecond radius, ensuring the output is compressed FITS.",
        "response": "stilts pixfoot in=hires_0p1as_comp.fits ra=RA dec=DEC radius='0.1 / 3600.0' order=19 compress=true out=hires_0p1as.fits.gz",
        "chat.jar": "failed",
        "error": "\nUnused arguments: compress=true\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Find the coverage for $25$ mas radius circles, and calculate the statistical checksum on the result.",
        "response": "stilts pixfoot in=checksum_mas.fits ra=RA dec=DEC radius='25.0 / 3600000.0' omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the MOC for sources with a fixed radius of 1 arcminute, ensuring the output table is named 'FinalMOC'.",
        "response": "stilts pixfoot in=final_name.fits ra=RA dec=DEC radius='1.0 / 60.0' ocmd='tablename FinalMOC' out=final_moc_file.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=tablename FinalMOC\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate an MOC (order 15) for point sources around Ecliptic coordinates (Lon=120, Lat=30), converting coordinates and returning the cell count.",
        "response": "stilts pixfoot in=ecl_cat.fits icmd='addskycoords ecliptic icrs ELON ELAT RA DEC' ra=RA dec=DEC radius=0 order=15 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Find the coverage MOC (order 13) where the radius is given by 2.0 times the R_ERR column (in degrees), and generate a checksum of the output.",
        "response": "stilts pixfoot in=errors.fits ra=RA dec=DEC radius='R_ERR * 2.0' order=13 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=checksum\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I need the metadata for the MOC created from point sources at order 13.",
        "response": "stilts pixfoot in=metadata_test.fits ra=RA dec=DEC radius=0 order=13 omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=meta\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC (order 14) for 30 arcsecond radii, adding a column named 'AREA_SQDEG' showing the area of the HEALPix cell.",
        "response": "stilts pixfoot in=addcol_test.fits ra=RA dec=DEC radius='30.0 / 3600.0' order=14 ocmd='addcol AREA_SQDEG healpixSqdeg(14)' out=moc_with_area.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol AREA_SQDEG healpixSqdeg(14)\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a point MOC (order 12) and output only the first 100 resulting HEALPix cells.",
        "response": "stilts pixfoot in=large_input.fits ra=RA dec=DEC radius=0 order=12 ocmd='head 100' out=head_100_moc.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=head 100\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a point MOC (order 10) and sort the resultant HEALPix cells by the RA coordinate of the cell center (requires conversion).",
        "response": "stilts pixfoot in=input.fits ra=RA dec=DEC radius=0 order=10 ocmd='addcol RA_CENTER healpixNestLon(10, PIXEL_INDEX); sort RA_CENTER' out=sorted_by_ra.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=addcol RA_CENTER healpixNestLon(10, PIXEL_INDEX); sort RA_CENTER\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a point MOC (order 10), filtering the input table to include only rows where the string identifier ID_SOURCE starts with 'NGC'.",
        "response": "stilts pixfoot in=id_filter.fits icmd='select startsWith(ID_SOURCE, \"NGC\")' ra=RA dec=DEC radius=0 order=10 out=ngc_only_moc.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: select startsWith(ID_SOURCE, \"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Calculate the total number of HEALPix cells (order 13) covered by point sources in the catalog.",
        "response": "stilts pixfoot in=full_count.fits ra=RA dec=DEC radius=0 order=13 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: omode=count\n\nUsage: pixfoot ifmt=<in-format> istream=true|false icmd=<cmds> order=0..29\n               ra=<expr> dec=<expr> radius=<expr> mocfmt=fits|json|ascii\n               out=<out-file>\n               [in=]<table>\n\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Can you plot just the points from `data.fits` where `class=='GALAXY'`?",
        "response": "stilts plot2plane in=data.fits icmd='select equals(class,\"GALAXY\")' layer=mark x=X y=Y",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ')'\n\nCommand was: select equals(class,\"GALAXY\")\n\nUsage: select <expr>\n    (Unused arguments: ')')\n",
        "source_cmd_file": "plot2plane.json"
    },
    {
        "prompt": "Draw a line fit (linearfit) and overlay the resulting equation/coefficients as a label (requires pre-calculation).",
        "response": "stilts tpipe in=data.fits ocmd='calc xfit x y' out=fit_params.txt; stilts plot2plane in=data.fits layer_m=mark x_m=X y_m=Y layer_f=linearfit x_f=X y_f=Y layer_l=label in_l=fit_params.txt x_l=X y_l=Y label_l='slope: M_SLOPE' out=fit_and_label.png",
        "chat.jar": "failed",
        "error": "\nUnused arguments: ocmd=calc xfit x y\n\nUsage: tpipe ifmt=<in-format> istream=true|false cmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format>\n             [in=]<table>\n\n/bin/sh: 1: plot2plane: not found\n",
        "source_cmd_file": "plot2plane.json"
    },
    {
        "prompt": "Plot the mean of multiple spectra as a line, and the standard deviation as a shaded region (using arrayquantile for both).",
        "response": "stilts tpipe in=spectra.fits ocmd='addcol MEAN_FLUX arrayFunc(\"mean(x)\", FLUX_ARRAY)' ocmd='addcol STDEV_FLUX arrayFunc(\"stdev(x)\", FLUX_ARRAY)' | stilts plot2plane in=- xs=WAVE layer_q=arrayquantile ys=FLUX quantiles='(MEAN_FLUX-STDEV_FLUX), (MEAN_FLUX+STDEV_FLUX)' color_q=lightblue layer_m=arrayquantile ys_m=FLUX quantiles_m=0.5 color_m=blue out=mean_sigma_band.png",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: plot2plane: not found\n\nUnused arguments: ocmd=addcol MEAN_FLUX arrayFunc(\"mean(x)\", FLUX_ARRAY) ocmd=addcol STDEV_FLUX arrayFunc(\"stdev(x)\", FLUX_ARRAY)\n\nUsage: tpipe ifmt=<in-format> istream=true|false cmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format>\n             [in=]<table>\n\n",
        "source_cmd_file": "plot2plane.json"
    },
    {
        "prompt": "Plot points, only keeping those rows where 'CLASS' equals 'STAR', then rename the X-axis label.",
        "response": "stilts plot2plane in=classified.fits icmd='select equals(CLASS,\"STAR\")' layer=mark x=RA y=DEC xlabel='Right Ascension' out=stars_labelled.png",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ')'\n\nCommand was: select equals(CLASS,\"STAR\")\n\nUsage: select <expr>\n    (Unused arguments: ')')\n",
        "source_cmd_file": "plot2plane.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 350.7173 and latitude 59.4356. Please use a search radius of 0.8092 degrees. Save the results to a votable file called query_results_2.votable. The coordinates are in the ecliptic system. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=350.7173 lat=59.4356 radius=0.8092 skysys=ecliptic verb=3 omode=out ofmt=votable out=query_results_2.votable",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 82.1597 and latitude 51.8982. Please use a search radius of 0.8635 degrees. Save the results to a csv file called query_results_3.csv. After the query, please run this processing command: 'keepcols \"RA DEC\"'.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=82.1597 lat=51.8982 radius=0.8635 omode=out ofmt=csv out=query_results_3.csv ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 231.1353 and latitude -11.202. Please use a search radius of 1.4903 degrees. Instead of a file, just give me the out. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=231.1353 lat=-11.202 radius=1.4903 verb=3 omode=out",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 78.1824 and latitude 62.3349. Please use a search radius of 0.343 degrees. Save the results to a ascii file called query_results_9.ascii. After the query, please run this processing command: 'keepcols \"RA DEC\"'. Don't use compression for the download.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=78.1824 lat=62.3349 radius=0.343 compress=false omode=out ofmt=ascii out=query_results_9.ascii ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 32.4832 and latitude -25.8641. Please use a search radius of 0.9369 degrees. Save the results to a ascii file called query_results_10.ascii. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the icrs system. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=32.4832 lat=-25.8641 radius=0.9369 skysys=icrs verb=3 omode=out ofmt=ascii out=query_results_10.ascii ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3 DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 322.2564 and latitude -20.4693. Please use a search radius of 0.7985 degrees. Save the results to a fits file called query_results_13.fits. Use verbosity level 1. Don't use compression for the download.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=322.2564 lat=-20.4693 radius=0.7985 verb=1 compress=false omode=out ofmt=fits out=query_results_13.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 307.8143 and latitude -40.2391. Please use a search radius of 1.2552 degrees. Save the results to a ascii file called query_results_14.ascii. The coordinates are in the icrs system. Use verbosity level 3.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=307.8143 lat=-40.2391 radius=1.2552 skysys=icrs verb=3 compress=true omode=out ofmt=ascii out=query_results_14.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 220.4542 and latitude 66.1824. Please use a search radius of 0.2254 degrees. Save the results to a fits file called query_results_15.fits. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the fk4 system.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=220.4542 lat=66.1824 radius=0.2254 skysys=fk4 omode=out ofmt=fits out=query_results_15.fits ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 267.3562 and latitude 52.8039. Please use a search radius of 0.3056 degrees. Save the results to a ascii file called query_results_20.ascii. The coordinates are in the ecliptic system. Use verbosity level 1.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=267.3562 lat=52.8039 radius=0.3056 skysys=ecliptic verb=1 omode=out ofmt=ascii out=query_results_20.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 195.2545 and latitude 73.0841. Please use a search radius of 1.4635 degrees. Save the results to a votable file called query_results_22.votable. After the query, please run this processing command: 'keepcols \"RA DEC\"'. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=195.2545 lat=73.0841 radius=1.4635 verb=2 omode=out ofmt=votable out=query_results_22.votable ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2 DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 340.2433 and latitude -60.0982. Please use a search radius of 0.7765 degrees. Save the results to a ascii file called query_results_23.ascii. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=340.2433 lat=-60.0982 radius=0.7765 verb=3 compress=true omode=out ofmt=ascii out=query_results_23.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 350.7105 and latitude 3.3699. Please use a search radius of 0.2064 degrees. Save the results to a csv file called query_results_26.csv. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=350.7105 lat=3.3699 radius=0.2064 verb=2 omode=out ofmt=csv out=query_results_26.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 153.8198 and latitude -23.8041. Please use a search radius of 1.2277 degrees. Instead of a file, just give me the count. The coordinates are in the ecliptic system. Use verbosity level 1.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=153.8198 lat=-23.8041 radius=1.2277 skysys=ecliptic verb=1 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 123.9132 and latitude 78.1778. Please use a search radius of 0.7966 degrees. Instead of a file, just give me the out. Use verbosity level 2.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=123.9132 lat=78.1778 radius=0.7966 verb=2 compress=true omode=out",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 291.0365 and latitude -22.1208. Please use a search radius of 1.3971 degrees. Save the results to a ascii file called query_results_39.ascii. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=291.0365 lat=-22.1208 radius=1.3971 verb=3 omode=out ofmt=ascii out=query_results_39.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 47.4144 and latitude -89.6948. Please use a search radius of 1.575 degrees. Save the results to a csv file called query_results_41.csv. The coordinates are in the galactic system. Use verbosity level 2.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=47.4144 lat=-89.6948 radius=1.575 skysys=galactic verb=2 omode=out ofmt=csv out=query_results_41.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 299.4723 and latitude 9.525. Please use a search radius of 0.1323 degrees. Save the results to a ascii file called query_results_48.ascii. Use verbosity level 1.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=299.4723 lat=9.525 radius=0.1323 verb=1 omode=out ofmt=ascii out=query_results_48.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 157.9475 and latitude -36.8897. Please use a search radius of 1.6216 degrees. Instead of a file, just give me the checksum. The coordinates are in the galactic system. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=157.9475 lat=-36.8897 radius=1.6216 skysys=galactic verb=3 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 204.4195 and latitude -37.4601. Please use a search radius of 1.1628 degrees. Save the results to a ascii file called query_results_54.ascii. After the query, please run this processing command: 'keepcols \"RA DEC\"'. Use verbosity level 3.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=204.4195 lat=-37.4601 radius=1.1628 verb=3 omode=out ofmt=ascii out=query_results_54.ascii ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3 DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 266.0345 and latitude -61.1498. Please use a search radius of 0.071 degrees. Save the results to a csv file called query_results_61.csv. After the query, please run this processing command: 'keepcols \"RA DEC\"'.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=266.0345 lat=-61.1498 radius=0.071 omode=out ofmt=csv out=query_results_61.csv ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 201.9338 and latitude 53.384. Please use a search radius of 0.2171 degrees. Save the results to a votable file called query_results_65.votable. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the fk5 system.",
        "response": "stilts cone servicetype=sia1 serviceurl=http://irsa.ipac.caltech.edu/sia lon=201.9338 lat=53.384 radius=0.2171 skysys=fk5 compress=true omode=out ofmt=votable out=query_results_65.votable ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 60.1007 and latitude 36.6123. Please use a search radius of 1.6222 degrees. Save the results to a fits file called query_results_66.fits. After the query, please run this processing command: 'keepcols \"RA DEC\"'. Use verbosity level 1.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=60.1007 lat=36.6123 radius=1.6222 verb=1 omode=out ofmt=fits out=query_results_66.fits ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1 DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 241.6449 and latitude 44.435. Please use a search radius of 1.217 degrees. Instead of a file, just give me the stats. The coordinates are in the supergalactic system. Use verbosity level 1.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=241.6449 lat=44.435 radius=1.217 skysys=supergalactic verb=1 omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 51.7854 and latitude -63.4288. Please use a search radius of 1.3638 degrees. Save the results to a votable file called query_results_68.votable. The coordinates are in the ecliptic system. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=51.7854 lat=-63.4288 radius=1.3638 skysys=ecliptic verb=2 compress=true omode=out ofmt=votable out=query_results_68.votable",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 7.1802 and latitude 8.158. Please use a search radius of 0.3065 degrees. Save the results to a csv file called query_results_70.csv. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=7.1802 lat=8.158 radius=0.3065 verb=2 omode=out ofmt=csv out=query_results_70.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 219.3523 and latitude 25.1366. Please use a search radius of 0.8173 degrees. Save the results to a fits file called query_results_74.fits. The coordinates are in the ecliptic system. Use verbosity level 1.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=219.3523 lat=25.1366 radius=0.8173 skysys=ecliptic verb=1 compress=true omode=out ofmt=fits out=query_results_74.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 197.0356 and latitude 27.8531. Please use a search radius of 1.808 degrees. Save the results to a ascii file called query_results_77.ascii. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the fk4 system.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=197.0356 lat=27.8531 radius=1.808 skysys=fk4 omode=out ofmt=ascii out=query_results_77.ascii ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 149.8991 and latitude -39.3845. Please use a search radius of 1.1439 degrees. Save the results to a fits file called query_results_78.fits. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the fk4 system. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=149.8991 lat=-39.3845 radius=1.1439 skysys=fk4 verb=3 omode=out ofmt=fits out=query_results_78.fits ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3 DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 213.8985 and latitude -34.6628. Please use a search radius of 1.0096 degrees. Save the results to a votable file called query_results_82.votable. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the galactic system.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=213.8985 lat=-34.6628 radius=1.0096 skysys=galactic omode=out ofmt=votable out=query_results_82.votable ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 55.2894 and latitude 81.0973. Please use a search radius of 0.6062 degrees. Instead of a file, just give me the stats. Use verbosity level 1.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=55.2894 lat=81.0973 radius=0.6062 verb=1 omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 1.6676 and latitude 17.8732. Please use a search radius of 0.892 degrees. Save the results to a fits file called query_results_87.fits. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the ecliptic system.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=1.6676 lat=17.8732 radius=0.892 skysys=ecliptic omode=out ofmt=fits out=query_results_87.fits ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 16.6445 and latitude -50.0197. Please use a search radius of 1.2904 degrees. Save the results to a csv file called query_results_90.csv. Use verbosity level 1. Don't use compression for the download.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=16.6445 lat=-50.0197 radius=1.2904 verb=1 compress=false omode=out ofmt=csv out=query_results_90.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 185.4622 and latitude -74.8604. Please use a search radius of 1.8681 degrees. Instead of a file, just give me the count. The coordinates are in the ecliptic system. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=185.4622 lat=-74.8604 radius=1.8681 skysys=ecliptic verb=2 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 220.3678 and latitude -57.7226. Please use a search radius of 1.8583 degrees. Save the results to a ascii file called query_results_101.ascii. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the supergalactic system. Use verbosity level 1.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=220.3678 lat=-57.7226 radius=1.8583 skysys=supergalactic verb=1 compress=true omode=out ofmt=ascii out=query_results_101.ascii ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1 DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 356.3979 and latitude 86.7522. Please use a search radius of 0.2536 degrees. Save the results to a csv file called query_results_105.csv. After the query, please run this processing command: 'keepcols \"RA DEC\"'. Use verbosity level 1.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=356.3979 lat=86.7522 radius=0.2536 verb=1 omode=out ofmt=csv out=query_results_105.csv ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1 DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 334.1524 and latitude -85.2637. Please use a search radius of 1.5917 degrees. Save the results to a csv file called query_results_109.csv. The coordinates are in the icrs system. Use verbosity level 1. Don't use compression for the download.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=334.1524 lat=-85.2637 radius=1.5917 skysys=icrs verb=1 compress=false omode=out ofmt=csv out=query_results_109.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 77.4729 and latitude -73.7879. Please use a search radius of 0.0517 degrees. Save the results to a csv file called query_results_112.csv. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the icrs system.",
        "response": "stilts cone servicetype=sia1 serviceurl=http://irsa.ipac.caltech.edu/sia lon=77.4729 lat=-73.7879 radius=0.0517 skysys=icrs omode=out ofmt=csv out=query_results_112.csv ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 1.4378 and latitude 83.5737. Please use a search radius of 1.6294 degrees. Save the results to a fits file called query_results_113.fits. Use verbosity level 3. Don't use compression for the download.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=1.4378 lat=83.5737 radius=1.6294 verb=3 compress=false omode=out ofmt=fits out=query_results_113.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 211.6143 and latitude -20.976. Please use a search radius of 0.5863 degrees. Instead of a file, just give me the stats. The coordinates are in the icrs system. Use verbosity level 1.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=211.6143 lat=-20.976 radius=0.5863 skysys=icrs verb=1 omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 28.9677 and latitude -78.6661. Please use a search radius of 1.5762 degrees. Save the results to a ascii file called query_results_118.ascii. The coordinates are in the fk5 system. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=28.9677 lat=-78.6661 radius=1.5762 skysys=fk5 verb=3 omode=out ofmt=ascii out=query_results_118.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 326.022 and latitude 37.5007. Please use a search radius of 1.4683 degrees. Instead of a file, just give me the out. The coordinates are in the fk5 system. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=326.022 lat=37.5007 radius=1.4683 skysys=fk5 verb=3 omode=out",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 91.2156 and latitude -58.3311. Please use a search radius of 0.3854 degrees. Save the results to a ascii file called query_results_122.ascii. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=91.2156 lat=-58.3311 radius=0.3854 verb=2 omode=out ofmt=ascii out=query_results_122.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 27.4083 and latitude 89.143. Please use a search radius of 1.0825 degrees. Save the results to a votable file called query_results_125.votable. The coordinates are in the fk5 system. Use verbosity level 2.",
        "response": "stilts cone servicetype=sia1 serviceurl=http://irsa.ipac.caltech.edu/sia lon=27.4083 lat=89.143 radius=1.0825 skysys=fk5 verb=2 compress=true omode=out ofmt=votable out=query_results_125.votable",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 84.194 and latitude -59.9534. Please use a search radius of 0.1817 degrees. Save the results to a fits file called query_results_130.fits. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=84.194 lat=-59.9534 radius=0.1817 verb=2 omode=out ofmt=fits out=query_results_130.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 79.0034 and latitude 75.9082. Please use a search radius of 1.0867 degrees. Save the results to a csv file called query_results_134.csv. After the query, please run this processing command: 'keepcols \"RA DEC\"'.",
        "response": "stilts cone servicetype=sia1 serviceurl=http://irsa.ipac.caltech.edu/sia lon=79.0034 lat=75.9082 radius=1.0867 omode=out ofmt=csv out=query_results_134.csv ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 217.5147 and latitude -5.111. Please use a search radius of 1.7451 degrees. Save the results to a votable file called query_results_140.votable. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=217.5147 lat=-5.111 radius=1.7451 verb=2 omode=out ofmt=votable out=query_results_140.votable",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 321.1321 and latitude 73.0148. Please use a search radius of 1.8906 degrees. Instead of a file, just give me the count. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=321.1321 lat=73.0148 radius=1.8906 verb=2 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 168.5277 and latitude -3.5198. Please use a search radius of 0.7268 degrees. Instead of a file, just give me the count. The coordinates are in the fk4 system. Use verbosity level 2.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=168.5277 lat=-3.5198 radius=0.7268 skysys=fk4 verb=2 omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 181.4404 and latitude -30.0402. Please use a search radius of 0.2165 degrees. Save the results to a votable file called query_results_145.votable. After the query, please run this processing command: 'keepcols \"RA DEC\"'. Use verbosity level 1. Don't use compression for the download.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=181.4404 lat=-30.0402 radius=0.2165 verb=1 compress=false omode=out ofmt=votable out=query_results_145.votable ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1 DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 340.3858 and latitude 37.934. Please use a search radius of 1.2268 degrees. Save the results to a ascii file called query_results_146.ascii. Use verbosity level 3.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=340.3858 lat=37.934 radius=1.2268 verb=3 omode=out ofmt=ascii out=query_results_146.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 77.1002 and latitude -78.4641. Please use a search radius of 1.7503 degrees. Save the results to a votable file called query_results_148.votable. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=77.1002 lat=-78.4641 radius=1.7503 verb=3 omode=out ofmt=votable out=query_results_148.votable",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 45.6665 and latitude -38.8947. Please use a search radius of 0.8837 degrees. Save the results to a fits file called query_results_152.fits. Use verbosity level 3. Don't use compression for the download.",
        "response": "stilts cone servicetype=sia1 serviceurl=http://irsa.ipac.caltech.edu/sia lon=45.6665 lat=-38.8947 radius=0.8837 verb=3 compress=false omode=out ofmt=fits out=query_results_152.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 93.4637 and latitude 65.2476. Please use a search radius of 1.6733 degrees. Instead of a file, just give me the checksum. The coordinates are in the supergalactic system. Use verbosity level 2.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=93.4637 lat=65.2476 radius=1.6733 skysys=supergalactic verb=2 omode=checksum",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 55.2465 and latitude 80.2764. Please use a search radius of 0.5923 degrees. Save the results to a ascii file called query_results_154.ascii. After the query, please run this processing command: 'keepcols \"RA DEC\"'. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=55.2465 lat=80.2764 radius=0.5923 verb=3 compress=true omode=out ofmt=ascii out=query_results_154.ascii ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3 DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 119.5935 and latitude 29.0413. Please use a search radius of 1.0673 degrees. Save the results to a ascii file called query_results_155.ascii. Use verbosity level 1.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=119.5935 lat=29.0413 radius=1.0673 verb=1 omode=out ofmt=ascii out=query_results_155.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 345.8596 and latitude 6.4847. Please use a search radius of 1.5241 degrees. Save the results to a fits file called query_results_157.fits. Use verbosity level 3. Don't use compression for the download.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=345.8596 lat=6.4847 radius=1.5241 verb=3 compress=false omode=out ofmt=fits out=query_results_157.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 11.9731 and latitude -64.9561. Please use a search radius of 0.469 degrees. Save the results to a csv file called query_results_158.csv. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=11.9731 lat=-64.9561 radius=0.469 verb=3 omode=out ofmt=csv out=query_results_158.csv",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 159.0477 and latitude 19.1323. Please use a search radius of 0.6405 degrees. Save the results to a ascii file called query_results_159.ascii. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the icrs system.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=159.0477 lat=19.1323 radius=0.6405 skysys=icrs omode=out ofmt=ascii out=query_results_159.ascii ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 17.7994 and latitude 48.293. Please use a search radius of 0.5202 degrees. Save the results to a csv file called query_results_161.csv. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the galactic system.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=17.7994 lat=48.293 radius=0.5202 skysys=galactic omode=out ofmt=csv out=query_results_161.csv ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 322.8786 and latitude -70.2856. Please use a search radius of 0.4399 degrees. Save the results to a fits file called query_results_167.fits. Use verbosity level 2.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=322.8786 lat=-70.2856 radius=0.4399 verb=2 omode=out ofmt=fits out=query_results_167.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 50.9133 and latitude 21.4771. Please use a search radius of 1.7978 degrees. Save the results to a fits file called query_results_169.fits. The coordinates are in the supergalactic system. Use verbosity level 1.",
        "response": "stilts cone servicetype=sia1 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=50.9133 lat=21.4771 radius=1.7978 skysys=supergalactic verb=1 omode=out ofmt=fits out=query_results_169.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 239.3731 and latitude 88.5681. Please use a search radius of 0.9411 degrees. Save the results to a ascii file called query_results_170.ascii. The coordinates are in the icrs system. Use verbosity level 3.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=239.3731 lat=88.5681 radius=0.9411 skysys=icrs verb=3 compress=true omode=out ofmt=ascii out=query_results_170.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 140.6579 and latitude 6.2406. Please use a search radius of 1.3071 degrees. Instead of a file, just give me the meta. The coordinates are in the supergalactic system. Use verbosity level 2.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=140.6579 lat=6.2406 radius=1.3071 skysys=supergalactic verb=2 compress=true omode=meta",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=2\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl? I'm looking for objects around longitude 28.1623 and latitude -13.9057. Please use a search radius of 1.8277 degrees. Save the results to a votable file called query_results_178.votable. The coordinates are in the galactic system. Use verbosity level 3.",
        "response": "stilts cone servicetype=sia2 serviceurl=https://skyview.gsfc.nasa.gov/cgi-bin/vo/sia.pl lon=28.1623 lat=-13.9057 radius=1.8277 skysys=galactic verb=3 omode=out ofmt=votable out=query_results_178.votable",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 262.1793 and latitude 88.3543. Please use a search radius of 1.3954 degrees. Save the results to a votable file called query_results_181.votable. Use verbosity level 3. Don't use compression for the download.",
        "response": "stilts cone servicetype=sia1 serviceurl=http://irsa.ipac.caltech.edu/sia lon=262.1793 lat=88.3543 radius=1.3954 verb=3 compress=false omode=out ofmt=votable out=query_results_181.votable",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 316.7599 and latitude -19.3075. Please use a search radius of 0.1241 degrees. Save the results to a csv file called query_results_182.csv. After the query, please run this processing command: 'keepcols \"RA DEC\"'.",
        "response": "stilts cone servicetype=sia1 serviceurl=http://irsa.ipac.caltech.edu/sia lon=316.7599 lat=-19.3075 radius=0.1241 compress=true omode=out ofmt=csv out=query_results_182.csv ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 54.0894 and latitude -36.659. Please use a search radius of 0.1501 degrees. Save the results to a votable file called query_results_184.votable. Use verbosity level 1.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=54.0894 lat=-36.659 radius=0.1501 verb=1 omode=out ofmt=votable out=query_results_184.votable",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=1\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Image Access service at http://irsa.ipac.caltech.edu/SIA? I'm looking for objects around longitude 8.9891 and latitude -39.115. Please use a search radius of 1.7484 degrees. Save the results to a ascii file called query_results_188.ascii. After the query, please run this processing command: 'keepcols \"RA DEC\"'. The coordinates are in the fk4 system.",
        "response": "stilts cone servicetype=sia2 serviceurl=http://irsa.ipac.caltech.edu/sia lon=8.9891 lat=-39.115 radius=1.7484 skysys=fk4 omode=out ofmt=ascii out=query_results_188.ascii ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at http://archive.eso.org/ssap? I'm looking for objects around longitude 265.8685 and latitude 46.1969. Please use a search radius of 1.5803 degrees. Save the results to a votable file called query_results_198.votable. After the query, please run this processing command: 'keepcols \"RA DEC\"'.",
        "response": "stilts cone servicetype=ssa serviceurl=http://archive.eso.org/ssap lon=265.8685 lat=46.1969 radius=1.5803 omode=out ofmt=votable out=query_results_198.votable ocmd=\"keepcols \"RA DEC\"\"",
        "chat.jar": "failed",
        "error": "\nUnused arguments: DEC\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Can you query the Simple Spectral Access service at https://sdss.vos.pnsn.org/ssa? I'm looking for objects around longitude 323.1123 and latitude -70.4073. Please use a search radius of 0.4742 degrees. Save the results to a ascii file called query_results_199.ascii. Use verbosity level 3. Don't use compression for the download.",
        "response": "stilts cone servicetype=ssa serviceurl=https://sdss.vos.pnsn.org/ssa lon=323.1123 lat=-70.4073 radius=0.4742 verb=3 compress=false omode=out ofmt=ascii out=query_results_199.ascii",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Query the ESO SSA service for spectra around RA 180, Dec 0, with a radius of 0.2 degrees, and filter the result to only keep records where the target name is 'QSO'.",
        "response": "stilts cone serviceurl=https://archive.eso.org/tap_obs lon=180.0 lat=0.0 radius=0.2 servicetype=ssa ocmd='select equals(TARGET_NAME,\"QSO\")' out=filtered_spectra.vot",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: ')'\n\nCommand was: select equals(TARGET_NAME,\"QSO\")\n\nUsage: select <expr>\n    (Unused arguments: ')')\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Run an SSA query and filter the resulting data by selecting only those rows whose 'DATE_OBS' value is after a certain MJD (e.g., MJD 55000).",
        "response": "stilts cone serviceurl=https://archive.eso.org/tap_obs lon=10.0 lat=10.0 radius=0.1 servicetype=ssa ocmd='select mjdToIso(DATE_OBS) > \"2009-06-25\"' out=recent_obs.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '>' '2009-06-25'\n\nCommand was: select mjdToIso(DATE_OBS) > \"2009-06-25\"\n\nUsage: select <expr>\n    (Unused arguments: '>' '2009-06-25')\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Find images via SIAv2 at KOA TAP around Galactic L=0, B=0, with a radius of 0.05 degrees, forcing verbose logging (verb=3).",
        "response": "stilts cone serviceurl=https://koa.ipac.caltech.edu/TAP lon=0.0 lat=0.0 radius=0.05 servicetype=sia2 skysys=galactic verb=3 out=koa_sia2_verbose.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: verb=3\n\nUsage: cone serviceurl=<url-value> lon=<degrees> lat=<degrees>\n            radius=<degrees>\n            skysys=icrs|fk5|fk4|galactic|supergalactic|ecliptic\n            servicetype=cone|ssa|sia1|sia2|sia verb=1|2|3 compress=true|false\n            dataformat=<value> ocmd=<cmds>\n            omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n            out=<out-table> ofmt=<out-format>\n\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Draw a small circle (0.01 degree radius) using the area layer, specifying the area using the DALI type CIRCLE array [lon, lat, radius].",
        "response": "stilts plot2sky in=:loop:1 end=1 layer=area area='array(0, 0, 0.01)' areatype=CIRCLE polymode=outline out=small_dali_circle.png",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1\n\nUsage: plot2sky xpix=<int-value> ypix=<int-value>\n                insets=<top>,<left>,<bottom>,<right>\n                omode=swing|out|cgi|discard|auto\n                storage=simple|memory|disk|policy|cache|basic-cache|persistent|parallel\n                seq=<suffix>[,...] legend=true|false|null legborder=true|false\n                legopaque=true|false legseq=<suffix>[,...]\n                legpos=<xfrac,yfrac> title=<value>\n                auxmap=<map-name>|<color>-<color>[-<color>...]\n                auxclip=<lo>,<hi> auxflip=true|false auxquant=<number>\n                auxfunc=log|linear|histogram|... auxmin=<number>\n                auxmax=<number> auxlabel=<text> auxcrowd=<factor>\n                auxwidth=<pixels> auxvisible=true|false|null\n                forcebitmap=true|false compositor=0..1 animate=<table>\n                afmt=<in-format> astream=true|false acmd=<cmds>\n                parallel=<int-value> projection=sin|aitoff|aitoff0|car|car0\n                viewsys=equatorial|galactic|supergalactic|ecliptic\n                reflectlon=true|false grid=true|false scalebar=true|false\n                labelpos=Auto|External|Internal|... sex=true|false\n                crowd=<number> gridcolor=<rrggbb>|red|blue|... gridtrans=0..1\n                labelcolor=<rrggbb>|red|blue|... gridaa=true|false\n                texttype=plain|antialias|latex fontsize=<int-value>\n                fontstyle=standard|serif|mono\n                fontweight=plain|bold|italic|bold_italic clon=<degrees>\n                clat=<degrees> radius=<degrees> zoomfactor=<number>\n                leglabelN=<text> layerN=<layer-type> <layerN-specific-params>\n                datasysN=equatorial|galactic|supergalactic|ecliptic\n\n",
        "source_cmd_file": "plot2sky.json"
    },
    {
        "prompt": "Draw a small circle area (area layer) of fixed radius 1 micro-arcsecond (uas).",
        "response": "stilts plot2sky in=:loop:1 end=1 lon=0.0 lat=0.0 layer=area area='array(0, 0, 1e-6 / 3600.0)' areatype=CIRCLE polymode=fill out=microarcsec_circle.png",
        "chat.jar": "failed",
        "error": "\nUnused arguments: end=1 lon=0.0 lat=0.0\n\nUsage: plot2sky xpix=<int-value> ypix=<int-value>\n                insets=<top>,<left>,<bottom>,<right>\n                omode=swing|out|cgi|discard|auto\n                storage=simple|memory|disk|policy|cache|basic-cache|persistent|parallel\n                seq=<suffix>[,...] legend=true|false|null legborder=true|false\n                legopaque=true|false legseq=<suffix>[,...]\n                legpos=<xfrac,yfrac> title=<value>\n                auxmap=<map-name>|<color>-<color>[-<color>...]\n                auxclip=<lo>,<hi> auxflip=true|false auxquant=<number>\n                auxfunc=log|linear|histogram|... auxmin=<number>\n                auxmax=<number> auxlabel=<text> auxcrowd=<factor>\n                auxwidth=<pixels> auxvisible=true|false|null\n                forcebitmap=true|false compositor=0..1 animate=<table>\n                afmt=<in-format> astream=true|false acmd=<cmds>\n                parallel=<int-value> projection=sin|aitoff|aitoff0|car|car0\n                viewsys=equatorial|galactic|supergalactic|ecliptic\n                reflectlon=true|false grid=true|false scalebar=true|false\n                labelpos=Auto|External|Internal|... sex=true|false\n                crowd=<number> gridcolor=<rrggbb>|red|blue|... gridtrans=0..1\n                labelcolor=<rrggbb>|red|blue|... gridaa=true|false\n                texttype=plain|antialias|latex fontsize=<int-value>\n                fontstyle=standard|serif|mono\n                fontweight=plain|bold|italic|bold_italic clon=<degrees>\n                clat=<degrees> radius=<degrees> zoomfactor=<number>\n                leglabelN=<text> layerN=<layer-type> <layerN-specific-params>\n                datasysN=equatorial|galactic|supergalactic|ecliptic\n\n",
        "source_cmd_file": "plot2sky.json"
    },
    {
        "prompt": "My two tables have some duplicate column names. How can I join them, keeping all columns but renaming duplicates?",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits fixcols=dups suffix1=_t1 suffix2=_t2 out=renamed_dups.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_t1 suffix2=_t2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine table1 and table2, but make sure all columns from table2 have a `_t2` suffix.",
        "response": "stilts tcatn nin=2 in1=table1.fits in2=table2.fits fixcols=dups suffix2=_t2 out=suffixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix2=_t2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine three tables, but ensure that any duplicated column names across them are suffixed with `_1`, `_2`, `_3`.",
        "response": "stilts tcatn nin=3 in1=t1.fits in2=t2.fits in3=t3.fits fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 out=all_suffixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_1 suffix2=_2 suffix3=_3\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Concatenate a VOTable and a FITS table, keeping all columns but renaming duplicates by adding suffix \"_A\" for the first table's columns and \"_B\" for the second.",
        "response": "stilts tcatn nin=2 in1=data_A.vot in2=data_B.fits fixcols=all suffix1=_A suffix2=_B out=renamed_all.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_A suffix2=_B\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Concatenate two tables, but only rows from table2 that have a quality flag 'GOOD' should be included.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='select QUALITY == \"GOOD\"' out=filtered_on_quality.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: '==' 'GOOD'\n\nCommand was: select QUALITY == \"GOOD\"\n\nUsage: select <expr>\n    (Unused arguments: '==' 'GOOD')\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Concatenate data1.fits and data2.fits, but only include rows from the first table where the 'ID_STR' starts with 'NGC'.",
        "response": "stilts tcatn nin=2 in1=data1.fits icmd1='select startsWith(ID_STR, \"NGC\")' in2=data2.fits out=NGC_combined.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'NGC' ')'\n\nCommand was: select startsWith(ID_STR, \"NGC\")\n\nUsage: select <expr>\n    (Unused arguments: 'NGC' ')')\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Join three tables, renaming all output columns by using the column name and index, e.g. ID_1, ID_2, etc.",
        "response": "stilts tcatn nin=3 in1=a.fits in2=b.fits in3=c.fits fixcols=all suffix1=_1 suffix2=_2 suffix3=_3 out=indexed_cols.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_1 suffix2=_2 suffix3=_3\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine catalogue A and catalogue B. Rename all columns in A by prefixing them with 'CAT_A_' and all columns in B by prefixing with 'CAT_B_'.",
        "response": "stilts tcatn nin=2 in1=A.fits fixcols=all suffix1=_A_ in2=B.fits fixcols=all suffix2=_B_ out=all_prefixed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_A_ fixcols=all suffix2=_B_\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine two tables that might contain duplicated column names. Rename duplicated columns with suffix '_T1' and '_T2'.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits fixcols=dups suffix1=_T1 suffix2=_T2 out=dup_renamed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_T1 suffix2=_T2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine three tables, marking the original file location, and storing the resulting table in a persistent cache location.",
        "response": "stilts tcatn nin=3 in1=d1.fits in2=d2.fits in3=d3.fits loccol=OriginalFile storage=persistent out=cached_result.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: storage=persistent\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine tables, sorting the output in parallel by magnitude.",
        "response": "stilts tcatn nin=2 in1=p1.fits in2=p2.fits runner=parallel ocmd='sort MAG' out=parallel_sorted.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine three tables, making the output report highly verbose metadata to aid debugging.",
        "response": "stilts tcatn nin=3 in1=a.fits in2=b.fits in3=c.fits omode=meta -verbose -verbose",
        "chat.jar": "failed",
        "error": "\nUnused arguments: -verbose -verbose\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine three tables and then display statistics for the combined table, ensuring the statistics calculation runs in parallel.",
        "response": "stilts tcatn nin=3 in1=c1.fits in2=c2.fits in3=c3.fits runner=parallel omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine tables, explicitly marking columns from the first input as '_IN1' and the second as '_IN2', even for non-duplicate columns.",
        "response": "stilts tcatn nin=2 in1=t1.fits fixcols=all suffix1=_IN1 in2=t2.fits fixcols=all suffix2=_IN2 out=full_provenance.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_IN1 fixcols=all suffix2=_IN2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine tables, extracting statistics (min, max, mean) for all numeric columns in parallel.",
        "response": "stilts tcatn nin=2 in1=d1.fits in2=d2.fits runner=parallel omode=stats",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine files A, B, C. Rename all columns from B with the prefix '_B' due to potential name duplication.",
        "response": "stilts tcatn nin=3 in1=A.fits in2=B.fits fixcols=all suffix2=_B in3=C.fits out=prefixed_columns.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix2=_B\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Merge two large tables. Use parallel processing for the concatenation to speed up execution.",
        "response": "stilts tcatn nin=2 in1=huge_1.fits in2=huge_2.fits runner=parallel out=parallel_concat.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Merge two tables, both of which contain duplicate column names. Rename duplicated columns with suffix '_A' and '_B'.",
        "response": "stilts tcatn nin=2 in1=A_dup.fits in2=B_dup.fits fixcols=dups suffix1=_A suffix2=_B out=duplicate_safe_merge.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_A suffix2=_B\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine a local file (local.fits) and a remote VOTable accessed via HTTPS, ensuring all output columns are renamed with suffixes '_L' and '_R'.",
        "response": "stilts tcatn nin=2 in1=local.fits fixcols=all suffix1=_L in2=https://archive.org/remote.vot fixcols=all suffix2=_R out=prefixed_remote.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_L fixcols=all suffix2=_R\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Concatenate two tables, keeping all columns but fixing duplicated names using suffixes '_1' and '_2'.",
        "response": "stilts tcatn nin=2 in1=A.fits in2=B.fits fixcols=all suffix1=_1 suffix2=_2 out=all_renamed.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_1 suffix2=_2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine three tables, calculating the total row count (omode=count) in parallel.",
        "response": "stilts tcatn nin=3 in1=H1.fits in2=H2.fits in3=H3.fits runner=parallel omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Concatenate tables T1 and T2, but only include rows from T1 where the column 'Z_QUALITY' is exactly equal to 'GOOD'.",
        "response": "stilts tcatn nin=2 in1=T1.fits icmd1='select equals(Z_QUALITY, \"GOOD\")' in2=T2.fits out=z_quality_filter.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'GOOD' ')'\n\nCommand was: select equals(Z_QUALITY, \"GOOD\")\n\nUsage: select <expr>\n    (Unused arguments: 'GOOD' ')')\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Concatenate three tables, renaming duplicate columns in the output by adding the table index as a suffix (e.g., ID_1, ID_2, ID_3).",
        "response": "stilts tcatn nin=3 in1=T1.fits in2=T2.fits in3=T3.fits fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3 out=indexed_dups.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_1 suffix2=_2 suffix3=_3\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine two tables. In the resulting table, add a Boolean column 'IS_GALAXY' which is true if the 'CLASS' column starts with 'G'.",
        "response": "stilts tcatn nin=2 in1=D1.fits in2=D2.fits ocmd='addcol IS_GALAXY startsWith(CLASS, \"G\")' out=classified_data.fits",
        "chat.jar": "failed",
        "error": "Error: Unused arguments: 'G' ')'\n\nCommand was: addcol IS_GALAXY startsWith(CLASS, \"G\")\n\nUsage: addcol [-after <col-id> | -before <col-id>]\n              [-units <units>] [-ucd <ucd>] [-utype <utype>] [-xtype <xtype>]\n              [-desc <descrip>] [-shape <n>[,<n>...][,*]] [-elsize <n>]\n              <col-name> <expr>\n    (Unused arguments: 'G' ')')\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Merge two tables, T_LEFT and T_RIGHT. T_RIGHT is large; use parallel execution and output the row count to verify completion.",
        "response": "stilts tcatn nin=2 in1=T_LEFT.fits in2=T_RIGHT.fits runner=parallel omode=count",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Merge four tables, applying parallel processing for maximum speed.",
        "response": "stilts tcatn nin=4 in1=L1.fits in2=L2.fits in3=L3.fits in4=L4.fits runner=parallel out=max_speed_concat.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Concatenate two tables, explicitly keeping all columns, but renaming duplicate columns with '_L' for the first table and '_R' for the second.",
        "response": "stilts tcatn nin=2 in1=L.fits in2=R.fits fixcols=all suffix1=_L suffix2=_R out=full_renaming.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=all suffix1=_L suffix2=_R\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine T1.fits and T2.fits. T1 has duplicated columns names. Rename duplicates with suffix '_1' and '_2'.",
        "response": "stilts tcatn nin=2 in1=T1.fits in2=T2.fits fixcols=dups suffix1=_1 suffix2=_2 out=dup_resolved.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: fixcols=dups suffix1=_1 suffix2=_2\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Concatenate two large tables, forcing the use of parallel processing during concatenation to speed up the operation.",
        "response": "stilts tcatn nin=2 in1=large_a.fits in2=large_b.fits runner=parallel out=parallel_concat_large.fits",
        "chat.jar": "failed",
        "error": "\nUnused arguments: runner=parallel\n\nUsage: tcatn nin=<count> ifmtN=<in-format> inN=<tableN> icmdN=<cmds>\n             ocmd=<cmds>\n             omode=out|meta|stats|count|checksum|cgi|discard|topcat|samp|plastic|tosql|gui\n             out=<out-table> ofmt=<out-format> seqcol=<colname>\n             loccol=<colname> uloccol=<colname> countrows=true|false\n\n",
        "source_cmd_file": "tcatn.json"
    }
]