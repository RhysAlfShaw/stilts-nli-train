[
    {
        "prompt": "Merge `cat1.fits` and `cat2.fits`, and name the output `merged.vot` using the VOTable binary serialization.",
        "response": "stilts tcat in=cat1.fits in=cat2.fits ofmt=votable(format=BINARY) out=merged.vot",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: \"(\" unexpected\n",
        "source_cmd_file": "tcat.json"
    },
    {
        "prompt": "Take a table from a URL, convert it to CSV, and pipe it to another command.",
        "response": "stilts tcopy in=http://example.com/data.vot ofmt=csv out=- | other_command",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: other_command: not found\n",
        "source_cmd_file": "tcopy.json"
    },
    {
        "prompt": "I need to combine the `s_region` from two different ObsCore tables, `obs1.fits` and `obs2.fits`.",
        "response": "stilts tcat in=obs1.fits in=obs2.fits | stilts mocshape in=- shape=stc-s coords=s_region out=combined_obscore.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Combine the footprints of `survey_a.fits` (points) and `survey_b.fits` (STC-S polygons).",
        "response": "stilts tcatn nin=2 in1=survey_a.fits icmd1='addcol region array(RA,DEC)' in2=survey_b.fits icmd2='addcol region s_region' | stilts mocshape in=- shape=stc-s coords=region out=combined_surveys.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC from the positions in every FITS table within `my_archive.fits`.",
        "response": "stilts tcat in=my_archive.fits multi=true | stilts mocshape in=- shape=point coords='array(RA,DEC)' out=archive_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\nError: No file, URL or command \"my_archive.fits\"\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC for all positions in `cat_a.fits` and `cat_b.csv` combined.",
        "response": "stilts tcatn nin=2 in1=cat_a.fits icmd1='keepcols \"RA DEC\"' in2=cat_b.csv ifmt2=csv icmd2='keepcols \"RA DEC\"' | stilts mocshape in=- shape=point coords='array(RA,DEC)' out=combined_ab.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC for all sources that are present in both `cat_A.fits` and `cat_B.fits`.",
        "response": "stilts tmatch2 in1=cat_A.fits in2=cat_B.fits matcher=sky params=1 values1='RA DEC' values2='RA DEC' | stilts mocshape in=- shape=point coords='array(RA_1,DEC_1)' out=common_AB.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC at order 11 from the combined positions of `a.csv`, `b.csv`, and `c.csv`.",
        "response": "stilts tcat ifmt=csv in=a.csv in=b.csv in=c.csv | stilts mocshape in=- order=11 shape=point coords='array($1,$2)' out=abc_combined.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Combine the footprints of `survey_a.fits` (points) and `survey_b.fits` (STC-S polygons).",
        "response": "stilts tcatn nin=2 in1=survey_a.fits icmd1='addcol region array(RA,DEC)' in2=survey_b.fits icmd2='addcol region s_region' | stilts mocshape in=- shape=stc-s coords=region out=combined_surveys.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC from the positions in every FITS table within `my_archive.fits`.",
        "response": "stilts tcat in=my_archive.fits multi=true | stilts mocshape in=- shape=point coords='array(RA,DEC)' out=archive_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\nError: No file, URL or command \"my_archive.fits\"\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a MOC from a simulation table that is pipe-fed from a generator scheme, using a very low resolution (order 2).",
        "response": "stilts mocshape in=:skysim:100000 | stilts mocshape in=- shape=point coords='array(ra, dec)' order=2 out=sim_low_res.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\nError: Bad value for parameter coords: null value not allowed\nUsage: coords=<expr>\n\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Combine multiple input FITS tables and then generate a single MOC from all the positions in the concatenated result.",
        "response": "stilts tcat in=cat1.fits in=cat2.fits in=cat3.fits | stilts mocshape in=- shape=point coords='array(RA, DEC)' out=stacked_cat_moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Output the sky coverage summary for a polygon MOC, rounding the result to three decimal places.",
        "response": "stilts mocshape in=areas.vot shape=polygon coords='VERTICES' mocfmt=summary | stilts tpipe in=- ocmd='replacecol COVERAGE formatDecimal(COVERAGE,3)' out=-",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: tpipe: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Combine MOCs from two different ObsCore tables directly using a pipe and STC-S input.",
        "response": "stilts tcat in=obs1.fits in=obs2.fits | stilts mocshape in=- shape=stc-s coords=s_region out=two_obscore_union.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "I need a MOC from polygonal footprints defined in STC-S, and I want the resulting polygon vertices converted to Galactic coordinates in the output table (requires intermediate step).",
        "response": "stilts mocshape in=stcs_in.fits shape=stc-s coords=s_region | stilts tpipe in=- ocmd='addskycoords icrs galactic RA DEC GLON GLAT' out=stcs_gal_coords.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: tpipe: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "I have multiple FITS extensions, each containing point data. Concatenate them and generate a single MOC (order 8).",
        "response": "stilts tcat in=multi_ext.fits multi=true | stilts mocshape in=- shape=point coords='array(RA, DEC)' order=8 out=multi_ext_moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\nError: No file, URL or command \"multi_ext.fits\"\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from ASCII MOC strings (order 9), and save the result as a simple CSV table containing the UNIQ indices and coverage information (requires separate command).",
        "response": "stilts mocshape in=mocs.txt ifmt=ascii shape=moc-ascii coords='$1' order=9 | stilts tpipe in=- ocmd='addcol CoverageArea healpixSqdeg(mocUniqToOrder(PIXEL_INDEX))' out=moc_cells.csv",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: tpipe: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a point MOC where the coordinates come from a table generated using the loop scheme.",
        "response": "stilts tloop x 1 100 | stilts tpipe in=- ocmd='addcol RA x; addcol DEC 0' | stilts mocshape in=- shape=point coords='array(RA, DEC)' out=loop_points_moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: tpipe: not found\n/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Generate a MOC from a multi-extension FITS file, combining all extensions, setting the resolution to order 11.",
        "response": "stilts tcat in=multi_fits.fits multi=true | stilts mocshape in=- shape=point coords='array(RA, DEC)' order=11 out=multi_fits_o11.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\nError: No file, URL or command \"multi_fits.fits\"\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Combine multiple FITS tables via concatenation and pipe the result directly into mocshape to generate a union MOC (order 10).",
        "response": "stilts tcat in=c1.fits in=c2.fits in=c3.fits | stilts mocshape in=- shape=point coords='array(RA, DEC)' order=10 out=tcat_moc_union.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Combine two different files using tcatn first, then pipe the concatenated result to mocshape to generate a union MOC (order 10).",
        "response": "stilts tcatn nin=2 in1=c1.fits in2=c2.fits | stilts mocshape in=- shape=point coords='array(RA, DEC)' order=10 out=tcatn_union_o10.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: mocshape: not found\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "Create a circle MOC where the radius is determined by $\text{sqrt}(\text{X_ERR}^2 + \text{Y_ERR}^2)$ and saved as VOTable BINARY.",
        "response": "stilts mocshape in=err_data.fits shape=circle coords='array(RA, DEC, hypot(X_ERR, Y_ERR))' out=hypot_err_moc.vot ofmt=votable(format=BINARY)",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: \"(\" unexpected\n",
        "source_cmd_file": "mocshape.json"
    },
    {
        "prompt": "I have `file_a.fits` and `file_b.fits`. Can you create a single MOC that covers the combined sky area of both?",
        "response": "stilts tcat in=file_a.fits in=file_b.fits | stilts pixfoot in=- out=combined_coverage.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "How can I combine three MOCs into one? Say, `moc1.fits`, `moc2.fits`, and `moc3.fits`.",
        "response": "stilts tcat in=moc1.fits in=moc2.fits in=moc3.fits | stilts pixfoot in=- out=combined_moc.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "I have `file1.fits`, `file2.fits`, and `file3.fits`. Create a JSON MOC covering all of them.",
        "response": "stilts tcat in=file1.fits in=file2.fits in=file3.fits | stilts pixfoot in=- mocfmt=json out=three_file_coverage.moc.json",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Create a MOC at order 11 from the combined positions of `a.csv`, `b.csv`, and `c.csv`.",
        "response": "stilts tcat ifmt=csv in=a.csv in=b.csv in=c.csv | stilts pixfoot in=- order=11 out=abc_combined.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a JSON MOC for the first 10 and last 10 objects in `my_catalog.fits`.",
        "response": "stilts tcat in=my_catalog.fits icmd='head 10' in=my_catalog.fits icmd='tail 10' | stilts pixfoot in=- mocfmt=json out=head_and_tail.moc.json",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Generate a MOC at order 9 for all the tables in `multi_survey.fits` combined.",
        "response": "stilts tcat in=multi_survey.fits multi=true | stilts pixfoot in=- order=9 out=multi_survey_combined.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\nError: No file, URL or command \"multi_survey.fits\"\n",
        "source_cmd_file": "pixfoot.json"
    },
    {
        "prompt": "Plot the mean of multiple spectra as a line, and the standard deviation as a shaded region around it.",
        "response": "stilts plot2plane in=spectra.fits xs=param$WAVELENGTHS layer_m=statline ys_m=FLUX_ARRAY ycombine_m=mean color_m=blue layer_q=arrayquantile ys_q=FLUX_ARRAY quantiles_q='(mean(FLUX_ARRAY)-stdev(FLUX_ARRAY))/mean(FLUX_ARRAY),(mean(FLUX_ARRAY)+stdev(FLUX_ARRAY))/mean(FLUX_ARRAY))' This is complex. A better approach might be to calculate the +/- 1-sigma arrays first with `tpipe`.",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: tpipe: not found\nError: Bad Expression \"param\"\n    (The name \"param\" is unknown.)\n",
        "source_cmd_file": "plot2plane.json"
    },
    {
        "prompt": "Animate a point moving along a sine curve.",
        "response": "stilts plot2plane layer=function fexpr=sin(x) xmin=0 xmax=10 animate=:loop:0,10,0.1 acmd='addcol xval $1; addcol yval sin($1)' layer_pt=mark x_pt=xval y_pt=yval size_pt=5 color_pt=red out=sinewave.gif",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: \"(\" unexpected\n",
        "source_cmd_file": "plot2plane.json"
    },
    {
        "prompt": "Generate a plot where x is row index and y is a column value.",
        "response": "stilts plot2plane in=data.fits layer=mark x=$0 y=VALUE",
        "chat.jar": "failed",
        "error": "Error: Bad Expression \"/bin/sh\"\n    (Encountered unexpected character 'b'.)\n",
        "source_cmd_file": "plot2plane.json"
    },
    {
        "prompt": "Plot `y=tan(x)` as a function.",
        "response": "stilts plot2plane layer=function fexpr=tan(x) xmin=-PI/2*0.99 xmax=PI/2*0.99 ymin=-50 ymax=50",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: \"(\" unexpected\n",
        "source_cmd_file": "plot2plane.json"
    },
    {
        "prompt": "Use the cone command to perform an SIA query aiming for JPEG files (dataformat=image/jpeg) and output the resulting table as VOTable with FITS serialization.",
        "response": "stilts cone serviceurl=https://mast.stsci.edu/vo-tap/api/v0.1/caom lon=15.0 lat=15.0 radius=0.1 servicetype=sia dataformat=image/jpeg ofmt=votable(format=FITS) out=jpeg_list.vot",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: \"(\" unexpected\n",
        "source_cmd_file": "cone-examples.json"
    },
    {
        "prompt": "Generate a plot where the output is saved as a VOTable file, including FITS bulk data serialization.",
        "response": "stilts plot2sky in=data.fits layer=mark lon=RA lat=DEC ofmt=votable(format=FITS) out=plot.xml",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: \"(\" unexpected\n",
        "source_cmd_file": "plot2sky.json"
    },
    {
        "prompt": "Concatenate `events_1.fits` and `events_2.fits`, then run `pixfoot` on the result.",
        "response": "stilts tcatn nin=2 in1=events_1.fits in2=events_2.fits | stilts pixfoot in=- out=combined_footprint.moc.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: pixfoot: not found\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "I want to combine two tables, but the second one uses 'T'/'F' for booleans. I need true/false.",
        "response": "stilts tcatn nin=2 in1=t1.fits in2=t2.fits icmd2='replacecol FLAG \"FLAG == \\'T\\'\"' out=booleans.fits",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: Syntax error: Unterminated quoted string\n",
        "source_cmd_file": "tcatn.json"
    },
    {
        "prompt": "Combine a local file with the results of a remote TAP query, executed asynchronously. Output mode should only count the rows.",
        "response": "stilts tapquery tapurl=https://gea.esac.esa.int/tap-server/tap adql='SELECT TOP 1000 source_id FROM gaiadr3.gaia_source' out=temp.vot; stilts tcatn nin=2 in1=local.fits in2=temp.vot omode=count",
        "chat.jar": "failed",
        "error": "/bin/sh: 1: tcatn: not found\n",
        "source_cmd_file": "tcatn.json"
    }
]